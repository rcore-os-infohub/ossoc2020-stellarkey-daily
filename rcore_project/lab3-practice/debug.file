
./target/riscv64imac-unknown-none-elf/debug/os:	file format ELF64-riscv


Disassembly of section .text:

ffffffff80200000 text_start:
ffffffff80200000: b7 12 21 80          	lui	t0, 524817
ffffffff80200004: 7d 53                	addi	t1, zero, -1
ffffffff80200006: 02 13                	slli	t1, t1, 32
ffffffff80200008: b3 82 62 40          	sub	t0, t0, t1
ffffffff8020000c: 93 d2 c2 00          	srli	t0, t0, 12
ffffffff80200010: 7d 53                	addi	t1, zero, -1
ffffffff80200012: 7e 13                	slli	t1, t1, 63
ffffffff80200014: b3 e2 62 00          	or	t0, t0, t1
ffffffff80200018: 73 90 02 18          	csrw	satp, t0
ffffffff8020001c: 73 00 00 12          	sfence.vma
ffffffff80200020: 37 21 a2 80          	lui	sp, 526882
ffffffff80200024: 13 01 81 17          	addi	sp, sp, 376
ffffffff80200028: b7 52 20 80          	lui	t0, 524805
ffffffff8020002c: 93 82 c2 b4          	addi	t0, t0, -1204
ffffffff80200030: 82 82                	jr	t0

ffffffff80200032 _ZN4core4char7convert18from_u32_unchecked17h8ba1be5a88f24d4aE:
; pub unsafe fn from_u32_unchecked(i: u32) -> char {
ffffffff80200032: 41 11                	addi	sp, sp, -16
ffffffff80200034: aa 85                	add	a1, zero, a0
ffffffff80200036: 2a c4                	sw	a0, 8(sp)
;     if cfg!(debug_assertions) { char::from_u32(i).unwrap() } else { transmute(i) }
ffffffff80200038: 2a c6                	sw	a0, 12(sp)
ffffffff8020003a: 02 15                	slli	a0, a0, 32
ffffffff8020003c: 01 91                	srli	a0, a0, 32
ffffffff8020003e: 2a e0                	sd	a0, 0(sp)
ffffffff80200040: 09 a0                	j	2
; }
ffffffff80200042: 02 65                	ld	a0, 0(sp)
ffffffff80200044: 41 01                	addi	sp, sp, 16
ffffffff80200046: 82 80                	ret

ffffffff80200048 _ZN5riscv8register6scause6Scause12is_interrupt17habb8a378eac70f5aE:
;     pub fn is_interrupt(&self) -> bool {
ffffffff80200048: 39 71                	addi	sp, sp, -64
ffffffff8020004a: 06 fc                	sd	ra, 56(sp)
ffffffff8020004c: 2a f4                	sd	a0, 40(sp)
ffffffff8020004e: a1 45                	addi	a1, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80200050: 2e f8                	sd	a1, 48(sp)
;         self.bits.get_bit(size_of::<usize>() * 8 - 1)
ffffffff80200052: 2a f0                	sd	a0, 32(sp)
ffffffff80200054: 2e ec                	sd	a1, 24(sp)
ffffffff80200056: 09 a0                	j	2
ffffffff80200058: 62 65                	ld	a0, 24(sp)
ffffffff8020005a: 93 15 35 00          	slli	a1, a0, 3
ffffffff8020005e: 01 46                	mv	a2, zero
ffffffff80200060: 2e e8                	sd	a1, 16(sp)
ffffffff80200062: 0d e6                	bnez	a2, 42
ffffffff80200064: 09 a0                	j	2
ffffffff80200066: 42 65                	ld	a0, 16(sp)
ffffffff80200068: 93 05 f5 ff          	addi	a1, a0, -1
ffffffff8020006c: 2e e4                	sd	a1, 8(sp)
ffffffff8020006e: 63 6e b5 02          	bltu	a0, a1, 60
ffffffff80200072: 09 a0                	j	2
ffffffff80200074: 02 75                	ld	a0, 32(sp)
ffffffff80200076: a2 65                	ld	a1, 8(sp)
ffffffff80200078: 97 30 00 00          	auipc	ra, 3
ffffffff8020007c: e7 80 40 bb          	jalr	-1100(ra)
ffffffff80200080: 2a e0                	sd	a0, 0(sp)
ffffffff80200082: 09 a0                	j	2
;     }
ffffffff80200084: 02 65                	ld	a0, 0(sp)
ffffffff80200086: e2 70                	ld	ra, 56(sp)
ffffffff80200088: 21 61                	addi	sp, sp, 64
ffffffff8020008a: 82 80                	ret

ffffffff8020008c .LBB0_7:
;         self.bits.get_bit(size_of::<usize>() * 8 - 1)
ffffffff8020008c: 17 d5 00 00          	auipc	a0, 13
ffffffff80200090: 13 05 45 fe          	addi	a0, a0, -28

ffffffff80200094 .LBB0_8:
ffffffff80200094: 17 d6 00 00          	auipc	a2, 13
ffffffff80200098: 13 06 46 fc          	addi	a2, a2, -60
ffffffff8020009c: 93 05 10 02          	addi	a1, zero, 33
ffffffff802000a0: 97 a0 00 00          	auipc	ra, 10
ffffffff802000a4: e7 80 80 29          	jalr	664(ra)
ffffffff802000a8: 00 00                	unimp	

ffffffff802000aa .LBB0_9:
ffffffff802000aa: 17 d5 00 00          	auipc	a0, 13
ffffffff802000ae: 13 05 65 ff          	addi	a0, a0, -10

ffffffff802000b2 .LBB0_10:
ffffffff802000b2: 17 d6 00 00          	auipc	a2, 13
ffffffff802000b6: 13 06 66 fa          	addi	a2, a2, -90
ffffffff802000ba: 93 05 10 02          	addi	a1, zero, 33
ffffffff802000be: 97 a0 00 00          	auipc	ra, 10
ffffffff802000c2: e7 80 a0 27          	jalr	634(ra)
ffffffff802000c6: 00 00                	unimp	

ffffffff802000c8 _ZN5riscv8register6scause6Scause5cause17h911a73ba237a7ad3E:
;     pub fn cause(&self) -> Trap {
ffffffff802000c8: 5d 71                	addi	sp, sp, -80
ffffffff802000ca: 86 e4                	sd	ra, 72(sp)
ffffffff802000cc: aa e0                	sd	a0, 64(sp)
;         if self.is_interrupt() {
ffffffff802000ce: 2a f8                	sd	a0, 48(sp)
ffffffff802000d0: 97 00 00 00          	auipc	ra, 0
ffffffff802000d4: e7 80 80 f7          	jalr	-136(ra)
ffffffff802000d8: 2a f4                	sd	a0, 40(sp)
ffffffff802000da: 09 a0                	j	2
ffffffff802000dc: 22 75                	ld	a0, 40(sp)
ffffffff802000de: 09 e9                	bnez	a0, 18
ffffffff802000e0: 09 a0                	j	2
;             Trap::Exception(Exception::from(self.code()))
ffffffff802000e2: 42 75                	ld	a0, 48(sp)
ffffffff802000e4: 97 a0 00 00          	auipc	ra, 10
ffffffff802000e8: e7 80 40 a9          	jalr	-1388(ra)
ffffffff802000ec: 2a f0                	sd	a0, 32(sp)
ffffffff802000ee: 05 a8                	j	48
;             Trap::Interrupt(Interrupt::from(self.code()))
ffffffff802000f0: 42 75                	ld	a0, 48(sp)
ffffffff802000f2: 97 a0 00 00          	auipc	ra, 10
ffffffff802000f6: e7 80 60 a8          	jalr	-1402(ra)
ffffffff802000fa: 2a ec                	sd	a0, 24(sp)
ffffffff802000fc: 09 a0                	j	2
ffffffff802000fe: 62 65                	ld	a0, 24(sp)
ffffffff80200100: 97 a0 00 00          	auipc	ra, 10
ffffffff80200104: e7 80 e0 91          	jalr	-1762(ra)
ffffffff80200108: 13 75 f5 0f          	andi	a0, a0, 255
ffffffff8020010c: 2a e8                	sd	a0, 16(sp)
ffffffff8020010e: 09 a0                	j	2
ffffffff80200110: 42 65                	ld	a0, 16(sp)
ffffffff80200112: a3 0c a1 02          	sb	a0, 57(sp)
ffffffff80200116: 81 45                	mv	a1, zero
ffffffff80200118: 23 0c b1 02          	sb	a1, 56(sp)
;         if self.is_interrupt() {
ffffffff8020011c: 0d a0                	j	34
;             Trap::Exception(Exception::from(self.code()))
ffffffff8020011e: 02 75                	ld	a0, 32(sp)
ffffffff80200120: 97 a0 00 00          	auipc	ra, 10
ffffffff80200124: e7 80 e0 97          	jalr	-1666(ra)
ffffffff80200128: 13 75 f5 0f          	andi	a0, a0, 255
ffffffff8020012c: 2a e4                	sd	a0, 8(sp)
ffffffff8020012e: 09 a0                	j	2
ffffffff80200130: 22 65                	ld	a0, 8(sp)
ffffffff80200132: a3 0c a1 02          	sb	a0, 57(sp)
ffffffff80200136: 85 45                	addi	a1, zero, 1
ffffffff80200138: 23 0c b1 02          	sb	a1, 56(sp)
;         if self.is_interrupt() {
ffffffff8020013c: 09 a0                	j	2
;     }
ffffffff8020013e: 03 45 81 03          	lbu	a0, 56(sp)
ffffffff80200142: 83 05 91 03          	lb	a1, 57(sp)
ffffffff80200146: a6 60                	ld	ra, 72(sp)
ffffffff80200148: 61 61                	addi	sp, sp, 80
ffffffff8020014a: 82 80                	ret

ffffffff8020014c _ZN4core3mem4drop17h5c512cacf9ce9551E:
; pub fn drop<T>(_x: T) {}
ffffffff8020014c: 41 11                	addi	sp, sp, -16
ffffffff8020014e: 06 e4                	sd	ra, 8(sp)
ffffffff80200150: 2a e0                	sd	a0, 0(sp)
ffffffff80200152: 0a 85                	add	a0, zero, sp
ffffffff80200154: 97 10 00 00          	auipc	ra, 1
ffffffff80200158: e7 80 e0 db          	jalr	-578(ra)
ffffffff8020015c: 09 a0                	j	2
ffffffff8020015e: a2 60                	ld	ra, 8(sp)
ffffffff80200160: 41 01                	addi	sp, sp, 16
ffffffff80200162: 82 80                	ret

ffffffff80200164 _ZN4core3mem4swap17h3355a2ca81393658E:
; pub fn swap<T>(x: &mut T, y: &mut T) {
ffffffff80200164: 01 11                	addi	sp, sp, -32
ffffffff80200166: 06 ec                	sd	ra, 24(sp)
ffffffff80200168: 2a e4                	sd	a0, 8(sp)
ffffffff8020016a: 2e e8                	sd	a1, 16(sp)
;         ptr::swap_nonoverlapping_one(x, y);
ffffffff8020016c: 97 20 00 00          	auipc	ra, 2
ffffffff80200170: e7 80 20 c3          	jalr	-974(ra)
ffffffff80200174: 09 a0                	j	2
; }
ffffffff80200176: e2 60                	ld	ra, 24(sp)
ffffffff80200178: 05 61                	addi	sp, sp, 32
ffffffff8020017a: 82 80                	ret

ffffffff8020017c _ZN4core3mem7replace17he99a16adb3870c85E:
; pub fn replace<T>(dest: &mut T, mut src: T) -> T {
ffffffff8020017c: 01 11                	addi	sp, sp, -32
ffffffff8020017e: 06 ec                	sd	ra, 24(sp)
ffffffff80200180: 2e 86                	add	a2, zero, a1
ffffffff80200182: 2e c6                	sw	a1, 12(sp)
ffffffff80200184: 2a e8                	sd	a0, 16(sp)
ffffffff80200186: 6c 00                	addi	a1, sp, 12
;     swap(dest, &mut src);
ffffffff80200188: 32 e0                	sd	a2, 0(sp)
ffffffff8020018a: 97 00 00 00          	auipc	ra, 0
ffffffff8020018e: e7 80 a0 fd          	jalr	-38(ra)
ffffffff80200192: 09 a0                	j	2
; }
ffffffff80200194: 32 45                	lw	a0, 12(sp)
ffffffff80200196: e2 60                	ld	ra, 24(sp)
ffffffff80200198: 05 61                	addi	sp, sp, 32
ffffffff8020019a: 82 80                	ret

ffffffff8020019c _ZN2os6memory4heap4init17h75fd1db4fe45e140E:
; pub fn init() {
ffffffff8020019c: 79 71                	addi	sp, sp, -48
;         HEAP.lock().init( HEAP_SPACE.as_ptr() as usize, KERNEL_HEAP_SIZE)
ffffffff8020019e: 06 f4                	sd	ra, 40(sp)

ffffffff802001a0 .LBB0_7:
ffffffff802001a0: 17 25 81 00          	auipc	a0, 2066
ffffffff802001a4: 13 05 05 e6          	addi	a0, a0, -416
ffffffff802001a8: 97 80 00 00          	auipc	ra, 8
ffffffff802001ac: e7 80 40 c2          	jalr	-988(ra)
ffffffff802001b0: 2a e8                	sd	a0, 16(sp)
ffffffff802001b2: 09 a0                	j	2
ffffffff802001b4: 42 65                	ld	a0, 16(sp)
ffffffff802001b6: 97 90 00 00          	auipc	ra, 9
ffffffff802001ba: e7 80 40 33          	jalr	820(ra)
ffffffff802001be: 2a ec                	sd	a0, 24(sp)
ffffffff802001c0: 2e f0                	sd	a1, 32(sp)
ffffffff802001c2: 09 a0                	j	2
ffffffff802001c4: 28 08                	addi	a0, sp, 24
ffffffff802001c6: 97 90 00 00          	auipc	ra, 9
ffffffff802001ca: e7 80 80 37          	jalr	888(ra)
ffffffff802001ce: 2a e4                	sd	a0, 8(sp)
ffffffff802001d0: 09 a0                	j	2

ffffffff802001d2 .LBB0_8:
ffffffff802001d2: 17 25 01 00          	auipc	a0, 18
ffffffff802001d6: 13 05 e5 e2          	addi	a0, a0, -466
ffffffff802001da: b7 05 80 00          	lui	a1, 2048
ffffffff802001de: 97 10 00 00          	auipc	ra, 1
ffffffff802001e2: e7 80 60 a4          	jalr	-1466(ra)
ffffffff802001e6: 2a e0                	sd	a0, 0(sp)
ffffffff802001e8: 09 a0                	j	2
ffffffff802001ea: 37 06 80 00          	lui	a2, 2048
ffffffff802001ee: 22 65                	ld	a0, 8(sp)
ffffffff802001f0: 82 65                	ld	a1, 0(sp)
ffffffff802001f2: 97 70 00 00          	auipc	ra, 7
ffffffff802001f6: e7 80 e0 38          	jalr	910(ra)
ffffffff802001fa: 09 a0                	j	2
ffffffff802001fc: 28 08                	addi	a0, sp, 24
; }
ffffffff802001fe: 97 90 00 00          	auipc	ra, 9
ffffffff80200202: e7 80 20 54          	jalr	1346(ra)
ffffffff80200206: 09 a0                	j	2
ffffffff80200208: a2 70                	ld	ra, 40(sp)
ffffffff8020020a: 45 61                	addi	sp, sp, 48
ffffffff8020020c: 82 80                	ret

ffffffff8020020e rust_oom:
; fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {
ffffffff8020020e: 41 11                	addi	sp, sp, -16
ffffffff80200210: 2a e0                	sd	a0, 0(sp)
ffffffff80200212: 2e e4                	sd	a1, 8(sp)

ffffffff80200214 .LBB1_1:
;     panic!("alloc error")
ffffffff80200214: 17 d5 00 00          	auipc	a0, 13
ffffffff80200218: 13 05 d5 ea          	addi	a0, a0, -339

ffffffff8020021c .LBB1_2:
ffffffff8020021c: 17 d6 00 00          	auipc	a2, 13
ffffffff80200220: 13 06 46 ec          	addi	a2, a2, -316
ffffffff80200224: ad 45                	addi	a1, zero, 11
ffffffff80200226: 97 a0 00 00          	auipc	ra, 10
ffffffff8020022a: e7 80 20 11          	jalr	274(ra)
ffffffff8020022e: 00 00                	unimp	

ffffffff80200230 __rg_alloc:
; static HEAP: LockedHeap = LockedHeap::empty();
ffffffff80200230: 79 71                	addi	sp, sp, -48
ffffffff80200232: 06 f4                	sd	ra, 40(sp)
ffffffff80200234: 2a ec                	sd	a0, 24(sp)
ffffffff80200236: 2e f0                	sd	a1, 32(sp)
ffffffff80200238: 97 10 00 00          	auipc	ra, 1
ffffffff8020023c: e7 80 c0 57          	jalr	1404(ra)
ffffffff80200240: 2a e8                	sd	a0, 16(sp)
ffffffff80200242: 2e e4                	sd	a1, 8(sp)
ffffffff80200244: 09 a0                	j	2

ffffffff80200246 .LBB2_3:
ffffffff80200246: 17 25 81 00          	auipc	a0, 2066
ffffffff8020024a: 13 05 a5 db          	addi	a0, a0, -582
ffffffff8020024e: c2 65                	ld	a1, 16(sp)
ffffffff80200250: 22 66                	ld	a2, 8(sp)
ffffffff80200252: 97 80 00 00          	auipc	ra, 8
ffffffff80200256: e7 80 20 b8          	jalr	-1150(ra)
ffffffff8020025a: 2a e0                	sd	a0, 0(sp)
ffffffff8020025c: 09 a0                	j	2
ffffffff8020025e: 02 65                	ld	a0, 0(sp)
ffffffff80200260: a2 70                	ld	ra, 40(sp)
ffffffff80200262: 45 61                	addi	sp, sp, 48
ffffffff80200264: 82 80                	ret

ffffffff80200266 __rg_dealloc:
ffffffff80200266: 39 71                	addi	sp, sp, -64
ffffffff80200268: 06 fc                	sd	ra, 56(sp)
ffffffff8020026a: 2a f0                	sd	a0, 32(sp)
ffffffff8020026c: 2e f4                	sd	a1, 40(sp)
ffffffff8020026e: 32 f8                	sd	a2, 48(sp)
ffffffff80200270: 2a ec                	sd	a0, 24(sp)
ffffffff80200272: 2e 85                	add	a0, zero, a1
ffffffff80200274: b2 85                	add	a1, zero, a2
ffffffff80200276: 97 10 00 00          	auipc	ra, 1
ffffffff8020027a: e7 80 e0 53          	jalr	1342(ra)
ffffffff8020027e: 2a e8                	sd	a0, 16(sp)
ffffffff80200280: 2e e4                	sd	a1, 8(sp)
ffffffff80200282: 09 a0                	j	2

ffffffff80200284 .LBB3_3:
ffffffff80200284: 17 25 81 00          	auipc	a0, 2066
ffffffff80200288: 13 05 c5 d7          	addi	a0, a0, -644
ffffffff8020028c: e2 65                	ld	a1, 24(sp)
ffffffff8020028e: 42 66                	ld	a2, 16(sp)
ffffffff80200290: a2 66                	ld	a3, 8(sp)
ffffffff80200292: 97 80 00 00          	auipc	ra, 8
ffffffff80200296: e7 80 00 bd          	jalr	-1072(ra)
ffffffff8020029a: 09 a0                	j	2
ffffffff8020029c: e2 70                	ld	ra, 56(sp)
ffffffff8020029e: 21 61                	addi	sp, sp, 64
ffffffff802002a0: 82 80                	ret

ffffffff802002a2 __rg_realloc:
ffffffff802002a2: 5d 71                	addi	sp, sp, -80
ffffffff802002a4: 86 e4                	sd	ra, 72(sp)
ffffffff802002a6: 2a f4                	sd	a0, 40(sp)
ffffffff802002a8: 2e f8                	sd	a1, 48(sp)
ffffffff802002aa: 32 fc                	sd	a2, 56(sp)
ffffffff802002ac: b6 e0                	sd	a3, 64(sp)
ffffffff802002ae: 2a f0                	sd	a0, 32(sp)
ffffffff802002b0: 2e 85                	add	a0, zero, a1
ffffffff802002b2: b2 85                	add	a1, zero, a2
ffffffff802002b4: 36 ec                	sd	a3, 24(sp)
ffffffff802002b6: 97 10 00 00          	auipc	ra, 1
ffffffff802002ba: e7 80 e0 4f          	jalr	1278(ra)
ffffffff802002be: 2a e8                	sd	a0, 16(sp)
ffffffff802002c0: 2e e4                	sd	a1, 8(sp)
ffffffff802002c2: 09 a0                	j	2

ffffffff802002c4 .LBB4_3:
ffffffff802002c4: 17 25 81 00          	auipc	a0, 2066
ffffffff802002c8: 13 05 c5 d3          	addi	a0, a0, -708
ffffffff802002cc: 82 75                	ld	a1, 32(sp)
ffffffff802002ce: 42 66                	ld	a2, 16(sp)
ffffffff802002d0: a2 66                	ld	a3, 8(sp)
ffffffff802002d2: 62 67                	ld	a4, 24(sp)
ffffffff802002d4: 97 20 00 00          	auipc	ra, 2
ffffffff802002d8: e7 80 c0 7e          	jalr	2028(ra)
ffffffff802002dc: 2a e0                	sd	a0, 0(sp)
ffffffff802002de: 09 a0                	j	2
ffffffff802002e0: 02 65                	ld	a0, 0(sp)
ffffffff802002e2: a6 60                	ld	ra, 72(sp)
ffffffff802002e4: 61 61                	addi	sp, sp, 80
ffffffff802002e6: 82 80                	ret

ffffffff802002e8 __rg_alloc_zeroed:
ffffffff802002e8: 79 71                	addi	sp, sp, -48
ffffffff802002ea: 06 f4                	sd	ra, 40(sp)
ffffffff802002ec: 2a ec                	sd	a0, 24(sp)
ffffffff802002ee: 2e f0                	sd	a1, 32(sp)
ffffffff802002f0: 97 10 00 00          	auipc	ra, 1
ffffffff802002f4: e7 80 40 4c          	jalr	1220(ra)
ffffffff802002f8: 2a e8                	sd	a0, 16(sp)
ffffffff802002fa: 2e e4                	sd	a1, 8(sp)
ffffffff802002fc: 09 a0                	j	2

ffffffff802002fe .LBB5_3:
ffffffff802002fe: 17 25 81 00          	auipc	a0, 2066
ffffffff80200302: 13 05 25 d0          	addi	a0, a0, -766
ffffffff80200306: c2 65                	ld	a1, 16(sp)
ffffffff80200308: 22 66                	ld	a2, 8(sp)
ffffffff8020030a: 97 20 00 00          	auipc	ra, 2
ffffffff8020030e: e7 80 60 74          	jalr	1862(ra)
ffffffff80200312: 2a e0                	sd	a0, 0(sp)
ffffffff80200314: 09 a0                	j	2
ffffffff80200316: 02 65                	ld	a0, 0(sp)
ffffffff80200318: a2 70                	ld	ra, 40(sp)
ffffffff8020031a: 45 61                	addi	sp, sp, 48
ffffffff8020031c: 82 80                	ret

ffffffff8020031e _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hbdf799637580b806E:
;     fn from(t: T) -> T {
ffffffff8020031e: 01 11                	addi	sp, sp, -32
ffffffff80200320: 2a e8                	sd	a0, 16(sp)
ffffffff80200322: 2a e4                	sd	a0, 8(sp)
;         t
ffffffff80200324: 2a ec                	sd	a0, 24(sp)
;     }
ffffffff80200326: 05 61                	addi	sp, sp, 32
ffffffff80200328: 82 80                	ret

ffffffff8020032a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h42300b03fafeb777E:
;     fn into(self) -> U {
ffffffff8020032a: 79 71                	addi	sp, sp, -48
ffffffff8020032c: 06 f4                	sd	ra, 40(sp)
ffffffff8020032e: 2a e4                	sd	a0, 8(sp)
ffffffff80200330: 2a e0                	sd	a0, 0(sp)
;         U::from(self)
ffffffff80200332: 2a ec                	sd	a0, 24(sp)
ffffffff80200334: 97 00 00 00          	auipc	ra, 0
ffffffff80200338: e7 80 a0 fe          	jalr	-22(ra)
ffffffff8020033c: 2a f0                	sd	a0, 32(sp)
ffffffff8020033e: 2a e8                	sd	a0, 16(sp)
ffffffff80200340: 09 a0                	j	2
;     }
ffffffff80200342: 42 65                	ld	a0, 16(sp)
ffffffff80200344: a2 70                	ld	ra, 40(sp)
ffffffff80200346: 45 61                	addi	sp, sp, 48
ffffffff80200348: 82 80                	ret

ffffffff8020034a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h53094932261ad367E:
;     fn into(self) -> U {
ffffffff8020034a: 79 71                	addi	sp, sp, -48
ffffffff8020034c: 06 f4                	sd	ra, 40(sp)
ffffffff8020034e: 2a ec                	sd	a0, 24(sp)
ffffffff80200350: 2a e8                	sd	a0, 16(sp)
;         U::from(self)
ffffffff80200352: 2a f0                	sd	a0, 32(sp)
ffffffff80200354: 97 20 00 00          	auipc	ra, 2
ffffffff80200358: e7 80 a0 30          	jalr	778(ra)
ffffffff8020035c: 2a e4                	sd	a0, 8(sp)
ffffffff8020035e: 09 a0                	j	2
;     }
ffffffff80200360: 22 65                	ld	a0, 8(sp)
ffffffff80200362: a2 70                	ld	ra, 40(sp)
ffffffff80200364: 45 61                	addi	sp, sp, 48
ffffffff80200366: 82 80                	ret

ffffffff80200368 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb33e78935e7d2a77E:
;     fn into(self) -> U {
ffffffff80200368: 79 71                	addi	sp, sp, -48
ffffffff8020036a: 06 f4                	sd	ra, 40(sp)
ffffffff8020036c: 2a e4                	sd	a0, 8(sp)
ffffffff8020036e: 2a e0                	sd	a0, 0(sp)
;         U::from(self)
ffffffff80200370: 2a ec                	sd	a0, 24(sp)
ffffffff80200372: 97 20 00 00          	auipc	ra, 2
ffffffff80200376: e7 80 00 0b          	jalr	176(ra)
ffffffff8020037a: 2a f0                	sd	a0, 32(sp)
ffffffff8020037c: 2a e8                	sd	a0, 16(sp)
ffffffff8020037e: 09 a0                	j	2
;     }
ffffffff80200380: 42 65                	ld	a0, 16(sp)
ffffffff80200382: a2 70                	ld	ra, 40(sp)
ffffffff80200384: 45 61                	addi	sp, sp, 48
ffffffff80200386: 82 80                	ret

ffffffff80200388 _ZN4core3str11unwrap_or_017hf53ca03f842320d3E:
; fn unwrap_or_0(opt: Option<&u8>) -> u8 {
ffffffff80200388: 41 11                	addi	sp, sp, -16
ffffffff8020038a: 2a e0                	sd	a0, 0(sp)
;         Some(&byte) => byte,
ffffffff8020038c: b3 35 a0 00          	snez	a1, a0
ffffffff80200390: 01 46                	mv	a2, zero
ffffffff80200392: 63 04 c5 00          	beq	a0, a2, 8
ffffffff80200396: 09 a0                	j	2
ffffffff80200398: 31 a0                	j	12
ffffffff8020039a: 01 45                	mv	a0, zero
;         None => 0,
ffffffff8020039c: 23 07 a1 00          	sb	a0, 14(sp)
;     match opt {
ffffffff802003a0: 11 a8                	j	20
ffffffff802003a2: 00 00                	unimp	
;         Some(&byte) => byte,
ffffffff802003a4: 02 65                	ld	a0, 0(sp)
ffffffff802003a6: 03 05 05 00          	lb	a0, 0(a0)
ffffffff802003aa: a3 07 a1 00          	sb	a0, 15(sp)
ffffffff802003ae: 23 07 a1 00          	sb	a0, 14(sp)
;     match opt {
ffffffff802003b2: 09 a0                	j	2
; }
ffffffff802003b4: 03 05 e1 00          	lb	a0, 14(sp)
ffffffff802003b8: 41 01                	addi	sp, sp, 16
ffffffff802003ba: 82 80                	ret

ffffffff802003bc _ZN4core3str15utf8_first_byte17h1782c3672bee9132E:
; fn utf8_first_byte(byte: u8, width: u32) -> u32 {
ffffffff802003bc: 41 11                	addi	sp, sp, -16
ffffffff802003be: 2e 86                	add	a2, zero, a1
ffffffff802003c0: aa 86                	add	a3, zero, a0
ffffffff802003c2: a3 05 a1 00          	sb	a0, 11(sp)
ffffffff802003c6: 2e c6                	sw	a1, 12(sp)
;     (byte & (0x7F >> width)) as u32
ffffffff802003c8: 9d 89                	andi	a1, a1, 7
ffffffff802003ca: 13 07 f0 07          	addi	a4, zero, 127
ffffffff802003ce: b3 55 b7 00          	srl	a1, a4, a1
ffffffff802003d2: 6d 8d                	and	a0, a0, a1
; }
ffffffff802003d4: 41 01                	addi	sp, sp, 16
ffffffff802003d6: 82 80                	ret

ffffffff802003d8 _ZN4core3str18utf8_acc_cont_byte17h3336bc8384038e65E:
; fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
ffffffff802003d8: 41 11                	addi	sp, sp, -16
ffffffff802003da: 2e 86                	add	a2, zero, a1
ffffffff802003dc: aa 86                	add	a3, zero, a0
ffffffff802003de: 2a c4                	sw	a0, 8(sp)
ffffffff802003e0: a3 07 b1 00          	sb	a1, 15(sp)
;     (ch << 6) | (byte & CONT_MASK) as u32
ffffffff802003e4: 1a 05                	slli	a0, a0, 6
ffffffff802003e6: 93 f5 f5 03          	andi	a1, a1, 63
ffffffff802003ea: 4d 8d                	or	a0, a0, a1
; }
ffffffff802003ec: 41 01                	addi	sp, sp, 16
ffffffff802003ee: 82 80                	ret

ffffffff802003f0 _ZN4core3str21_$LT$impl$u20$str$GT$5chars17h748bee1e6f6a6d8cE:
;     pub fn chars(&self) -> Chars<'_> {
ffffffff802003f0: 59 71                	addi	sp, sp, -112
ffffffff802003f2: 86 f4                	sd	ra, 104(sp)
ffffffff802003f4: 2a fc                	sd	a0, 56(sp)
ffffffff802003f6: ae e0                	sd	a1, 64(sp)
ffffffff802003f8: aa ec                	sd	a0, 88(sp)
ffffffff802003fa: ae f0                	sd	a1, 96(sp)
;         unsafe { Slices { str: self }.slice }
ffffffff802003fc: aa e4                	sd	a0, 72(sp)
ffffffff802003fe: ae e8                	sd	a1, 80(sp)
;         Chars { iter: self.as_bytes().iter() }
ffffffff80200400: 2a f0                	sd	a0, 32(sp)
ffffffff80200402: 2e ec                	sd	a1, 24(sp)
ffffffff80200404: 09 a0                	j	2
ffffffff80200406: 02 75                	ld	a0, 32(sp)
ffffffff80200408: e2 65                	ld	a1, 24(sp)
ffffffff8020040a: 97 00 00 00          	auipc	ra, 0
ffffffff8020040e: e7 80 40 77          	jalr	1908(ra)
ffffffff80200412: 2a e8                	sd	a0, 16(sp)
ffffffff80200414: 2e e4                	sd	a1, 8(sp)
ffffffff80200416: 09 a0                	j	2
ffffffff80200418: 42 65                	ld	a0, 16(sp)
ffffffff8020041a: 2a f4                	sd	a0, 40(sp)
ffffffff8020041c: a2 65                	ld	a1, 8(sp)
ffffffff8020041e: 2e f8                	sd	a1, 48(sp)
;     }
ffffffff80200420: a6 70                	ld	ra, 104(sp)
ffffffff80200422: 65 61                	addi	sp, sp, 112
ffffffff80200424: 82 80                	ret

ffffffff80200426 _ZN4core3str23from_utf8_unchecked_mut17h6b95fced40c10701E:
; pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
ffffffff80200426: 41 11                	addi	sp, sp, -16
ffffffff80200428: 2a e0                	sd	a0, 0(sp)
ffffffff8020042a: 2e e4                	sd	a1, 8(sp)
; }
ffffffff8020042c: 41 01                	addi	sp, sp, 16
ffffffff8020042e: 82 80                	ret

ffffffff80200430 _ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9bebbb66c91c179cE:
;     fn next(&mut self) -> Option<char> {
ffffffff80200430: 79 71                	addi	sp, sp, -48
ffffffff80200432: 06 f4                	sd	ra, 40(sp)
ffffffff80200434: 2a f0                	sd	a0, 32(sp)
;         next_code_point(&mut self.iter).map(|ch| {
ffffffff80200436: 97 20 00 00          	auipc	ra, 2
ffffffff8020043a: e7 80 40 42          	jalr	1060(ra)
ffffffff8020043e: 2a ec                	sd	a0, 24(sp)
ffffffff80200440: 2e e8                	sd	a1, 16(sp)
ffffffff80200442: 09 a0                	j	2
ffffffff80200444: 62 65                	ld	a0, 24(sp)
ffffffff80200446: c2 65                	ld	a1, 16(sp)
ffffffff80200448: 97 00 00 00          	auipc	ra, 0
ffffffff8020044c: e7 80 80 26          	jalr	616(ra)
ffffffff80200450: 02 15                	slli	a0, a0, 32
ffffffff80200452: 01 91                	srli	a0, a0, 32
ffffffff80200454: 2a e4                	sd	a0, 8(sp)
ffffffff80200456: 09 a0                	j	2
;     }
ffffffff80200458: 22 65                	ld	a0, 8(sp)
ffffffff8020045a: a2 70                	ld	ra, 40(sp)
ffffffff8020045c: 45 61                	addi	sp, sp, 48
ffffffff8020045e: 82 80                	ret

ffffffff80200460 _ZN50_$LT$$RF$mut$u20$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0414ead2019581ffE:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
ffffffff80200460: 01 11                	addi	sp, sp, -32
ffffffff80200462: 06 ec                	sd	ra, 24(sp)
ffffffff80200464: 2a e4                	sd	a0, 8(sp)
ffffffff80200466: 2e e8                	sd	a1, 16(sp)
ffffffff80200468: 08 61                	ld	a0, 0(a0)
ffffffff8020046a: 97 40 00 00          	auipc	ra, 4
ffffffff8020046e: e7 80 00 f4          	jalr	-192(ra)
ffffffff80200472: 2a e0                	sd	a0, 0(sp)
ffffffff80200474: 09 a0                	j	2
ffffffff80200476: 02 65                	ld	a0, 0(sp)
ffffffff80200478: e2 60                	ld	ra, 24(sp)
ffffffff8020047a: 05 61                	addi	sp, sp, 32
ffffffff8020047c: 82 80                	ret

ffffffff8020047e _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h76d80b4c1cb974f4E:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
ffffffff8020047e: 79 71                	addi	sp, sp, -48
ffffffff80200480: 06 f4                	sd	ra, 40(sp)
ffffffff80200482: 2a ec                	sd	a0, 24(sp)
ffffffff80200484: 2e f0                	sd	a1, 32(sp)
ffffffff80200486: 10 61                	ld	a2, 0(a0)
ffffffff80200488: 08 65                	ld	a0, 8(a0)
ffffffff8020048a: 2a e8                	sd	a0, 16(sp)
ffffffff8020048c: 32 85                	add	a0, zero, a2
ffffffff8020048e: 42 66                	ld	a2, 16(sp)
ffffffff80200490: 2e e4                	sd	a1, 8(sp)
ffffffff80200492: b2 85                	add	a1, zero, a2
ffffffff80200494: 22 66                	ld	a2, 8(sp)
ffffffff80200496: 97 00 00 00          	auipc	ra, 0
ffffffff8020049a: e7 80 00 05          	jalr	80(ra)
ffffffff8020049e: 2a e0                	sd	a0, 0(sp)
ffffffff802004a0: 09 a0                	j	2
ffffffff802004a2: 02 65                	ld	a0, 0(sp)
ffffffff802004a4: a2 70                	ld	ra, 40(sp)
ffffffff802004a6: 45 61                	addi	sp, sp, 48
ffffffff802004a8: 82 80                	ret

ffffffff802004aa _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8cf4192352831899E:
ffffffff802004aa: 01 11                	addi	sp, sp, -32
ffffffff802004ac: 06 ec                	sd	ra, 24(sp)
ffffffff802004ae: 2a e4                	sd	a0, 8(sp)
ffffffff802004b0: 2e e8                	sd	a1, 16(sp)
ffffffff802004b2: 08 61                	ld	a0, 0(a0)
ffffffff802004b4: 97 30 00 00          	auipc	ra, 3
ffffffff802004b8: e7 80 40 78          	jalr	1924(ra)
ffffffff802004bc: 2a e0                	sd	a0, 0(sp)
ffffffff802004be: 09 a0                	j	2
ffffffff802004c0: 02 65                	ld	a0, 0(sp)
ffffffff802004c2: e2 60                	ld	ra, 24(sp)
ffffffff802004c4: 05 61                	addi	sp, sp, 32
ffffffff802004c6: 82 80                	ret

ffffffff802004c8 _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17had9bcfb509866429E:
ffffffff802004c8: 01 11                	addi	sp, sp, -32
ffffffff802004ca: 06 ec                	sd	ra, 24(sp)
ffffffff802004cc: 2a e4                	sd	a0, 8(sp)
ffffffff802004ce: 2e e8                	sd	a1, 16(sp)
ffffffff802004d0: 08 61                	ld	a0, 0(a0)
ffffffff802004d2: 97 a0 00 00          	auipc	ra, 10
ffffffff802004d6: e7 80 c0 72          	jalr	1836(ra)
ffffffff802004da: 2a e0                	sd	a0, 0(sp)
ffffffff802004dc: 09 a0                	j	2
ffffffff802004de: 02 65                	ld	a0, 0(sp)
ffffffff802004e0: e2 60                	ld	ra, 24(sp)
ffffffff802004e2: 05 61                	addi	sp, sp, 32
ffffffff802004e4: 82 80                	ret

ffffffff802004e6 _ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3256a0f1a6141ee4E:
;     fn fmt(&self, f: &mut Formatter<'_>) -> Result {
ffffffff802004e6: 1d 71                	addi	sp, sp, -96
ffffffff802004e8: 86 ec                	sd	ra, 88(sp)
ffffffff802004ea: aa e0                	sd	a0, 64(sp)
ffffffff802004ec: ae e4                	sd	a1, 72(sp)
ffffffff802004ee: b2 e8                	sd	a2, 80(sp)
ffffffff802004f0: 14 18                	addi	a3, sp, 48
;         f.debug_list().entries(self.iter()).finish()
ffffffff802004f2: 2a f4                	sd	a0, 40(sp)
ffffffff802004f4: 36 85                	add	a0, zero, a3
ffffffff802004f6: 2e f0                	sd	a1, 32(sp)
ffffffff802004f8: b2 85                	add	a1, zero, a2
ffffffff802004fa: 97 b0 00 00          	auipc	ra, 11
ffffffff802004fe: e7 80 c0 e7          	jalr	-388(ra)
ffffffff80200502: 09 a0                	j	2
ffffffff80200504: 22 75                	ld	a0, 40(sp)
ffffffff80200506: 82 75                	ld	a1, 32(sp)
ffffffff80200508: 97 90 00 00          	auipc	ra, 9
ffffffff8020050c: e7 80 80 c7          	jalr	-904(ra)
ffffffff80200510: 2a ec                	sd	a0, 24(sp)
ffffffff80200512: 2e e8                	sd	a1, 16(sp)
ffffffff80200514: 09 a0                	j	2
ffffffff80200516: 08 18                	addi	a0, sp, 48
ffffffff80200518: e2 65                	ld	a1, 24(sp)
ffffffff8020051a: 42 66                	ld	a2, 16(sp)
ffffffff8020051c: 97 30 00 00          	auipc	ra, 3
ffffffff80200520: e7 80 40 fb          	jalr	-76(ra)
ffffffff80200524: 2a e4                	sd	a0, 8(sp)
ffffffff80200526: 09 a0                	j	2
ffffffff80200528: 22 65                	ld	a0, 8(sp)
ffffffff8020052a: 97 a0 00 00          	auipc	ra, 10
ffffffff8020052e: e7 80 80 46          	jalr	1128(ra)
ffffffff80200532: 2a e0                	sd	a0, 0(sp)
ffffffff80200534: 09 a0                	j	2
;     }
ffffffff80200536: 02 65                	ld	a0, 0(sp)
ffffffff80200538: e6 60                	ld	ra, 88(sp)
ffffffff8020053a: 25 61                	addi	sp, sp, 96
ffffffff8020053c: 82 80                	ret

ffffffff8020053e _ZN4core3fmt10ArgumentV13new17h1494eb36c253028cE:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff8020053e: 5d 71                	addi	sp, sp, -80
ffffffff80200540: 2a f8                	sd	a0, 48(sp)
ffffffff80200542: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff80200544: ae e0                	sd	a1, 64(sp)
ffffffff80200546: 2a ec                	sd	a0, 24(sp)
ffffffff80200548: 2e e8                	sd	a1, 16(sp)
ffffffff8020054a: 09 a0                	j	2
ffffffff8020054c: 62 65                	ld	a0, 24(sp)
ffffffff8020054e: aa e4                	sd	a0, 72(sp)
ffffffff80200550: 2a e4                	sd	a0, 8(sp)
ffffffff80200552: 09 a0                	j	2
ffffffff80200554: 22 65                	ld	a0, 8(sp)
ffffffff80200556: 2a f0                	sd	a0, 32(sp)
ffffffff80200558: c2 65                	ld	a1, 16(sp)
ffffffff8020055a: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff8020055c: 61 61                	addi	sp, sp, 80
ffffffff8020055e: 82 80                	ret

ffffffff80200560 _ZN4core3fmt10ArgumentV13new17h1f9dd2cbfa47f2f6E:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff80200560: 5d 71                	addi	sp, sp, -80
ffffffff80200562: 2a f8                	sd	a0, 48(sp)
ffffffff80200564: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff80200566: ae e0                	sd	a1, 64(sp)
ffffffff80200568: 2a ec                	sd	a0, 24(sp)
ffffffff8020056a: 2e e8                	sd	a1, 16(sp)
ffffffff8020056c: 09 a0                	j	2
ffffffff8020056e: 62 65                	ld	a0, 24(sp)
ffffffff80200570: aa e4                	sd	a0, 72(sp)
ffffffff80200572: 2a e4                	sd	a0, 8(sp)
ffffffff80200574: 09 a0                	j	2
ffffffff80200576: 22 65                	ld	a0, 8(sp)
ffffffff80200578: 2a f0                	sd	a0, 32(sp)
ffffffff8020057a: c2 65                	ld	a1, 16(sp)
ffffffff8020057c: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff8020057e: 61 61                	addi	sp, sp, 80
ffffffff80200580: 82 80                	ret

ffffffff80200582 _ZN4core3fmt10ArgumentV13new17h50a7b446b9c86508E:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff80200582: 5d 71                	addi	sp, sp, -80
ffffffff80200584: 2a f8                	sd	a0, 48(sp)
ffffffff80200586: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff80200588: ae e0                	sd	a1, 64(sp)
ffffffff8020058a: 2a ec                	sd	a0, 24(sp)
ffffffff8020058c: 2e e8                	sd	a1, 16(sp)
ffffffff8020058e: 09 a0                	j	2
ffffffff80200590: 62 65                	ld	a0, 24(sp)
ffffffff80200592: aa e4                	sd	a0, 72(sp)
ffffffff80200594: 2a e4                	sd	a0, 8(sp)
ffffffff80200596: 09 a0                	j	2
ffffffff80200598: 22 65                	ld	a0, 8(sp)
ffffffff8020059a: 2a f0                	sd	a0, 32(sp)
ffffffff8020059c: c2 65                	ld	a1, 16(sp)
ffffffff8020059e: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff802005a0: 61 61                	addi	sp, sp, 80
ffffffff802005a2: 82 80                	ret

ffffffff802005a4 _ZN4core3fmt10ArgumentV13new17h56b88bb3b2ee8f20E:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff802005a4: 5d 71                	addi	sp, sp, -80
ffffffff802005a6: 2a f8                	sd	a0, 48(sp)
ffffffff802005a8: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff802005aa: ae e0                	sd	a1, 64(sp)
ffffffff802005ac: 2a ec                	sd	a0, 24(sp)
ffffffff802005ae: 2e e8                	sd	a1, 16(sp)
ffffffff802005b0: 09 a0                	j	2
ffffffff802005b2: 62 65                	ld	a0, 24(sp)
ffffffff802005b4: aa e4                	sd	a0, 72(sp)
ffffffff802005b6: 2a e4                	sd	a0, 8(sp)
ffffffff802005b8: 09 a0                	j	2
ffffffff802005ba: 22 65                	ld	a0, 8(sp)
ffffffff802005bc: 2a f0                	sd	a0, 32(sp)
ffffffff802005be: c2 65                	ld	a1, 16(sp)
ffffffff802005c0: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff802005c2: 61 61                	addi	sp, sp, 80
ffffffff802005c4: 82 80                	ret

ffffffff802005c6 _ZN4core3fmt10ArgumentV13new17h95061701146dcb29E:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff802005c6: 5d 71                	addi	sp, sp, -80
ffffffff802005c8: 2a f8                	sd	a0, 48(sp)
ffffffff802005ca: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff802005cc: ae e0                	sd	a1, 64(sp)
ffffffff802005ce: 2a ec                	sd	a0, 24(sp)
ffffffff802005d0: 2e e8                	sd	a1, 16(sp)
ffffffff802005d2: 09 a0                	j	2
ffffffff802005d4: 62 65                	ld	a0, 24(sp)
ffffffff802005d6: aa e4                	sd	a0, 72(sp)
ffffffff802005d8: 2a e4                	sd	a0, 8(sp)
ffffffff802005da: 09 a0                	j	2
ffffffff802005dc: 22 65                	ld	a0, 8(sp)
ffffffff802005de: 2a f0                	sd	a0, 32(sp)
ffffffff802005e0: c2 65                	ld	a1, 16(sp)
ffffffff802005e2: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff802005e4: 61 61                	addi	sp, sp, 80
ffffffff802005e6: 82 80                	ret

ffffffff802005e8 _ZN4core3fmt10ArgumentV13new17h9e84d6155b057754E:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff802005e8: 5d 71                	addi	sp, sp, -80
ffffffff802005ea: 2a f8                	sd	a0, 48(sp)
ffffffff802005ec: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff802005ee: ae e0                	sd	a1, 64(sp)
ffffffff802005f0: 2a ec                	sd	a0, 24(sp)
ffffffff802005f2: 2e e8                	sd	a1, 16(sp)
ffffffff802005f4: 09 a0                	j	2
ffffffff802005f6: 62 65                	ld	a0, 24(sp)
ffffffff802005f8: aa e4                	sd	a0, 72(sp)
ffffffff802005fa: 2a e4                	sd	a0, 8(sp)
ffffffff802005fc: 09 a0                	j	2
ffffffff802005fe: 22 65                	ld	a0, 8(sp)
ffffffff80200600: 2a f0                	sd	a0, 32(sp)
ffffffff80200602: c2 65                	ld	a1, 16(sp)
ffffffff80200604: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff80200606: 61 61                	addi	sp, sp, 80
ffffffff80200608: 82 80                	ret

ffffffff8020060a _ZN4core3fmt10ArgumentV13new17ha1d7def301f97441E:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff8020060a: 5d 71                	addi	sp, sp, -80
ffffffff8020060c: 2a f8                	sd	a0, 48(sp)
ffffffff8020060e: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff80200610: ae e0                	sd	a1, 64(sp)
ffffffff80200612: 2a ec                	sd	a0, 24(sp)
ffffffff80200614: 2e e8                	sd	a1, 16(sp)
ffffffff80200616: 09 a0                	j	2
ffffffff80200618: 62 65                	ld	a0, 24(sp)
ffffffff8020061a: aa e4                	sd	a0, 72(sp)
ffffffff8020061c: 2a e4                	sd	a0, 8(sp)
ffffffff8020061e: 09 a0                	j	2
ffffffff80200620: 22 65                	ld	a0, 8(sp)
ffffffff80200622: 2a f0                	sd	a0, 32(sp)
ffffffff80200624: c2 65                	ld	a1, 16(sp)
ffffffff80200626: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff80200628: 61 61                	addi	sp, sp, 80
ffffffff8020062a: 82 80                	ret

ffffffff8020062c _ZN4core3fmt10ArgumentV13new17haa018dd0310e27fcE:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff8020062c: 5d 71                	addi	sp, sp, -80
ffffffff8020062e: 2a f8                	sd	a0, 48(sp)
ffffffff80200630: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff80200632: ae e0                	sd	a1, 64(sp)
ffffffff80200634: 2a ec                	sd	a0, 24(sp)
ffffffff80200636: 2e e8                	sd	a1, 16(sp)
ffffffff80200638: 09 a0                	j	2
ffffffff8020063a: 62 65                	ld	a0, 24(sp)
ffffffff8020063c: aa e4                	sd	a0, 72(sp)
ffffffff8020063e: 2a e4                	sd	a0, 8(sp)
ffffffff80200640: 09 a0                	j	2
ffffffff80200642: 22 65                	ld	a0, 8(sp)
ffffffff80200644: 2a f0                	sd	a0, 32(sp)
ffffffff80200646: c2 65                	ld	a1, 16(sp)
ffffffff80200648: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff8020064a: 61 61                	addi	sp, sp, 80
ffffffff8020064c: 82 80                	ret

ffffffff8020064e _ZN4core3fmt10ArgumentV13new17hdf191d514b3e80afE:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff8020064e: 5d 71                	addi	sp, sp, -80
ffffffff80200650: 2a f8                	sd	a0, 48(sp)
ffffffff80200652: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff80200654: ae e0                	sd	a1, 64(sp)
ffffffff80200656: 2a ec                	sd	a0, 24(sp)
ffffffff80200658: 2e e8                	sd	a1, 16(sp)
ffffffff8020065a: 09 a0                	j	2
ffffffff8020065c: 62 65                	ld	a0, 24(sp)
ffffffff8020065e: aa e4                	sd	a0, 72(sp)
ffffffff80200660: 2a e4                	sd	a0, 8(sp)
ffffffff80200662: 09 a0                	j	2
ffffffff80200664: 22 65                	ld	a0, 8(sp)
ffffffff80200666: 2a f0                	sd	a0, 32(sp)
ffffffff80200668: c2 65                	ld	a1, 16(sp)
ffffffff8020066a: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff8020066c: 61 61                	addi	sp, sp, 80
ffffffff8020066e: 82 80                	ret

ffffffff80200670 _ZN4core3fmt10ArgumentV13new17hec7ccad702f62ce4E:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff80200670: 5d 71                	addi	sp, sp, -80
ffffffff80200672: 2a f8                	sd	a0, 48(sp)
ffffffff80200674: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff80200676: ae e0                	sd	a1, 64(sp)
ffffffff80200678: 2a ec                	sd	a0, 24(sp)
ffffffff8020067a: 2e e8                	sd	a1, 16(sp)
ffffffff8020067c: 09 a0                	j	2
ffffffff8020067e: 62 65                	ld	a0, 24(sp)
ffffffff80200680: aa e4                	sd	a0, 72(sp)
ffffffff80200682: 2a e4                	sd	a0, 8(sp)
ffffffff80200684: 09 a0                	j	2
ffffffff80200686: 22 65                	ld	a0, 8(sp)
ffffffff80200688: 2a f0                	sd	a0, 32(sp)
ffffffff8020068a: c2 65                	ld	a1, 16(sp)
ffffffff8020068c: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff8020068e: 61 61                	addi	sp, sp, 80
ffffffff80200690: 82 80                	ret

ffffffff80200692 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbdd428190b7b9e49E:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
ffffffff80200692: 01 11                	addi	sp, sp, -32
ffffffff80200694: 06 ec                	sd	ra, 24(sp)
ffffffff80200696: 2a e4                	sd	a0, 8(sp)
ffffffff80200698: 2e e8                	sd	a1, 16(sp)
ffffffff8020069a: 08 61                	ld	a0, 0(a0)
ffffffff8020069c: 97 00 00 00          	auipc	ra, 0
ffffffff802006a0: e7 80 60 1f          	jalr	502(ra)
ffffffff802006a4: 2a e0                	sd	a0, 0(sp)
ffffffff802006a6: 09 a0                	j	2
ffffffff802006a8: 02 65                	ld	a0, 0(sp)
ffffffff802006aa: e2 60                	ld	ra, 24(sp)
ffffffff802006ac: 05 61                	addi	sp, sp, 32
ffffffff802006ae: 82 80                	ret

ffffffff802006b0 _ZN4core6option15Option$LT$T$GT$3map17hf6a08b8f599e5a5dE:
;     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
ffffffff802006b0: 79 71                	addi	sp, sp, -48
ffffffff802006b2: 06 f4                	sd	ra, 40(sp)
ffffffff802006b4: 2e 86                	add	a2, zero, a1
ffffffff802006b6: aa 86                	add	a3, zero, a0
ffffffff802006b8: 2a c4                	sw	a0, 8(sp)
ffffffff802006ba: 2e c6                	sw	a1, 12(sp)
ffffffff802006bc: 85 45                	addi	a1, zero, 1
;             Some(x) => Some(f(x)),
ffffffff802006be: a3 0f b1 00          	sb	a1, 31(sp)
ffffffff802006c2: 02 15                	slli	a0, a0, 32
ffffffff802006c4: 01 91                	srli	a0, a0, 32
ffffffff802006c6: 81 45                	mv	a1, zero
ffffffff802006c8: 63 04 b5 00          	beq	a0, a1, 8
ffffffff802006cc: 09 a0                	j	2
ffffffff802006ce: 31 a0                	j	12
ffffffff802006d0: 37 05 11 00          	lui	a0, 272
;             None => None,
ffffffff802006d4: 2a ca                	sw	a0, 20(sp)
;         match self {
ffffffff802006d6: 1d a8                	j	54
ffffffff802006d8: 00 00                	unimp	
;             Some(x) => Some(f(x)),
ffffffff802006da: 32 45                	lw	a0, 12(sp)
ffffffff802006dc: 2a d2                	sw	a0, 36(sp)
ffffffff802006de: 81 45                	mv	a1, zero
ffffffff802006e0: a3 0f b1 00          	sb	a1, 31(sp)
ffffffff802006e4: 2a cc                	sw	a0, 24(sp)
ffffffff802006e6: 97 20 00 00          	auipc	ra, 2
ffffffff802006ea: e7 80 a0 2f          	jalr	762(ra)
ffffffff802006ee: 02 15                	slli	a0, a0, 32
ffffffff802006f0: 01 91                	srli	a0, a0, 32
ffffffff802006f2: 2a e0                	sd	a0, 0(sp)
ffffffff802006f4: 09 a0                	j	2
ffffffff802006f6: 02 65                	ld	a0, 0(sp)
ffffffff802006f8: 2a ca                	sw	a0, 20(sp)
;     }
ffffffff802006fa: 09 a8                	j	18
ffffffff802006fc: 52 45                	lw	a0, 20(sp)
ffffffff802006fe: a2 70                	ld	ra, 40(sp)
ffffffff80200700: 45 61                	addi	sp, sp, 48
ffffffff80200702: 82 80                	ret
ffffffff80200704: 01 45                	mv	a0, zero
ffffffff80200706: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff8020070a: cd bf                	j	-14
ffffffff8020070c: 03 45 f1 01          	lbu	a0, 31(sp)
ffffffff80200710: 05 89                	andi	a0, a0, 1
ffffffff80200712: 6d f9                	bnez	a0, -14
ffffffff80200714: e5 b7                	j	-24

ffffffff80200716 _ZN4core6option15Option$LT$T$GT$5ok_or17h409ab8a6a8ab3263E:
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
ffffffff80200716: 79 71                	addi	sp, sp, -48
ffffffff80200718: 2a e4                	sd	a0, 8(sp)
ffffffff8020071a: 85 45                	addi	a1, zero, 1
;             Some(v) => Ok(v),
ffffffff8020071c: a3 0f b1 00          	sb	a1, 31(sp)
ffffffff80200720: b3 35 a0 00          	snez	a1, a0
ffffffff80200724: 01 46                	mv	a2, zero
ffffffff80200726: 63 04 c5 00          	beq	a0, a2, 8
ffffffff8020072a: 09 a0                	j	2
ffffffff8020072c: 39 a0                	j	14
ffffffff8020072e: 01 45                	mv	a0, zero
;             None => Err(err),
ffffffff80200730: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80200734: 2a e8                	sd	a0, 16(sp)
;         match self {
ffffffff80200736: 31 a0                	j	12
ffffffff80200738: 00 00                	unimp	
;             Some(v) => Ok(v),
ffffffff8020073a: 22 65                	ld	a0, 8(sp)
ffffffff8020073c: 2a f4                	sd	a0, 40(sp)
ffffffff8020073e: 2a e8                	sd	a0, 16(sp)
;         match self {
ffffffff80200740: 09 a0                	j	2
;     }
ffffffff80200742: 03 45 f1 01          	lbu	a0, 31(sp)
ffffffff80200746: 05 89                	andi	a0, a0, 1
ffffffff80200748: 09 e5                	bnez	a0, 10
ffffffff8020074a: 09 a0                	j	2
ffffffff8020074c: 42 65                	ld	a0, 16(sp)
ffffffff8020074e: 45 61                	addi	sp, sp, 48
ffffffff80200750: 82 80                	ret
ffffffff80200752: 01 45                	mv	a0, zero
ffffffff80200754: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80200758: d5 bf                	j	-12

ffffffff8020075a _ZN4core6option15Option$LT$T$GT$5ok_or17he0d55eb3af0d5ff6E:
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
ffffffff8020075a: 5d 71                	addi	sp, sp, -80
ffffffff8020075c: 2e f0                	sd	a1, 32(sp)
ffffffff8020075e: 32 f4                	sd	a2, 40(sp)
ffffffff80200760: 36 fc                	sd	a3, 56(sp)
ffffffff80200762: ba e0                	sd	a4, 64(sp)
ffffffff80200764: 05 46                	addi	a2, zero, 1
;             Some(v) => Ok(v),
ffffffff80200766: a3 0b c1 02          	sb	a2, 55(sp)
ffffffff8020076a: 2e 86                	add	a2, zero, a1
ffffffff8020076c: 81 47                	mv	a5, zero
ffffffff8020076e: 3a ec                	sd	a4, 24(sp)
ffffffff80200770: 36 e8                	sd	a3, 16(sp)
ffffffff80200772: 2a e4                	sd	a0, 8(sp)
ffffffff80200774: 63 84 f5 00          	beq	a1, a5, 8
ffffffff80200778: 09 a0                	j	2
ffffffff8020077a: 29 a8                	j	26
ffffffff8020077c: 01 45                	mv	a0, zero
;             None => Err(err),
ffffffff8020077e: a3 0b a1 02          	sb	a0, 55(sp)
ffffffff80200782: 42 65                	ld	a0, 16(sp)
ffffffff80200784: a2 65                	ld	a1, 8(sp)
ffffffff80200786: 88 e5                	sd	a0, 8(a1)
ffffffff80200788: 62 66                	ld	a2, 24(sp)
ffffffff8020078a: 90 e9                	sd	a2, 16(a1)
ffffffff8020078c: 85 46                	addi	a3, zero, 1
ffffffff8020078e: 94 e1                	sd	a3, 0(a1)
;         match self {
ffffffff80200790: 09 a8                	j	18
ffffffff80200792: 00 00                	unimp	
;             Some(v) => Ok(v),
ffffffff80200794: 22 75                	ld	a0, 40(sp)
ffffffff80200796: aa e4                	sd	a0, 72(sp)
ffffffff80200798: a2 65                	ld	a1, 8(sp)
ffffffff8020079a: 88 e5                	sd	a0, 8(a1)
ffffffff8020079c: 01 45                	mv	a0, zero
ffffffff8020079e: 88 e1                	sd	a0, 0(a1)
;         match self {
ffffffff802007a0: 09 a0                	j	2
;     }
ffffffff802007a2: 03 45 71 03          	lbu	a0, 55(sp)
ffffffff802007a6: 05 89                	andi	a0, a0, 1
ffffffff802007a8: 01 e5                	bnez	a0, 8
ffffffff802007aa: 09 a0                	j	2
ffffffff802007ac: 61 61                	addi	sp, sp, 80
ffffffff802007ae: 82 80                	ret
ffffffff802007b0: 01 45                	mv	a0, zero
ffffffff802007b2: a3 0b a1 02          	sb	a0, 55(sp)
ffffffff802007b6: dd bf                	j	-10

ffffffff802007b8 _ZN4core6option15Option$LT$T$GT$5ok_or17hf6e7c158cf1c3dd2E:
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
ffffffff802007b8: 39 71                	addi	sp, sp, -64
ffffffff802007ba: 2a e4                	sd	a0, 8(sp)
ffffffff802007bc: 2e e8                	sd	a1, 16(sp)
ffffffff802007be: 85 45                	addi	a1, zero, 1
;             Some(v) => Ok(v),
ffffffff802007c0: a3 07 b1 02          	sb	a1, 47(sp)
ffffffff802007c4: aa 85                	add	a1, zero, a0
ffffffff802007c6: 01 46                	mv	a2, zero
ffffffff802007c8: 63 04 c5 00          	beq	a0, a2, 8
ffffffff802007cc: 09 a0                	j	2
ffffffff802007ce: 01 a8                	j	16
ffffffff802007d0: 01 45                	mv	a0, zero
;             None => Err(err),
ffffffff802007d2: a3 07 a1 02          	sb	a0, 47(sp)
ffffffff802007d6: 05 45                	addi	a0, zero, 1
ffffffff802007d8: 2a ec                	sd	a0, 24(sp)
;         match self {
ffffffff802007da: 01 a8                	j	16
ffffffff802007dc: 00 00                	unimp	
;             Some(v) => Ok(v),
ffffffff802007de: 42 65                	ld	a0, 16(sp)
ffffffff802007e0: 2a fc                	sd	a0, 56(sp)
ffffffff802007e2: 2a f0                	sd	a0, 32(sp)
ffffffff802007e4: 01 45                	mv	a0, zero
ffffffff802007e6: 2a ec                	sd	a0, 24(sp)
;         match self {
ffffffff802007e8: 09 a0                	j	2
;     }
ffffffff802007ea: 03 45 f1 02          	lbu	a0, 47(sp)
ffffffff802007ee: 05 89                	andi	a0, a0, 1
ffffffff802007f0: 11 e5                	bnez	a0, 12
ffffffff802007f2: 09 a0                	j	2
ffffffff802007f4: 62 65                	ld	a0, 24(sp)
ffffffff802007f6: 82 75                	ld	a1, 32(sp)
ffffffff802007f8: 21 61                	addi	sp, sp, 64
ffffffff802007fa: 82 80                	ret
ffffffff802007fc: 01 45                	mv	a0, zero
ffffffff802007fe: a3 07 a1 02          	sb	a0, 47(sp)
ffffffff80200802: cd bf                	j	-14

ffffffff80200804 _ZN4core6option15Option$LT$T$GT$6as_ref17h224da8dfe0a1e154E:
;     pub fn as_ref(&self) -> Option<&T> {
ffffffff80200804: 01 11                	addi	sp, sp, -32
ffffffff80200806: 2a e8                	sd	a0, 16(sp)
;             Some(ref x) => Some(x),
ffffffff80200808: 0c 61                	ld	a1, 0(a0)
ffffffff8020080a: 01 46                	mv	a2, zero
ffffffff8020080c: 2a e0                	sd	a0, 0(sp)
ffffffff8020080e: 63 84 c5 00          	beq	a1, a2, 8
ffffffff80200812: 09 a0                	j	2
ffffffff80200814: 29 a0                	j	10
ffffffff80200816: 01 45                	mv	a0, zero
;             None => None,
ffffffff80200818: 2a e4                	sd	a0, 8(sp)
;         match *self {
ffffffff8020081a: 01 a8                	j	16
ffffffff8020081c: 00 00                	unimp	
;             Some(ref x) => Some(x),
ffffffff8020081e: 02 65                	ld	a0, 0(sp)
ffffffff80200820: 93 05 85 00          	addi	a1, a0, 8
ffffffff80200824: 2e ec                	sd	a1, 24(sp)
ffffffff80200826: 2e e4                	sd	a1, 8(sp)
;         match *self {
ffffffff80200828: 09 a0                	j	2
;     }
ffffffff8020082a: 22 65                	ld	a0, 8(sp)
ffffffff8020082c: 05 61                	addi	sp, sp, 32
ffffffff8020082e: 82 80                	ret

ffffffff80200830 _ZN4core6option15Option$LT$T$GT$6as_ref17ha6a823f85fcbe07bE:
;     pub fn as_ref(&self) -> Option<&T> {
ffffffff80200830: 01 11                	addi	sp, sp, -32
ffffffff80200832: 2a e8                	sd	a0, 16(sp)
;             Some(ref x) => Some(x),
ffffffff80200834: 0c 61                	ld	a1, 0(a0)
ffffffff80200836: 01 46                	mv	a2, zero
ffffffff80200838: 2a e0                	sd	a0, 0(sp)
ffffffff8020083a: 63 84 c5 00          	beq	a1, a2, 8
ffffffff8020083e: 09 a0                	j	2
ffffffff80200840: 29 a0                	j	10
ffffffff80200842: 01 45                	mv	a0, zero
;             None => None,
ffffffff80200844: 2a e4                	sd	a0, 8(sp)
;         match *self {
ffffffff80200846: 01 a8                	j	16
ffffffff80200848: 00 00                	unimp	
;             Some(ref x) => Some(x),
ffffffff8020084a: 02 65                	ld	a0, 0(sp)
ffffffff8020084c: 93 05 85 00          	addi	a1, a0, 8
ffffffff80200850: 2e ec                	sd	a1, 24(sp)
ffffffff80200852: 2e e4                	sd	a1, 8(sp)
;         match *self {
ffffffff80200854: 09 a0                	j	2
;     }
ffffffff80200856: 22 65                	ld	a0, 8(sp)
ffffffff80200858: 05 61                	addi	sp, sp, 32
ffffffff8020085a: 82 80                	ret

ffffffff8020085c _ZN4core6option15Option$LT$T$GT$6unwrap17h832a6ac6e8051311E:
;     pub fn unwrap(self) -> T {
ffffffff8020085c: 01 11                	addi	sp, sp, -32
ffffffff8020085e: 2a e8                	sd	a0, 16(sp)
;             Some(val) => val,
ffffffff80200860: 33 36 a0 00          	snez	a2, a0
ffffffff80200864: 81 46                	mv	a3, zero
ffffffff80200866: 2e e4                	sd	a1, 8(sp)
ffffffff80200868: 63 04 d5 00          	beq	a0, a3, 8
ffffffff8020086c: 09 a0                	j	2
ffffffff8020086e: 31 a8                	j	28

ffffffff80200870 .LBB7_5:
;         $crate::panicking::panic($msg)
ffffffff80200870: 17 d5 00 00          	auipc	a0, 13
ffffffff80200874: 13 05 85 88          	addi	a0, a0, -1912
ffffffff80200878: 93 05 b0 02          	addi	a1, zero, 43
ffffffff8020087c: 22 66                	ld	a2, 8(sp)
ffffffff8020087e: 97 a0 00 00          	auipc	ra, 10
ffffffff80200882: e7 80 a0 ab          	jalr	-1350(ra)
ffffffff80200886: 00 00                	unimp	
;         match self {
ffffffff80200888: 00 00                	unimp	
;             Some(val) => val,
ffffffff8020088a: 42 65                	ld	a0, 16(sp)
ffffffff8020088c: 2a ec                	sd	a0, 24(sp)
;     }
ffffffff8020088e: 05 61                	addi	sp, sp, 32
ffffffff80200890: 82 80                	ret

ffffffff80200892 _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h04278c4b996aadd3E:
; #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
ffffffff80200892: 19 71                	addi	sp, sp, -128
ffffffff80200894: 86 fc                	sd	ra, 120(sp)
ffffffff80200896: aa f0                	sd	a0, 96(sp)
ffffffff80200898: ae f4                	sd	a1, 104(sp)
ffffffff8020089a: 2a f0                	sd	a0, 32(sp)
ffffffff8020089c: 08 61                	ld	a0, 0(a0)
ffffffff8020089e: 01 46                	mv	a2, zero
ffffffff802008a0: 2e e8                	sd	a1, 16(sp)
ffffffff802008a2: 63 05 c5 02          	beq	a0, a2, 42
ffffffff802008a6: 09 a0                	j	2
;     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
ffffffff802008a8: 02 75                	ld	a0, 32(sp)
ffffffff802008aa: 21 05                	addi	a0, a0, 8
ffffffff802008ac: aa f8                	sd	a0, 112(sp)

ffffffff802008ae .LBB8_11:
; #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
ffffffff802008ae: 17 d6 00 00          	auipc	a2, 13
ffffffff802008b2: 13 06 a6 87          	addi	a2, a2, -1926
ffffffff802008b6: 8c 00                	addi	a1, sp, 64
ffffffff802008b8: 91 46                	addi	a3, zero, 4
ffffffff802008ba: 2a e4                	sd	a0, 8(sp)
ffffffff802008bc: 2e 85                	add	a0, zero, a1
ffffffff802008be: c2 65                	ld	a1, 16(sp)
ffffffff802008c0: 97 b0 00 00          	auipc	ra, 11
ffffffff802008c4: e7 80 a0 a7          	jalr	-1414(ra)
ffffffff802008c8: 3d a0                	j	46
ffffffff802008ca: 00 00                	unimp	

ffffffff802008cc .LBB8_12:
ffffffff802008cc: 17 d6 00 00          	auipc	a2, 13
ffffffff802008d0: 13 06 06 87          	addi	a2, a2, -1936
ffffffff802008d4: 28 10                	addi	a0, sp, 40
ffffffff802008d6: 91 46                	addi	a3, zero, 4
ffffffff802008d8: c2 65                	ld	a1, 16(sp)
ffffffff802008da: 97 b0 00 00          	auipc	ra, 11
ffffffff802008de: e7 80 00 a6          	jalr	-1440(ra)
ffffffff802008e2: 09 a0                	j	2
ffffffff802008e4: 28 10                	addi	a0, sp, 40
ffffffff802008e6: 97 a0 00 00          	auipc	ra, 10
ffffffff802008ea: e7 80 c0 f3          	jalr	-196(ra)
ffffffff802008ee: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff802008f2: 09 a0                	j	2
ffffffff802008f4: 3d a0                	j	46
;     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
ffffffff802008f6: 22 65                	ld	a0, 8(sp)
ffffffff802008f8: aa ec                	sd	a0, 88(sp)

ffffffff802008fa .LBB8_13:
; #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
ffffffff802008fa: 17 d6 00 00          	auipc	a2, 13
ffffffff802008fe: 13 06 66 84          	addi	a2, a2, -1978
ffffffff80200902: 88 00                	addi	a0, sp, 64
ffffffff80200904: ac 08                	addi	a1, sp, 88
ffffffff80200906: 97 a0 00 00          	auipc	ra, 10
ffffffff8020090a: e7 80 c0 e2          	jalr	-468(ra)
ffffffff8020090e: 09 a0                	j	2
ffffffff80200910: 88 00                	addi	a0, sp, 64
ffffffff80200912: 97 a0 00 00          	auipc	ra, 10
ffffffff80200916: e7 80 00 f1          	jalr	-240(ra)
ffffffff8020091a: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff8020091e: 09 a0                	j	2
ffffffff80200920: 09 a0                	j	2
ffffffff80200922: 03 45 f1 01          	lbu	a0, 31(sp)
ffffffff80200926: e6 70                	ld	ra, 120(sp)
ffffffff80200928: 09 61                	addi	sp, sp, 128
ffffffff8020092a: 82 80                	ret

ffffffff8020092c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h8e866d5d1be6e1bfE:
;     fn from_error(_: NoneError) -> Self {
ffffffff8020092c: 41 11                	addi	sp, sp, -16
ffffffff8020092e: 01 45                	mv	a0, zero
;         None
ffffffff80200930: 2a c0                	sw	a0, 0(sp)
;     }
ffffffff80200932: 92 45                	lw	a1, 4(sp)
ffffffff80200934: 41 01                	addi	sp, sp, 16
ffffffff80200936: 82 80                	ret

ffffffff80200938 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17he4a155a6e1a92c15E:
;     fn from_error(_: NoneError) -> Self {
ffffffff80200938: 41 11                	addi	sp, sp, -16
ffffffff8020093a: 81 45                	mv	a1, zero
;         None
ffffffff8020093c: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff8020093e: 41 01                	addi	sp, sp, 16
ffffffff80200940: 82 80                	ret

ffffffff80200942 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h097cd51cadbffe78E:
;     fn into_result(self) -> Result<T, NoneError> {
ffffffff80200942: 79 71                	addi	sp, sp, -48
ffffffff80200944: 06 f4                	sd	ra, 40(sp)
ffffffff80200946: 2a ec                	sd	a0, 24(sp)
ffffffff80200948: 2e f0                	sd	a1, 32(sp)
;         self.ok_or(NoneError)
ffffffff8020094a: 97 00 00 00          	auipc	ra, 0
ffffffff8020094e: e7 80 e0 e6          	jalr	-402(ra)
ffffffff80200952: 2a e8                	sd	a0, 16(sp)
ffffffff80200954: 2e e4                	sd	a1, 8(sp)
ffffffff80200956: 09 a0                	j	2
;     }
ffffffff80200958: 42 65                	ld	a0, 16(sp)
ffffffff8020095a: a2 65                	ld	a1, 8(sp)
ffffffff8020095c: a2 70                	ld	ra, 40(sp)
ffffffff8020095e: 45 61                	addi	sp, sp, 48
ffffffff80200960: 82 80                	ret

ffffffff80200962 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h52271139efae3600E:
;     fn into_result(self) -> Result<T, NoneError> {
ffffffff80200962: 01 11                	addi	sp, sp, -32
ffffffff80200964: 06 ec                	sd	ra, 24(sp)
ffffffff80200966: 2a e8                	sd	a0, 16(sp)
;         self.ok_or(NoneError)
ffffffff80200968: 97 00 00 00          	auipc	ra, 0
ffffffff8020096c: e7 80 e0 da          	jalr	-594(ra)
ffffffff80200970: 2a e4                	sd	a0, 8(sp)
ffffffff80200972: 09 a0                	j	2
;     }
ffffffff80200974: 22 65                	ld	a0, 8(sp)
ffffffff80200976: e2 60                	ld	ra, 24(sp)
ffffffff80200978: 05 61                	addi	sp, sp, 32
ffffffff8020097a: 82 80                	ret

ffffffff8020097c _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h580c46fd08ae838eE:
; #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
ffffffff8020097c: 19 71                	addi	sp, sp, -128
ffffffff8020097e: 86 fc                	sd	ra, 120(sp)
ffffffff80200980: 2a fc                	sd	a0, 56(sp)
ffffffff80200982: ae e0                	sd	a1, 64(sp)
ffffffff80200984: 10 61                	ld	a2, 0(a0)
ffffffff80200986: b2 e4                	sd	a2, 72(sp)
ffffffff80200988: b2 e8                	sd	a2, 80(sp)
ffffffff8020098a: 2e ec                	sd	a1, 24(sp)
ffffffff8020098c: 2a e8                	sd	a0, 16(sp)
ffffffff8020098e: 32 e4                	sd	a2, 8(sp)
ffffffff80200990: 09 a0                	j	2
ffffffff80200992: 62 65                	ld	a0, 24(sp)
ffffffff80200994: 0c 61                	ld	a1, 0(a0)
ffffffff80200996: ae ec                	sd	a1, 88(sp)
ffffffff80200998: ae f0                	sd	a1, 96(sp)
ffffffff8020099a: 2e e0                	sd	a1, 0(sp)
ffffffff8020099c: 09 a0                	j	2
ffffffff8020099e: 22 65                	ld	a0, 8(sp)
ffffffff802009a0: 82 65                	ld	a1, 0(sp)
ffffffff802009a2: 63 17 b5 00          	bne	a0, a1, 14
ffffffff802009a6: 09 a0                	j	2
ffffffff802009a8: 05 45                	addi	a0, zero, 1
ffffffff802009aa: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff802009ae: 29 a0                	j	10
ffffffff802009b0: 01 45                	mv	a0, zero
ffffffff802009b2: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff802009b6: 09 a0                	j	2
ffffffff802009b8: 03 45 71 02          	lbu	a0, 39(sp)
ffffffff802009bc: 05 89                	andi	a0, a0, 1
ffffffff802009be: 11 e5                	bnez	a0, 12
ffffffff802009c0: 09 a0                	j	2
ffffffff802009c2: 01 45                	mv	a0, zero
ffffffff802009c4: 23 03 a1 02          	sb	a0, 38(sp)
ffffffff802009c8: 99 a0                	j	70
ffffffff802009ca: 42 65                	ld	a0, 16(sp)
ffffffff802009cc: 2a f4                	sd	a0, 40(sp)
ffffffff802009ce: e2 65                	ld	a1, 24(sp)
ffffffff802009d0: 2e f8                	sd	a1, 48(sp)
ffffffff802009d2: 10 61                	ld	a2, 0(a0)
ffffffff802009d4: 85 46                	addi	a3, zero, 1
ffffffff802009d6: 63 07 d6 00          	beq	a2, a3, 14
ffffffff802009da: 09 a0                	j	2
ffffffff802009dc: 05 45                	addi	a0, zero, 1
ffffffff802009de: 23 03 a1 02          	sb	a0, 38(sp)
ffffffff802009e2: 2d a0                	j	42
ffffffff802009e4: 42 75                	ld	a0, 48(sp)
ffffffff802009e6: 08 61                	ld	a0, 0(a0)
ffffffff802009e8: 85 45                	addi	a1, zero, 1
ffffffff802009ea: e3 19 b5 fe          	bne	a0, a1, -14
ffffffff802009ee: 09 a0                	j	2
;     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
ffffffff802009f0: 22 75                	ld	a0, 40(sp)
ffffffff802009f2: 21 05                	addi	a0, a0, 8
ffffffff802009f4: aa f4                	sd	a0, 104(sp)
ffffffff802009f6: c2 75                	ld	a1, 48(sp)
ffffffff802009f8: a1 05                	addi	a1, a1, 8
ffffffff802009fa: ae f8                	sd	a1, 112(sp)
ffffffff802009fc: 97 40 00 00          	auipc	ra, 4
ffffffff80200a00: e7 80 60 db          	jalr	-586(ra)
ffffffff80200a04: 23 03 a1 02          	sb	a0, 38(sp)
ffffffff80200a08: 09 a0                	j	2
; #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
ffffffff80200a0a: 09 a0                	j	2
ffffffff80200a0c: 09 a0                	j	2
ffffffff80200a0e: 03 45 61 02          	lbu	a0, 38(sp)
ffffffff80200a12: e6 70                	ld	ra, 120(sp)
ffffffff80200a14: 09 61                	addi	sp, sp, 128
ffffffff80200a16: 82 80                	ret

ffffffff80200a18 _ZN56_$LT$os..console..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h11efdf99d4a5d4ebE:
;     fn write_str(&mut self, s: &str) -> fmt::Result {
ffffffff80200a18: 11 71                	addi	sp, sp, -256
ffffffff80200a1a: 86 fd                	sd	ra, 248(sp)
ffffffff80200a1c: 2a ed                	sd	a0, 152(sp)
ffffffff80200a1e: 2e f1                	sd	a1, 160(sp)
ffffffff80200a20: 32 f5                	sd	a2, 168(sp)
ffffffff80200a22: 01 45                	mv	a0, zero
;         let mut buffer = [0u8; 4];
ffffffff80200a24: aa d2                	sw	a0, 100(sp)
;         for c in s.chars() {
ffffffff80200a26: 2e 85                	add	a0, zero, a1
ffffffff80200a28: b2 85                	add	a1, zero, a2
ffffffff80200a2a: 97 00 00 00          	auipc	ra, 0
ffffffff80200a2e: e7 80 60 9c          	jalr	-1594(ra)
ffffffff80200a32: aa ec                	sd	a0, 88(sp)
ffffffff80200a34: ae e8                	sd	a1, 80(sp)
ffffffff80200a36: 09 a0                	j	2
ffffffff80200a38: 66 65                	ld	a0, 88(sp)
ffffffff80200a3a: c6 65                	ld	a1, 80(sp)
ffffffff80200a3c: 97 20 00 00          	auipc	ra, 2
ffffffff80200a40: e7 80 a0 f9          	jalr	-102(ra)
ffffffff80200a44: aa e4                	sd	a0, 72(sp)
ffffffff80200a46: ae e0                	sd	a1, 64(sp)
ffffffff80200a48: 09 a0                	j	2
ffffffff80200a4a: 26 65                	ld	a0, 72(sp)
ffffffff80200a4c: aa f4                	sd	a0, 104(sp)
ffffffff80200a4e: 86 65                	ld	a1, 64(sp)
ffffffff80200a50: ae f8                	sd	a1, 112(sp)
ffffffff80200a52: 09 a0                	j	2
ffffffff80200a54: a8 10                	addi	a0, sp, 104
ffffffff80200a56: 97 00 00 00          	auipc	ra, 0
ffffffff80200a5a: e7 80 a0 9d          	jalr	-1574(ra)
ffffffff80200a5e: 02 15                	slli	a0, a0, 32
ffffffff80200a60: 01 91                	srli	a0, a0, 32
ffffffff80200a62: aa de                	sw	a0, 124(sp)
ffffffff80200a64: 09 a0                	j	2
ffffffff80200a66: 76 55                	lw	a0, 124(sp)
ffffffff80200a68: b7 05 ef ff          	lui	a1, 1048304
ffffffff80200a6c: 2e 95                	add	a0, a0, a1
ffffffff80200a6e: 02 15                	slli	a0, a0, 32
ffffffff80200a70: 01 91                	srli	a0, a0, 32
ffffffff80200a72: b3 35 a0 00          	snez	a1, a0
ffffffff80200a76: 01 46                	mv	a2, zero
ffffffff80200a78: 63 04 c5 00          	beq	a0, a2, 8
ffffffff80200a7c: 09 a0                	j	2
ffffffff80200a7e: 31 a0                	j	12
ffffffff80200a80: 01 45                	mv	a0, zero
;     }
ffffffff80200a82: ee 70                	ld	ra, 248(sp)
ffffffff80200a84: 11 61                	addi	sp, sp, 256
ffffffff80200a86: 82 80                	ret
;         for c in s.chars() {
ffffffff80200a88: 00 00                	unimp	
ffffffff80200a8a: 76 55                	lw	a0, 124(sp)
ffffffff80200a8c: 2a db                	sw	a0, 180(sp)
ffffffff80200a8e: 2a dd                	sw	a0, 184(sp)
ffffffff80200a90: 2a df                	sw	a0, 188(sp)
ffffffff80200a92: cc 10                	addi	a1, sp, 100
ffffffff80200a94: 11 46                	addi	a2, zero, 4
;             for code_point in c.encode_utf8(&mut buffer).as_bytes().iter() {
ffffffff80200a96: 97 10 00 00          	auipc	ra, 1
ffffffff80200a9a: e7 80 40 0f          	jalr	244(ra)
ffffffff80200a9e: 2a fc                	sd	a0, 56(sp)
ffffffff80200aa0: 2e f8                	sd	a1, 48(sp)
ffffffff80200aa2: 09 a0                	j	2
ffffffff80200aa4: 62 75                	ld	a0, 56(sp)
ffffffff80200aa6: aa f5                	sd	a0, 232(sp)
ffffffff80200aa8: c2 75                	ld	a1, 48(sp)
ffffffff80200aaa: ae f9                	sd	a1, 240(sp)
;         unsafe { Slices { str: self }.slice }
ffffffff80200aac: aa ed                	sd	a0, 216(sp)
ffffffff80200aae: ae f1                	sd	a1, 224(sp)
;             for code_point in c.encode_utf8(&mut buffer).as_bytes().iter() {
ffffffff80200ab0: 2a f4                	sd	a0, 40(sp)
ffffffff80200ab2: 2e f0                	sd	a1, 32(sp)
ffffffff80200ab4: 09 a0                	j	2
ffffffff80200ab6: 22 75                	ld	a0, 40(sp)
ffffffff80200ab8: 82 75                	ld	a1, 32(sp)
ffffffff80200aba: 97 00 00 00          	auipc	ra, 0
ffffffff80200abe: e7 80 40 0c          	jalr	196(ra)
ffffffff80200ac2: 2a ec                	sd	a0, 24(sp)
ffffffff80200ac4: 2e e8                	sd	a1, 16(sp)
ffffffff80200ac6: 09 a0                	j	2
ffffffff80200ac8: 62 65                	ld	a0, 24(sp)
ffffffff80200aca: c2 65                	ld	a1, 16(sp)
ffffffff80200acc: 97 00 00 00          	auipc	ra, 0
ffffffff80200ad0: e7 80 a0 1d          	jalr	474(ra)
ffffffff80200ad4: 2a e4                	sd	a0, 8(sp)
ffffffff80200ad6: 2e e0                	sd	a1, 0(sp)
ffffffff80200ad8: 09 a0                	j	2
ffffffff80200ada: 22 65                	ld	a0, 8(sp)
ffffffff80200adc: 2a e1                	sd	a0, 128(sp)
ffffffff80200ade: 82 65                	ld	a1, 0(sp)
ffffffff80200ae0: 2e e5                	sd	a1, 136(sp)
ffffffff80200ae2: 09 a0                	j	2
ffffffff80200ae4: 08 01                	addi	a0, sp, 128
ffffffff80200ae6: 97 00 00 00          	auipc	ra, 0
ffffffff80200aea: e7 80 a0 1c          	jalr	458(ra)
ffffffff80200aee: 2a e9                	sd	a0, 144(sp)
ffffffff80200af0: 09 a0                	j	2
ffffffff80200af2: 4a 65                	ld	a0, 144(sp)
ffffffff80200af4: b3 35 a0 00          	snez	a1, a0
ffffffff80200af8: 01 46                	mv	a2, zero
ffffffff80200afa: 63 04 c5 00          	beq	a0, a2, 8
ffffffff80200afe: 09 a0                	j	2
ffffffff80200b00: 19 a0                	j	6
;         for c in s.chars() {
ffffffff80200b02: 89 bf                	j	-174
;             for code_point in c.encode_utf8(&mut buffer).as_bytes().iter() {
ffffffff80200b04: 00 00                	unimp	
ffffffff80200b06: 4a 65                	ld	a0, 144(sp)
ffffffff80200b08: aa e1                	sd	a0, 192(sp)
ffffffff80200b0a: aa e5                	sd	a0, 200(sp)
ffffffff80200b0c: aa e9                	sd	a0, 208(sp)
;                 console_putchar(*code_point as usize);
ffffffff80200b0e: 03 45 05 00          	lbu	a0, 0(a0)
ffffffff80200b12: 97 40 00 00          	auipc	ra, 4
ffffffff80200b16: e7 80 40 cb          	jalr	-844(ra)
ffffffff80200b1a: 09 a0                	j	2
;             for code_point in c.encode_utf8(&mut buffer).as_bytes().iter() {
ffffffff80200b1c: e1 b7                	j	-56

ffffffff80200b1e _ZN2os7console5print17hc2d28ebeaeec3a40E:
; pub fn print(args: fmt::Arguments) {
ffffffff80200b1e: 5d 71                	addi	sp, sp, -80
;     Stdout.write_fmt(args).unwrap();
ffffffff80200b20: 86 e4                	sd	ra, 72(sp)
ffffffff80200b22: 0c 75                	ld	a1, 40(a0)
ffffffff80200b24: ae e0                	sd	a1, 64(sp)
ffffffff80200b26: 0c 71                	ld	a1, 32(a0)
ffffffff80200b28: 2e fc                	sd	a1, 56(sp)
ffffffff80200b2a: 0c 6d                	ld	a1, 24(a0)
ffffffff80200b2c: 2e f8                	sd	a1, 48(sp)
ffffffff80200b2e: 0c 69                	ld	a1, 16(a0)
ffffffff80200b30: 2e f4                	sd	a1, 40(sp)
ffffffff80200b32: 0c 65                	ld	a1, 8(a0)
ffffffff80200b34: 2e f0                	sd	a1, 32(sp)
ffffffff80200b36: 08 61                	ld	a0, 0(a0)
ffffffff80200b38: 2a ec                	sd	a0, 24(sp)
ffffffff80200b3a: 08 08                	addi	a0, sp, 16
ffffffff80200b3c: 2c 08                	addi	a1, sp, 24
ffffffff80200b3e: 97 30 00 00          	auipc	ra, 3
ffffffff80200b42: e7 80 e0 fb          	jalr	-66(ra)
ffffffff80200b46: 2a e4                	sd	a0, 8(sp)
ffffffff80200b48: 09 a0                	j	2

ffffffff80200b4a .LBB1_3:
ffffffff80200b4a: 97 c5 00 00          	auipc	a1, 12
ffffffff80200b4e: 93 85 65 62          	addi	a1, a1, 1574
ffffffff80200b52: 22 65                	ld	a0, 8(sp)
ffffffff80200b54: 97 10 00 00          	auipc	ra, 1
ffffffff80200b58: e7 80 60 57          	jalr	1398(ra)
ffffffff80200b5c: 09 a0                	j	2
; }
ffffffff80200b5e: a6 60                	ld	ra, 72(sp)
ffffffff80200b60: 61 61                	addi	sp, sp, 80
ffffffff80200b62: 82 80                	ret

ffffffff80200b64 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h1f0e60140ff3b4b6E:
;     pub fn as_mut_ptr(&mut self) -> *mut T {
ffffffff80200b64: 41 11                	addi	sp, sp, -16
ffffffff80200b66: 2a e0                	sd	a0, 0(sp)
ffffffff80200b68: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff80200b6a: 41 01                	addi	sp, sp, 16
ffffffff80200b6c: 82 80                	ret

ffffffff80200b6e _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17heaae467dfb4e47f1E:
;     pub const fn len(&self) -> usize {
ffffffff80200b6e: 01 11                	addi	sp, sp, -32
ffffffff80200b70: 2a e8                	sd	a0, 16(sp)
ffffffff80200b72: 2e ec                	sd	a1, 24(sp)
;         unsafe { crate::ptr::Repr { rust: self }.raw.len }
ffffffff80200b74: 2a e0                	sd	a0, 0(sp)
ffffffff80200b76: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff80200b78: 2e 85                	add	a0, zero, a1
ffffffff80200b7a: 05 61                	addi	sp, sp, 32
ffffffff80200b7c: 82 80                	ret

ffffffff80200b7e _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h9e296aadab2a7bf9E:
;     pub fn iter(&self) -> Iter<'_, T> {
ffffffff80200b7e: 75 71                	addi	sp, sp, -144
ffffffff80200b80: 06 e5                	sd	ra, 136(sp)
ffffffff80200b82: aa f4                	sd	a0, 104(sp)
ffffffff80200b84: ae f8                	sd	a1, 112(sp)
;             let ptr = self.as_ptr();
ffffffff80200b86: aa e0                	sd	a0, 64(sp)
ffffffff80200b88: 2e fc                	sd	a1, 56(sp)
ffffffff80200b8a: 97 00 00 00          	auipc	ra, 0
ffffffff80200b8e: e7 80 a0 09          	jalr	154(ra)
ffffffff80200b92: aa 85                	add	a1, zero, a0
ffffffff80200b94: aa fc                	sd	a0, 120(sp)
ffffffff80200b96: 2e f8                	sd	a1, 48(sp)
ffffffff80200b98: 09 a0                	j	2
;             assume(!ptr.is_null());
ffffffff80200b9a: 42 75                	ld	a0, 48(sp)
ffffffff80200b9c: 97 40 00 00          	auipc	ra, 4
ffffffff80200ba0: e7 80 e0 f9          	jalr	-98(ra)
ffffffff80200ba4: 09 a0                	j	2
ffffffff80200ba6: 09 a0                	j	2
ffffffff80200ba8: 05 45                	addi	a0, zero, 1
;     intrinsics::size_of::<T>()
ffffffff80200baa: 2a e1                	sd	a0, 128(sp)
;             let end = if mem::size_of::<T>() == 0 {
ffffffff80200bac: 2a f4                	sd	a0, 40(sp)
ffffffff80200bae: 09 a0                	j	2
ffffffff80200bb0: 01 45                	mv	a0, zero
ffffffff80200bb2: a2 75                	ld	a1, 40(sp)
ffffffff80200bb4: 63 8b a5 00          	beq	a1, a0, 22
ffffffff80200bb8: 09 a0                	j	2
;                 ptr.add(self.len())
ffffffff80200bba: 06 65                	ld	a0, 64(sp)
ffffffff80200bbc: e2 75                	ld	a1, 56(sp)
ffffffff80200bbe: 97 00 00 00          	auipc	ra, 0
ffffffff80200bc2: e7 80 00 fb          	jalr	-80(ra)
ffffffff80200bc6: 2a f0                	sd	a0, 32(sp)
ffffffff80200bc8: 25 a0                	j	40
;                 (ptr as *const u8).wrapping_add(self.len()) as *const T
ffffffff80200bca: 06 65                	ld	a0, 64(sp)
ffffffff80200bcc: e2 75                	ld	a1, 56(sp)
ffffffff80200bce: 97 00 00 00          	auipc	ra, 0
ffffffff80200bd2: e7 80 00 fa          	jalr	-96(ra)
ffffffff80200bd6: 2a ec                	sd	a0, 24(sp)
ffffffff80200bd8: 09 a0                	j	2
ffffffff80200bda: 42 75                	ld	a0, 48(sp)
ffffffff80200bdc: e2 65                	ld	a1, 24(sp)
ffffffff80200bde: 97 80 00 00          	auipc	ra, 8
ffffffff80200be2: e7 80 a0 14          	jalr	330(ra)
ffffffff80200be6: 2a e8                	sd	a0, 16(sp)
ffffffff80200be8: 09 a0                	j	2
ffffffff80200bea: 42 65                	ld	a0, 16(sp)
ffffffff80200bec: aa ec                	sd	a0, 88(sp)
;             let end = if mem::size_of::<T>() == 0 {
ffffffff80200bee: 11 a8                	j	20
;                 ptr.add(self.len())
ffffffff80200bf0: 42 75                	ld	a0, 48(sp)
ffffffff80200bf2: 82 75                	ld	a1, 32(sp)
ffffffff80200bf4: 97 40 00 00          	auipc	ra, 4
ffffffff80200bf8: e7 80 60 f1          	jalr	-234(ra)
ffffffff80200bfc: aa ec                	sd	a0, 88(sp)
ffffffff80200bfe: 09 a0                	j	2
;             let end = if mem::size_of::<T>() == 0 {
ffffffff80200c00: 09 a0                	j	2
;             Iter { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: marker::PhantomData }
ffffffff80200c02: 42 75                	ld	a0, 48(sp)
ffffffff80200c04: 97 50 00 00          	auipc	ra, 5
ffffffff80200c08: e7 80 40 54          	jalr	1348(ra)
ffffffff80200c0c: 2a e4                	sd	a0, 8(sp)
ffffffff80200c0e: 09 a0                	j	2
ffffffff80200c10: 66 65                	ld	a0, 88(sp)
ffffffff80200c12: a2 65                	ld	a1, 8(sp)
ffffffff80200c14: ae e4                	sd	a1, 72(sp)
ffffffff80200c16: aa e8                	sd	a0, 80(sp)
;     }
ffffffff80200c18: 2a e0                	sd	a0, 0(sp)
ffffffff80200c1a: 2e 85                	add	a0, zero, a1
ffffffff80200c1c: 82 65                	ld	a1, 0(sp)
ffffffff80200c1e: aa 60                	ld	ra, 136(sp)
ffffffff80200c20: 49 61                	addi	sp, sp, 144
ffffffff80200c22: 82 80                	ret

ffffffff80200c24 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hb811b60acb0953c8E:
;     pub const fn as_ptr(&self) -> *const T {
ffffffff80200c24: 41 11                	addi	sp, sp, -16
ffffffff80200c26: 2a e0                	sd	a0, 0(sp)
ffffffff80200c28: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff80200c2a: 41 01                	addi	sp, sp, 16
ffffffff80200c2c: 82 80                	ret

ffffffff80200c2e _ZN4core5slice74_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$5index17h8f9cb33256187db4E:
;     fn index(&self, index: I) -> &I::Output {
ffffffff80200c2e: 79 71                	addi	sp, sp, -48
ffffffff80200c30: 06 f4                	sd	ra, 40(sp)
ffffffff80200c32: 2a e8                	sd	a0, 16(sp)
ffffffff80200c34: 2e ec                	sd	a1, 24(sp)
;         index.index(self)
ffffffff80200c36: 97 20 00 00          	auipc	ra, 2
ffffffff80200c3a: e7 80 80 b3          	jalr	-1224(ra)
ffffffff80200c3e: 2a e4                	sd	a0, 8(sp)
ffffffff80200c40: 2e e0                	sd	a1, 0(sp)
ffffffff80200c42: 09 a0                	j	2
;     }
ffffffff80200c44: 22 65                	ld	a0, 8(sp)
ffffffff80200c46: 82 65                	ld	a1, 0(sp)
ffffffff80200c48: a2 70                	ld	ra, 40(sp)
ffffffff80200c4a: 45 61                	addi	sp, sp, 48
ffffffff80200c4c: 82 80                	ret

ffffffff80200c4e _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h559b80237a904098E:
;     fn index_mut(&mut self, index: I) -> &mut I::Output {
ffffffff80200c4e: 79 71                	addi	sp, sp, -48
ffffffff80200c50: 06 f4                	sd	ra, 40(sp)
ffffffff80200c52: 2a e8                	sd	a0, 16(sp)
ffffffff80200c54: 2e ec                	sd	a1, 24(sp)
;         index.index_mut(self)
ffffffff80200c56: 97 20 00 00          	auipc	ra, 2
ffffffff80200c5a: e7 80 20 b2          	jalr	-1246(ra)
ffffffff80200c5e: 2a e4                	sd	a0, 8(sp)
ffffffff80200c60: 2e e0                	sd	a1, 0(sp)
ffffffff80200c62: 09 a0                	j	2
;     }
ffffffff80200c64: 22 65                	ld	a0, 8(sp)
ffffffff80200c66: 82 65                	ld	a1, 0(sp)
ffffffff80200c68: a2 70                	ld	ra, 40(sp)
ffffffff80200c6a: 45 61                	addi	sp, sp, 48
ffffffff80200c6c: 82 80                	ret

ffffffff80200c6e _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h64720b42dd88fa47E:
;     fn index_mut(&mut self, index: I) -> &mut I::Output {
ffffffff80200c6e: 39 71                	addi	sp, sp, -64
ffffffff80200c70: 06 fc                	sd	ra, 56(sp)
ffffffff80200c72: 2a f0                	sd	a0, 32(sp)
ffffffff80200c74: 2e f4                	sd	a1, 40(sp)
ffffffff80200c76: 32 f8                	sd	a2, 48(sp)
;         index.index_mut(self)
ffffffff80200c78: 2a ec                	sd	a0, 24(sp)
ffffffff80200c7a: 32 85                	add	a0, zero, a2
ffffffff80200c7c: 62 66                	ld	a2, 24(sp)
ffffffff80200c7e: 2e e8                	sd	a1, 16(sp)
ffffffff80200c80: b2 85                	add	a1, zero, a2
ffffffff80200c82: 42 66                	ld	a2, 16(sp)
ffffffff80200c84: 97 20 00 00          	auipc	ra, 2
ffffffff80200c88: e7 80 20 a3          	jalr	-1486(ra)
ffffffff80200c8c: 2a e4                	sd	a0, 8(sp)
ffffffff80200c8e: 2e e0                	sd	a1, 0(sp)
ffffffff80200c90: 09 a0                	j	2
;     }
ffffffff80200c92: 22 65                	ld	a0, 8(sp)
ffffffff80200c94: 82 65                	ld	a1, 0(sp)
ffffffff80200c96: e2 70                	ld	ra, 56(sp)
ffffffff80200c98: 21 61                	addi	sp, sp, 64
ffffffff80200c9a: 82 80                	ret

ffffffff80200c9c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hca852d7859243bf3E:
;     fn into_iter(self) -> I {
ffffffff80200c9c: 41 11                	addi	sp, sp, -16
ffffffff80200c9e: 2a e0                	sd	a0, 0(sp)
ffffffff80200ca0: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff80200ca2: 41 01                	addi	sp, sp, 16
ffffffff80200ca4: 82 80                	ret

ffffffff80200ca6 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hd6cfcfb8b4641faeE:
;     fn into_iter(self) -> I {
ffffffff80200ca6: 41 11                	addi	sp, sp, -16
ffffffff80200ca8: 2a e0                	sd	a0, 0(sp)
ffffffff80200caa: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff80200cac: 41 01                	addi	sp, sp, 16
ffffffff80200cae: 82 80                	ret

ffffffff80200cb0 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf7540393e400403bE:
;             fn next(&mut self) -> Option<$elem> {
ffffffff80200cb0: 19 71                	addi	sp, sp, -128
ffffffff80200cb2: 86 fc                	sd	ra, 120(sp)
ffffffff80200cb4: aa e0                	sd	a0, 64(sp)
;                     assume(!self.ptr.as_ptr().is_null());
ffffffff80200cb6: 0c 61                	ld	a1, 0(a0)
ffffffff80200cb8: 2a f8                	sd	a0, 48(sp)
ffffffff80200cba: 2e 85                	add	a0, zero, a1
ffffffff80200cbc: 97 50 00 00          	auipc	ra, 5
ffffffff80200cc0: e7 80 60 50          	jalr	1286(ra)
ffffffff80200cc4: 2a f4                	sd	a0, 40(sp)
ffffffff80200cc6: 09 a0                	j	2
ffffffff80200cc8: 22 75                	ld	a0, 40(sp)
ffffffff80200cca: 97 60 00 00          	auipc	ra, 6
ffffffff80200cce: e7 80 c0 d7          	jalr	-644(ra)
ffffffff80200cd2: 09 a0                	j	2
ffffffff80200cd4: 09 a0                	j	2
ffffffff80200cd6: 05 45                	addi	a0, zero, 1
;     intrinsics::size_of::<T>()
ffffffff80200cd8: aa e4                	sd	a0, 72(sp)
;                     if mem::size_of::<T>() != 0 {
ffffffff80200cda: 2a f0                	sd	a0, 32(sp)
ffffffff80200cdc: 09 a0                	j	2
ffffffff80200cde: 01 45                	mv	a0, zero
ffffffff80200ce0: 82 75                	ld	a1, 32(sp)
ffffffff80200ce2: 63 94 a5 00          	bne	a1, a0, 8
ffffffff80200ce6: 09 a0                	j	2
ffffffff80200ce8: 11 a8                	j	20
;                         assume(!self.end.is_null());
ffffffff80200cea: 42 75                	ld	a0, 48(sp)
ffffffff80200cec: 08 65                	ld	a0, 8(a0)
ffffffff80200cee: 97 40 00 00          	auipc	ra, 4
ffffffff80200cf2: e7 80 c0 e4          	jalr	-436(ra)
ffffffff80200cf6: 09 a0                	j	2
ffffffff80200cf8: 09 a0                	j	2
;                     if mem::size_of::<T>() != 0 {
ffffffff80200cfa: 09 a0                	j	2
;         $self.ptr.as_ptr() as *const T == $self.end
ffffffff80200cfc: 42 75                	ld	a0, 48(sp)
ffffffff80200cfe: 08 61                	ld	a0, 0(a0)
ffffffff80200d00: 97 50 00 00          	auipc	ra, 5
ffffffff80200d04: e7 80 20 4c          	jalr	1218(ra)
ffffffff80200d08: 2a ec                	sd	a0, 24(sp)
ffffffff80200d0a: 09 a0                	j	2
ffffffff80200d0c: 42 75                	ld	a0, 48(sp)
ffffffff80200d0e: 0c 65                	ld	a1, 8(a0)
;                     if is_empty!(self) {
ffffffff80200d10: 62 66                	ld	a2, 24(sp)
ffffffff80200d12: 63 0b b6 06          	beq	a2, a1, 118
ffffffff80200d16: 09 a0                	j	2
ffffffff80200d18: 42 75                	ld	a0, 48(sp)
ffffffff80200d1a: aa ec                	sd	a0, 88(sp)
ffffffff80200d1c: 85 45                	addi	a1, zero, 1
ffffffff80200d1e: ae f0                	sd	a1, 96(sp)
;     intrinsics::size_of::<T>()
ffffffff80200d20: ae f8                	sd	a1, 112(sp)
ffffffff80200d22: 81 45                	mv	a1, zero
;                 if mem::size_of::<T>() == 0 {
ffffffff80200d24: 9d ed                	bnez	a1, 62
ffffffff80200d26: 09 a0                	j	2
;                     let old = self.ptr.as_ptr();
ffffffff80200d28: 42 75                	ld	a0, 48(sp)
ffffffff80200d2a: 08 61                	ld	a0, 0(a0)
ffffffff80200d2c: 97 50 00 00          	auipc	ra, 5
ffffffff80200d30: e7 80 60 49          	jalr	1174(ra)
ffffffff80200d34: aa f4                	sd	a0, 104(sp)
;                     self.ptr = NonNull::new_unchecked(self.ptr.as_ptr().offset(offset));
ffffffff80200d36: c2 75                	ld	a1, 48(sp)
ffffffff80200d38: 90 61                	ld	a2, 0(a1)
ffffffff80200d3a: 2a e8                	sd	a0, 16(sp)
ffffffff80200d3c: 32 85                	add	a0, zero, a2
ffffffff80200d3e: 97 50 00 00          	auipc	ra, 5
ffffffff80200d42: e7 80 40 48          	jalr	1156(ra)
ffffffff80200d46: 85 45                	addi	a1, zero, 1
ffffffff80200d48: 97 60 00 00          	auipc	ra, 6
ffffffff80200d4c: e7 80 20 cc          	jalr	-830(ra)
ffffffff80200d50: 97 50 00 00          	auipc	ra, 5
ffffffff80200d54: e7 80 80 3f          	jalr	1016(ra)
ffffffff80200d58: c2 75                	ld	a1, 48(sp)
ffffffff80200d5a: 88 e1                	sd	a0, 0(a1)
;                     old
ffffffff80200d5c: 42 65                	ld	a0, 16(sp)
ffffffff80200d5e: aa e8                	sd	a0, 80(sp)
;                 if mem::size_of::<T>() == 0 {
ffffffff80200d60: 0d a0                	j	34
;                 $self.end = ($self.end as * $raw_mut u8).wrapping_offset(-$n) as * $raw_mut T;
ffffffff80200d62: 42 75                	ld	a0, 48(sp)
ffffffff80200d64: 08 65                	ld	a0, 8(a0)
ffffffff80200d66: fd 55                	addi	a1, zero, -1
ffffffff80200d68: 97 80 00 00          	auipc	ra, 8
ffffffff80200d6c: e7 80 c0 fd          	jalr	-36(ra)
ffffffff80200d70: c2 75                	ld	a1, 48(sp)
ffffffff80200d72: 88 e5                	sd	a0, 8(a1)
;                     self.ptr.as_ptr()
ffffffff80200d74: 88 61                	ld	a0, 0(a1)
ffffffff80200d76: 97 50 00 00          	auipc	ra, 5
ffffffff80200d7a: e7 80 c0 44          	jalr	1100(ra)
ffffffff80200d7e: aa e8                	sd	a0, 80(sp)
;                 if mem::size_of::<T>() == 0 {
ffffffff80200d80: 09 a0                	j	2
;             }
ffffffff80200d82: 46 65                	ld	a0, 80(sp)
;             ($self: ident) => {& $( $mut_ )* *$self.post_inc_start(1)}
ffffffff80200d84: 2a e4                	sd	a0, 8(sp)
ffffffff80200d86: 21 a0                	j	8
ffffffff80200d88: 01 45                	mv	a0, zero
;                         None
ffffffff80200d8a: 2a fc                	sd	a0, 56(sp)
;                     if is_empty!(self) {
ffffffff80200d8c: 21 a0                	j	8
;                         Some(next_unchecked!(self))
ffffffff80200d8e: 22 65                	ld	a0, 8(sp)
ffffffff80200d90: 2a fc                	sd	a0, 56(sp)
;                     if is_empty!(self) {
ffffffff80200d92: 09 a0                	j	2
;             }
ffffffff80200d94: 62 75                	ld	a0, 56(sp)
ffffffff80200d96: e6 70                	ld	ra, 120(sp)
ffffffff80200d98: 09 61                	addi	sp, sp, 128
ffffffff80200d9a: 82 80                	ret

ffffffff80200d9c _ZN5riscv8register5stvec5write17hdc0649d257d925f4E:
; pub unsafe fn write(addr: usize, mode: TrapMode) {
ffffffff80200d9c: 01 11                	addi	sp, sp, -32
ffffffff80200d9e: 06 ec                	sd	ra, 24(sp)
ffffffff80200da0: 2e 86                	add	a2, zero, a1
ffffffff80200da2: 2a e4                	sd	a0, 8(sp)
ffffffff80200da4: a3 0b b1 00          	sb	a1, 23(sp)
;     _write(addr + mode as usize);
ffffffff80200da8: aa 95                	add	a1, a1, a0
ffffffff80200daa: 2e e0                	sd	a1, 0(sp)
ffffffff80200dac: 63 ec a5 00          	bltu	a1, a0, 24
ffffffff80200db0: 09 a0                	j	2
ffffffff80200db2: 02 65                	ld	a0, 0(sp)
ffffffff80200db4: 97 00 00 00          	auipc	ra, 0
ffffffff80200db8: e7 80 c0 02          	jalr	44(ra)
ffffffff80200dbc: 09 a0                	j	2
; }
ffffffff80200dbe: e2 60                	ld	ra, 24(sp)
ffffffff80200dc0: 05 61                	addi	sp, sp, 32
ffffffff80200dc2: 82 80                	ret

ffffffff80200dc4 .LBB0_4:
;     _write(addr + mode as usize);
ffffffff80200dc4: 17 c5 00 00          	auipc	a0, 12
ffffffff80200dc8: 13 05 c5 43          	addi	a0, a0, 1084

ffffffff80200dcc .LBB0_5:
ffffffff80200dcc: 17 c6 00 00          	auipc	a2, 12
ffffffff80200dd0: 13 06 46 41          	addi	a2, a2, 1044
ffffffff80200dd4: f1 45                	addi	a1, zero, 28
ffffffff80200dd6: 97 90 00 00          	auipc	ra, 9
ffffffff80200dda: e7 80 20 56          	jalr	1378(ra)
ffffffff80200dde: 00 00                	unimp	

ffffffff80200de0 _ZN5riscv8register5stvec6_write17h73c3afcdfe645e49E:
;         unsafe fn _write(bits: usize) {
ffffffff80200de0: 41 11                	addi	sp, sp, -16
ffffffff80200de2: 2a e4                	sd	a0, 8(sp)
;                 () => llvm_asm!("csrrw x0, $1, $0" :: "r"(bits), "i"($csr_number) :: "volatile"),
ffffffff80200de4: 73 10 55 10          	csrw	stvec, a0
;         }
ffffffff80200de8: 41 01                	addi	sp, sp, 16
ffffffff80200dea: 82 80                	ret

ffffffff80200dec _ZN138_$LT$$LT$alloc..vec..IntoIter$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17haaaecfeb05156c3bE:
;             fn drop(&mut self) {
ffffffff80200dec: 79 71                	addi	sp, sp, -48
ffffffff80200dee: 06 f4                	sd	ra, 40(sp)
ffffffff80200df0: 2a f0                	sd	a0, 32(sp)
;                 let _ = unsafe { RawVec::from_raw_parts(self.0.buf.as_ptr(), self.0.cap) };
ffffffff80200df2: 0c 61                	ld	a1, 0(a0)
ffffffff80200df4: 8c 61                	ld	a1, 0(a1)
ffffffff80200df6: 2a e4                	sd	a0, 8(sp)
ffffffff80200df8: 2e 85                	add	a0, zero, a1
ffffffff80200dfa: 97 80 00 00          	auipc	ra, 8
ffffffff80200dfe: e7 80 80 10          	jalr	264(ra)
ffffffff80200e02: 2a e0                	sd	a0, 0(sp)
ffffffff80200e04: 09 a0                	j	2
ffffffff80200e06: 22 65                	ld	a0, 8(sp)
ffffffff80200e08: 0c 61                	ld	a1, 0(a0)
ffffffff80200e0a: 8c 65                	ld	a1, 8(a1)
ffffffff80200e0c: 02 65                	ld	a0, 0(sp)
ffffffff80200e0e: 97 00 00 00          	auipc	ra, 0
ffffffff80200e12: e7 80 40 3d          	jalr	980(ra)
ffffffff80200e16: 2a e8                	sd	a0, 16(sp)
ffffffff80200e18: 2e ec                	sd	a1, 24(sp)
ffffffff80200e1a: 09 a0                	j	2
ffffffff80200e1c: 08 08                	addi	a0, sp, 16
ffffffff80200e1e: 97 00 00 00          	auipc	ra, 0
ffffffff80200e22: e7 80 80 23          	jalr	568(ra)
ffffffff80200e26: 09 a0                	j	2
;             }
ffffffff80200e28: a2 70                	ld	ra, 40(sp)
ffffffff80200e2a: 45 61                	addi	sp, sp, 48
ffffffff80200e2c: 82 80                	ret

ffffffff80200e2e _ZN4core3ops8function6FnOnce9call_once17h94bb946cc885e417E:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
ffffffff80200e2e: 71 71                	addi	sp, sp, -176
;             PhysicalPageNumber::ceil(PhysicalAddress::from(*KERNEL_END_ADDRESS))..PhysicalPageNumber::floor(MEMORY_END_ADDRESS),
ffffffff80200e30: 06 f5                	sd	ra, 168(sp)

ffffffff80200e32 .LBB1_2:
ffffffff80200e32: 97 d5 00 00          	auipc	a1, 13
ffffffff80200e36: 93 85 65 2d          	addi	a1, a1, 726
ffffffff80200e3a: 2a e8                	sd	a0, 16(sp)
ffffffff80200e3c: 2e 85                	add	a0, zero, a1
ffffffff80200e3e: 97 40 00 00          	auipc	ra, 4
ffffffff80200e42: e7 80 20 91          	jalr	-1774(ra)
ffffffff80200e46: 08 61                	ld	a0, 0(a0)
ffffffff80200e48: aa fc                	sd	a0, 120(sp)
ffffffff80200e4a: 97 10 00 00          	auipc	ra, 1
ffffffff80200e4e: e7 80 e0 59          	jalr	1438(ra)
ffffffff80200e52: 2a e5                	sd	a0, 136(sp)
ffffffff80200e54: aa f8                	sd	a0, 112(sp)
ffffffff80200e56: 97 10 00 00          	auipc	ra, 1
ffffffff80200e5a: e7 80 a0 61          	jalr	1562(ra)
ffffffff80200e5e: 2a e9                	sd	a0, 144(sp)
ffffffff80200e60: aa f4                	sd	a0, 104(sp)

ffffffff80200e62 .LBB1_3:
ffffffff80200e62: 17 c5 00 00          	auipc	a0, 12
ffffffff80200e66: 13 05 e5 3d          	addi	a0, a0, 990
ffffffff80200e6a: 08 61                	ld	a0, 0(a0)
ffffffff80200e6c: 2a ed                	sd	a0, 152(sp)
ffffffff80200e6e: 97 10 00 00          	auipc	ra, 1
ffffffff80200e72: e7 80 40 5f          	jalr	1524(ra)
ffffffff80200e76: 2a f1                	sd	a0, 160(sp)
ffffffff80200e78: 2a e1                	sd	a0, 128(sp)
ffffffff80200e7a: a6 75                	ld	a1, 104(sp)
ffffffff80200e7c: ae ec                	sd	a1, 88(sp)
ffffffff80200e7e: aa f0                	sd	a0, 96(sp)
ffffffff80200e80: a8 00                	addi	a0, sp, 72
ffffffff80200e82: ac 08                	addi	a1, sp, 88
;     pub static ref FRAME_ALLOCATOR: Mutex<FrameAllocator<AllocatorImpl>> = Mutex::new(FrameAllocator::new(Range::from(
ffffffff80200e84: 2a e4                	sd	a0, 8(sp)
ffffffff80200e86: 97 30 00 00          	auipc	ra, 3
ffffffff80200e8a: e7 80 c0 b8          	jalr	-1140(ra)
ffffffff80200e8e: 28 10                	addi	a0, sp, 40
ffffffff80200e90: 2a e0                	sd	a0, 0(sp)
ffffffff80200e92: a2 65                	ld	a1, 8(sp)
ffffffff80200e94: 97 30 00 00          	auipc	ra, 3
ffffffff80200e98: e7 80 00 ee          	jalr	-288(ra)
ffffffff80200e9c: 42 65                	ld	a0, 16(sp)
ffffffff80200e9e: 82 65                	ld	a1, 0(sp)
ffffffff80200ea0: 97 10 00 00          	auipc	ra, 1
ffffffff80200ea4: e7 80 80 df          	jalr	-520(ra)
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
ffffffff80200ea8: 09 a0                	j	2
ffffffff80200eaa: aa 70                	ld	ra, 168(sp)
ffffffff80200eac: 4d 61                	addi	sp, sp, 176
ffffffff80200eae: 82 80                	ret

ffffffff80200eb0 _ZN4core3ops8function6FnOnce9call_once17hfdbb121d818acbb3E:
ffffffff80200eb0: 79 71                	addi	sp, sp, -48

ffffffff80200eb2 .LBB2_2:
;     pub static ref KERNEL_END_ADDRESS: VirtualAddress = VirtualAddress(kernel_end as usize); 
ffffffff80200eb2: 17 25 82 00          	auipc	a0, 2082
ffffffff80200eb6: 13 05 e5 14          	addi	a0, a0, 334
ffffffff80200eba: 2a f4                	sd	a0, 40(sp)
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
ffffffff80200ebc: 2a f0                	sd	a0, 32(sp)
ffffffff80200ebe: 2a e8                	sd	a0, 16(sp)
ffffffff80200ec0: 09 a0                	j	2
ffffffff80200ec2: 42 65                	ld	a0, 16(sp)
ffffffff80200ec4: 45 61                	addi	sp, sp, 48
ffffffff80200ec6: 82 80                	ret

ffffffff80200ec8 _ZN4core3ptr13drop_in_place17h13fd75f53e9a730fE:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
ffffffff80200ec8: 01 11                	addi	sp, sp, -32
ffffffff80200eca: 06 ec                	sd	ra, 24(sp)
ffffffff80200ecc: 2a e8                	sd	a0, 16(sp)
ffffffff80200ece: 97 00 00 00          	auipc	ra, 0
ffffffff80200ed2: e7 80 00 1f          	jalr	496(ra)
ffffffff80200ed6: 09 a0                	j	2
ffffffff80200ed8: e2 60                	ld	ra, 24(sp)
ffffffff80200eda: 05 61                	addi	sp, sp, 32
ffffffff80200edc: 82 80                	ret

ffffffff80200ede _ZN4core3ptr13drop_in_place17h22bc3247b0f43712E:
ffffffff80200ede: 01 11                	addi	sp, sp, -32
ffffffff80200ee0: 06 ec                	sd	ra, 24(sp)
ffffffff80200ee2: 2a e8                	sd	a0, 16(sp)
ffffffff80200ee4: 97 00 00 00          	auipc	ra, 0
ffffffff80200ee8: e7 80 c0 24          	jalr	588(ra)
ffffffff80200eec: 09 a0                	j	2
ffffffff80200eee: e2 60                	ld	ra, 24(sp)
ffffffff80200ef0: 05 61                	addi	sp, sp, 32
ffffffff80200ef2: 82 80                	ret

ffffffff80200ef4 _ZN4core3ptr13drop_in_place17h37e30ead8da06110E:
ffffffff80200ef4: 41 11                	addi	sp, sp, -16
ffffffff80200ef6: 2a e4                	sd	a0, 8(sp)
ffffffff80200ef8: 41 01                	addi	sp, sp, 16
ffffffff80200efa: 82 80                	ret

ffffffff80200efc _ZN4core3ptr13drop_in_place17h411478c565ae66e3E:
ffffffff80200efc: 01 11                	addi	sp, sp, -32
ffffffff80200efe: 06 ec                	sd	ra, 24(sp)
ffffffff80200f00: 2a e8                	sd	a0, 16(sp)
ffffffff80200f02: 97 90 00 00          	auipc	ra, 9
ffffffff80200f06: e7 80 00 9d          	jalr	-1584(ra)
ffffffff80200f0a: 09 a0                	j	2
ffffffff80200f0c: e2 60                	ld	ra, 24(sp)
ffffffff80200f0e: 05 61                	addi	sp, sp, 32
ffffffff80200f10: 82 80                	ret

ffffffff80200f12 _ZN4core3ptr13drop_in_place17h4f4a15964b0e7310E:
ffffffff80200f12: 01 11                	addi	sp, sp, -32
ffffffff80200f14: 06 ec                	sd	ra, 24(sp)
ffffffff80200f16: 2a e8                	sd	a0, 16(sp)
ffffffff80200f18: 2a e0                	sd	a0, 0(sp)
ffffffff80200f1a: 21 a0                	j	8
ffffffff80200f1c: e2 60                	ld	ra, 24(sp)
ffffffff80200f1e: 05 61                	addi	sp, sp, 32
ffffffff80200f20: 82 80                	ret
ffffffff80200f22: 02 65                	ld	a0, 0(sp)
ffffffff80200f24: 08 61                	ld	a0, 0(a0)
ffffffff80200f26: 97 40 00 00          	auipc	ra, 4
ffffffff80200f2a: e7 80 e0 49          	jalr	1182(ra)
ffffffff80200f2e: fd b7                	j	-18

ffffffff80200f30 _ZN4core3ptr13drop_in_place17h56669ecee83852afE:
ffffffff80200f30: 41 11                	addi	sp, sp, -16
ffffffff80200f32: 2a e4                	sd	a0, 8(sp)
ffffffff80200f34: 41 01                	addi	sp, sp, 16
ffffffff80200f36: 82 80                	ret

ffffffff80200f38 _ZN4core3ptr13drop_in_place17h5be7772d31a42f66E:
ffffffff80200f38: 01 11                	addi	sp, sp, -32
ffffffff80200f3a: 06 ec                	sd	ra, 24(sp)
ffffffff80200f3c: 2a e8                	sd	a0, 16(sp)
ffffffff80200f3e: 97 00 00 00          	auipc	ra, 0
ffffffff80200f42: e7 80 a0 15          	jalr	346(ra)
ffffffff80200f46: 09 a0                	j	2
ffffffff80200f48: e2 60                	ld	ra, 24(sp)
ffffffff80200f4a: 05 61                	addi	sp, sp, 32
ffffffff80200f4c: 82 80                	ret

ffffffff80200f4e _ZN4core3ptr13drop_in_place17h697b124a16addbe6E:
ffffffff80200f4e: 01 11                	addi	sp, sp, -32
ffffffff80200f50: 06 ec                	sd	ra, 24(sp)
ffffffff80200f52: 2a e8                	sd	a0, 16(sp)
ffffffff80200f54: 97 00 00 00          	auipc	ra, 0
ffffffff80200f58: e7 80 20 23          	jalr	562(ra)
ffffffff80200f5c: 09 a0                	j	2
ffffffff80200f5e: e2 60                	ld	ra, 24(sp)
ffffffff80200f60: 05 61                	addi	sp, sp, 32
ffffffff80200f62: 82 80                	ret

ffffffff80200f64 _ZN4core3ptr13drop_in_place17h783e32cb62d7894fE:
ffffffff80200f64: 41 11                	addi	sp, sp, -16
ffffffff80200f66: 2a e4                	sd	a0, 8(sp)
ffffffff80200f68: 41 01                	addi	sp, sp, 16
ffffffff80200f6a: 82 80                	ret

ffffffff80200f6c _ZN4core3ptr13drop_in_place17h787b3a3d9ee190e5E:
ffffffff80200f6c: 01 11                	addi	sp, sp, -32
ffffffff80200f6e: 06 ec                	sd	ra, 24(sp)
ffffffff80200f70: 2a e8                	sd	a0, 16(sp)
ffffffff80200f72: 97 00 00 00          	auipc	ra, 0
ffffffff80200f76: e7 80 60 fc          	jalr	-58(ra)
ffffffff80200f7a: 09 a0                	j	2
ffffffff80200f7c: e2 60                	ld	ra, 24(sp)
ffffffff80200f7e: 05 61                	addi	sp, sp, 32
ffffffff80200f80: 82 80                	ret

ffffffff80200f82 _ZN4core3ptr13drop_in_place17h7a58b9a7592583dfE:
ffffffff80200f82: 01 11                	addi	sp, sp, -32
ffffffff80200f84: 06 ec                	sd	ra, 24(sp)
ffffffff80200f86: 2a e8                	sd	a0, 16(sp)
ffffffff80200f88: 21 05                	addi	a0, a0, 8
ffffffff80200f8a: 97 00 00 00          	auipc	ra, 0
ffffffff80200f8e: e7 80 00 01          	jalr	16(ra)
ffffffff80200f92: 09 a0                	j	2
ffffffff80200f94: e2 60                	ld	ra, 24(sp)
ffffffff80200f96: 05 61                	addi	sp, sp, 32
ffffffff80200f98: 82 80                	ret

ffffffff80200f9a _ZN4core3ptr13drop_in_place17h7c4fc07fbeed3804E:
ffffffff80200f9a: 01 11                	addi	sp, sp, -32
ffffffff80200f9c: 06 ec                	sd	ra, 24(sp)
ffffffff80200f9e: 2a e8                	sd	a0, 16(sp)
ffffffff80200fa0: 97 00 00 00          	auipc	ra, 0
ffffffff80200fa4: e7 80 20 05          	jalr	82(ra)
ffffffff80200fa8: 09 a0                	j	2
ffffffff80200faa: e2 60                	ld	ra, 24(sp)
ffffffff80200fac: 05 61                	addi	sp, sp, 32
ffffffff80200fae: 82 80                	ret

ffffffff80200fb0 _ZN4core3ptr13drop_in_place17h8208ecd4503bef4cE:
ffffffff80200fb0: 01 11                	addi	sp, sp, -32
ffffffff80200fb2: 06 ec                	sd	ra, 24(sp)
ffffffff80200fb4: 2a e8                	sd	a0, 16(sp)
ffffffff80200fb6: 97 00 00 00          	auipc	ra, 0
ffffffff80200fba: e7 80 60 e3          	jalr	-458(ra)
ffffffff80200fbe: 09 a0                	j	2
ffffffff80200fc0: e2 60                	ld	ra, 24(sp)
ffffffff80200fc2: 05 61                	addi	sp, sp, 32
ffffffff80200fc4: 82 80                	ret

ffffffff80200fc6 _ZN4core3ptr13drop_in_place17h8d8635c2f55ace17E:
ffffffff80200fc6: 01 11                	addi	sp, sp, -32
ffffffff80200fc8: 06 ec                	sd	ra, 24(sp)
ffffffff80200fca: 2a e8                	sd	a0, 16(sp)
ffffffff80200fcc: 2a e0                	sd	a0, 0(sp)
ffffffff80200fce: 97 00 00 00          	auipc	ra, 0
ffffffff80200fd2: e7 80 e0 09          	jalr	158(ra)
ffffffff80200fd6: 21 a0                	j	8
ffffffff80200fd8: e2 60                	ld	ra, 24(sp)
ffffffff80200fda: 05 61                	addi	sp, sp, 32
ffffffff80200fdc: 82 80                	ret
ffffffff80200fde: 02 65                	ld	a0, 0(sp)
ffffffff80200fe0: 97 00 00 00          	auipc	ra, 0
ffffffff80200fe4: e7 80 e0 ef          	jalr	-258(ra)
ffffffff80200fe8: c5 bf                	j	-16

ffffffff80200fea _ZN4core3ptr13drop_in_place17hb58af97efab7d8c8E:
ffffffff80200fea: 41 11                	addi	sp, sp, -16
ffffffff80200fec: 2a e4                	sd	a0, 8(sp)
ffffffff80200fee: 41 01                	addi	sp, sp, 16
ffffffff80200ff0: 82 80                	ret

ffffffff80200ff2 _ZN4core3ptr13drop_in_place17hbb7b34f52646d897E:
ffffffff80200ff2: 01 11                	addi	sp, sp, -32
ffffffff80200ff4: 06 ec                	sd	ra, 24(sp)
ffffffff80200ff6: 2a e8                	sd	a0, 16(sp)
ffffffff80200ff8: 21 05                	addi	a0, a0, 8
ffffffff80200ffa: 97 00 00 00          	auipc	ra, 0
ffffffff80200ffe: e7 80 80 01          	jalr	24(ra)
ffffffff80201002: 09 a0                	j	2
ffffffff80201004: e2 60                	ld	ra, 24(sp)
ffffffff80201006: 05 61                	addi	sp, sp, 32
ffffffff80201008: 82 80                	ret

ffffffff8020100a _ZN4core3ptr13drop_in_place17hc899a37a83dc50c3E:
ffffffff8020100a: 41 11                	addi	sp, sp, -16
ffffffff8020100c: 2a e4                	sd	a0, 8(sp)
ffffffff8020100e: 41 01                	addi	sp, sp, 16
ffffffff80201010: 82 80                	ret

ffffffff80201012 _ZN4core3ptr13drop_in_place17hd2b8b87f2ac8f9b4E:
ffffffff80201012: 01 11                	addi	sp, sp, -32
ffffffff80201014: 06 ec                	sd	ra, 24(sp)
ffffffff80201016: 2a e8                	sd	a0, 16(sp)
ffffffff80201018: 97 00 00 00          	auipc	ra, 0
ffffffff8020101c: e7 80 e0 fa          	jalr	-82(ra)
ffffffff80201020: 09 a0                	j	2
ffffffff80201022: e2 60                	ld	ra, 24(sp)
ffffffff80201024: 05 61                	addi	sp, sp, 32
ffffffff80201026: 82 80                	ret

ffffffff80201028 _ZN4core3ptr13drop_in_place17hdfc5dfcc41cd2069E:
ffffffff80201028: 01 11                	addi	sp, sp, -32
ffffffff8020102a: 06 ec                	sd	ra, 24(sp)
ffffffff8020102c: 2a e8                	sd	a0, 16(sp)
ffffffff8020102e: 0c 61                	ld	a1, 0(a0)
ffffffff80201030: 01 46                	mv	a2, zero
ffffffff80201032: 2a e0                	sd	a0, 0(sp)
ffffffff80201034: 63 96 c5 00          	bne	a1, a2, 12
ffffffff80201038: 09 a0                	j	2
ffffffff8020103a: e2 60                	ld	ra, 24(sp)
ffffffff8020103c: 05 61                	addi	sp, sp, 32
ffffffff8020103e: 82 80                	ret
ffffffff80201040: 02 65                	ld	a0, 0(sp)
ffffffff80201042: 21 05                	addi	a0, a0, 8
ffffffff80201044: 97 00 00 00          	auipc	ra, 0
ffffffff80201048: e7 80 e0 f3          	jalr	-194(ra)
ffffffff8020104c: fd b7                	j	-18

ffffffff8020104e _ZN4core3ptr13drop_in_place17he94ecd191a10e73bE:
ffffffff8020104e: 41 11                	addi	sp, sp, -16
ffffffff80201050: 2a e4                	sd	a0, 8(sp)
ffffffff80201052: 41 01                	addi	sp, sp, 16
ffffffff80201054: 82 80                	ret

ffffffff80201056 _ZN4core3ptr13drop_in_place17hf3e183bf4a9483ffE:
ffffffff80201056: 01 11                	addi	sp, sp, -32
ffffffff80201058: 06 ec                	sd	ra, 24(sp)
ffffffff8020105a: 2a e8                	sd	a0, 16(sp)
ffffffff8020105c: 97 00 00 00          	auipc	ra, 0
ffffffff80201060: e7 80 e0 07          	jalr	126(ra)
ffffffff80201064: 09 a0                	j	2
ffffffff80201066: e2 60                	ld	ra, 24(sp)
ffffffff80201068: 05 61                	addi	sp, sp, 32
ffffffff8020106a: 82 80                	ret

ffffffff8020106c _ZN66_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc2cc0b8a004562ddE:
;     fn drop(&mut self) {
ffffffff8020106c: 01 11                	addi	sp, sp, -32
ffffffff8020106e: 06 ec                	sd	ra, 24(sp)
ffffffff80201070: 2a e8                	sd	a0, 16(sp)
;             ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
ffffffff80201072: 2a e4                	sd	a0, 8(sp)
ffffffff80201074: 97 50 00 00          	auipc	ra, 5
ffffffff80201078: e7 80 60 28          	jalr	646(ra)
ffffffff8020107c: 2a e0                	sd	a0, 0(sp)
ffffffff8020107e: 09 a0                	j	2
ffffffff80201080: 22 65                	ld	a0, 8(sp)
ffffffff80201082: 0c 69                	ld	a1, 16(a0)
ffffffff80201084: 02 65                	ld	a0, 0(sp)
ffffffff80201086: 97 10 00 00          	auipc	ra, 1
ffffffff8020108a: e7 80 20 d8          	jalr	-638(ra)
ffffffff8020108e: 09 a0                	j	2
ffffffff80201090: 09 a0                	j	2
;     }
ffffffff80201092: e2 60                	ld	ra, 24(sp)
ffffffff80201094: 05 61                	addi	sp, sp, 32
ffffffff80201096: 82 80                	ret

ffffffff80201098 _ZN71_$LT$alloc..vec..IntoIter$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h85c8a70e657041b5E:
;     fn drop(&mut self) {
ffffffff80201098: 01 11                	addi	sp, sp, -32
ffffffff8020109a: 06 ec                	sd	ra, 24(sp)
ffffffff8020109c: 2a e8                	sd	a0, 16(sp)
;         let guard = DropGuard(self);
ffffffff8020109e: 2a e4                	sd	a0, 8(sp)
;             ptr::drop_in_place(guard.0.as_raw_mut_slice());
ffffffff802010a0: 97 20 00 00          	auipc	ra, 2
ffffffff802010a4: e7 80 60 e9          	jalr	-362(ra)
ffffffff802010a8: 09 a0                	j	2
ffffffff802010aa: 09 a0                	j	2
ffffffff802010ac: 28 00                	addi	a0, sp, 8
;     }
ffffffff802010ae: 97 00 00 00          	auipc	ra, 0
ffffffff802010b2: e7 80 20 f0          	jalr	-254(ra)
ffffffff802010b6: 09 a0                	j	2
ffffffff802010b8: e2 60                	ld	ra, 24(sp)
ffffffff802010ba: 05 61                	addi	sp, sp, 32
ffffffff802010bc: 82 80                	ret

ffffffff802010be _ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4edb6277457654d9E:
;     fn drop(&mut self)
ffffffff802010be: 41 11                	addi	sp, sp, -16
ffffffff802010c0: 06 e4                	sd	ra, 8(sp)
ffffffff802010c2: 2a e0                	sd	a0, 0(sp)
;         self.lock.store(false, Ordering::Release);
ffffffff802010c4: 08 61                	ld	a0, 0(a0)
ffffffff802010c6: 81 45                	mv	a1, zero
ffffffff802010c8: 05 46                	addi	a2, zero, 1
ffffffff802010ca: 97 20 00 00          	auipc	ra, 2
ffffffff802010ce: e7 80 a0 23          	jalr	570(ra)
ffffffff802010d2: 09 a0                	j	2
;     }
ffffffff802010d4: a2 60                	ld	ra, 8(sp)
ffffffff802010d6: 41 01                	addi	sp, sp, 16
ffffffff802010d8: 82 80                	ret

ffffffff802010da _ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hce02ace71106e1b4E:
;     fn drop(&mut self) {
ffffffff802010da: 59 71                	addi	sp, sp, -112
ffffffff802010dc: 86 f4                	sd	ra, 104(sp)
ffffffff802010de: aa e4                	sd	a0, 72(sp)
ffffffff802010e0: 0c 18                	addi	a1, sp, 48
;         if let Some((ptr, layout)) = self.current_memory() {
ffffffff802010e2: 2a f0                	sd	a0, 32(sp)
ffffffff802010e4: 2e 85                	add	a0, zero, a1
ffffffff802010e6: 82 75                	ld	a1, 32(sp)
ffffffff802010e8: 97 00 00 00          	auipc	ra, 0
ffffffff802010ec: e7 80 c0 20          	jalr	524(ra)
ffffffff802010f0: 09 a0                	j	2
ffffffff802010f2: 42 75                	ld	a0, 48(sp)
ffffffff802010f4: 81 45                	mv	a1, zero
ffffffff802010f6: 63 14 b5 00          	bne	a0, a1, 8
ffffffff802010fa: 09 a0                	j	2
ffffffff802010fc: 3d a0                	j	46
ffffffff802010fe: 42 75                	ld	a0, 48(sp)
ffffffff80201100: aa e8                	sd	a0, 80(sp)
ffffffff80201102: e2 75                	ld	a1, 56(sp)
ffffffff80201104: 06 66                	ld	a2, 64(sp)
ffffffff80201106: ae ec                	sd	a1, 88(sp)
ffffffff80201108: b2 f0                	sd	a2, 96(sp)
;             unsafe { self.alloc.dealloc(ptr, layout) }
ffffffff8020110a: 82 76                	ld	a3, 32(sp)
ffffffff8020110c: 2a ec                	sd	a0, 24(sp)
ffffffff8020110e: 36 85                	add	a0, zero, a3
ffffffff80201110: 62 67                	ld	a4, 24(sp)
ffffffff80201112: 2e e8                	sd	a1, 16(sp)
ffffffff80201114: ba 85                	add	a1, zero, a4
ffffffff80201116: c2 67                	ld	a5, 16(sp)
ffffffff80201118: 32 e4                	sd	a2, 8(sp)
ffffffff8020111a: 3e 86                	add	a2, zero, a5
ffffffff8020111c: a2 66                	ld	a3, 8(sp)
ffffffff8020111e: 97 10 00 00          	auipc	ra, 1
ffffffff80201122: e7 80 20 24          	jalr	578(ra)
ffffffff80201126: 09 a0                	j	2
;         if let Some((ptr, layout)) = self.current_memory() {
ffffffff80201128: 09 a0                	j	2
;     }
ffffffff8020112a: a6 70                	ld	ra, 104(sp)
ffffffff8020112c: 65 61                	addi	sp, sp, 112
ffffffff8020112e: 82 80                	ret

ffffffff80201130 _ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hef3a92c6d8fede59E:
;     fn drop(&mut self) {
ffffffff80201130: 59 71                	addi	sp, sp, -112
ffffffff80201132: 86 f4                	sd	ra, 104(sp)
ffffffff80201134: aa e4                	sd	a0, 72(sp)
ffffffff80201136: 0c 18                	addi	a1, sp, 48
;         if let Some((ptr, layout)) = self.current_memory() {
ffffffff80201138: 2a f0                	sd	a0, 32(sp)
ffffffff8020113a: 2e 85                	add	a0, zero, a1
ffffffff8020113c: 82 75                	ld	a1, 32(sp)
ffffffff8020113e: 97 40 00 00          	auipc	ra, 4
ffffffff80201142: e7 80 c0 61          	jalr	1564(ra)
ffffffff80201146: 09 a0                	j	2
ffffffff80201148: 42 75                	ld	a0, 48(sp)
ffffffff8020114a: 81 45                	mv	a1, zero
ffffffff8020114c: 63 14 b5 00          	bne	a0, a1, 8
ffffffff80201150: 09 a0                	j	2
ffffffff80201152: 3d a0                	j	46
ffffffff80201154: 42 75                	ld	a0, 48(sp)
ffffffff80201156: aa e8                	sd	a0, 80(sp)
ffffffff80201158: e2 75                	ld	a1, 56(sp)
ffffffff8020115a: 06 66                	ld	a2, 64(sp)
ffffffff8020115c: ae ec                	sd	a1, 88(sp)
ffffffff8020115e: b2 f0                	sd	a2, 96(sp)
;             unsafe { self.alloc.dealloc(ptr, layout) }
ffffffff80201160: 82 76                	ld	a3, 32(sp)
ffffffff80201162: 2a ec                	sd	a0, 24(sp)
ffffffff80201164: 36 85                	add	a0, zero, a3
ffffffff80201166: 62 67                	ld	a4, 24(sp)
ffffffff80201168: 2e e8                	sd	a1, 16(sp)
ffffffff8020116a: ba 85                	add	a1, zero, a4
ffffffff8020116c: c2 67                	ld	a5, 16(sp)
ffffffff8020116e: 32 e4                	sd	a2, 8(sp)
ffffffff80201170: 3e 86                	add	a2, zero, a5
ffffffff80201172: a2 66                	ld	a3, 8(sp)
ffffffff80201174: 97 10 00 00          	auipc	ra, 1
ffffffff80201178: e7 80 c0 1e          	jalr	492(ra)
ffffffff8020117c: 09 a0                	j	2
;         if let Some((ptr, layout)) = self.current_memory() {
ffffffff8020117e: 09 a0                	j	2
;     }
ffffffff80201180: a6 70                	ld	ra, 104(sp)
ffffffff80201182: 65 61                	addi	sp, sp, 112
ffffffff80201184: 82 80                	ret

ffffffff80201186 _ZN88_$LT$os..memory..frame..frame_tracker..FrameTracker$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1544736939a9ffd0E:
;     fn drop(&mut self) {
ffffffff80201186: 39 71                	addi	sp, sp, -64
ffffffff80201188: 06 fc                	sd	ra, 56(sp)
ffffffff8020118a: 2a f8                	sd	a0, 48(sp)

ffffffff8020118c .LBB32_6:
;         FRAME_ALLOCATOR.lock().dealloc(self);
ffffffff8020118c: 97 c5 00 00          	auipc	a1, 12
ffffffff80201190: 93 85 45 20          	addi	a1, a1, 516
ffffffff80201194: 2a ec                	sd	a0, 24(sp)
ffffffff80201196: 2e 85                	add	a0, zero, a1
ffffffff80201198: 97 00 00 00          	auipc	ra, 0
ffffffff8020119c: e7 80 80 77          	jalr	1912(ra)
ffffffff802011a0: 2a e8                	sd	a0, 16(sp)
ffffffff802011a2: 09 a0                	j	2
ffffffff802011a4: 42 65                	ld	a0, 16(sp)
ffffffff802011a6: 97 10 00 00          	auipc	ra, 1
ffffffff802011aa: e7 80 00 b5          	jalr	-1200(ra)
ffffffff802011ae: 2a f0                	sd	a0, 32(sp)
ffffffff802011b0: 2e f4                	sd	a1, 40(sp)
ffffffff802011b2: 09 a0                	j	2
ffffffff802011b4: 08 10                	addi	a0, sp, 32
ffffffff802011b6: 97 10 00 00          	auipc	ra, 1
ffffffff802011ba: e7 80 80 b7          	jalr	-1160(ra)
ffffffff802011be: 2a e4                	sd	a0, 8(sp)
ffffffff802011c0: 09 a0                	j	2
ffffffff802011c2: 22 65                	ld	a0, 8(sp)
ffffffff802011c4: e2 65                	ld	a1, 24(sp)
ffffffff802011c6: 97 30 00 00          	auipc	ra, 3
ffffffff802011ca: e7 80 80 c9          	jalr	-872(ra)
ffffffff802011ce: 09 a0                	j	2
ffffffff802011d0: 08 10                	addi	a0, sp, 32
ffffffff802011d2: 97 00 00 00          	auipc	ra, 0
ffffffff802011d6: e7 80 60 cf          	jalr	-778(ra)
ffffffff802011da: 09 a0                	j	2
;     }
ffffffff802011dc: e2 70                	ld	ra, 56(sp)
ffffffff802011de: 21 61                	addi	sp, sp, 64
ffffffff802011e0: 82 80                	ret

ffffffff802011e2 _ZN5alloc7raw_vec15RawVec$LT$T$GT$14from_raw_parts17hec8098f8d9eb9405E:
;     pub unsafe fn from_raw_parts(ptr: *mut T, capacity: usize) -> Self {
ffffffff802011e2: 79 71                	addi	sp, sp, -48
ffffffff802011e4: 06 f4                	sd	ra, 40(sp)
ffffffff802011e6: 2a ec                	sd	a0, 24(sp)
ffffffff802011e8: 2e f0                	sd	a1, 32(sp)
;         unsafe { Self::from_raw_parts_in(ptr, capacity, Global) }
ffffffff802011ea: 97 00 00 00          	auipc	ra, 0
ffffffff802011ee: e7 80 a0 38          	jalr	906(ra)
ffffffff802011f2: 2a e8                	sd	a0, 16(sp)
ffffffff802011f4: 2e e4                	sd	a1, 8(sp)
ffffffff802011f6: 09 a0                	j	2
;     }
ffffffff802011f8: 42 65                	ld	a0, 16(sp)
ffffffff802011fa: a2 65                	ld	a1, 8(sp)
ffffffff802011fc: a2 70                	ld	ra, 40(sp)
ffffffff802011fe: 45 61                	addi	sp, sp, 48
ffffffff80201200: 82 80                	ret

ffffffff80201202 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$10set_memory17h64bf930fcea56086E:
;     fn set_memory(&mut self, memory: MemoryBlock) {
ffffffff80201202: 5d 71                	addi	sp, sp, -80
ffffffff80201204: 86 e4                	sd	ra, 72(sp)
ffffffff80201206: 2a f8                	sd	a0, 48(sp)
ffffffff80201208: 2e fc                	sd	a1, 56(sp)
ffffffff8020120a: b2 e0                	sd	a2, 64(sp)
;         self.ptr = unsafe { Unique::new_unchecked(memory.ptr.cast().as_ptr()) };
ffffffff8020120c: 2a f4                	sd	a0, 40(sp)
ffffffff8020120e: 2e 85                	add	a0, zero, a1
ffffffff80201210: 32 f0                	sd	a2, 32(sp)
ffffffff80201212: 97 10 00 00          	auipc	ra, 1
ffffffff80201216: e7 80 60 b2          	jalr	-1242(ra)
ffffffff8020121a: 2a ec                	sd	a0, 24(sp)
ffffffff8020121c: 09 a0                	j	2
ffffffff8020121e: 62 65                	ld	a0, 24(sp)
ffffffff80201220: 97 80 00 00          	auipc	ra, 8
ffffffff80201224: e7 80 20 ce          	jalr	-798(ra)
ffffffff80201228: 2a e8                	sd	a0, 16(sp)
ffffffff8020122a: 09 a0                	j	2
ffffffff8020122c: 42 65                	ld	a0, 16(sp)
ffffffff8020122e: 97 30 00 00          	auipc	ra, 3
ffffffff80201232: e7 80 40 98          	jalr	-1660(ra)
ffffffff80201236: 2a e4                	sd	a0, 8(sp)
ffffffff80201238: 09 a0                	j	2
ffffffff8020123a: 22 65                	ld	a0, 8(sp)
ffffffff8020123c: a2 75                	ld	a1, 40(sp)
ffffffff8020123e: 88 e1                	sd	a0, 0(a1)
;         self.cap = Self::capacity_from_bytes(memory.size);
ffffffff80201240: 02 75                	ld	a0, 32(sp)
ffffffff80201242: 97 00 00 00          	auipc	ra, 0
ffffffff80201246: e7 80 60 35          	jalr	854(ra)
ffffffff8020124a: 2a e0                	sd	a0, 0(sp)
ffffffff8020124c: 09 a0                	j	2
ffffffff8020124e: 02 65                	ld	a0, 0(sp)
ffffffff80201250: a2 75                	ld	a1, 40(sp)
ffffffff80201252: 88 e5                	sd	a0, 8(a1)
;     }
ffffffff80201254: a6 60                	ld	ra, 72(sp)
ffffffff80201256: 61 61                	addi	sp, sp, 80
ffffffff80201258: 82 80                	ret

ffffffff8020125a _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11try_reserve17hfbdbc5ab486b763fE:
;     pub fn try_reserve(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
ffffffff8020125a: 5d 71                	addi	sp, sp, -80
ffffffff8020125c: 86 e4                	sd	ra, 72(sp)
ffffffff8020125e: 2e f8                	sd	a1, 48(sp)
ffffffff80201260: 32 fc                	sd	a2, 56(sp)
ffffffff80201262: b6 e0                	sd	a3, 64(sp)
;         if self.needs_to_grow(len, additional) {
ffffffff80201264: 2a f4                	sd	a0, 40(sp)
ffffffff80201266: 2e 85                	add	a0, zero, a1
ffffffff80201268: 2e f0                	sd	a1, 32(sp)
ffffffff8020126a: b2 85                	add	a1, zero, a2
ffffffff8020126c: 32 ec                	sd	a2, 24(sp)
ffffffff8020126e: 36 86                	add	a2, zero, a3
ffffffff80201270: 36 e8                	sd	a3, 16(sp)
ffffffff80201272: 97 00 00 00          	auipc	ra, 0
ffffffff80201276: e7 80 40 03          	jalr	52(ra)
ffffffff8020127a: 2a e4                	sd	a0, 8(sp)
ffffffff8020127c: 09 a0                	j	2
ffffffff8020127e: 22 65                	ld	a0, 8(sp)
ffffffff80201280: 11 e5                	bnez	a0, 12
ffffffff80201282: 09 a0                	j	2
ffffffff80201284: 01 45                	mv	a0, zero
;             Ok(())
ffffffff80201286: a2 75                	ld	a1, 40(sp)
ffffffff80201288: 88 e1                	sd	a0, 0(a1)
;         if self.needs_to_grow(len, additional) {
ffffffff8020128a: 19 a8                	j	22
;             self.grow_amortized(len, additional)
ffffffff8020128c: 22 75                	ld	a0, 40(sp)
ffffffff8020128e: 82 75                	ld	a1, 32(sp)
ffffffff80201290: 62 66                	ld	a2, 24(sp)
ffffffff80201292: c2 66                	ld	a3, 16(sp)
ffffffff80201294: 97 00 00 00          	auipc	ra, 0
ffffffff80201298: e7 80 c0 11          	jalr	284(ra)
ffffffff8020129c: 09 a0                	j	2
;         if self.needs_to_grow(len, additional) {
ffffffff8020129e: 09 a0                	j	2
;     }
ffffffff802012a0: a6 60                	ld	ra, 72(sp)
ffffffff802012a2: 61 61                	addi	sp, sp, 80
ffffffff802012a4: 82 80                	ret

ffffffff802012a6 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17h67278c756bf2af0fE:
;     fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
ffffffff802012a6: 1d 71                	addi	sp, sp, -96
ffffffff802012a8: 86 ec                	sd	ra, 88(sp)
ffffffff802012aa: 2a f4                	sd	a0, 40(sp)
ffffffff802012ac: 2e f8                	sd	a1, 48(sp)
ffffffff802012ae: 32 fc                	sd	a2, 56(sp)
ffffffff802012b0: aa e4                	sd	a0, 72(sp)
ffffffff802012b2: a1 46                	addi	a3, zero, 8
;     intrinsics::size_of::<T>()
ffffffff802012b4: b6 e8                	sd	a3, 80(sp)
ffffffff802012b6: 81 46                	mv	a3, zero
;         if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
ffffffff802012b8: 32 f0                	sd	a2, 32(sp)
ffffffff802012ba: 2e ec                	sd	a1, 24(sp)
ffffffff802012bc: 2a e8                	sd	a0, 16(sp)
ffffffff802012be: 91 e6                	bnez	a3, 12
ffffffff802012c0: 09 a0                	j	2
ffffffff802012c2: 42 65                	ld	a0, 16(sp)
ffffffff802012c4: 0c 65                	ld	a1, 8(a0)
ffffffff802012c6: ae e0                	sd	a1, 64(sp)
ffffffff802012c8: 21 a0                	j	8
ffffffff802012ca: 7d 55                	addi	a0, zero, -1
ffffffff802012cc: aa e0                	sd	a0, 64(sp)
ffffffff802012ce: 09 a0                	j	2
;     }
ffffffff802012d0: 06 65                	ld	a0, 64(sp)
;         additional > self.capacity().wrapping_sub(len)
ffffffff802012d2: 2a e4                	sd	a0, 8(sp)
ffffffff802012d4: 09 a0                	j	2
ffffffff802012d6: 22 65                	ld	a0, 8(sp)
ffffffff802012d8: e2 65                	ld	a1, 24(sp)
ffffffff802012da: 97 10 00 00          	auipc	ra, 1
ffffffff802012de: e7 80 00 ce          	jalr	-800(ra)
ffffffff802012e2: 2a e0                	sd	a0, 0(sp)
ffffffff802012e4: 09 a0                	j	2
ffffffff802012e6: 02 65                	ld	a0, 0(sp)
ffffffff802012e8: 82 75                	ld	a1, 32(sp)
ffffffff802012ea: 33 35 b5 00          	sltu	a0, a0, a1
;     }
ffffffff802012ee: e6 60                	ld	ra, 88(sp)
ffffffff802012f0: 25 61                	addi	sp, sp, 96
ffffffff802012f2: 82 80                	ret

ffffffff802012f4 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h2bcdf706ba73f09aE:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
ffffffff802012f4: 71 71                	addi	sp, sp, -176
ffffffff802012f6: 06 f5                	sd	ra, 168(sp)
ffffffff802012f8: ae f4                	sd	a1, 104(sp)
ffffffff802012fa: 21 46                	addi	a2, zero, 8
;     intrinsics::size_of::<T>()
ffffffff802012fc: 32 e9                	sd	a2, 144(sp)
;         if mem::size_of::<T>() == 0 || self.cap == 0 {
ffffffff802012fe: ae e0                	sd	a1, 64(sp)
ffffffff80201300: 2a fc                	sd	a0, 56(sp)
ffffffff80201302: 32 f8                	sd	a2, 48(sp)
ffffffff80201304: 25 a0                	j	40
ffffffff80201306: 05 45                	addi	a0, zero, 1
ffffffff80201308: a3 07 a1 04          	sb	a0, 79(sp)
ffffffff8020130c: 19 a8                	j	22
ffffffff8020130e: 01 45                	mv	a0, zero
ffffffff80201310: a3 07 a1 04          	sb	a0, 79(sp)
ffffffff80201314: 39 a0                	j	14
ffffffff80201316: 06 65                	ld	a0, 64(sp)
ffffffff80201318: 0c 65                	ld	a1, 8(a0)
ffffffff8020131a: 01 46                	mv	a2, zero
ffffffff8020131c: e3 85 c5 fe          	beq	a1, a2, -22
ffffffff80201320: fd b7                	j	-18
ffffffff80201322: 03 45 f1 04          	lbu	a0, 79(sp)
ffffffff80201326: 05 89                	andi	a0, a0, 1
ffffffff80201328: 01 ed                	bnez	a0, 24
ffffffff8020132a: 31 a0                	j	12
ffffffff8020132c: 01 45                	mv	a0, zero
ffffffff8020132e: c2 75                	ld	a1, 48(sp)
ffffffff80201330: e3 8b a5 fc          	beq	a1, a0, -42
ffffffff80201334: cd b7                	j	-30
ffffffff80201336: 21 45                	addi	a0, zero, 8
;     intrinsics::min_align_of::<T>()
ffffffff80201338: 2a f1                	sd	a0, 160(sp)
;                 let align = mem::align_of::<T>();
ffffffff8020133a: aa f8                	sd	a0, 112(sp)
ffffffff8020133c: 2a f4                	sd	a0, 40(sp)
ffffffff8020133e: 29 a0                	j	10
ffffffff80201340: 01 45                	mv	a0, zero
;             None
ffffffff80201342: e2 75                	ld	a1, 56(sp)
ffffffff80201344: 88 e1                	sd	a0, 0(a1)
;         if mem::size_of::<T>() == 0 || self.cap == 0 {
ffffffff80201346: 95 a0                	j	100
ffffffff80201348: 21 45                	addi	a0, zero, 8
;     intrinsics::size_of::<T>()
ffffffff8020134a: 2a ed                	sd	a0, 152(sp)
;                 let size = mem::size_of::<T>() * self.cap;
ffffffff8020134c: 2a f0                	sd	a0, 32(sp)
ffffffff8020134e: 09 a0                	j	2
ffffffff80201350: 06 65                	ld	a0, 64(sp)
ffffffff80201352: 0c 65                	ld	a1, 8(a0)
ffffffff80201354: 02 76                	ld	a2, 32(sp)
ffffffff80201356: b3 05 b6 02          	<unknown>
ffffffff8020135a: ae fc                	sd	a1, 120(sp)
;                 let layout = Layout::from_size_align_unchecked(size, align);
ffffffff8020135c: 2e 85                	add	a0, zero, a1
ffffffff8020135e: a2 75                	ld	a1, 40(sp)
ffffffff80201360: 97 00 00 00          	auipc	ra, 0
ffffffff80201364: e7 80 40 45          	jalr	1108(ra)
ffffffff80201368: 2a 86                	add	a2, zero, a0
ffffffff8020136a: ae 86                	add	a3, zero, a1
ffffffff8020136c: 2a e1                	sd	a0, 128(sp)
ffffffff8020136e: 2e e5                	sd	a1, 136(sp)
ffffffff80201370: 32 ec                	sd	a2, 24(sp)
ffffffff80201372: 36 e8                	sd	a3, 16(sp)
ffffffff80201374: 09 a0                	j	2
;                 Some((self.ptr.cast().into(), layout))
ffffffff80201376: 06 65                	ld	a0, 64(sp)
ffffffff80201378: 08 61                	ld	a0, 0(a0)
ffffffff8020137a: 97 30 00 00          	auipc	ra, 3
ffffffff8020137e: e7 80 20 84          	jalr	-1982(ra)
ffffffff80201382: 2a e4                	sd	a0, 8(sp)
ffffffff80201384: 09 a0                	j	2
ffffffff80201386: 22 65                	ld	a0, 8(sp)
ffffffff80201388: 97 60 00 00          	auipc	ra, 6
ffffffff8020138c: e7 80 20 a0          	jalr	-1534(ra)
ffffffff80201390: 2a e0                	sd	a0, 0(sp)
ffffffff80201392: 09 a0                	j	2
ffffffff80201394: 02 65                	ld	a0, 0(sp)
ffffffff80201396: aa e8                	sd	a0, 80(sp)
ffffffff80201398: e2 65                	ld	a1, 24(sp)
ffffffff8020139a: ae ec                	sd	a1, 88(sp)
ffffffff8020139c: 42 66                	ld	a2, 16(sp)
ffffffff8020139e: b2 f0                	sd	a2, 96(sp)
ffffffff802013a0: e2 76                	ld	a3, 56(sp)
ffffffff802013a2: 90 ea                	sd	a2, 16(a3)
ffffffff802013a4: 8c e6                	sd	a1, 8(a3)
ffffffff802013a6: 88 e2                	sd	a0, 0(a3)
;         if mem::size_of::<T>() == 0 || self.cap == 0 {
ffffffff802013a8: 09 a0                	j	2
;     }
ffffffff802013aa: aa 70                	ld	ra, 168(sp)
ffffffff802013ac: 4d 61                	addi	sp, sp, 176
ffffffff802013ae: 82 80                	ret

ffffffff802013b0 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6dc8795e57712de2E:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
ffffffff802013b0: 41 71                	addi	sp, sp, -496
ffffffff802013b2: 86 f7                	sd	ra, 488(sp)
ffffffff802013b4: ae e6                	sd	a1, 328(sp)
ffffffff802013b6: b2 ea                	sd	a2, 336(sp)
ffffffff802013b8: b6 ee                	sd	a3, 344(sp)
ffffffff802013ba: 21 47                	addi	a4, zero, 8
;     intrinsics::size_of::<T>()
ffffffff802013bc: ba ef                	sd	a4, 472(sp)
;         if mem::size_of::<T>() == 0 {
ffffffff802013be: 36 f1                	sd	a3, 160(sp)
ffffffff802013c0: 32 ed                	sd	a2, 152(sp)
ffffffff802013c2: 2e e9                	sd	a1, 144(sp)
ffffffff802013c4: 2a e5                	sd	a0, 136(sp)
ffffffff802013c6: 3a e1                	sd	a4, 128(sp)
ffffffff802013c8: 09 a0                	j	2
ffffffff802013ca: 01 45                	mv	a0, zero
ffffffff802013cc: 8a 65                	ld	a1, 128(sp)
ffffffff802013ce: 63 8c a5 00          	beq	a1, a0, 24
ffffffff802013d2: 09 a0                	j	2
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
ffffffff802013d4: 6a 65                	ld	a0, 152(sp)
ffffffff802013d6: 8a 75                	ld	a1, 160(sp)
ffffffff802013d8: 97 10 00 00          	auipc	ra, 1
ffffffff802013dc: e7 80 a0 b4          	jalr	-1206(ra)
ffffffff802013e0: aa fc                	sd	a0, 120(sp)
ffffffff802013e2: ae f8                	sd	a1, 112(sp)
ffffffff802013e4: 29 a8                	j	26
ffffffff802013e6: 01 45                	mv	a0, zero
;             return Err(CapacityOverflow);
ffffffff802013e8: 2a f9                	sd	a0, 176(sp)
ffffffff802013ea: aa 75                	ld	a1, 168(sp)
ffffffff802013ec: 2a 66                	ld	a2, 136(sp)
ffffffff802013ee: 0c e6                	sd	a1, 8(a2)
ffffffff802013f0: 08 ea                	sd	a0, 16(a2)
ffffffff802013f2: 05 45                	addi	a0, zero, 1
ffffffff802013f4: 08 e2                	sd	a0, 0(a2)
ffffffff802013f6: 09 a0                	j	2
;     }
ffffffff802013f8: be 70                	ld	ra, 488(sp)
ffffffff802013fa: 7d 61                	addi	sp, sp, 496
ffffffff802013fc: 82 80                	ret
ffffffff802013fe: 01 45                	mv	a0, zero
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
ffffffff80201400: aa f9                	sd	a0, 240(sp)
ffffffff80201402: ae 76                	ld	a3, 232(sp)
ffffffff80201404: 8c 09                	addi	a1, sp, 208
ffffffff80201406: aa f4                	sd	a0, 104(sp)
ffffffff80201408: 2e 85                	add	a0, zero, a1
ffffffff8020140a: e6 75                	ld	a1, 120(sp)
ffffffff8020140c: 46 76                	ld	a2, 112(sp)
ffffffff8020140e: 26 77                	ld	a4, 104(sp)
ffffffff80201410: 97 50 00 00          	auipc	ra, 5
ffffffff80201414: e7 80 00 2a          	jalr	672(ra)
ffffffff80201418: 09 a0                	j	2
ffffffff8020141a: 28 19                	addi	a0, sp, 184
ffffffff8020141c: 8c 09                	addi	a1, sp, 208
ffffffff8020141e: 97 60 00 00          	auipc	ra, 6
ffffffff80201422: e7 80 e0 e5          	jalr	-418(ra)
ffffffff80201426: 09 a0                	j	2
ffffffff80201428: 6a 75                	ld	a0, 184(sp)
ffffffff8020142a: 81 45                	mv	a1, zero
ffffffff8020142c: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80201430: 09 a0                	j	2
ffffffff80201432: 1d a0                	j	38
ffffffff80201434: 0e 65                	ld	a0, 192(sp)
ffffffff80201436: aa fa                	sd	a0, 368(sp)
ffffffff80201438: aa fe                	sd	a0, 376(sp)
;         let cap = cmp::max(self.cap * 2, required_cap);
ffffffff8020143a: ca 65                	ld	a1, 144(sp)
ffffffff8020143c: 90 65                	ld	a2, 8(a1)
ffffffff8020143e: 06 06                	slli	a2, a2, 1
ffffffff80201440: aa f0                	sd	a0, 96(sp)
ffffffff80201442: 32 85                	add	a0, zero, a2
ffffffff80201444: 86 75                	ld	a1, 96(sp)
ffffffff80201446: 97 50 00 00          	auipc	ra, 5
ffffffff8020144a: e7 80 00 da          	jalr	-608(ra)
ffffffff8020144e: aa 85                	add	a1, zero, a0
ffffffff80201450: 2a e3                	sd	a0, 384(sp)
ffffffff80201452: ae ec                	sd	a1, 88(sp)
ffffffff80201454: 3d a0                	j	46
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
ffffffff80201456: 00 00                	unimp	
ffffffff80201458: 0e 65                	ld	a0, 192(sp)
ffffffff8020145a: ae 65                	ld	a1, 200(sp)
ffffffff8020145c: aa f2                	sd	a0, 352(sp)
ffffffff8020145e: ae f6                	sd	a1, 360(sp)
ffffffff80201460: 97 50 00 00          	auipc	ra, 5
ffffffff80201464: e7 80 40 2b          	jalr	692(ra)
ffffffff80201468: aa e8                	sd	a0, 80(sp)
ffffffff8020146a: ae e4                	sd	a1, 72(sp)
ffffffff8020146c: 09 a0                	j	2
ffffffff8020146e: 2a 65                	ld	a0, 136(sp)
ffffffff80201470: c6 65                	ld	a1, 80(sp)
ffffffff80201472: 26 66                	ld	a2, 72(sp)
ffffffff80201474: 97 60 00 00          	auipc	ra, 6
ffffffff80201478: e7 80 80 dc          	jalr	-568(ra)
ffffffff8020147c: 09 a0                	j	2
ffffffff8020147e: 09 a0                	j	2
ffffffff80201480: a5 bf                	j	-136
ffffffff80201482: 21 45                	addi	a0, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80201484: aa f3                	sd	a0, 480(sp)
;         let elem_size = mem::size_of::<T>();
ffffffff80201486: 2a e7                	sd	a0, 392(sp)
ffffffff80201488: aa e0                	sd	a0, 64(sp)
ffffffff8020148a: 09 a0                	j	2
ffffffff8020148c: 05 45                	addi	a0, zero, 1
;         let min_non_zero_cap = if elem_size == 1 {
ffffffff8020148e: 86 65                	ld	a1, 64(sp)
ffffffff80201490: 63 89 a5 00          	beq	a1, a0, 18
ffffffff80201494: 09 a0                	j	2
ffffffff80201496: 13 05 10 40          	addi	a0, zero, 1025
;         } else if elem_size <= 1024 {
ffffffff8020149a: 86 65                	ld	a1, 64(sp)
ffffffff8020149c: 63 e9 a5 00          	bltu	a1, a0, 18
ffffffff802014a0: 21 a0                	j	8
ffffffff802014a2: 21 45                	addi	a0, zero, 8
;             8
ffffffff802014a4: aa fd                	sd	a0, 248(sp)
;         let min_non_zero_cap = if elem_size == 1 {
ffffffff802014a6: 01 a8                	j	16
ffffffff802014a8: 05 45                	addi	a0, zero, 1
;             1
ffffffff802014aa: aa fd                	sd	a0, 248(sp)
;         } else if elem_size <= 1024 {
ffffffff802014ac: 21 a0                	j	8
ffffffff802014ae: 11 45                	addi	a0, zero, 4
;             4
ffffffff802014b0: aa fd                	sd	a0, 248(sp)
;         } else if elem_size <= 1024 {
ffffffff802014b2: 09 a0                	j	2
;         let min_non_zero_cap = if elem_size == 1 {
ffffffff802014b4: 09 a0                	j	2
;         let cap = cmp::max(min_non_zero_cap, cap);
ffffffff802014b6: 6e 75                	ld	a0, 248(sp)
ffffffff802014b8: e6 65                	ld	a1, 88(sp)
ffffffff802014ba: 97 50 00 00          	auipc	ra, 5
ffffffff802014be: e7 80 c0 d2          	jalr	-724(ra)
ffffffff802014c2: aa 85                	add	a1, zero, a0
ffffffff802014c4: 2a eb                	sd	a0, 400(sp)
ffffffff802014c6: 2e fc                	sd	a1, 56(sp)
ffffffff802014c8: 09 a0                	j	2
;         let new_layout = Layout::array::<T>(cap);
ffffffff802014ca: 62 75                	ld	a0, 56(sp)
ffffffff802014cc: 97 30 00 00          	auipc	ra, 3
ffffffff802014d0: e7 80 a0 a2          	jalr	-1494(ra)
ffffffff802014d4: 2a 86                	add	a2, zero, a0
ffffffff802014d6: ae 86                	add	a3, zero, a1
ffffffff802014d8: 2a ef                	sd	a0, 408(sp)
ffffffff802014da: 2e f3                	sd	a1, 416(sp)
ffffffff802014dc: 32 f8                	sd	a2, 48(sp)
ffffffff802014de: 36 f4                	sd	a3, 40(sp)
ffffffff802014e0: 09 a0                	j	2
ffffffff802014e2: 08 1a                	addi	a0, sp, 304
;         let memory = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
ffffffff802014e4: ca 65                	ld	a1, 144(sp)
ffffffff802014e6: 97 00 00 00          	auipc	ra, 0
ffffffff802014ea: e7 80 e0 e0          	jalr	-498(ra)
ffffffff802014ee: 09 a0                	j	2
ffffffff802014f0: 28 0a                	addi	a0, sp, 280
ffffffff802014f2: 14 1a                	addi	a3, sp, 304
ffffffff802014f4: c2 75                	ld	a1, 48(sp)
ffffffff802014f6: 22 76                	ld	a2, 40(sp)
ffffffff802014f8: 4a 67                	ld	a4, 144(sp)
ffffffff802014fa: 97 40 00 00          	auipc	ra, 4
ffffffff802014fe: e7 80 a0 f6          	jalr	-150(ra)
ffffffff80201502: 09 a0                	j	2
ffffffff80201504: 08 02                	addi	a0, sp, 256
ffffffff80201506: 2c 0a                	addi	a1, sp, 280
ffffffff80201508: 97 60 00 00          	auipc	ra, 6
ffffffff8020150c: e7 80 20 d8          	jalr	-638(ra)
ffffffff80201510: 09 a0                	j	2
ffffffff80201512: 12 65                	ld	a0, 256(sp)
ffffffff80201514: 81 45                	mv	a1, zero
ffffffff80201516: 63 04 b5 00          	beq	a0, a1, 8
ffffffff8020151a: 09 a0                	j	2
ffffffff8020151c: 25 a0                	j	40
ffffffff8020151e: 32 65                	ld	a0, 264(sp)
ffffffff80201520: d2 65                	ld	a1, 272(sp)
ffffffff80201522: 2a ff                	sd	a0, 440(sp)
ffffffff80201524: ae e3                	sd	a1, 448(sp)
ffffffff80201526: aa e7                	sd	a0, 456(sp)
ffffffff80201528: ae eb                	sd	a1, 464(sp)
;         self.set_memory(memory);
ffffffff8020152a: 4a 66                	ld	a2, 144(sp)
ffffffff8020152c: 2a f0                	sd	a0, 32(sp)
ffffffff8020152e: 32 85                	add	a0, zero, a2
ffffffff80201530: 82 76                	ld	a3, 32(sp)
ffffffff80201532: 2e ec                	sd	a1, 24(sp)
ffffffff80201534: b6 85                	add	a1, zero, a3
ffffffff80201536: 62 66                	ld	a2, 24(sp)
ffffffff80201538: 97 00 00 00          	auipc	ra, 0
ffffffff8020153c: e7 80 a0 cc          	jalr	-822(ra)
ffffffff80201540: 35 a0                	j	44
;         let memory = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
ffffffff80201542: 00 00                	unimp	
ffffffff80201544: 32 65                	ld	a0, 264(sp)
ffffffff80201546: d2 65                	ld	a1, 272(sp)
ffffffff80201548: 2a f7                	sd	a0, 424(sp)
ffffffff8020154a: 2e fb                	sd	a1, 432(sp)
ffffffff8020154c: 97 50 00 00          	auipc	ra, 5
ffffffff80201550: e7 80 80 1c          	jalr	456(ra)
ffffffff80201554: 2a e8                	sd	a0, 16(sp)
ffffffff80201556: 2e e4                	sd	a1, 8(sp)
ffffffff80201558: 09 a0                	j	2
ffffffff8020155a: 2a 65                	ld	a0, 136(sp)
ffffffff8020155c: c2 65                	ld	a1, 16(sp)
ffffffff8020155e: 22 66                	ld	a2, 8(sp)
ffffffff80201560: 97 60 00 00          	auipc	ra, 6
ffffffff80201564: e7 80 c0 cd          	jalr	-804(ra)
ffffffff80201568: 09 a0                	j	2
ffffffff8020156a: 19 bf                	j	-234
ffffffff8020156c: 01 45                	mv	a0, zero
;         Ok(())
ffffffff8020156e: aa 65                	ld	a1, 136(sp)
ffffffff80201570: 88 e1                	sd	a0, 0(a1)
;     }
ffffffff80201572: 59 b5                	j	-378

ffffffff80201574 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17h2faa4aa088ba0427E:
;     pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, a: A) -> Self {
ffffffff80201574: 39 71                	addi	sp, sp, -64
ffffffff80201576: 06 fc                	sd	ra, 56(sp)
ffffffff80201578: 2a f0                	sd	a0, 32(sp)
ffffffff8020157a: 2e f4                	sd	a1, 40(sp)
;         Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap: capacity, alloc: a }
ffffffff8020157c: 2e e4                	sd	a1, 8(sp)
ffffffff8020157e: 97 20 00 00          	auipc	ra, 2
ffffffff80201582: e7 80 40 63          	jalr	1588(ra)
ffffffff80201586: 2a e0                	sd	a0, 0(sp)
ffffffff80201588: 09 a0                	j	2
ffffffff8020158a: 02 65                	ld	a0, 0(sp)
ffffffff8020158c: 2a e8                	sd	a0, 16(sp)
ffffffff8020158e: a2 65                	ld	a1, 8(sp)
ffffffff80201590: 2e ec                	sd	a1, 24(sp)
;     }
ffffffff80201592: e2 70                	ld	ra, 56(sp)
ffffffff80201594: 21 61                	addi	sp, sp, 64
ffffffff80201596: 82 80                	ret

ffffffff80201598 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h8086c1de977a4d80E:
;     fn capacity_from_bytes(excess: usize) -> usize {
ffffffff80201598: 01 11                	addi	sp, sp, -32
ffffffff8020159a: 2a e8                	sd	a0, 16(sp)
ffffffff8020159c: a1 45                	addi	a1, zero, 8
;     intrinsics::size_of::<T>()
ffffffff8020159e: 2e ec                	sd	a1, 24(sp)
;         excess / mem::size_of::<T>()
ffffffff802015a0: 2a e4                	sd	a0, 8(sp)
ffffffff802015a2: 2e e0                	sd	a1, 0(sp)
ffffffff802015a4: 09 a0                	j	2
ffffffff802015a6: 01 45                	mv	a0, zero
ffffffff802015a8: 82 65                	ld	a1, 0(sp)
ffffffff802015aa: 63 89 a5 00          	beq	a1, a0, 18
ffffffff802015ae: 09 a0                	j	2
ffffffff802015b0: 22 65                	ld	a0, 8(sp)
ffffffff802015b2: 82 65                	ld	a1, 0(sp)
ffffffff802015b4: 33 55 b5 02          	<unknown>
;     }
ffffffff802015b8: 05 61                	addi	sp, sp, 32
ffffffff802015ba: 82 80                	ret

ffffffff802015bc .LBB7_4:
;         excess / mem::size_of::<T>()
ffffffff802015bc: 17 c5 00 00          	auipc	a0, 12
ffffffff802015c0: 13 05 45 d2          	addi	a0, a0, -732

ffffffff802015c4 .LBB7_5:
ffffffff802015c4: 17 c6 00 00          	auipc	a2, 12
ffffffff802015c8: 13 06 c6 cf          	addi	a2, a2, -772
ffffffff802015cc: e5 45                	addi	a1, zero, 25
ffffffff802015ce: 97 90 00 00          	auipc	ra, 9
ffffffff802015d2: e7 80 a0 d6          	jalr	-662(ra)
ffffffff802015d6: 00 00                	unimp	

ffffffff802015d8 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17ha6b7867b31133a93E:
;     pub fn ptr(&self) -> *mut T {
ffffffff802015d8: 01 11                	addi	sp, sp, -32
ffffffff802015da: 06 ec                	sd	ra, 24(sp)
ffffffff802015dc: 2a e8                	sd	a0, 16(sp)
;         self.ptr.as_ptr()
ffffffff802015de: 08 61                	ld	a0, 0(a0)
ffffffff802015e0: 97 20 00 00          	auipc	ra, 2
ffffffff802015e4: e7 80 40 63          	jalr	1588(ra)
ffffffff802015e8: 2a e4                	sd	a0, 8(sp)
ffffffff802015ea: 09 a0                	j	2
;     }
ffffffff802015ec: 22 65                	ld	a0, 8(sp)
ffffffff802015ee: e2 60                	ld	ra, 24(sp)
ffffffff802015f0: 05 61                	addi	sp, sp, 32
ffffffff802015f2: 82 80                	ret

ffffffff802015f4 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h5f31cee7b8b4c505E:
;     pub fn reserve(&mut self, len: usize, additional: usize) {
ffffffff802015f4: 1d 71                	addi	sp, sp, -96
ffffffff802015f6: 86 ec                	sd	ra, 88(sp)
ffffffff802015f8: 2a f8                	sd	a0, 48(sp)
ffffffff802015fa: 2e fc                	sd	a1, 56(sp)
ffffffff802015fc: b2 e0                	sd	a2, 64(sp)
ffffffff802015fe: 34 08                	addi	a3, sp, 24
;         match self.try_reserve(len, additional) {
ffffffff80201600: 2a e8                	sd	a0, 16(sp)
ffffffff80201602: 36 85                	add	a0, zero, a3
ffffffff80201604: c2 66                	ld	a3, 16(sp)
ffffffff80201606: 2e e4                	sd	a1, 8(sp)
ffffffff80201608: b6 85                	add	a1, zero, a3
ffffffff8020160a: 22 67                	ld	a4, 8(sp)
ffffffff8020160c: 32 e0                	sd	a2, 0(sp)
ffffffff8020160e: 3a 86                	add	a2, zero, a4
ffffffff80201610: 82 66                	ld	a3, 0(sp)
ffffffff80201612: 97 00 00 00          	auipc	ra, 0
ffffffff80201616: e7 80 80 c4          	jalr	-952(ra)
ffffffff8020161a: 09 a0                	j	2
;             Err(CapacityOverflow) => capacity_overflow(),
ffffffff8020161c: 62 65                	ld	a0, 24(sp)
ffffffff8020161e: 81 45                	mv	a1, zero
ffffffff80201620: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80201624: 09 a0                	j	2
ffffffff80201626: 21 a0                	j	8
;     }
ffffffff80201628: e6 60                	ld	ra, 88(sp)
ffffffff8020162a: 25 61                	addi	sp, sp, 96
ffffffff8020162c: 82 80                	ret
;             Err(CapacityOverflow) => capacity_overflow(),
ffffffff8020162e: 22 75                	ld	a0, 40(sp)
ffffffff80201630: b3 35 a0 00          	snez	a1, a0
ffffffff80201634: 01 46                	mv	a2, zero
ffffffff80201636: 63 05 c5 00          	beq	a0, a2, 10
ffffffff8020163a: 09 a0                	j	2
ffffffff8020163c: 39 a0                	j	14
;         match self.try_reserve(len, additional) {
ffffffff8020163e: 00 00                	unimp	
;             Err(CapacityOverflow) => capacity_overflow(),
ffffffff80201640: 97 90 00 00          	auipc	ra, 9
ffffffff80201644: e7 80 80 bc          	jalr	-1080(ra)
ffffffff80201648: 00 00                	unimp	
;             Err(AllocError { layout, .. }) => handle_alloc_error(layout),
ffffffff8020164a: 02 75                	ld	a0, 32(sp)
ffffffff8020164c: a2 75                	ld	a1, 40(sp)
ffffffff8020164e: aa e4                	sd	a0, 72(sp)
ffffffff80201650: ae e8                	sd	a1, 80(sp)
ffffffff80201652: 97 90 00 00          	auipc	ra, 9
ffffffff80201656: e7 80 80 ba          	jalr	-1112(ra)
ffffffff8020165a: 00 00                	unimp	

ffffffff8020165c _ZN4core5alloc6layout6Layout12pad_to_align17h313ea1c99b44b34cE:
;     pub fn pad_to_align(&self) -> Layout {
ffffffff8020165c: 59 71                	addi	sp, sp, -112
ffffffff8020165e: 86 f4                	sd	ra, 104(sp)
ffffffff80201660: aa e8                	sd	a0, 80(sp)
;         let pad = self.padding_needed_for(self.align());
ffffffff80201662: aa e4                	sd	a0, 72(sp)
ffffffff80201664: 97 00 00 00          	auipc	ra, 0
ffffffff80201668: e7 80 00 18          	jalr	384(ra)
ffffffff8020166c: aa e0                	sd	a0, 64(sp)
ffffffff8020166e: 09 a0                	j	2
ffffffff80201670: 26 65                	ld	a0, 72(sp)
ffffffff80201672: 86 65                	ld	a1, 64(sp)
ffffffff80201674: 97 00 00 00          	auipc	ra, 0
ffffffff80201678: e7 80 20 0d          	jalr	210(ra)
ffffffff8020167c: aa 85                	add	a1, zero, a0
ffffffff8020167e: aa ec                	sd	a0, 88(sp)
ffffffff80201680: 2e fc                	sd	a1, 56(sp)
ffffffff80201682: 09 a0                	j	2
;         let new_size = self.size() + pad;
ffffffff80201684: 26 65                	ld	a0, 72(sp)
ffffffff80201686: 97 00 00 00          	auipc	ra, 0
ffffffff8020168a: e7 80 40 15          	jalr	340(ra)
ffffffff8020168e: 2a f8                	sd	a0, 48(sp)
ffffffff80201690: 09 a0                	j	2
ffffffff80201692: 42 75                	ld	a0, 48(sp)
ffffffff80201694: e2 75                	ld	a1, 56(sp)
ffffffff80201696: 33 06 b5 00          	add	a2, a0, a1
ffffffff8020169a: b2 f0                	sd	a2, 96(sp)
;         Layout::from_size_align(new_size, self.align()).unwrap()
ffffffff8020169c: 26 65                	ld	a0, 72(sp)
ffffffff8020169e: 32 f4                	sd	a2, 40(sp)
ffffffff802016a0: 97 00 00 00          	auipc	ra, 0
ffffffff802016a4: e7 80 40 14          	jalr	324(ra)
ffffffff802016a8: 2a f0                	sd	a0, 32(sp)
ffffffff802016aa: 09 a0                	j	2
ffffffff802016ac: 22 75                	ld	a0, 40(sp)
ffffffff802016ae: 82 75                	ld	a1, 32(sp)
ffffffff802016b0: 97 00 00 00          	auipc	ra, 0
ffffffff802016b4: e7 80 20 03          	jalr	50(ra)
ffffffff802016b8: 2a ec                	sd	a0, 24(sp)
ffffffff802016ba: 2e e8                	sd	a1, 16(sp)
ffffffff802016bc: 09 a0                	j	2

ffffffff802016be .LBB0_7:
ffffffff802016be: 17 c6 00 00          	auipc	a2, 12
ffffffff802016c2: 13 06 a6 cb          	addi	a2, a2, -838
ffffffff802016c6: 62 65                	ld	a0, 24(sp)
ffffffff802016c8: c2 65                	ld	a1, 16(sp)
ffffffff802016ca: 97 60 00 00          	auipc	ra, 6
ffffffff802016ce: e7 80 20 a1          	jalr	-1518(ra)
ffffffff802016d2: 2a e4                	sd	a0, 8(sp)
ffffffff802016d4: 2e e0                	sd	a1, 0(sp)
ffffffff802016d6: 09 a0                	j	2
;     }
ffffffff802016d8: 22 65                	ld	a0, 8(sp)
ffffffff802016da: 82 65                	ld	a1, 0(sp)
ffffffff802016dc: a6 70                	ld	ra, 104(sp)
ffffffff802016de: 65 61                	addi	sp, sp, 112
ffffffff802016e0: 82 80                	ret

ffffffff802016e2 _ZN4core5alloc6layout6Layout15from_size_align17h468c00ce0e1ed015E:
;     pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutErr> {
ffffffff802016e2: 5d 71                	addi	sp, sp, -80
ffffffff802016e4: 86 e4                	sd	ra, 72(sp)
ffffffff802016e6: 2a fc                	sd	a0, 56(sp)
ffffffff802016e8: ae e0                	sd	a1, 64(sp)
;         if !align.is_power_of_two() {
ffffffff802016ea: 2a f0                	sd	a0, 32(sp)
ffffffff802016ec: 2e 85                	add	a0, zero, a1
ffffffff802016ee: 2e ec                	sd	a1, 24(sp)
ffffffff802016f0: 97 10 00 00          	auipc	ra, 1
ffffffff802016f4: e7 80 e0 8d          	jalr	-1826(ra)
ffffffff802016f8: 2a e8                	sd	a0, 16(sp)
ffffffff802016fa: 09 a0                	j	2
ffffffff802016fc: 01 45                	mv	a0, zero
ffffffff802016fe: c2 65                	ld	a1, 16(sp)
ffffffff80201700: 63 8a a5 00          	beq	a1, a0, 20
ffffffff80201704: 09 a0                	j	2
ffffffff80201706: 01 45                	mv	a0, zero
;         if size > usize::MAX - (align - 1) {
ffffffff80201708: e2 65                	ld	a1, 24(sp)
ffffffff8020170a: 0d 8d                	sub	a0, a0, a1
ffffffff8020170c: 02 76                	ld	a2, 32(sp)
ffffffff8020170e: 63 64 c5 02          	bltu	a0, a2, 40
ffffffff80201712: 09 a8                	j	18
ffffffff80201714: 01 45                	mv	a0, zero
;             return Err(LayoutErr { private: () });
ffffffff80201716: 2a f8                	sd	a0, 48(sp)
ffffffff80201718: 09 a0                	j	2
;     }
ffffffff8020171a: 22 75                	ld	a0, 40(sp)
ffffffff8020171c: c2 75                	ld	a1, 48(sp)
ffffffff8020171e: a6 60                	ld	ra, 72(sp)
ffffffff80201720: 61 61                	addi	sp, sp, 80
ffffffff80201722: 82 80                	ret
;         unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
ffffffff80201724: 02 75                	ld	a0, 32(sp)
ffffffff80201726: e2 65                	ld	a1, 24(sp)
ffffffff80201728: 97 00 00 00          	auipc	ra, 0
ffffffff8020172c: e7 80 c0 08          	jalr	140(ra)
ffffffff80201730: 2a e4                	sd	a0, 8(sp)
ffffffff80201732: 2e e0                	sd	a1, 0(sp)
ffffffff80201734: 21 a0                	j	8
ffffffff80201736: 01 45                	mv	a0, zero
;             return Err(LayoutErr { private: () });
ffffffff80201738: 2a f8                	sd	a0, 48(sp)
ffffffff8020173a: c5 b7                	j	-32
;         unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
ffffffff8020173c: 22 65                	ld	a0, 8(sp)
ffffffff8020173e: 2a f4                	sd	a0, 40(sp)
ffffffff80201740: 82 65                	ld	a1, 0(sp)
ffffffff80201742: 2e f8                	sd	a1, 48(sp)
;     }
ffffffff80201744: d9 bf                	j	-42

ffffffff80201746 _ZN4core5alloc6layout6Layout18padding_needed_for17he1d975b0f478d004E:
;     pub const fn padding_needed_for(&self, align: usize) -> usize {
ffffffff80201746: 1d 71                	addi	sp, sp, -96
ffffffff80201748: 86 ec                	sd	ra, 88(sp)
ffffffff8020174a: 2a fc                	sd	a0, 56(sp)
ffffffff8020174c: ae e0                	sd	a1, 64(sp)
;         let len = self.size();
ffffffff8020174e: 2e f8                	sd	a1, 48(sp)
ffffffff80201750: 97 00 00 00          	auipc	ra, 0
ffffffff80201754: e7 80 a0 08          	jalr	138(ra)
ffffffff80201758: aa 85                	add	a1, zero, a0
ffffffff8020175a: aa e4                	sd	a0, 72(sp)
ffffffff8020175c: 2e f4                	sd	a1, 40(sp)
ffffffff8020175e: 09 a0                	j	2
;         let len_rounded_up = len.wrapping_add(align).wrapping_sub(1) & !align.wrapping_sub(1);
ffffffff80201760: 22 75                	ld	a0, 40(sp)
ffffffff80201762: c2 75                	ld	a1, 48(sp)
ffffffff80201764: 97 10 00 00          	auipc	ra, 1
ffffffff80201768: e7 80 20 84          	jalr	-1982(ra)
ffffffff8020176c: 2a f0                	sd	a0, 32(sp)
ffffffff8020176e: 09 a0                	j	2
ffffffff80201770: 85 45                	addi	a1, zero, 1
ffffffff80201772: 02 75                	ld	a0, 32(sp)
ffffffff80201774: 97 10 00 00          	auipc	ra, 1
ffffffff80201778: e7 80 60 84          	jalr	-1978(ra)
ffffffff8020177c: 2a ec                	sd	a0, 24(sp)
ffffffff8020177e: 09 a0                	j	2
ffffffff80201780: 85 45                	addi	a1, zero, 1
ffffffff80201782: 42 75                	ld	a0, 48(sp)
ffffffff80201784: 97 10 00 00          	auipc	ra, 1
ffffffff80201788: e7 80 60 83          	jalr	-1994(ra)
ffffffff8020178c: 2a e8                	sd	a0, 16(sp)
ffffffff8020178e: 09 a0                	j	2
ffffffff80201790: 42 65                	ld	a0, 16(sp)
ffffffff80201792: 93 45 f5 ff          	not	a1, a0
ffffffff80201796: 62 66                	ld	a2, 24(sp)
ffffffff80201798: f1 8d                	and	a1, a1, a2
ffffffff8020179a: ae e8                	sd	a1, 80(sp)
;         len_rounded_up.wrapping_sub(len)
ffffffff8020179c: 2e 85                	add	a0, zero, a1
ffffffff8020179e: a2 75                	ld	a1, 40(sp)
ffffffff802017a0: 97 10 00 00          	auipc	ra, 1
ffffffff802017a4: e7 80 a0 81          	jalr	-2022(ra)
ffffffff802017a8: 2a e4                	sd	a0, 8(sp)
ffffffff802017aa: 09 a0                	j	2
;     }
ffffffff802017ac: 22 65                	ld	a0, 8(sp)
ffffffff802017ae: e6 60                	ld	ra, 88(sp)
ffffffff802017b0: 25 61                	addi	sp, sp, 96
ffffffff802017b2: 82 80                	ret

ffffffff802017b4 _ZN4core5alloc6layout6Layout25from_size_align_unchecked17h19073c0126219ed6E:
;     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
ffffffff802017b4: 39 71                	addi	sp, sp, -64
ffffffff802017b6: 06 fc                	sd	ra, 56(sp)
ffffffff802017b8: 2a f4                	sd	a0, 40(sp)
ffffffff802017ba: 2e f8                	sd	a1, 48(sp)
;         Layout { size_: size, align_: NonZeroUsize::new_unchecked(align) }
ffffffff802017bc: 2a e8                	sd	a0, 16(sp)
ffffffff802017be: 2e 85                	add	a0, zero, a1
ffffffff802017c0: 97 00 00 00          	auipc	ra, 0
ffffffff802017c4: e7 80 20 6a          	jalr	1698(ra)
ffffffff802017c8: 2a e4                	sd	a0, 8(sp)
ffffffff802017ca: 09 a0                	j	2
ffffffff802017cc: 42 65                	ld	a0, 16(sp)
ffffffff802017ce: 2a ec                	sd	a0, 24(sp)
ffffffff802017d0: a2 65                	ld	a1, 8(sp)
ffffffff802017d2: 2e f0                	sd	a1, 32(sp)
;     }
ffffffff802017d4: e2 70                	ld	ra, 56(sp)
ffffffff802017d6: 21 61                	addi	sp, sp, 64
ffffffff802017d8: 82 80                	ret

ffffffff802017da _ZN4core5alloc6layout6Layout4size17hf21bc27e5b0d3ba0E:
;     pub const fn size(&self) -> usize {
ffffffff802017da: 41 11                	addi	sp, sp, -16
ffffffff802017dc: 2a e4                	sd	a0, 8(sp)
;         self.size_
ffffffff802017de: 08 61                	ld	a0, 0(a0)
;     }
ffffffff802017e0: 41 01                	addi	sp, sp, 16
ffffffff802017e2: 82 80                	ret

ffffffff802017e4 _ZN4core5alloc6layout6Layout5align17h15b9ebf56b1eb172E:
;     pub const fn align(&self) -> usize {
ffffffff802017e4: 01 11                	addi	sp, sp, -32
ffffffff802017e6: 06 ec                	sd	ra, 24(sp)
ffffffff802017e8: 2a e8                	sd	a0, 16(sp)
;         self.align_.get()
ffffffff802017ea: 08 65                	ld	a0, 8(a0)
ffffffff802017ec: 97 00 00 00          	auipc	ra, 0
ffffffff802017f0: e7 80 00 68          	jalr	1664(ra)
ffffffff802017f4: 2a e4                	sd	a0, 8(sp)
ffffffff802017f6: 09 a0                	j	2
;     }
ffffffff802017f8: 22 65                	ld	a0, 8(sp)
ffffffff802017fa: e2 60                	ld	ra, 24(sp)
ffffffff802017fc: 05 61                	addi	sp, sp, 32
ffffffff802017fe: 82 80                	ret

ffffffff80201800 _ZN4core5alloc6layout6Layout6repeat17ha99f3457b17e0ed2E:
;     pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutErr> {
ffffffff80201800: 15 71                	addi	sp, sp, -224
ffffffff80201802: 86 ed                	sd	ra, 216(sp)
ffffffff80201804: 2e f5                	sd	a1, 168(sp)
ffffffff80201806: 32 f9                	sd	a2, 176(sp)
;         let padded_size = self.size() + self.padding_needed_for(self.align());
ffffffff80201808: aa fc                	sd	a0, 120(sp)
ffffffff8020180a: 2e 85                	add	a0, zero, a1
ffffffff8020180c: b2 f8                	sd	a2, 112(sp)
ffffffff8020180e: ae f4                	sd	a1, 104(sp)
ffffffff80201810: 97 00 00 00          	auipc	ra, 0
ffffffff80201814: e7 80 a0 fc          	jalr	-54(ra)
ffffffff80201818: aa f0                	sd	a0, 96(sp)
ffffffff8020181a: 09 a0                	j	2
ffffffff8020181c: 26 75                	ld	a0, 104(sp)
ffffffff8020181e: 97 00 00 00          	auipc	ra, 0
ffffffff80201822: e7 80 60 fc          	jalr	-58(ra)
ffffffff80201826: aa ec                	sd	a0, 88(sp)
ffffffff80201828: 09 a0                	j	2
ffffffff8020182a: 26 75                	ld	a0, 104(sp)
ffffffff8020182c: e6 65                	ld	a1, 88(sp)
ffffffff8020182e: 97 00 00 00          	auipc	ra, 0
ffffffff80201832: e7 80 80 f1          	jalr	-232(ra)
ffffffff80201836: aa e8                	sd	a0, 80(sp)
ffffffff80201838: 09 a0                	j	2
ffffffff8020183a: 06 75                	ld	a0, 96(sp)
ffffffff8020183c: c6 65                	ld	a1, 80(sp)
ffffffff8020183e: 33 06 b5 00          	add	a2, a0, a1
ffffffff80201842: b2 e1                	sd	a2, 192(sp)
;         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutErr { private: () })?;
ffffffff80201844: 32 85                	add	a0, zero, a2
ffffffff80201846: c6 75                	ld	a1, 112(sp)
ffffffff80201848: b2 e4                	sd	a2, 72(sp)
ffffffff8020184a: 97 00 00 00          	auipc	ra, 0
ffffffff8020184e: e7 80 a0 71          	jalr	1818(ra)
ffffffff80201852: aa e0                	sd	a0, 64(sp)
ffffffff80201854: 2e fc                	sd	a1, 56(sp)
ffffffff80201856: 09 a0                	j	2
ffffffff80201858: 06 65                	ld	a0, 64(sp)
ffffffff8020185a: e2 75                	ld	a1, 56(sp)
ffffffff8020185c: 97 50 00 00          	auipc	ra, 5
ffffffff80201860: e7 80 40 dc          	jalr	-572(ra)
ffffffff80201864: 2a f8                	sd	a0, 48(sp)
ffffffff80201866: 2e f4                	sd	a1, 40(sp)
ffffffff80201868: 09 a0                	j	2
ffffffff8020186a: 42 75                	ld	a0, 48(sp)
ffffffff8020186c: a2 75                	ld	a1, 40(sp)
ffffffff8020186e: 97 60 00 00          	auipc	ra, 6
ffffffff80201872: e7 80 60 9f          	jalr	-1546(ra)
ffffffff80201876: 2a e1                	sd	a0, 128(sp)
ffffffff80201878: 2e e5                	sd	a1, 136(sp)
ffffffff8020187a: 09 a0                	j	2
ffffffff8020187c: 0a 65                	ld	a0, 128(sp)
ffffffff8020187e: 81 45                	mv	a1, zero
ffffffff80201880: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80201884: 09 a0                	j	2
ffffffff80201886: 31 a8                	j	28
ffffffff80201888: 2a 65                	ld	a0, 136(sp)
ffffffff8020188a: aa e5                	sd	a0, 200(sp)
ffffffff8020188c: aa e9                	sd	a0, 208(sp)
;         unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
ffffffff8020188e: a6 75                	ld	a1, 104(sp)
ffffffff80201890: 2a f0                	sd	a0, 32(sp)
ffffffff80201892: 2e 85                	add	a0, zero, a1
ffffffff80201894: 97 00 00 00          	auipc	ra, 0
ffffffff80201898: e7 80 00 f5          	jalr	-176(ra)
ffffffff8020189c: 2a ec                	sd	a0, 24(sp)
ffffffff8020189e: 0d a0                	j	34
;         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutErr { private: () })?;
ffffffff802018a0: 00 00                	unimp	
ffffffff802018a2: 97 50 00 00          	auipc	ra, 5
ffffffff802018a6: e7 80 c0 48          	jalr	1164(ra)
ffffffff802018aa: 21 a0                	j	8
;     }
ffffffff802018ac: ee 60                	ld	ra, 216(sp)
ffffffff802018ae: 2d 61                	addi	sp, sp, 224
ffffffff802018b0: 82 80                	ret
;         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutErr { private: () })?;
ffffffff802018b2: 66 75                	ld	a0, 120(sp)
ffffffff802018b4: 97 60 00 00          	auipc	ra, 6
ffffffff802018b8: e7 80 e0 97          	jalr	-1666(ra)
ffffffff802018bc: 09 a0                	j	2
ffffffff802018be: fd b7                	j	-18
;         unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
ffffffff802018c0: 02 75                	ld	a0, 32(sp)
ffffffff802018c2: e2 65                	ld	a1, 24(sp)
ffffffff802018c4: 97 00 00 00          	auipc	ra, 0
ffffffff802018c8: e7 80 00 ef          	jalr	-272(ra)
ffffffff802018cc: 2a e8                	sd	a0, 16(sp)
ffffffff802018ce: 2e e4                	sd	a1, 8(sp)
ffffffff802018d0: 09 a0                	j	2
ffffffff802018d2: 42 65                	ld	a0, 16(sp)
ffffffff802018d4: 2a e9                	sd	a0, 144(sp)
ffffffff802018d6: a2 65                	ld	a1, 8(sp)
ffffffff802018d8: 2e ed                	sd	a1, 152(sp)
ffffffff802018da: 26 66                	ld	a2, 72(sp)
ffffffff802018dc: 32 f1                	sd	a2, 160(sp)
ffffffff802018de: e6 76                	ld	a3, 120(sp)
ffffffff802018e0: 90 ea                	sd	a2, 16(a3)
ffffffff802018e2: 8c e6                	sd	a1, 8(a3)
ffffffff802018e4: 88 e2                	sd	a0, 0(a3)
;     }
ffffffff802018e6: d9 b7                	j	-58

ffffffff802018e8 _ZN4core5alloc6layout6Layout8dangling17hced70ccecf03c901E:
;     pub const fn dangling(&self) -> NonNull<u8> {
ffffffff802018e8: 01 11                	addi	sp, sp, -32
ffffffff802018ea: 06 ec                	sd	ra, 24(sp)
ffffffff802018ec: 2a e8                	sd	a0, 16(sp)
;         unsafe { NonNull::new_unchecked(self.align() as *mut u8) }
ffffffff802018ee: 97 00 00 00          	auipc	ra, 0
ffffffff802018f2: e7 80 60 ef          	jalr	-266(ra)
ffffffff802018f6: 2a e4                	sd	a0, 8(sp)
ffffffff802018f8: 09 a0                	j	2
ffffffff802018fa: 22 65                	ld	a0, 8(sp)
ffffffff802018fc: 97 50 00 00          	auipc	ra, 5
ffffffff80201900: e7 80 c0 84          	jalr	-1972(ra)
ffffffff80201904: 2a e0                	sd	a0, 0(sp)
ffffffff80201906: 09 a0                	j	2
;     }
ffffffff80201908: 02 65                	ld	a0, 0(sp)
ffffffff8020190a: e2 60                	ld	ra, 24(sp)
ffffffff8020190c: 05 61                	addi	sp, sp, 32
ffffffff8020190e: 82 80                	ret

ffffffff80201910 _ZN89_$LT$os..memory..frame..allocator..FRAME_ALLOCATOR$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8133cfb9d5763c1fE:
;             fn deref(&self) -> &$T {
ffffffff80201910: 01 11                	addi	sp, sp, -32
ffffffff80201912: 06 ec                	sd	ra, 24(sp)
ffffffff80201914: 2a e4                	sd	a0, 8(sp)

ffffffff80201916 .LBB0_2:
ffffffff80201916: 17 15 81 00          	auipc	a0, 2065
ffffffff8020191a: 13 05 a5 80          	addi	a0, a0, -2038
ffffffff8020191e: 2a e8                	sd	a0, 16(sp)
;         self.0.call_once(builder)
ffffffff80201920: 97 30 00 00          	auipc	ra, 3
ffffffff80201924: e7 80 80 84          	jalr	-1976(ra)
;                 __stability()
ffffffff80201928: 2a e0                	sd	a0, 0(sp)
ffffffff8020192a: 09 a0                	j	2
;             }
ffffffff8020192c: 02 65                	ld	a0, 0(sp)
ffffffff8020192e: e2 60                	ld	ra, 24(sp)
ffffffff80201930: 05 61                	addi	sp, sp, 32
ffffffff80201932: 82 80                	ret

ffffffff80201934 _ZN4core4char7methods15encode_utf8_raw17hea887b214a1974e4E:
; pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
ffffffff80201934: 45 71                	addi	sp, sp, -464
ffffffff80201936: 86 e7                	sd	ra, 456(sp)
ffffffff80201938: aa 86                	add	a3, zero, a0
ffffffff8020193a: 2a d3                	sw	a0, 164(sp)
ffffffff8020193c: ae ea                	sd	a1, 336(sp)
ffffffff8020193e: b2 ee                	sd	a2, 344(sp)
;     let len = len_utf8(code);
ffffffff80201940: 32 ed                	sd	a2, 152(sp)
ffffffff80201942: 2e e9                	sd	a1, 144(sp)
ffffffff80201944: 36 e5                	sd	a3, 136(sp)
ffffffff80201946: 97 00 00 00          	auipc	ra, 0
ffffffff8020194a: e7 80 c0 27          	jalr	636(ra)
ffffffff8020194e: 2a f5                	sd	a0, 168(sp)
ffffffff80201950: 09 a0                	j	2
;     match (len, &mut dst[..]) {
ffffffff80201952: 2a 75                	ld	a0, 168(sp)

ffffffff80201954 .LBB0_22:
ffffffff80201954: 17 c6 00 00          	auipc	a2, 12
ffffffff80201958: 13 06 c6 ab          	addi	a2, a2, -1348
ffffffff8020195c: ca 65                	ld	a1, 144(sp)
ffffffff8020195e: 2a e1                	sd	a0, 128(sp)
ffffffff80201960: 2e 85                	add	a0, zero, a1
ffffffff80201962: ea 65                	ld	a1, 152(sp)
ffffffff80201964: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80201968: e7 80 a0 2e          	jalr	746(ra)
ffffffff8020196c: aa fc                	sd	a0, 120(sp)
ffffffff8020196e: ae f8                	sd	a1, 112(sp)
ffffffff80201970: 09 a0                	j	2
ffffffff80201972: 0a 65                	ld	a0, 128(sp)
ffffffff80201974: 2a f9                	sd	a0, 176(sp)
ffffffff80201976: e6 75                	ld	a1, 120(sp)
ffffffff80201978: 2e fd                	sd	a1, 184(sp)
ffffffff8020197a: 46 76                	ld	a2, 112(sp)
ffffffff8020197c: b2 e1                	sd	a2, 192(sp)
ffffffff8020197e: 85 46                	addi	a3, zero, 1
;         (1, [a, ..]) => {
ffffffff80201980: 0a 67                	ld	a4, 128(sp)
ffffffff80201982: aa f4                	sd	a0, 104(sp)
ffffffff80201984: 63 02 d7 02          	beq	a4, a3, 36
ffffffff80201988: 09 a0                	j	2
ffffffff8020198a: 09 45                	addi	a0, zero, 2
ffffffff8020198c: a6 75                	ld	a1, 104(sp)
ffffffff8020198e: 63 81 a5 04          	beq	a1, a0, 66
ffffffff80201992: 09 a0                	j	2
ffffffff80201994: 0d 45                	addi	a0, zero, 3
ffffffff80201996: a6 75                	ld	a1, 104(sp)
ffffffff80201998: 63 81 a5 04          	beq	a1, a0, 66
ffffffff8020199c: 09 a0                	j	2
ffffffff8020199e: 11 45                	addi	a0, zero, 4
ffffffff802019a0: a6 75                	ld	a1, 104(sp)
ffffffff802019a2: 63 81 a5 04          	beq	a1, a0, 66
ffffffff802019a6: 31 a0                	j	12
ffffffff802019a8: 0e 65                	ld	a0, 192(sp)
ffffffff802019aa: 81 45                	mv	a1, zero
ffffffff802019ac: 63 11 b5 04          	bne	a0, a1, 66
ffffffff802019b0: 09 a0                	j	2

ffffffff802019b2 .LBB0_23:
;             "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
ffffffff802019b2: 17 c5 00 00          	auipc	a0, 12
ffffffff802019b6: 13 05 e5 af          	addi	a0, a0, -1282
ffffffff802019ba: 0c 61                	ld	a1, 0(a0)
;             dst.len(),
ffffffff802019bc: 4a 65                	ld	a0, 144(sp)
ffffffff802019be: 6a 66                	ld	a2, 152(sp)
ffffffff802019c0: ae f0                	sd	a1, 96(sp)
ffffffff802019c2: b2 85                	add	a1, zero, a2
ffffffff802019c4: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802019c8: e7 80 a0 1a          	jalr	426(ra)
ffffffff802019cc: aa e2                	sd	a0, 320(sp)
ffffffff802019ce: fd a0                	j	238
;         (2, [a, b, ..]) => {
ffffffff802019d0: 0e 65                	ld	a0, 192(sp)
ffffffff802019d2: 85 45                	addi	a1, zero, 1
ffffffff802019d4: 63 e4 a5 02          	bltu	a1, a0, 40
ffffffff802019d8: e9 bf                	j	-38
;         (3, [a, b, c, ..]) => {
ffffffff802019da: 0e 65                	ld	a0, 192(sp)
ffffffff802019dc: 89 45                	addi	a1, zero, 2
ffffffff802019de: 63 e4 a5 04          	bltu	a1, a0, 72
ffffffff802019e2: c1 bf                	j	-48
;         (4, [a, b, c, d, ..]) => {
ffffffff802019e4: 0e 65                	ld	a0, 192(sp)
ffffffff802019e6: 8d 45                	addi	a1, zero, 3
ffffffff802019e8: 63 ef a5 06          	bltu	a1, a0, 126
ffffffff802019ec: d9 b7                	j	-58
;         (1, [a, ..]) => {
ffffffff802019ee: 6a 75                	ld	a0, 184(sp)
ffffffff802019f0: 2a f7                	sd	a0, 424(sp)
;             *a = code as u8;
ffffffff802019f2: 83 05 41 0a          	lb	a1, 164(sp)
ffffffff802019f6: 23 00 b5 00          	sb	a1, 0(a0)
;     match (len, &mut dst[..]) {
ffffffff802019fa: 8d a2                	j	354
;         (2, [a, b, ..]) => {
ffffffff802019fc: 6a 75                	ld	a0, 184(sp)
ffffffff802019fe: 2a ef                	sd	a0, 408(sp)
ffffffff80201a00: 93 05 15 00          	addi	a1, a0, 1
ffffffff80201a04: 2e f3                	sd	a1, 416(sp)
;             *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
ffffffff80201a06: 9a 55                	lw	a1, 164(sp)
ffffffff80201a08: 99 81                	srli	a1, a1, 6
ffffffff80201a0a: fd 89                	andi	a1, a1, 31
ffffffff80201a0c: 93 e5 05 0c          	ori	a1, a1, 192
ffffffff80201a10: 23 00 b5 00          	sb	a1, 0(a0)
;             *b = (code & 0x3F) as u8 | TAG_CONT;
ffffffff80201a14: 83 45 41 0a          	lbu	a1, 164(sp)
ffffffff80201a18: 93 f5 f5 03          	andi	a1, a1, 63
ffffffff80201a1c: 93 e5 05 08          	ori	a1, a1, 128
ffffffff80201a20: a3 00 b5 00          	sb	a1, 1(a0)
;     match (len, &mut dst[..]) {
ffffffff80201a24: 25 aa                	j	312
;         (3, [a, b, c, ..]) => {
ffffffff80201a26: 6a 75                	ld	a0, 184(sp)
ffffffff80201a28: 2a e3                	sd	a0, 384(sp)
ffffffff80201a2a: 93 05 15 00          	addi	a1, a0, 1
ffffffff80201a2e: 2e e7                	sd	a1, 392(sp)
ffffffff80201a30: 93 05 25 00          	addi	a1, a0, 2
ffffffff80201a34: 2e eb                	sd	a1, 400(sp)
;             *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
ffffffff80201a36: 9a 55                	lw	a1, 164(sp)
ffffffff80201a38: b1 81                	srli	a1, a1, 12
ffffffff80201a3a: bd 89                	andi	a1, a1, 15
ffffffff80201a3c: 93 e5 05 0e          	ori	a1, a1, 224
ffffffff80201a40: 23 00 b5 00          	sb	a1, 0(a0)
;             *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
ffffffff80201a44: 9a 55                	lw	a1, 164(sp)
ffffffff80201a46: 99 81                	srli	a1, a1, 6
ffffffff80201a48: 93 f5 f5 03          	andi	a1, a1, 63
ffffffff80201a4c: 93 e5 05 08          	ori	a1, a1, 128
ffffffff80201a50: a3 00 b5 00          	sb	a1, 1(a0)
;             *c = (code & 0x3F) as u8 | TAG_CONT;
ffffffff80201a54: 83 45 41 0a          	lbu	a1, 164(sp)
ffffffff80201a58: 93 f5 f5 03          	andi	a1, a1, 63
ffffffff80201a5c: 93 e5 05 08          	ori	a1, a1, 128
ffffffff80201a60: 23 01 b5 00          	sb	a1, 2(a0)
;     match (len, &mut dst[..]) {
ffffffff80201a64: e5 a8                	j	248
;         (4, [a, b, c, d, ..]) => {
ffffffff80201a66: 6a 75                	ld	a0, 184(sp)
ffffffff80201a68: aa f2                	sd	a0, 352(sp)
ffffffff80201a6a: 93 05 15 00          	addi	a1, a0, 1
ffffffff80201a6e: ae f6                	sd	a1, 360(sp)
ffffffff80201a70: 93 05 25 00          	addi	a1, a0, 2
ffffffff80201a74: ae fa                	sd	a1, 368(sp)
ffffffff80201a76: 93 05 35 00          	addi	a1, a0, 3
ffffffff80201a7a: ae fe                	sd	a1, 376(sp)
;             *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
ffffffff80201a7c: 9a 55                	lw	a1, 164(sp)
ffffffff80201a7e: c9 81                	srli	a1, a1, 18
ffffffff80201a80: 9d 89                	andi	a1, a1, 7
ffffffff80201a82: 93 e5 05 0f          	ori	a1, a1, 240
ffffffff80201a86: 23 00 b5 00          	sb	a1, 0(a0)
;             *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
ffffffff80201a8a: 9a 55                	lw	a1, 164(sp)
ffffffff80201a8c: b1 81                	srli	a1, a1, 12
ffffffff80201a8e: 93 f5 f5 03          	andi	a1, a1, 63
ffffffff80201a92: 93 e5 05 08          	ori	a1, a1, 128
ffffffff80201a96: a3 00 b5 00          	sb	a1, 1(a0)
;             *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
ffffffff80201a9a: 9a 55                	lw	a1, 164(sp)
ffffffff80201a9c: 99 81                	srli	a1, a1, 6
ffffffff80201a9e: 93 f5 f5 03          	andi	a1, a1, 63
ffffffff80201aa2: 93 e5 05 08          	ori	a1, a1, 128
ffffffff80201aa6: 23 01 b5 00          	sb	a1, 2(a0)
;             *d = (code & 0x3F) as u8 | TAG_CONT;
ffffffff80201aaa: 83 45 41 0a          	lbu	a1, 164(sp)
ffffffff80201aae: 93 f5 f5 03          	andi	a1, a1, 63
ffffffff80201ab2: 93 e5 05 08          	ori	a1, a1, 128
ffffffff80201ab6: a3 01 b5 00          	sb	a1, 3(a0)
;     match (len, &mut dst[..]) {
ffffffff80201aba: 4d a0                	j	162
ffffffff80201abc: 28 11                	addi	a0, sp, 168
;         $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))
ffffffff80201abe: 2a f6                	sd	a0, 296(sp)
ffffffff80201ac0: 4c 11                	addi	a1, sp, 164
ffffffff80201ac2: 2e fa                	sd	a1, 304(sp)
ffffffff80201ac4: 90 02                	addi	a2, sp, 320
ffffffff80201ac6: 32 fe                	sd	a2, 312(sp)
;             len,
ffffffff80201ac8: 2a fb                	sd	a0, 432(sp)
;             code,
ffffffff80201aca: 2e ff                	sd	a1, 440(sp)
;             dst.len(),
ffffffff80201acc: b2 e3                	sd	a2, 448(sp)

ffffffff80201ace .LBB0_24:
;         $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))
ffffffff80201ace: 97 a6 00 00          	auipc	a3, 10
ffffffff80201ad2: 93 86 a6 61          	addi	a3, a3, 1562
ffffffff80201ad6: ae ec                	sd	a1, 88(sp)
ffffffff80201ad8: b6 85                	add	a1, zero, a3
ffffffff80201ada: b2 e8                	sd	a2, 80(sp)
ffffffff80201adc: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80201ae0: e7 80 60 aa          	jalr	-1370(ra)
ffffffff80201ae4: aa e4                	sd	a0, 72(sp)
ffffffff80201ae6: ae e0                	sd	a1, 64(sp)
ffffffff80201ae8: 09 a0                	j	2

ffffffff80201aea .LBB0_25:
ffffffff80201aea: 97 a5 00 00          	auipc	a1, 10
ffffffff80201aee: 93 85 c5 29          	addi	a1, a1, 668
ffffffff80201af2: 66 65                	ld	a0, 88(sp)
ffffffff80201af4: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80201af8: e7 80 80 b3          	jalr	-1224(ra)
ffffffff80201afc: 2a fc                	sd	a0, 56(sp)
ffffffff80201afe: 2e f8                	sd	a1, 48(sp)
ffffffff80201b00: 09 a0                	j	2

ffffffff80201b02 .LBB0_26:
ffffffff80201b02: 97 a5 00 00          	auipc	a1, 10
ffffffff80201b06: 93 85 65 5e          	addi	a1, a1, 1510
ffffffff80201b0a: 46 65                	ld	a0, 80(sp)
ffffffff80201b0c: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80201b10: e7 80 60 a7          	jalr	-1418(ra)
ffffffff80201b14: 2a f4                	sd	a0, 40(sp)
ffffffff80201b16: 2e f0                	sd	a1, 32(sp)
ffffffff80201b18: 09 a0                	j	2
ffffffff80201b1a: 26 65                	ld	a0, 72(sp)
ffffffff80201b1c: aa fd                	sd	a0, 248(sp)
ffffffff80201b1e: 86 65                	ld	a1, 64(sp)
ffffffff80201b20: 2e e2                	sd	a1, 256(sp)
ffffffff80201b22: 62 76                	ld	a2, 56(sp)
ffffffff80201b24: 32 e6                	sd	a2, 264(sp)
ffffffff80201b26: c2 76                	ld	a3, 48(sp)
ffffffff80201b28: 36 ea                	sd	a3, 272(sp)
ffffffff80201b2a: 22 77                	ld	a4, 40(sp)
ffffffff80201b2c: 3a ee                	sd	a4, 280(sp)
ffffffff80201b2e: 82 77                	ld	a5, 32(sp)
ffffffff80201b30: 3e f2                	sd	a5, 288(sp)
ffffffff80201b32: a8 01                	addi	a0, sp, 200
ffffffff80201b34: b4 19                	addi	a3, sp, 248
ffffffff80201b36: 0d 48                	addi	a6, zero, 3
ffffffff80201b38: 86 75                	ld	a1, 96(sp)
ffffffff80201b3a: 42 86                	add	a2, zero, a6
ffffffff80201b3c: 42 87                	add	a4, zero, a6
ffffffff80201b3e: 97 20 00 00          	auipc	ra, 2
ffffffff80201b42: e7 80 a0 47          	jalr	1146(ra)
ffffffff80201b46: 09 a0                	j	2

ffffffff80201b48 .LBB0_27:
ffffffff80201b48: 97 c5 00 00          	auipc	a1, 12
ffffffff80201b4c: 93 85 85 9e          	addi	a1, a1, -1560
ffffffff80201b50: a8 01                	addi	a0, sp, 200
ffffffff80201b52: 97 90 00 00          	auipc	ra, 9
ffffffff80201b56: e7 80 20 85          	jalr	-1966(ra)
ffffffff80201b5a: 00 00                	unimp	
;     &mut dst[..len]
ffffffff80201b5c: 2a 75                	ld	a0, 168(sp)
ffffffff80201b5e: aa e6                	sd	a0, 328(sp)

ffffffff80201b60 .LBB0_28:
ffffffff80201b60: 97 c6 00 00          	auipc	a3, 12
ffffffff80201b64: 93 86 86 8c          	addi	a3, a3, -1848
ffffffff80201b68: ca 65                	ld	a1, 144(sp)
ffffffff80201b6a: 2a ec                	sd	a0, 24(sp)
ffffffff80201b6c: 2e 85                	add	a0, zero, a1
ffffffff80201b6e: ea 65                	ld	a1, 152(sp)
ffffffff80201b70: 62 66                	ld	a2, 24(sp)
ffffffff80201b72: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80201b76: e7 80 c0 0f          	jalr	252(ra)
ffffffff80201b7a: 2a e8                	sd	a0, 16(sp)
ffffffff80201b7c: 2e e4                	sd	a1, 8(sp)
ffffffff80201b7e: 09 a0                	j	2
; }
ffffffff80201b80: 42 65                	ld	a0, 16(sp)
ffffffff80201b82: a2 65                	ld	a1, 8(sp)
ffffffff80201b84: be 60                	ld	ra, 456(sp)
ffffffff80201b86: 79 61                	addi	sp, sp, 464
ffffffff80201b88: 82 80                	ret

ffffffff80201b8a _ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h8e5859cf4afbd828E:
;     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
ffffffff80201b8a: 5d 71                	addi	sp, sp, -80
ffffffff80201b8c: 86 e4                	sd	ra, 72(sp)
ffffffff80201b8e: aa 86                	add	a3, zero, a0
ffffffff80201b90: 2a da                	sw	a0, 52(sp)
ffffffff80201b92: 2e fc                	sd	a1, 56(sp)
ffffffff80201b94: b2 e0                	sd	a2, 64(sp)
;         unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
ffffffff80201b96: 36 f4                	sd	a3, 40(sp)
ffffffff80201b98: 97 00 00 00          	auipc	ra, 0
ffffffff80201b9c: e7 80 c0 d9          	jalr	-612(ra)
ffffffff80201ba0: 2a f0                	sd	a0, 32(sp)
ffffffff80201ba2: 2e ec                	sd	a1, 24(sp)
ffffffff80201ba4: 09 a0                	j	2
ffffffff80201ba6: 02 75                	ld	a0, 32(sp)
ffffffff80201ba8: e2 65                	ld	a1, 24(sp)
ffffffff80201baa: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80201bae: e7 80 c0 87          	jalr	-1924(ra)
ffffffff80201bb2: 2a e8                	sd	a0, 16(sp)
ffffffff80201bb4: 2e e4                	sd	a1, 8(sp)
ffffffff80201bb6: 09 a0                	j	2
;     }
ffffffff80201bb8: 42 65                	ld	a0, 16(sp)
ffffffff80201bba: a2 65                	ld	a1, 8(sp)
ffffffff80201bbc: a6 60                	ld	ra, 72(sp)
ffffffff80201bbe: 61 61                	addi	sp, sp, 80
ffffffff80201bc0: 82 80                	ret

ffffffff80201bc2 _ZN4core4char7methods8len_utf817h57233141a823027eE:
; fn len_utf8(code: u32) -> usize {
ffffffff80201bc2: 01 11                	addi	sp, sp, -32
ffffffff80201bc4: 9b 05 05 00          	sext.w	a1, a0
ffffffff80201bc8: 2a 86                	add	a2, zero, a0
ffffffff80201bca: 2a ce                	sw	a0, 28(sp)
ffffffff80201bcc: 13 05 00 08          	addi	a0, zero, 128
;     if code < MAX_ONE_B {
ffffffff80201bd0: 32 e4                	sd	a2, 8(sp)
ffffffff80201bd2: 63 ea a5 00          	bltu	a1, a0, 20
ffffffff80201bd6: 09 a0                	j	2
;     } else if code < MAX_TWO_B {
ffffffff80201bd8: 22 65                	ld	a0, 8(sp)
ffffffff80201bda: 9b 55 b5 00          	srliw	a1, a0, 11
ffffffff80201bde: 01 46                	mv	a2, zero
ffffffff80201be0: 63 8d c5 00          	beq	a1, a2, 26
ffffffff80201be4: 21 a0                	j	8
ffffffff80201be6: 05 45                	addi	a0, zero, 1
;         1
ffffffff80201be8: 2a e8                	sd	a0, 16(sp)
;     if code < MAX_ONE_B {
ffffffff80201bea: 1d a0                	j	38
;     } else if code < MAX_THREE_B {
ffffffff80201bec: 22 65                	ld	a0, 8(sp)
ffffffff80201bee: 9b 55 05 01          	srliw	a1, a0, 16
ffffffff80201bf2: 01 46                	mv	a2, zero
ffffffff80201bf4: 63 89 c5 00          	beq	a1, a2, 18
ffffffff80201bf8: 21 a0                	j	8
ffffffff80201bfa: 09 45                	addi	a0, zero, 2
;         2
ffffffff80201bfc: 2a e8                	sd	a0, 16(sp)
;     } else if code < MAX_TWO_B {
ffffffff80201bfe: 01 a8                	j	16
ffffffff80201c00: 11 45                	addi	a0, zero, 4
;         4
ffffffff80201c02: 2a e8                	sd	a0, 16(sp)
;     } else if code < MAX_THREE_B {
ffffffff80201c04: 21 a0                	j	8
ffffffff80201c06: 0d 45                	addi	a0, zero, 3
;         3
ffffffff80201c08: 2a e8                	sd	a0, 16(sp)
;     } else if code < MAX_THREE_B {
ffffffff80201c0a: 09 a0                	j	2
;     } else if code < MAX_TWO_B {
ffffffff80201c0c: 09 a0                	j	2
;     if code < MAX_ONE_B {
ffffffff80201c0e: 09 a0                	j	2
; }
ffffffff80201c10: 42 65                	ld	a0, 16(sp)
ffffffff80201c12: 05 61                	addi	sp, sp, 32
ffffffff80201c14: 82 80                	ret

ffffffff80201c16 _ZN5riscv8register3sie10set_stimer17h8c9e9e5e6f0e92d8E:
;         pub unsafe fn $set_field() {
ffffffff80201c16: 41 11                	addi	sp, sp, -16
ffffffff80201c18: 06 e4                	sd	ra, 8(sp)
ffffffff80201c1a: 13 05 00 02          	addi	a0, zero, 32
;             _set($e);
ffffffff80201c1e: 97 00 00 00          	auipc	ra, 0
ffffffff80201c22: e7 80 00 01          	jalr	16(ra)
ffffffff80201c26: 09 a0                	j	2
;         }
ffffffff80201c28: a2 60                	ld	ra, 8(sp)
ffffffff80201c2a: 41 01                	addi	sp, sp, 16
ffffffff80201c2c: 82 80                	ret

ffffffff80201c2e _ZN5riscv8register3sie4_set17h8c0bc05622437e31E:
;         unsafe fn _set(bits: usize) {
ffffffff80201c2e: 41 11                	addi	sp, sp, -16
ffffffff80201c30: 2a e4                	sd	a0, 8(sp)
;                 () => llvm_asm!("csrrs x0, $1, $0" :: "r"(bits), "i"($csr_number) :: "volatile"),
ffffffff80201c32: 73 20 45 10          	csrs	sie, a0
;         }
ffffffff80201c36: 41 01                	addi	sp, sp, 16
ffffffff80201c38: 82 80                	ret

ffffffff80201c3a _ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h369add789a4bfc1eE:
;     fn obtain_lock(&self)
ffffffff80201c3a: 39 71                	addi	sp, sp, -64
ffffffff80201c3c: 06 fc                	sd	ra, 56(sp)
ffffffff80201c3e: 2a f8                	sd	a0, 48(sp)
ffffffff80201c40: 2a f4                	sd	a0, 40(sp)
ffffffff80201c42: 09 a0                	j	2
ffffffff80201c44: 01 45                	mv	a0, zero
ffffffff80201c46: 05 46                	addi	a2, zero, 1
ffffffff80201c48: 89 46                	addi	a3, zero, 2
;         while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
ffffffff80201c4a: a2 75                	ld	a1, 40(sp)
ffffffff80201c4c: 2a f0                	sd	a0, 32(sp)
ffffffff80201c4e: 2e 85                	add	a0, zero, a1
ffffffff80201c50: 82 75                	ld	a1, 32(sp)
ffffffff80201c52: 97 10 00 00          	auipc	ra, 1
ffffffff80201c56: e7 80 40 53          	jalr	1332(ra)
ffffffff80201c5a: 2a ec                	sd	a0, 24(sp)
ffffffff80201c5c: 09 a0                	j	2
ffffffff80201c5e: 01 45                	mv	a0, zero
ffffffff80201c60: e2 65                	ld	a1, 24(sp)
ffffffff80201c62: 63 96 a5 00          	bne	a1, a0, 12
ffffffff80201c66: 09 a0                	j	2
;     }
ffffffff80201c68: e2 70                	ld	ra, 56(sp)
ffffffff80201c6a: 21 61                	addi	sp, sp, 64
ffffffff80201c6c: 82 80                	ret
ffffffff80201c6e: 01 45                	mv	a0, zero
;             while self.lock.load(Ordering::Relaxed)
ffffffff80201c70: a2 75                	ld	a1, 40(sp)
ffffffff80201c72: 2a e8                	sd	a0, 16(sp)
ffffffff80201c74: 2e 85                	add	a0, zero, a1
ffffffff80201c76: c2 65                	ld	a1, 16(sp)
ffffffff80201c78: 97 10 00 00          	auipc	ra, 1
ffffffff80201c7c: e7 80 20 65          	jalr	1618(ra)
ffffffff80201c80: 2a e4                	sd	a0, 8(sp)
ffffffff80201c82: 09 a0                	j	2
ffffffff80201c84: 22 65                	ld	a0, 8(sp)
ffffffff80201c86: 19 e1                	bnez	a0, 6
ffffffff80201c88: 09 a0                	j	2
;         while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
ffffffff80201c8a: 6d bf                	j	-70
;                 cpu_relax();
ffffffff80201c8c: 97 10 00 00          	auipc	ra, 1
ffffffff80201c90: e7 80 80 7c          	jalr	1992(ra)
ffffffff80201c94: 09 a0                	j	2
;             while self.lock.load(Ordering::Relaxed)
ffffffff80201c96: e1 bf                	j	-40

ffffffff80201c98 _ZN4spin5mutex14Mutex$LT$T$GT$3new17hc4f5499e3518f458E:
;     pub const fn new(user_data: T) -> Mutex<T>
ffffffff80201c98: 59 71                	addi	sp, sp, -112
ffffffff80201c9a: 86 f4                	sd	ra, 104(sp)
ffffffff80201c9c: 01 46                	mv	a2, zero
;             lock: AtomicBool::new(false),
ffffffff80201c9e: 2a e8                	sd	a0, 16(sp)
ffffffff80201ca0: 32 85                	add	a0, zero, a2
ffffffff80201ca2: 2e e4                	sd	a1, 8(sp)
ffffffff80201ca4: 97 10 00 00          	auipc	ra, 1
ffffffff80201ca8: e7 80 20 60          	jalr	1538(ra)
ffffffff80201cac: a3 03 a1 06          	sb	a0, 103(sp)
ffffffff80201cb0: 23 0c a1 00          	sb	a0, 24(sp)
ffffffff80201cb4: 09 a0                	j	2
;             data: UnsafeCell::new(user_data),
ffffffff80201cb6: 22 65                	ld	a0, 8(sp)
ffffffff80201cb8: 0c 6d                	ld	a1, 24(a0)
ffffffff80201cba: ae ec                	sd	a1, 88(sp)
ffffffff80201cbc: 0c 69                	ld	a1, 16(a0)
ffffffff80201cbe: ae e8                	sd	a1, 80(sp)
ffffffff80201cc0: 0c 65                	ld	a1, 8(a0)
ffffffff80201cc2: ae e4                	sd	a1, 72(sp)
ffffffff80201cc4: 0c 61                	ld	a1, 0(a0)
ffffffff80201cc6: ae e0                	sd	a1, 64(sp)
ffffffff80201cc8: 08 10                	addi	a0, sp, 32
ffffffff80201cca: 8c 00                	addi	a1, sp, 64
ffffffff80201ccc: 97 10 00 00          	auipc	ra, 1
ffffffff80201cd0: e7 80 40 f3          	jalr	-204(ra)
ffffffff80201cd4: 09 a0                	j	2
;         Mutex
ffffffff80201cd6: 03 05 81 01          	lb	a0, 24(sp)
ffffffff80201cda: c2 65                	ld	a1, 16(sp)
ffffffff80201cdc: 23 80 a5 00          	sb	a0, 0(a1)
ffffffff80201ce0: 02 75                	ld	a0, 32(sp)
ffffffff80201ce2: 88 e5                	sd	a0, 8(a1)
ffffffff80201ce4: 22 75                	ld	a0, 40(sp)
ffffffff80201ce6: 88 e9                	sd	a0, 16(a1)
ffffffff80201ce8: 42 75                	ld	a0, 48(sp)
ffffffff80201cea: 88 ed                	sd	a0, 24(a1)
ffffffff80201cec: 62 75                	ld	a0, 56(sp)
ffffffff80201cee: 88 f1                	sd	a0, 32(a1)
;     }
ffffffff80201cf0: a6 70                	ld	ra, 104(sp)
ffffffff80201cf2: 65 61                	addi	sp, sp, 112
ffffffff80201cf4: 82 80                	ret

ffffffff80201cf6 _ZN4spin5mutex14Mutex$LT$T$GT$4lock17h777b58a6b55f271dE:
;     pub fn lock(&self) -> MutexGuard<T>
ffffffff80201cf6: 39 71                	addi	sp, sp, -64
ffffffff80201cf8: 06 fc                	sd	ra, 56(sp)
ffffffff80201cfa: 2a f8                	sd	a0, 48(sp)
;         self.obtain_lock();
ffffffff80201cfc: 2a ec                	sd	a0, 24(sp)
ffffffff80201cfe: 97 00 00 00          	auipc	ra, 0
ffffffff80201d02: e7 80 c0 f3          	jalr	-196(ra)
ffffffff80201d06: 09 a0                	j	2
;             lock: &self.lock,
ffffffff80201d08: 62 65                	ld	a0, 24(sp)
;             data: unsafe { &mut *self.data.get() },
ffffffff80201d0a: e2 65                	ld	a1, 24(sp)
ffffffff80201d0c: 13 86 85 00          	addi	a2, a1, 8
ffffffff80201d10: 2a e8                	sd	a0, 16(sp)
ffffffff80201d12: 32 85                	add	a0, zero, a2
ffffffff80201d14: 97 10 00 00          	auipc	ra, 1
ffffffff80201d18: e7 80 40 ee          	jalr	-284(ra)
ffffffff80201d1c: 2a e4                	sd	a0, 8(sp)
ffffffff80201d1e: 09 a0                	j	2
;         MutexGuard
ffffffff80201d20: 42 65                	ld	a0, 16(sp)
ffffffff80201d22: 2a f0                	sd	a0, 32(sp)
ffffffff80201d24: a2 65                	ld	a1, 8(sp)
ffffffff80201d26: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff80201d28: e2 70                	ld	ra, 56(sp)
ffffffff80201d2a: 21 61                	addi	sp, sp, 64
ffffffff80201d2c: 82 80                	ret

ffffffff80201d2e _ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h62fa8de90eb416c4E:
;     fn deref_mut<'b>(&'b mut self) -> &'b mut T { &mut *self.data }
ffffffff80201d2e: 41 11                	addi	sp, sp, -16
ffffffff80201d30: 2a e4                	sd	a0, 8(sp)
ffffffff80201d32: 08 65                	ld	a0, 8(a0)
ffffffff80201d34: 41 01                	addi	sp, sp, 16
ffffffff80201d36: 82 80                	ret

ffffffff80201d38 _ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17haf4e7ad9a798ca66E:
;     pub const fn cast<U>(self) -> NonNull<U> {
ffffffff80201d38: 01 11                	addi	sp, sp, -32
ffffffff80201d3a: 06 ec                	sd	ra, 24(sp)
ffffffff80201d3c: 2a e8                	sd	a0, 16(sp)
;         unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
ffffffff80201d3e: 97 40 00 00          	auipc	ra, 4
ffffffff80201d42: e7 80 40 48          	jalr	1156(ra)
ffffffff80201d46: 2a e4                	sd	a0, 8(sp)
ffffffff80201d48: 09 a0                	j	2
ffffffff80201d4a: 22 65                	ld	a0, 8(sp)
ffffffff80201d4c: 97 70 00 00          	auipc	ra, 7
ffffffff80201d50: e7 80 c0 16          	jalr	364(ra)
ffffffff80201d54: 2a e0                	sd	a0, 0(sp)
ffffffff80201d56: 09 a0                	j	2
;     }
ffffffff80201d58: 02 65                	ld	a0, 0(sp)
ffffffff80201d5a: e2 60                	ld	ra, 24(sp)
ffffffff80201d5c: 05 61                	addi	sp, sp, 32
ffffffff80201d5e: 82 80                	ret

ffffffff80201d60 _ZN4core3ptr19swap_nonoverlapping17h06c2c4b87f32b40bE:
; pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {
ffffffff80201d60: 1d 71                	addi	sp, sp, -96
ffffffff80201d62: 86 ec                	sd	ra, 88(sp)
ffffffff80201d64: 2a f0                	sd	a0, 32(sp)
ffffffff80201d66: 2e f4                	sd	a1, 40(sp)
ffffffff80201d68: 32 f8                	sd	a2, 48(sp)
;     let x = x as *mut u8;
ffffffff80201d6a: aa 86                	add	a3, zero, a0
ffffffff80201d6c: 2a fc                	sd	a0, 56(sp)
;     let y = y as *mut u8;
ffffffff80201d6e: 2e 85                	add	a0, zero, a1
ffffffff80201d70: ae e0                	sd	a1, 64(sp)
ffffffff80201d72: 91 45                	addi	a1, zero, 4
;     intrinsics::size_of::<T>()
ffffffff80201d74: ae e8                	sd	a1, 80(sp)
;     let len = mem::size_of::<T>() * count;
ffffffff80201d76: 32 ec                	sd	a2, 24(sp)
ffffffff80201d78: 36 e8                	sd	a3, 16(sp)
ffffffff80201d7a: 2a e4                	sd	a0, 8(sp)
ffffffff80201d7c: 2e e0                	sd	a1, 0(sp)
ffffffff80201d7e: 09 a0                	j	2
ffffffff80201d80: 02 65                	ld	a0, 0(sp)
ffffffff80201d82: e2 65                	ld	a1, 24(sp)
ffffffff80201d84: 33 06 b5 02          	<unknown>
ffffffff80201d88: b2 e4                	sd	a2, 72(sp)
;     swap_nonoverlapping_bytes(x, y, len)
ffffffff80201d8a: 42 65                	ld	a0, 16(sp)
ffffffff80201d8c: a2 65                	ld	a1, 8(sp)
ffffffff80201d8e: 97 20 00 00          	auipc	ra, 2
ffffffff80201d92: e7 80 c0 b1          	jalr	-1252(ra)
ffffffff80201d96: 09 a0                	j	2
; }
ffffffff80201d98: e6 60                	ld	ra, 88(sp)
ffffffff80201d9a: 25 61                	addi	sp, sp, 96
ffffffff80201d9c: 82 80                	ret

ffffffff80201d9e _ZN4core3ptr23swap_nonoverlapping_one17hbea2a1831e01ce58E:
; pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {
ffffffff80201d9e: 5d 71                	addi	sp, sp, -80
ffffffff80201da0: 86 e4                	sd	ra, 72(sp)
ffffffff80201da2: 2a f4                	sd	a0, 40(sp)
ffffffff80201da4: 2e f8                	sd	a1, 48(sp)
ffffffff80201da6: 11 46                	addi	a2, zero, 4
;     intrinsics::size_of::<T>()
ffffffff80201da8: b2 e0                	sd	a2, 64(sp)
;     if mem::size_of::<T>() < 32 {
ffffffff80201daa: 2e ec                	sd	a1, 24(sp)
ffffffff80201dac: 2a e8                	sd	a0, 16(sp)
ffffffff80201dae: 32 e4                	sd	a2, 8(sp)
ffffffff80201db0: 09 a0                	j	2
ffffffff80201db2: 13 05 00 02          	addi	a0, zero, 32
ffffffff80201db6: a2 65                	ld	a1, 8(sp)
ffffffff80201db8: 63 eb a5 00          	bltu	a1, a0, 22
ffffffff80201dbc: 09 a0                	j	2
ffffffff80201dbe: 05 46                	addi	a2, zero, 1
;         swap_nonoverlapping(x, y, 1);
ffffffff80201dc0: 42 65                	ld	a0, 16(sp)
ffffffff80201dc2: e2 65                	ld	a1, 24(sp)
ffffffff80201dc4: 97 00 00 00          	auipc	ra, 0
ffffffff80201dc8: e7 80 c0 f9          	jalr	-100(ra)
ffffffff80201dcc: 15 a8                	j	52
;         let z = read(x);
ffffffff80201dce: 42 65                	ld	a0, 16(sp)
ffffffff80201dd0: 97 00 00 00          	auipc	ra, 0
ffffffff80201dd4: e7 80 a0 04          	jalr	74(ra)
ffffffff80201dd8: aa 85                	add	a1, zero, a0
ffffffff80201dda: 2a de                	sw	a0, 60(sp)
ffffffff80201ddc: 2e e0                	sd	a1, 0(sp)
ffffffff80201dde: 09 a0                	j	2
ffffffff80201de0: 05 46                	addi	a2, zero, 1
;         copy_nonoverlapping(y, x, 1);
ffffffff80201de2: 62 65                	ld	a0, 24(sp)
ffffffff80201de4: c2 65                	ld	a1, 16(sp)
ffffffff80201de6: 97 20 00 00          	auipc	ra, 2
ffffffff80201dea: e7 80 c0 f6          	jalr	-148(ra)
ffffffff80201dee: 09 a0                	j	2
;         write(y, z);
ffffffff80201df0: 62 65                	ld	a0, 24(sp)
ffffffff80201df2: 82 65                	ld	a1, 0(sp)
ffffffff80201df4: 97 00 00 00          	auipc	ra, 0
ffffffff80201df8: e7 80 00 06          	jalr	96(ra)
ffffffff80201dfc: 09 a0                	j	2
;     if mem::size_of::<T>() < 32 {
ffffffff80201dfe: 11 a0                	j	4
ffffffff80201e00: 09 a0                	j	2
; }
ffffffff80201e02: a6 60                	ld	ra, 72(sp)
ffffffff80201e04: 61 61                	addi	sp, sp, 80
ffffffff80201e06: 82 80                	ret

ffffffff80201e08 _ZN4core3ptr24slice_from_raw_parts_mut17h655fe6891340b507E:
; pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
ffffffff80201e08: 79 71                	addi	sp, sp, -48
ffffffff80201e0a: 2a f0                	sd	a0, 32(sp)
ffffffff80201e0c: 2e f4                	sd	a1, 40(sp)
;     unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }
ffffffff80201e0e: 2a e8                	sd	a0, 16(sp)
ffffffff80201e10: 2e ec                	sd	a1, 24(sp)
ffffffff80201e12: 2a e0                	sd	a0, 0(sp)
ffffffff80201e14: 2e e4                	sd	a1, 8(sp)
; }
ffffffff80201e16: 45 61                	addi	sp, sp, 48
ffffffff80201e18: 82 80                	ret

ffffffff80201e1a _ZN4core3ptr4read17h40e015325c1d5162E:
; pub unsafe fn read<T>(src: *const T) -> T {
ffffffff80201e1a: 5d 71                	addi	sp, sp, -80
ffffffff80201e1c: 86 e4                	sd	ra, 72(sp)
ffffffff80201e1e: 2a f0                	sd	a0, 32(sp)
;     }
ffffffff80201e20: b2 55                	lw	a1, 44(sp)
;     let mut tmp = MaybeUninit::<T>::uninit();
ffffffff80201e22: 2e ce                	sw	a1, 28(sp)
ffffffff80201e24: 2a e8                	sd	a0, 16(sp)
ffffffff80201e26: 09 a0                	j	2
ffffffff80201e28: 68 08                	addi	a0, sp, 28
ffffffff80201e2a: 2a fc                	sd	a0, 56(sp)
ffffffff80201e2c: aa e0                	sd	a0, 64(sp)
;     copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
ffffffff80201e2e: 09 a0                	j	2
ffffffff80201e30: 6c 08                	addi	a1, sp, 28
ffffffff80201e32: 05 46                	addi	a2, zero, 1
ffffffff80201e34: 42 65                	ld	a0, 16(sp)
ffffffff80201e36: 97 20 00 00          	auipc	ra, 2
ffffffff80201e3a: e7 80 c0 f1          	jalr	-228(ra)
ffffffff80201e3e: 09 a0                	j	2
;     tmp.assume_init()
ffffffff80201e40: 03 65 c1 01          	lwu	a0, 28(sp)
ffffffff80201e44: 2a d8                	sw	a0, 48(sp)
ffffffff80201e46: 2a da                	sw	a0, 52(sp)
ffffffff80201e48: 2a e4                	sd	a0, 8(sp)
ffffffff80201e4a: 09 a0                	j	2
; }
ffffffff80201e4c: 22 65                	ld	a0, 8(sp)
ffffffff80201e4e: a6 60                	ld	ra, 72(sp)
ffffffff80201e50: 61 61                	addi	sp, sp, 80
ffffffff80201e52: 82 80                	ret

ffffffff80201e54 _ZN4core3ptr5write17he55bdaa4ae6d7908E:
; pub unsafe fn write<T>(dst: *mut T, src: T) {
ffffffff80201e54: 01 11                	addi	sp, sp, -32
ffffffff80201e56: 2e 86                	add	a2, zero, a1
ffffffff80201e58: 2a e8                	sd	a0, 16(sp)
ffffffff80201e5a: 2e ce                	sw	a1, 28(sp)
;     intrinsics::move_val_init(&mut *dst, src)
ffffffff80201e5c: 0c c1                	sw	a1, 0(a0)
; }
ffffffff80201e5e: 05 61                	addi	sp, sp, 32
ffffffff80201e60: 82 80                	ret

ffffffff80201e62 _ZN4core3num12NonZeroUsize13new_unchecked17hc0304e5152f69309E:
;                 pub const unsafe fn new_unchecked(n: $Int) -> Self {
ffffffff80201e62: 41 11                	addi	sp, sp, -16
ffffffff80201e64: 2a e4                	sd	a0, 8(sp)
;                     Self(n)
ffffffff80201e66: 2a e0                	sd	a0, 0(sp)
;                 }
ffffffff80201e68: 41 01                	addi	sp, sp, 16
ffffffff80201e6a: 82 80                	ret

ffffffff80201e6c _ZN4core3num12NonZeroUsize3get17hb1956f98d630db0dE:
;                 pub const fn get(self) -> $Int {
ffffffff80201e6c: 41 11                	addi	sp, sp, -16
ffffffff80201e6e: 2a e4                	sd	a0, 8(sp)
;                 }
ffffffff80201e70: 41 01                	addi	sp, sp, 16
ffffffff80201e72: 82 80                	ret

ffffffff80201e74 _ZN4core3num21_$LT$impl$u20$i32$GT$13unchecked_add17h495438ef5bd7f788E:
;             pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
ffffffff80201e74: 01 11                	addi	sp, sp, -32
ffffffff80201e76: 2e 86                	add	a2, zero, a1
ffffffff80201e78: aa 86                	add	a3, zero, a0
ffffffff80201e7a: 2a ca                	sw	a0, 20(sp)
ffffffff80201e7c: 2e cc                	sw	a1, 24(sp)
;                 intrinsics::unchecked_add(self, rhs)
ffffffff80201e7e: 2e 95                	add	a0, a0, a1
ffffffff80201e80: 2a ce                	sw	a0, 28(sp)
ffffffff80201e82: 02 15                	slli	a0, a0, 32
ffffffff80201e84: 01 91                	srli	a0, a0, 32
ffffffff80201e86: 2a e4                	sd	a0, 8(sp)
ffffffff80201e88: 09 a0                	j	2
;             }
ffffffff80201e8a: 22 65                	ld	a0, 8(sp)
ffffffff80201e8c: 05 61                	addi	sp, sp, 32
ffffffff80201e8e: 82 80                	ret

ffffffff80201e90 _ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17h41c4a2e5792fe87dE:
;             pub const fn count_ones(self) -> u32 {
ffffffff80201e90: 01 11                	addi	sp, sp, -32
ffffffff80201e92: 2a e8                	sd	a0, 16(sp)
;                 intrinsics::ctpop(self as $ActualT) as u32
ffffffff80201e94: 93 55 15 00          	srli	a1, a0, 1
ffffffff80201e98: 37 56 55 05          	lui	a2, 21845
ffffffff80201e9c: 1b 06 56 55          	addiw	a2, a2, 1365
ffffffff80201ea0: 32 06                	slli	a2, a2, 12
ffffffff80201ea2: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80201ea6: 32 06                	slli	a2, a2, 12
ffffffff80201ea8: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80201eac: 32 06                	slli	a2, a2, 12
ffffffff80201eae: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80201eb2: f1 8d                	and	a1, a1, a2
ffffffff80201eb4: 0d 8d                	sub	a0, a0, a1
ffffffff80201eb6: b7 35 33 03          	lui	a1, 13107
ffffffff80201eba: 9b 85 35 33          	addiw	a1, a1, 819
ffffffff80201ebe: b2 05                	slli	a1, a1, 12
ffffffff80201ec0: 93 85 35 33          	addi	a1, a1, 819
ffffffff80201ec4: b2 05                	slli	a1, a1, 12
ffffffff80201ec6: 93 85 35 33          	addi	a1, a1, 819
ffffffff80201eca: b2 05                	slli	a1, a1, 12
ffffffff80201ecc: 93 85 35 33          	addi	a1, a1, 819
ffffffff80201ed0: 33 76 b5 00          	and	a2, a0, a1
ffffffff80201ed4: 09 81                	srli	a0, a0, 2
ffffffff80201ed6: 6d 8d                	and	a0, a0, a1
ffffffff80201ed8: 32 95                	add	a0, a0, a2
ffffffff80201eda: 93 55 45 00          	srli	a1, a0, 4
ffffffff80201ede: 2e 95                	add	a0, a0, a1
ffffffff80201ee0: b7 f5 f0 00          	lui	a1, 3855
ffffffff80201ee4: 9b 85 15 0f          	addiw	a1, a1, 241
ffffffff80201ee8: b2 05                	slli	a1, a1, 12
ffffffff80201eea: 93 85 f5 f0          	addi	a1, a1, -241
ffffffff80201eee: b2 05                	slli	a1, a1, 12
ffffffff80201ef0: 93 85 15 0f          	addi	a1, a1, 241
ffffffff80201ef4: b2 05                	slli	a1, a1, 12
ffffffff80201ef6: 93 85 f5 f0          	addi	a1, a1, -241
ffffffff80201efa: 6d 8d                	and	a0, a0, a1
ffffffff80201efc: b7 05 01 01          	lui	a1, 4112
ffffffff80201f00: 9b 85 15 10          	addiw	a1, a1, 257
ffffffff80201f04: c2 05                	slli	a1, a1, 16
ffffffff80201f06: 93 85 15 10          	addi	a1, a1, 257
ffffffff80201f0a: c2 05                	slli	a1, a1, 16
ffffffff80201f0c: 93 85 15 10          	addi	a1, a1, 257
ffffffff80201f10: 33 05 b5 02          	<unknown>
ffffffff80201f14: 61 91                	srli	a0, a0, 56
ffffffff80201f16: 2a ec                	sd	a0, 24(sp)
ffffffff80201f18: 2a e4                	sd	a0, 8(sp)
ffffffff80201f1a: 09 a0                	j	2
;             }
ffffffff80201f1c: 22 65                	ld	a0, 8(sp)
ffffffff80201f1e: 05 61                	addi	sp, sp, 32
ffffffff80201f20: 82 80                	ret

ffffffff80201f22 _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hd4056139a8a00925E:
;             pub const fn checked_add(self, rhs: Self) -> Option<Self> {
ffffffff80201f22: 5d 71                	addi	sp, sp, -80
ffffffff80201f24: 86 e4                	sd	ra, 72(sp)
ffffffff80201f26: 2a f4                	sd	a0, 40(sp)
ffffffff80201f28: 2e f8                	sd	a1, 48(sp)
;                 let (a, b) = self.overflowing_add(rhs);
ffffffff80201f2a: 97 00 00 00          	auipc	ra, 0
ffffffff80201f2e: e7 80 c0 0c          	jalr	204(ra)
ffffffff80201f32: 2a e8                	sd	a0, 16(sp)
ffffffff80201f34: 2e e4                	sd	a1, 8(sp)
ffffffff80201f36: 09 a0                	j	2
ffffffff80201f38: 42 65                	ld	a0, 16(sp)
ffffffff80201f3a: 2a fc                	sd	a0, 56(sp)
ffffffff80201f3c: a2 65                	ld	a1, 8(sp)
ffffffff80201f3e: 13 f6 15 00          	andi	a2, a1, 1
ffffffff80201f42: a3 03 c1 04          	sb	a2, 71(sp)
;                 if b {None} else {Some(a)}
ffffffff80201f46: 19 e6                	bnez	a2, 14
ffffffff80201f48: 09 a0                	j	2
ffffffff80201f4a: 42 65                	ld	a0, 16(sp)
ffffffff80201f4c: 2a f0                	sd	a0, 32(sp)
ffffffff80201f4e: 85 45                	addi	a1, zero, 1
ffffffff80201f50: 2e ec                	sd	a1, 24(sp)
ffffffff80201f52: 21 a0                	j	8
ffffffff80201f54: 01 45                	mv	a0, zero
ffffffff80201f56: 2a ec                	sd	a0, 24(sp)
ffffffff80201f58: 09 a0                	j	2
;             }
ffffffff80201f5a: 62 65                	ld	a0, 24(sp)
ffffffff80201f5c: 82 75                	ld	a1, 32(sp)
ffffffff80201f5e: a6 60                	ld	ra, 72(sp)
ffffffff80201f60: 61 61                	addi	sp, sp, 80
ffffffff80201f62: 82 80                	ret

ffffffff80201f64 _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17hd6dbc84c61b5474bE:
;             pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
ffffffff80201f64: 5d 71                	addi	sp, sp, -80
ffffffff80201f66: 86 e4                	sd	ra, 72(sp)
ffffffff80201f68: 2a f4                	sd	a0, 40(sp)
ffffffff80201f6a: 2e f8                	sd	a1, 48(sp)
;                 let (a, b) = self.overflowing_mul(rhs);
ffffffff80201f6c: 97 00 00 00          	auipc	ra, 0
ffffffff80201f70: e7 80 60 0b          	jalr	182(ra)
ffffffff80201f74: 2a e8                	sd	a0, 16(sp)
ffffffff80201f76: 2e e4                	sd	a1, 8(sp)
ffffffff80201f78: 09 a0                	j	2
ffffffff80201f7a: 42 65                	ld	a0, 16(sp)
ffffffff80201f7c: 2a fc                	sd	a0, 56(sp)
ffffffff80201f7e: a2 65                	ld	a1, 8(sp)
ffffffff80201f80: 13 f6 15 00          	andi	a2, a1, 1
ffffffff80201f84: a3 03 c1 04          	sb	a2, 71(sp)
;                 if b {None} else {Some(a)}
ffffffff80201f88: 19 e6                	bnez	a2, 14
ffffffff80201f8a: 09 a0                	j	2
ffffffff80201f8c: 42 65                	ld	a0, 16(sp)
ffffffff80201f8e: 2a f0                	sd	a0, 32(sp)
ffffffff80201f90: 85 45                	addi	a1, zero, 1
ffffffff80201f92: 2e ec                	sd	a1, 24(sp)
ffffffff80201f94: 21 a0                	j	8
ffffffff80201f96: 01 45                	mv	a0, zero
ffffffff80201f98: 2a ec                	sd	a0, 24(sp)
ffffffff80201f9a: 09 a0                	j	2
;             }
ffffffff80201f9c: 62 65                	ld	a0, 24(sp)
ffffffff80201f9e: 82 75                	ld	a1, 32(sp)
ffffffff80201fa0: a6 60                	ld	ra, 72(sp)
ffffffff80201fa2: 61 61                	addi	sp, sp, 80
ffffffff80201fa4: 82 80                	ret

ffffffff80201fa6 _ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_add17h22d5548ed58c84b8E:
;             pub const fn wrapping_add(self, rhs: Self) -> Self {
ffffffff80201fa6: 01 11                	addi	sp, sp, -32
ffffffff80201fa8: 2a e4                	sd	a0, 8(sp)
ffffffff80201faa: 2e e8                	sd	a1, 16(sp)
;                 intrinsics::wrapping_add(self, rhs)
ffffffff80201fac: 2e 95                	add	a0, a0, a1
ffffffff80201fae: 2a ec                	sd	a0, 24(sp)
ffffffff80201fb0: 2a e0                	sd	a0, 0(sp)
ffffffff80201fb2: 09 a0                	j	2
;             }
ffffffff80201fb4: 02 65                	ld	a0, 0(sp)
ffffffff80201fb6: 05 61                	addi	sp, sp, 32
ffffffff80201fb8: 82 80                	ret

ffffffff80201fba _ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17hf0ce270dff0b66bbE:
;             pub const fn wrapping_sub(self, rhs: Self) -> Self {
ffffffff80201fba: 01 11                	addi	sp, sp, -32
ffffffff80201fbc: 2a e4                	sd	a0, 8(sp)
ffffffff80201fbe: 2e e8                	sd	a1, 16(sp)
;                 intrinsics::wrapping_sub(self, rhs)
ffffffff80201fc0: 0d 8d                	sub	a0, a0, a1
ffffffff80201fc2: 2a ec                	sd	a0, 24(sp)
ffffffff80201fc4: 2a e0                	sd	a0, 0(sp)
ffffffff80201fc6: 09 a0                	j	2
;             }
ffffffff80201fc8: 02 65                	ld	a0, 0(sp)
ffffffff80201fca: 05 61                	addi	sp, sp, 32
ffffffff80201fcc: 82 80                	ret

ffffffff80201fce _ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h8bd63665f8cfbb3cE:
;             pub const fn is_power_of_two(self) -> bool {
ffffffff80201fce: 01 11                	addi	sp, sp, -32
ffffffff80201fd0: 06 ec                	sd	ra, 24(sp)
ffffffff80201fd2: 2a e8                	sd	a0, 16(sp)
;                 self.count_ones() == 1
ffffffff80201fd4: 97 00 00 00          	auipc	ra, 0
ffffffff80201fd8: e7 80 c0 eb          	jalr	-324(ra)
ffffffff80201fdc: 2a e4                	sd	a0, 8(sp)
ffffffff80201fde: 09 a0                	j	2
ffffffff80201fe0: 22 65                	ld	a0, 8(sp)
ffffffff80201fe2: 93 15 05 02          	slli	a1, a0, 32
ffffffff80201fe6: 81 91                	srli	a1, a1, 32
ffffffff80201fe8: 93 c5 15 00          	xori	a1, a1, 1
ffffffff80201fec: 13 b5 15 00          	seqz	a0, a1
;             }
ffffffff80201ff0: e2 60                	ld	ra, 24(sp)
ffffffff80201ff2: 05 61                	addi	sp, sp, 32
ffffffff80201ff4: 82 80                	ret

ffffffff80201ff6 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h2e2742725d66293cE:
;             pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
ffffffff80201ff6: 5d 71                	addi	sp, sp, -80
ffffffff80201ff8: 2a f0                	sd	a0, 32(sp)
ffffffff80201ffa: 2e f4                	sd	a1, 40(sp)
;                 let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
ffffffff80201ffc: aa 95                	add	a1, a1, a0
ffffffff80201ffe: 33 b5 a5 00          	sltu	a0, a1, a0
ffffffff80202002: 2e f8                	sd	a1, 48(sp)
ffffffff80202004: 23 0c a1 02          	sb	a0, 56(sp)
ffffffff80202008: 2e e4                	sd	a1, 8(sp)
ffffffff8020200a: 2a e0                	sd	a0, 0(sp)
ffffffff8020200c: 09 a0                	j	2
ffffffff8020200e: 22 65                	ld	a0, 8(sp)
ffffffff80202010: aa e0                	sd	a0, 64(sp)
ffffffff80202012: 82 65                	ld	a1, 0(sp)
ffffffff80202014: a3 07 b1 04          	sb	a1, 79(sp)
;                 (a as Self, b)
ffffffff80202018: 2a e8                	sd	a0, 16(sp)
ffffffff8020201a: 23 0c b1 00          	sb	a1, 24(sp)
;             }
ffffffff8020201e: 61 61                	addi	sp, sp, 80
ffffffff80202020: 82 80                	ret

ffffffff80202022 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h1a6c95088205540dE:
;         pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
ffffffff80202022: 5d 71                	addi	sp, sp, -80
ffffffff80202024: 2a f0                	sd	a0, 32(sp)
ffffffff80202026: 2e f4                	sd	a1, 40(sp)
;             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
ffffffff80202028: 33 36 b5 02          	<unknown>
ffffffff8020202c: 33 36 c0 00          	snez	a2, a2
ffffffff80202030: 33 05 b5 02          	<unknown>
ffffffff80202034: 2a f8                	sd	a0, 48(sp)
ffffffff80202036: 23 0c c1 02          	sb	a2, 56(sp)
ffffffff8020203a: 32 e4                	sd	a2, 8(sp)
ffffffff8020203c: 2a e0                	sd	a0, 0(sp)
ffffffff8020203e: 09 a0                	j	2
ffffffff80202040: 02 65                	ld	a0, 0(sp)
ffffffff80202042: aa e0                	sd	a0, 64(sp)
ffffffff80202044: a2 65                	ld	a1, 8(sp)
ffffffff80202046: a3 07 b1 04          	sb	a1, 79(sp)
;             (a as Self, b)
ffffffff8020204a: 2a e8                	sd	a0, 16(sp)
ffffffff8020204c: 23 0c b1 00          	sb	a1, 24(sp)
;         }
ffffffff80202050: 61 61                	addi	sp, sp, 80
ffffffff80202052: 82 80                	ret

ffffffff80202054 _ZN4core6result19Result$LT$T$C$E$GT$3map17h8af5db177d34c402E:
;     pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
ffffffff80202054: 1d 71                	addi	sp, sp, -96
ffffffff80202056: 86 ec                	sd	ra, 88(sp)
ffffffff80202058: 32 f8                	sd	a2, 48(sp)
ffffffff8020205a: 85 46                	addi	a3, zero, 1
;             Ok(t) => Ok(op(t)),
ffffffff8020205c: a3 07 d1 02          	sb	a3, 47(sp)
ffffffff80202060: 94 61                	ld	a3, 0(a1)
ffffffff80202062: 01 47                	mv	a4, zero
ffffffff80202064: 32 e8                	sd	a2, 16(sp)
ffffffff80202066: 2e e4                	sd	a1, 8(sp)
ffffffff80202068: 2a e0                	sd	a0, 0(sp)
ffffffff8020206a: 63 8f e6 00          	beq	a3, a4, 30
ffffffff8020206e: 09 a0                	j	2
;             Err(e) => Err(e),
ffffffff80202070: 22 65                	ld	a0, 8(sp)
ffffffff80202072: 0c 65                	ld	a1, 8(a0)
ffffffff80202074: 10 69                	ld	a2, 16(a0)
ffffffff80202076: 2e fc                	sd	a1, 56(sp)
ffffffff80202078: b2 e0                	sd	a2, 64(sp)
ffffffff8020207a: 82 66                	ld	a3, 0(sp)
ffffffff8020207c: 8c e6                	sd	a1, 8(a3)
ffffffff8020207e: 90 ea                	sd	a2, 16(a3)
ffffffff80202080: 85 45                	addi	a1, zero, 1
ffffffff80202082: 8c e2                	sd	a1, 0(a3)
;         match self {
ffffffff80202084: 3d a0                	j	46
ffffffff80202086: 00 00                	unimp	
;             Ok(t) => Ok(op(t)),
ffffffff80202088: 22 65                	ld	a0, 8(sp)
ffffffff8020208a: 0c 65                	ld	a1, 8(a0)
ffffffff8020208c: ae e4                	sd	a1, 72(sp)
ffffffff8020208e: 01 46                	mv	a2, zero
ffffffff80202090: a3 07 c1 02          	sb	a2, 47(sp)
ffffffff80202094: 2e f0                	sd	a1, 32(sp)
ffffffff80202096: 42 65                	ld	a0, 16(sp)
ffffffff80202098: 97 20 00 00          	auipc	ra, 2
ffffffff8020209c: e7 80 00 da          	jalr	-608(ra)
ffffffff802020a0: aa e8                	sd	a0, 80(sp)
ffffffff802020a2: 2a ec                	sd	a0, 24(sp)
ffffffff802020a4: 09 a0                	j	2
ffffffff802020a6: 62 65                	ld	a0, 24(sp)
ffffffff802020a8: 82 65                	ld	a1, 0(sp)
ffffffff802020aa: 88 e5                	sd	a0, 8(a1)
ffffffff802020ac: 01 45                	mv	a0, zero
ffffffff802020ae: 88 e1                	sd	a0, 0(a1)
;         match self {
ffffffff802020b0: 09 a0                	j	2
;     }
ffffffff802020b2: 03 45 f1 02          	lbu	a0, 47(sp)
ffffffff802020b6: 05 89                	andi	a0, a0, 1
ffffffff802020b8: 09 e5                	bnez	a0, 10
ffffffff802020ba: 09 a0                	j	2
ffffffff802020bc: e6 60                	ld	ra, 88(sp)
ffffffff802020be: 25 61                	addi	sp, sp, 96
ffffffff802020c0: 82 80                	ret
ffffffff802020c2: 01 45                	mv	a0, zero
ffffffff802020c4: a3 07 a1 02          	sb	a0, 47(sp)
ffffffff802020c8: d5 bf                	j	-12

ffffffff802020ca _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea6f5709653eef67E:
;     pub fn unwrap(self) -> T {
ffffffff802020ca: 01 11                	addi	sp, sp, -32
ffffffff802020cc: 2a 86                	add	a2, zero, a0
ffffffff802020ce: a3 07 a1 00          	sb	a0, 15(sp)
;             Ok(t) => t,
ffffffff802020d2: aa 86                	add	a3, zero, a0
ffffffff802020d4: 01 47                	mv	a4, zero
ffffffff802020d6: 2e e0                	sd	a1, 0(sp)
ffffffff802020d8: 63 05 e5 02          	beq	a0, a4, 42
ffffffff802020dc: 09 a0                	j	2

ffffffff802020de .LBB1_5:
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
ffffffff802020de: 17 b5 00 00          	auipc	a0, 11
ffffffff802020e2: 13 05 a5 46          	addi	a0, a0, 1130

ffffffff802020e6 .LBB1_6:
ffffffff802020e6: 97 b6 00 00          	auipc	a3, 11
ffffffff802020ea: 93 86 26 49          	addi	a3, a3, 1170
ffffffff802020ee: 93 05 b0 02          	addi	a1, zero, 43
ffffffff802020f2: 10 08                	addi	a2, sp, 16
ffffffff802020f4: 02 67                	ld	a4, 0(sp)
ffffffff802020f6: 97 80 00 00          	auipc	ra, 8
ffffffff802020fa: e7 80 20 1f          	jalr	498(ra)
ffffffff802020fe: 00 00                	unimp	
;         match self {
ffffffff80202100: 00 00                	unimp	
;     }
ffffffff80202102: 05 61                	addi	sp, sp, 32
ffffffff80202104: 82 80                	ret

ffffffff80202106 _ZN53_$LT$usize$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hb8679754a28f1701E:
;             fn add_assign(&mut self, other: $t) { *self += other }
ffffffff80202106: 01 11                	addi	sp, sp, -32
ffffffff80202108: 2a e8                	sd	a0, 16(sp)
ffffffff8020210a: 2e ec                	sd	a1, 24(sp)
ffffffff8020210c: 10 61                	ld	a2, 0(a0)
ffffffff8020210e: b2 95                	add	a1, a1, a2
ffffffff80202110: 2a e4                	sd	a0, 8(sp)
ffffffff80202112: 2e e0                	sd	a1, 0(sp)
ffffffff80202114: 63 e8 c5 00          	bltu	a1, a2, 16
ffffffff80202118: 09 a0                	j	2
ffffffff8020211a: 02 65                	ld	a0, 0(sp)
ffffffff8020211c: a2 65                	ld	a1, 8(sp)
ffffffff8020211e: 88 e1                	sd	a0, 0(a1)
ffffffff80202120: 05 61                	addi	sp, sp, 32
ffffffff80202122: 82 80                	ret

ffffffff80202124 .LBB0_3:
ffffffff80202124: 17 b5 00 00          	auipc	a0, 11
ffffffff80202128: 13 05 c5 50          	addi	a0, a0, 1292

ffffffff8020212c .LBB0_4:
ffffffff8020212c: 17 b6 00 00          	auipc	a2, 11
ffffffff80202130: 13 06 46 4e          	addi	a2, a2, 1252
ffffffff80202134: f1 45                	addi	a1, zero, 28
ffffffff80202136: 97 80 00 00          	auipc	ra, 8
ffffffff8020213a: e7 80 20 20          	jalr	514(ra)
ffffffff8020213e: 00 00                	unimp	

ffffffff80202140 _ZN5alloc5alloc12alloc_zeroed17h69840313d3149a1dE:
; pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
ffffffff80202140: 79 71                	addi	sp, sp, -48
ffffffff80202142: 06 f4                	sd	ra, 40(sp)
ffffffff80202144: 2a ec                	sd	a0, 24(sp)
ffffffff80202146: 2e f0                	sd	a1, 32(sp)
ffffffff80202148: 28 08                	addi	a0, sp, 24
;     unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
ffffffff8020214a: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020214e: e7 80 00 69          	jalr	1680(ra)
ffffffff80202152: 2a e8                	sd	a0, 16(sp)
ffffffff80202154: 09 a0                	j	2
ffffffff80202156: 28 08                	addi	a0, sp, 24
ffffffff80202158: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020215c: e7 80 c0 68          	jalr	1676(ra)
ffffffff80202160: 2a e4                	sd	a0, 8(sp)
ffffffff80202162: 09 a0                	j	2
ffffffff80202164: 42 65                	ld	a0, 16(sp)
ffffffff80202166: a2 65                	ld	a1, 8(sp)
ffffffff80202168: 97 30 00 00          	auipc	ra, 3
ffffffff8020216c: e7 80 40 2f          	jalr	756(ra)
ffffffff80202170: 2a e0                	sd	a0, 0(sp)
ffffffff80202172: 09 a0                	j	2
; }
ffffffff80202174: 02 65                	ld	a0, 0(sp)
ffffffff80202176: a2 70                	ld	ra, 40(sp)
ffffffff80202178: 45 61                	addi	sp, sp, 48
ffffffff8020217a: 82 80                	ret

ffffffff8020217c _ZN5alloc5alloc15exchange_malloc17h9ff042bfcfc41cabE:
; unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {
ffffffff8020217c: 59 71                	addi	sp, sp, -112
ffffffff8020217e: 86 f4                	sd	ra, 104(sp)
ffffffff80202180: 2a fc                	sd	a0, 56(sp)
ffffffff80202182: ae e0                	sd	a1, 64(sp)
;     let layout = unsafe { Layout::from_size_align_unchecked(size, align) };
ffffffff80202184: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80202188: e7 80 00 63          	jalr	1584(ra)
ffffffff8020218c: 2a 86                	add	a2, zero, a0
ffffffff8020218e: ae 86                	add	a3, zero, a1
ffffffff80202190: aa e4                	sd	a0, 72(sp)
ffffffff80202192: ae e8                	sd	a1, 80(sp)
ffffffff80202194: 32 ec                	sd	a2, 24(sp)
ffffffff80202196: 36 e8                	sd	a3, 16(sp)
ffffffff80202198: 09 a0                	j	2
ffffffff8020219a: 08 18                	addi	a0, sp, 48
ffffffff8020219c: 81 45                	mv	a1, zero
;     match Global.alloc(layout, AllocInit::Uninitialized) {
ffffffff8020219e: 62 66                	ld	a2, 24(sp)
ffffffff802021a0: 2e e4                	sd	a1, 8(sp)
ffffffff802021a2: b2 85                	add	a1, zero, a2
ffffffff802021a4: 42 66                	ld	a2, 16(sp)
ffffffff802021a6: a2 66                	ld	a3, 8(sp)
ffffffff802021a8: 97 00 00 00          	auipc	ra, 0
ffffffff802021ac: e7 80 40 0c          	jalr	196(ra)
ffffffff802021b0: 2a f0                	sd	a0, 32(sp)
ffffffff802021b2: 2e f4                	sd	a1, 40(sp)
ffffffff802021b4: 09 a0                	j	2
;         Ok(memory) => memory.ptr.as_ptr(),
ffffffff802021b6: 02 75                	ld	a0, 32(sp)
ffffffff802021b8: 93 35 15 00          	seqz	a1, a0
ffffffff802021bc: 01 46                	mv	a2, zero
ffffffff802021be: 63 1b c5 00          	bne	a0, a2, 22
ffffffff802021c2: 09 a0                	j	2
;         Err(_) => handle_alloc_error(layout),
ffffffff802021c4: 62 65                	ld	a0, 24(sp)
ffffffff802021c6: c2 65                	ld	a1, 16(sp)
ffffffff802021c8: 97 80 00 00          	auipc	ra, 8
ffffffff802021cc: e7 80 20 03          	jalr	50(ra)
ffffffff802021d0: 00 00                	unimp	
;     match Global.alloc(layout, AllocInit::Uninitialized) {
ffffffff802021d2: 00 00                	unimp	
;         Ok(memory) => memory.ptr.as_ptr(),
ffffffff802021d4: 02 75                	ld	a0, 32(sp)
ffffffff802021d6: a2 75                	ld	a1, 40(sp)
ffffffff802021d8: aa ec                	sd	a0, 88(sp)
ffffffff802021da: ae f0                	sd	a1, 96(sp)
ffffffff802021dc: 97 40 00 00          	auipc	ra, 4
ffffffff802021e0: e7 80 60 fe          	jalr	-26(ra)
ffffffff802021e4: 2a e0                	sd	a0, 0(sp)
ffffffff802021e6: 09 a0                	j	2
; }
ffffffff802021e8: 02 65                	ld	a0, 0(sp)
ffffffff802021ea: a6 70                	ld	ra, 104(sp)
ffffffff802021ec: 65 61                	addi	sp, sp, 112
ffffffff802021ee: 82 80                	ret

ffffffff802021f0 _ZN5alloc5alloc5alloc17h3ca62a530664404eE:
; pub unsafe fn alloc(layout: Layout) -> *mut u8 {
ffffffff802021f0: 79 71                	addi	sp, sp, -48
ffffffff802021f2: 06 f4                	sd	ra, 40(sp)
ffffffff802021f4: 2a ec                	sd	a0, 24(sp)
ffffffff802021f6: 2e f0                	sd	a1, 32(sp)
ffffffff802021f8: 28 08                	addi	a0, sp, 24
;     unsafe { __rust_alloc(layout.size(), layout.align()) }
ffffffff802021fa: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802021fe: e7 80 00 5e          	jalr	1504(ra)
ffffffff80202202: 2a e8                	sd	a0, 16(sp)
ffffffff80202204: 09 a0                	j	2
ffffffff80202206: 28 08                	addi	a0, sp, 24
ffffffff80202208: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020220c: e7 80 c0 5d          	jalr	1500(ra)
ffffffff80202210: 2a e4                	sd	a0, 8(sp)
ffffffff80202212: 09 a0                	j	2
ffffffff80202214: 42 65                	ld	a0, 16(sp)
ffffffff80202216: a2 65                	ld	a1, 8(sp)
ffffffff80202218: 97 30 00 00          	auipc	ra, 3
ffffffff8020221c: e7 80 c0 22          	jalr	556(ra)
ffffffff80202220: 2a e0                	sd	a0, 0(sp)
ffffffff80202222: 09 a0                	j	2
; }
ffffffff80202224: 02 65                	ld	a0, 0(sp)
ffffffff80202226: a2 70                	ld	ra, 40(sp)
ffffffff80202228: 45 61                	addi	sp, sp, 48
ffffffff8020222a: 82 80                	ret

ffffffff8020222c _ZN5alloc5alloc7dealloc17h5b23827ac83a3cd8E:
; pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
ffffffff8020222c: 39 71                	addi	sp, sp, -64
ffffffff8020222e: 06 fc                	sd	ra, 56(sp)
ffffffff80202230: 2e f0                	sd	a1, 32(sp)
ffffffff80202232: 32 f4                	sd	a2, 40(sp)
ffffffff80202234: 2a f8                	sd	a0, 48(sp)
ffffffff80202236: 0c 10                	addi	a1, sp, 32
;     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
ffffffff80202238: 2a ec                	sd	a0, 24(sp)
ffffffff8020223a: 2e 85                	add	a0, zero, a1
ffffffff8020223c: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80202240: e7 80 e0 59          	jalr	1438(ra)
ffffffff80202244: 2a e8                	sd	a0, 16(sp)
ffffffff80202246: 09 a0                	j	2
ffffffff80202248: 08 10                	addi	a0, sp, 32
ffffffff8020224a: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020224e: e7 80 a0 59          	jalr	1434(ra)
ffffffff80202252: 2a e4                	sd	a0, 8(sp)
ffffffff80202254: 09 a0                	j	2
ffffffff80202256: 62 65                	ld	a0, 24(sp)
ffffffff80202258: c2 65                	ld	a1, 16(sp)
ffffffff8020225a: 22 66                	ld	a2, 8(sp)
ffffffff8020225c: 97 30 00 00          	auipc	ra, 3
ffffffff80202260: e7 80 00 1f          	jalr	496(ra)
ffffffff80202264: 09 a0                	j	2
; }
ffffffff80202266: e2 70                	ld	ra, 56(sp)
ffffffff80202268: 21 61                	addi	sp, sp, 64
ffffffff8020226a: 82 80                	ret

ffffffff8020226c _ZN62_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..AllocRef$GT$5alloc17hdbfd56f60de737b3E:
;     fn alloc(&mut self, layout: Layout, init: AllocInit) -> Result<MemoryBlock, AllocErr> {
ffffffff8020226c: 71 71                	addi	sp, sp, -176
ffffffff8020226e: 06 f5                	sd	ra, 168(sp)
ffffffff80202270: 36 87                	add	a4, zero, a3
ffffffff80202272: 2e f4                	sd	a1, 40(sp)
ffffffff80202274: 32 f8                	sd	a2, 48(sp)
ffffffff80202276: a3 0f d1 02          	sb	a3, 63(sp)
ffffffff8020227a: 2a e1                	sd	a0, 128(sp)
ffffffff8020227c: 28 10                	addi	a0, sp, 40
;             let size = layout.size();
ffffffff8020227e: 3a f0                	sd	a4, 32(sp)
ffffffff80202280: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80202284: e7 80 a0 55          	jalr	1370(ra)
ffffffff80202288: aa 85                	add	a1, zero, a0
ffffffff8020228a: 2a e9                	sd	a0, 144(sp)
ffffffff8020228c: 2e ec                	sd	a1, 24(sp)
ffffffff8020228e: 09 a0                	j	2
ffffffff80202290: 01 45                	mv	a0, zero
;             if size == 0 {
ffffffff80202292: e2 65                	ld	a1, 24(sp)
ffffffff80202294: 63 8b a5 00          	beq	a1, a0, 22
ffffffff80202298: 09 a0                	j	2
;                     AllocInit::Uninitialized => alloc(layout),
ffffffff8020229a: 03 45 f1 03          	lbu	a0, 63(sp)
ffffffff8020229e: 05 89                	andi	a0, a0, 1
ffffffff802022a0: 81 45                	mv	a1, zero
ffffffff802022a2: 63 0b b5 02          	beq	a0, a1, 54
ffffffff802022a6: 09 a0                	j	2
ffffffff802022a8: 39 a8                	j	30
ffffffff802022aa: 28 10                	addi	a0, sp, 40
;                 Ok(MemoryBlock { ptr: layout.dangling(), size: 0 })
ffffffff802022ac: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802022b0: e7 80 c0 63          	jalr	1596(ra)
ffffffff802022b4: 2a e8                	sd	a0, 16(sp)
ffffffff802022b6: 09 a0                	j	2
ffffffff802022b8: 42 65                	ld	a0, 16(sp)
ffffffff802022ba: aa e8                	sd	a0, 80(sp)
ffffffff802022bc: 81 45                	mv	a1, zero
ffffffff802022be: ae ec                	sd	a1, 88(sp)
ffffffff802022c0: aa e0                	sd	a0, 64(sp)
ffffffff802022c2: ae e4                	sd	a1, 72(sp)
;             if size == 0 {
ffffffff802022c4: 69 a8                	j	154
;                     AllocInit::Zeroed => alloc_zeroed(layout),
ffffffff802022c6: 22 75                	ld	a0, 40(sp)
ffffffff802022c8: c2 75                	ld	a1, 48(sp)
ffffffff802022ca: 97 00 00 00          	auipc	ra, 0
ffffffff802022ce: e7 80 60 e7          	jalr	-394(ra)
ffffffff802022d2: aa f0                	sd	a0, 96(sp)
ffffffff802022d4: 19 a8                	j	22
;                 let raw_ptr = match init {
ffffffff802022d6: 00 00                	unimp	
;                     AllocInit::Uninitialized => alloc(layout),
ffffffff802022d8: 22 75                	ld	a0, 40(sp)
ffffffff802022da: c2 75                	ld	a1, 48(sp)
ffffffff802022dc: 97 00 00 00          	auipc	ra, 0
ffffffff802022e0: e7 80 40 f1          	jalr	-236(ra)
ffffffff802022e4: aa f0                	sd	a0, 96(sp)
ffffffff802022e6: 09 a0                	j	2
;                 let raw_ptr = match init {
ffffffff802022e8: 11 a0                	j	4
ffffffff802022ea: 09 a0                	j	2
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;
ffffffff802022ec: 06 75                	ld	a0, 96(sp)
ffffffff802022ee: 97 40 00 00          	auipc	ra, 4
ffffffff802022f2: e7 80 40 e6          	jalr	-412(ra)
ffffffff802022f6: 2a e4                	sd	a0, 8(sp)
ffffffff802022f8: 09 a0                	j	2
ffffffff802022fa: 22 65                	ld	a0, 8(sp)
ffffffff802022fc: 97 40 00 00          	auipc	ra, 4
ffffffff80202300: e7 80 00 37          	jalr	880(ra)
ffffffff80202304: 2a e0                	sd	a0, 0(sp)
ffffffff80202306: 09 a0                	j	2
ffffffff80202308: 02 65                	ld	a0, 0(sp)
ffffffff8020230a: 97 50 00 00          	auipc	ra, 5
ffffffff8020230e: e7 80 20 f5          	jalr	-174(ra)
ffffffff80202312: aa f4                	sd	a0, 104(sp)
ffffffff80202314: 09 a0                	j	2
ffffffff80202316: 26 75                	ld	a0, 104(sp)
ffffffff80202318: 93 35 15 00          	seqz	a1, a0
ffffffff8020231c: 01 46                	mv	a2, zero
ffffffff8020231e: 63 14 c5 00          	bne	a0, a2, 8
ffffffff80202322: 09 a0                	j	2
ffffffff80202324: 19 a8                	j	22
ffffffff80202326: 26 75                	ld	a0, 104(sp)
ffffffff80202328: 2a ed                	sd	a0, 152(sp)
ffffffff8020232a: 2a f1                	sd	a0, 160(sp)
;                 Ok(MemoryBlock { ptr, size })
ffffffff8020232c: aa f8                	sd	a0, 112(sp)
ffffffff8020232e: e2 65                	ld	a1, 24(sp)
ffffffff80202330: ae fc                	sd	a1, 120(sp)
ffffffff80202332: aa e0                	sd	a0, 64(sp)
ffffffff80202334: ae e4                	sd	a1, 72(sp)
;             if size == 0 {
ffffffff80202336: 25 a0                	j	40
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;
ffffffff80202338: 00 00                	unimp	
ffffffff8020233a: 97 40 00 00          	auipc	ra, 4
ffffffff8020233e: e7 80 40 3d          	jalr	980(ra)
ffffffff80202342: 31 a0                	j	12
;     }
ffffffff80202344: 06 65                	ld	a0, 64(sp)
ffffffff80202346: a6 65                	ld	a1, 72(sp)
ffffffff80202348: aa 70                	ld	ra, 168(sp)
ffffffff8020234a: 4d 61                	addi	sp, sp, 176
ffffffff8020234c: 82 80                	ret
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;
ffffffff8020234e: 97 50 00 00          	auipc	ra, 5
ffffffff80202352: e7 80 80 ed          	jalr	-296(ra)
ffffffff80202356: aa e0                	sd	a0, 64(sp)
ffffffff80202358: ae e4                	sd	a1, 72(sp)
ffffffff8020235a: 09 a0                	j	2
ffffffff8020235c: e5 b7                	j	-24
;     }
ffffffff8020235e: dd b7                	j	-26

ffffffff80202360 _ZN62_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..AllocRef$GT$7dealloc17hf65c72e5f5e1907bE:
;     unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {
ffffffff80202360: 5d 71                	addi	sp, sp, -80
ffffffff80202362: 86 e4                	sd	ra, 72(sp)
ffffffff80202364: 32 f0                	sd	a2, 32(sp)
ffffffff80202366: 36 f4                	sd	a3, 40(sp)
ffffffff80202368: 2a fc                	sd	a0, 56(sp)
ffffffff8020236a: ae e0                	sd	a1, 64(sp)
ffffffff8020236c: 08 10                	addi	a0, sp, 32
;         if layout.size() != 0 {
ffffffff8020236e: 2e ec                	sd	a1, 24(sp)
ffffffff80202370: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80202374: e7 80 a0 46          	jalr	1130(ra)
ffffffff80202378: 2a e8                	sd	a0, 16(sp)
ffffffff8020237a: 09 a0                	j	2
ffffffff8020237c: 01 45                	mv	a0, zero
ffffffff8020237e: c2 65                	ld	a1, 16(sp)
ffffffff80202380: 63 94 a5 00          	bne	a1, a0, 8
ffffffff80202384: 09 a0                	j	2
ffffffff80202386: 0d a0                	j	34
;             unsafe { dealloc(ptr.as_ptr(), layout) }
ffffffff80202388: 62 65                	ld	a0, 24(sp)
ffffffff8020238a: 97 40 00 00          	auipc	ra, 4
ffffffff8020238e: e7 80 80 e3          	jalr	-456(ra)
ffffffff80202392: 2a e4                	sd	a0, 8(sp)
ffffffff80202394: 09 a0                	j	2
ffffffff80202396: 82 75                	ld	a1, 32(sp)
ffffffff80202398: 22 76                	ld	a2, 40(sp)
ffffffff8020239a: 22 65                	ld	a0, 8(sp)
ffffffff8020239c: 97 00 00 00          	auipc	ra, 0
ffffffff802023a0: e7 80 00 e9          	jalr	-368(ra)
ffffffff802023a4: 09 a0                	j	2
;         if layout.size() != 0 {
ffffffff802023a6: 09 a0                	j	2
;     }
ffffffff802023a8: a6 60                	ld	ra, 72(sp)
ffffffff802023aa: 61 61                	addi	sp, sp, 80
ffffffff802023ac: 82 80                	ret

ffffffff802023ae _ZN5riscv8register7sstatus4_set17h41507f6beb97bf25E:
;         unsafe fn _set(bits: usize) {
ffffffff802023ae: 41 11                	addi	sp, sp, -16
ffffffff802023b0: 2a e4                	sd	a0, 8(sp)
;                 () => llvm_asm!("csrrs x0, $1, $0" :: "r"(bits), "i"($csr_number) :: "volatile"),
ffffffff802023b2: 73 20 05 10          	csrs	sstatus, a0
;         }
ffffffff802023b6: 41 01                	addi	sp, sp, 16
ffffffff802023b8: 82 80                	ret

ffffffff802023ba _ZN5riscv8register7sstatus7set_sie17h998ac8ca2b2c720dE:
;         pub unsafe fn $set_field() {
ffffffff802023ba: 41 11                	addi	sp, sp, -16
ffffffff802023bc: 06 e4                	sd	ra, 8(sp)
ffffffff802023be: 09 45                	addi	a0, zero, 2
;             _set($e);
ffffffff802023c0: 97 00 00 00          	auipc	ra, 0
ffffffff802023c4: e7 80 e0 fe          	jalr	-18(ra)
ffffffff802023c8: 09 a0                	j	2
;         }
ffffffff802023ca: a2 60                	ld	ra, 8(sp)
ffffffff802023cc: 41 01                	addi	sp, sp, 16
ffffffff802023ce: 82 80                	ret

ffffffff802023d0 _ZN5riscv8register7sstatus7set_sum17h7036a727eb8dc76cE:
;         pub unsafe fn $set_field() {
ffffffff802023d0: 41 11                	addi	sp, sp, -16
ffffffff802023d2: 06 e4                	sd	ra, 8(sp)
ffffffff802023d4: 37 05 04 00          	lui	a0, 64
;             _set($e);
ffffffff802023d8: 97 00 00 00          	auipc	ra, 0
ffffffff802023dc: e7 80 60 fd          	jalr	-42(ra)
ffffffff802023e0: 09 a0                	j	2
;         }
ffffffff802023e2: a2 60                	ld	ra, 8(sp)
ffffffff802023e4: 41 01                	addi	sp, sp, 16
ffffffff802023e6: 82 80                	ret

ffffffff802023e8 _ZN119_$LT$os..memory..address..PhysicalAddress$u20$as$u20$core..convert..From$LT$os..memory..address..VirtualAddress$GT$$GT$4from17hd52867bfd4dc3385E:
;     fn from(va: VirtualAddress) -> Self {
ffffffff802023e8: 01 11                	addi	sp, sp, -32
ffffffff802023ea: 2a e8                	sd	a0, 16(sp)
ffffffff802023ec: 2a e4                	sd	a0, 8(sp)
ffffffff802023ee: 85 45                	addi	a1, zero, 1
ffffffff802023f0: 82 15                	slli	a1, a1, 32
;         Self(va.0 - KERNEL_MAP_OFFSET)
ffffffff802023f2: aa 95                	add	a1, a1, a0
ffffffff802023f4: 2e e0                	sd	a1, 0(sp)
ffffffff802023f6: 63 67 b5 00          	bltu	a0, a1, 14
ffffffff802023fa: 09 a0                	j	2
ffffffff802023fc: 02 65                	ld	a0, 0(sp)
ffffffff802023fe: 2a ec                	sd	a0, 24(sp)
;     }
ffffffff80202400: 05 61                	addi	sp, sp, 32
ffffffff80202402: 82 80                	ret

ffffffff80202404 .LBB0_3:
;         Self(va.0 - KERNEL_MAP_OFFSET)
ffffffff80202404: 17 b5 00 00          	auipc	a0, 11
ffffffff80202408: 13 05 c5 27          	addi	a0, a0, 636

ffffffff8020240c .LBB0_4:
ffffffff8020240c: 17 b6 00 00          	auipc	a2, 11
ffffffff80202410: 13 06 c6 25          	addi	a2, a2, 604
ffffffff80202414: 93 05 10 02          	addi	a1, zero, 33
ffffffff80202418: 97 80 00 00          	auipc	ra, 8
ffffffff8020241c: e7 80 00 f2          	jalr	-224(ra)
ffffffff80202420: 00 00                	unimp	

ffffffff80202422 _ZN123_$LT$os..memory..address..PhysicalAddress$u20$as$u20$core..convert..From$LT$os..memory..address..PhysicalPageNumber$GT$$GT$4from17hccb3a2a2ccf89a6aE:
;             fn from(page_number: $page_number_type) -> Self {
ffffffff80202422: 01 11                	addi	sp, sp, -32
ffffffff80202424: 2a e8                	sd	a0, 16(sp)
ffffffff80202426: 2a e4                	sd	a0, 8(sp)
ffffffff80202428: 85 45                	addi	a1, zero, 1
ffffffff8020242a: d2 15                	slli	a1, a1, 52
ffffffff8020242c: fd 15                	addi	a1, a1, -1
;                 Self(page_number.0 * PAGE_SIZE)
ffffffff8020242e: e9 8d                	and	a1, a1, a0
ffffffff80202430: 13 16 c5 00          	slli	a2, a0, 12
ffffffff80202434: 32 e0                	sd	a2, 0(sp)
ffffffff80202436: 63 97 a5 00          	bne	a1, a0, 14
ffffffff8020243a: 09 a0                	j	2
ffffffff8020243c: 02 65                	ld	a0, 0(sp)
ffffffff8020243e: 2a ec                	sd	a0, 24(sp)
;             }
ffffffff80202440: 05 61                	addi	sp, sp, 32
ffffffff80202442: 82 80                	ret

ffffffff80202444 .LBB1_3:
;                 Self(page_number.0 * PAGE_SIZE)
ffffffff80202444: 17 b5 00 00          	auipc	a0, 11
ffffffff80202448: 13 05 c5 27          	addi	a0, a0, 636

ffffffff8020244c .LBB1_4:
ffffffff8020244c: 17 b6 00 00          	auipc	a2, 11
ffffffff80202450: 13 06 c6 25          	addi	a2, a2, 604
ffffffff80202454: 93 05 10 02          	addi	a1, zero, 33
ffffffff80202458: 97 80 00 00          	auipc	ra, 8
ffffffff8020245c: e7 80 00 ee          	jalr	-288(ra)
ffffffff80202460: 00 00                	unimp	

ffffffff80202462 _ZN2os6memory7address18PhysicalPageNumber5floor17hb6ae0452476082cdE:
;             pub const fn floor(address: $address_type) -> Self {
ffffffff80202462: 01 11                	addi	sp, sp, -32
ffffffff80202464: 2a e8                	sd	a0, 16(sp)
ffffffff80202466: 2a e4                	sd	a0, 8(sp)
;                 Self(address.0 / PAGE_SIZE)
ffffffff80202468: 31 81                	srli	a0, a0, 12
ffffffff8020246a: 2a ec                	sd	a0, 24(sp)
;             }
ffffffff8020246c: 05 61                	addi	sp, sp, 32
ffffffff8020246e: 82 80                	ret

ffffffff80202470 _ZN2os6memory7address18PhysicalPageNumber4ceil17h31ece35ad53523c9E:
;             pub const fn ceil(address: $address_type) -> Self {
ffffffff80202470: 01 11                	addi	sp, sp, -32
ffffffff80202472: 2a e8                	sd	a0, 16(sp)
ffffffff80202474: 2a e4                	sd	a0, 8(sp)
;                 Self(address.0 / PAGE_SIZE + (address.0 % PAGE_SIZE != 0) as usize)
ffffffff80202476: 93 55 c5 00          	srli	a1, a0, 12
ffffffff8020247a: 05 66                	lui	a2, 1
ffffffff8020247c: 7d 36                	addiw	a2, a2, -1
ffffffff8020247e: 71 8d                	and	a0, a0, a2
ffffffff80202480: 33 35 a0 00          	snez	a0, a0
ffffffff80202484: 2e 95                	add	a0, a0, a1
ffffffff80202486: 81 45                	mv	a1, zero
ffffffff80202488: 2a e0                	sd	a0, 0(sp)
ffffffff8020248a: 91 e5                	bnez	a1, 12
ffffffff8020248c: 09 a0                	j	2
ffffffff8020248e: 02 65                	ld	a0, 0(sp)
ffffffff80202490: 2a ec                	sd	a0, 24(sp)
;             }
ffffffff80202492: 05 61                	addi	sp, sp, 32
ffffffff80202494: 82 80                	ret

ffffffff80202496 .LBB3_3:
;                 Self(address.0 / PAGE_SIZE + (address.0 % PAGE_SIZE != 0) as usize)
ffffffff80202496: 17 b5 00 00          	auipc	a0, 11
ffffffff8020249a: 13 05 a5 25          	addi	a0, a0, 602

ffffffff8020249e .LBB3_4:
ffffffff8020249e: 17 b6 00 00          	auipc	a2, 11
ffffffff802024a2: 13 06 a6 20          	addi	a2, a2, 522
ffffffff802024a6: f1 45                	addi	a1, zero, 28
ffffffff802024a8: 97 80 00 00          	auipc	ra, 8
ffffffff802024ac: e7 80 00 e9          	jalr	-368(ra)
ffffffff802024b0: 00 00                	unimp	

ffffffff802024b2 _ZN75_$LT$os..memory..address..PhysicalAddress$u20$as$u20$core..fmt..Display$GT$3fmt17h2a567b021cefe811E:
;             fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
ffffffff802024b2: 55 71                	addi	sp, sp, -208
ffffffff802024b4: 86 e5                	sd	ra, 200(sp)
ffffffff802024b6: 2a f5                	sd	a0, 168(sp)
ffffffff802024b8: 2e f9                	sd	a1, 176(sp)

ffffffff802024ba .LBB4_5:
;                 write!(f, "{}(0x{:x})", stringify!($type_name), self.0)
ffffffff802024ba: 17 b6 00 00          	auipc	a2, 11
ffffffff802024be: 13 06 66 28          	addi	a2, a2, 646
ffffffff802024c2: 10 62                	ld	a2, 0(a2)

ffffffff802024c4 .LBB4_6:
ffffffff802024c4: 97 b6 00 00          	auipc	a3, 11
ffffffff802024c8: 93 86 46 2a          	addi	a3, a3, 676
ffffffff802024cc: 94 62                	ld	a3, 0(a3)
ffffffff802024ce: 36 ed                	sd	a3, 152(sp)
ffffffff802024d0: 2a f1                	sd	a0, 160(sp)
ffffffff802024d2: 36 fd                	sd	a3, 184(sp)
ffffffff802024d4: 2a 87                	add	a4, zero, a0
ffffffff802024d6: aa e1                	sd	a0, 192(sp)

ffffffff802024d8 .LBB4_7:
ffffffff802024d8: 17 65 00 00          	auipc	a0, 6
ffffffff802024dc: 13 05 e5 3a          	addi	a0, a0, 942
ffffffff802024e0: aa e0                	sd	a0, 64(sp)
ffffffff802024e2: 36 85                	add	a0, zero, a3
ffffffff802024e4: 86 66                	ld	a3, 64(sp)
ffffffff802024e6: 2e fc                	sd	a1, 56(sp)
ffffffff802024e8: b6 85                	add	a1, zero, a3
ffffffff802024ea: 32 f8                	sd	a2, 48(sp)
ffffffff802024ec: 3a f4                	sd	a4, 40(sp)
ffffffff802024ee: 97 60 00 00          	auipc	ra, 6
ffffffff802024f2: e7 80 40 3c          	jalr	964(ra)
ffffffff802024f6: 2a f0                	sd	a0, 32(sp)
ffffffff802024f8: 2e ec                	sd	a1, 24(sp)
ffffffff802024fa: 09 a0                	j	2

ffffffff802024fc .LBB4_8:
ffffffff802024fc: 97 a5 00 00          	auipc	a1, 10
ffffffff80202500: 93 85 a5 91          	addi	a1, a1, -1766
ffffffff80202504: 22 75                	ld	a0, 40(sp)
ffffffff80202506: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff8020250a: e7 80 c0 07          	jalr	124(ra)
ffffffff8020250e: 2a e8                	sd	a0, 16(sp)
ffffffff80202510: 2e e4                	sd	a1, 8(sp)
ffffffff80202512: 09 a0                	j	2
ffffffff80202514: 02 75                	ld	a0, 32(sp)
ffffffff80202516: aa fc                	sd	a0, 120(sp)
ffffffff80202518: e2 65                	ld	a1, 24(sp)
ffffffff8020251a: 2e e1                	sd	a1, 128(sp)
ffffffff8020251c: 42 66                	ld	a2, 16(sp)
ffffffff8020251e: 32 e5                	sd	a2, 136(sp)
ffffffff80202520: a2 66                	ld	a3, 8(sp)
ffffffff80202522: 36 e9                	sd	a3, 144(sp)
ffffffff80202524: a8 00                	addi	a0, sp, 72
ffffffff80202526: 0d 46                	addi	a2, zero, 3
ffffffff80202528: b4 18                	addi	a3, sp, 120
ffffffff8020252a: 09 47                	addi	a4, zero, 2
ffffffff8020252c: c2 75                	ld	a1, 48(sp)
ffffffff8020252e: 97 20 00 00          	auipc	ra, 2
ffffffff80202532: e7 80 a0 a8          	jalr	-1398(ra)
ffffffff80202536: 09 a0                	j	2
ffffffff80202538: ac 00                	addi	a1, sp, 72
ffffffff8020253a: 62 75                	ld	a0, 56(sp)
ffffffff8020253c: 97 90 00 00          	auipc	ra, 9
ffffffff80202540: e7 80 60 d8          	jalr	-634(ra)
ffffffff80202544: 2a e0                	sd	a0, 0(sp)
ffffffff80202546: 09 a0                	j	2
;             }
ffffffff80202548: 02 65                	ld	a0, 0(sp)
ffffffff8020254a: ae 60                	ld	ra, 200(sp)
ffffffff8020254c: 69 61                	addi	sp, sp, 208
ffffffff8020254e: 82 80                	ret

ffffffff80202550 _ZN74_$LT$os..memory..address..VirtualAddress$u20$as$u20$core..fmt..Display$GT$3fmt17h8af48c536d20044fE:
;             fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
ffffffff80202550: 55 71                	addi	sp, sp, -208
ffffffff80202552: 86 e5                	sd	ra, 200(sp)
ffffffff80202554: 2a f5                	sd	a0, 168(sp)
ffffffff80202556: 2e f9                	sd	a1, 176(sp)

ffffffff80202558 .LBB5_5:
;                 write!(f, "{}(0x{:x})", stringify!($type_name), self.0)
ffffffff80202558: 17 b6 00 00          	auipc	a2, 11
ffffffff8020255c: 13 06 86 1e          	addi	a2, a2, 488
ffffffff80202560: 10 62                	ld	a2, 0(a2)

ffffffff80202562 .LBB5_6:
ffffffff80202562: 97 b6 00 00          	auipc	a3, 11
ffffffff80202566: 93 86 e6 22          	addi	a3, a3, 558
ffffffff8020256a: 94 62                	ld	a3, 0(a3)
ffffffff8020256c: 36 ed                	sd	a3, 152(sp)
ffffffff8020256e: 2a f1                	sd	a0, 160(sp)
ffffffff80202570: 36 fd                	sd	a3, 184(sp)
ffffffff80202572: 2a 87                	add	a4, zero, a0
ffffffff80202574: aa e1                	sd	a0, 192(sp)

ffffffff80202576 .LBB5_7:
ffffffff80202576: 17 65 00 00          	auipc	a0, 6
ffffffff8020257a: 13 05 05 31          	addi	a0, a0, 784
ffffffff8020257e: aa e0                	sd	a0, 64(sp)
ffffffff80202580: 36 85                	add	a0, zero, a3
ffffffff80202582: 86 66                	ld	a3, 64(sp)
ffffffff80202584: 2e fc                	sd	a1, 56(sp)
ffffffff80202586: b6 85                	add	a1, zero, a3
ffffffff80202588: 32 f8                	sd	a2, 48(sp)
ffffffff8020258a: 3a f4                	sd	a4, 40(sp)
ffffffff8020258c: 97 60 00 00          	auipc	ra, 6
ffffffff80202590: e7 80 60 32          	jalr	806(ra)
ffffffff80202594: 2a f0                	sd	a0, 32(sp)
ffffffff80202596: 2e ec                	sd	a1, 24(sp)
ffffffff80202598: 09 a0                	j	2

ffffffff8020259a .LBB5_8:
ffffffff8020259a: 97 a5 00 00          	auipc	a1, 10
ffffffff8020259e: 93 85 c5 87          	addi	a1, a1, -1924
ffffffff802025a2: 22 75                	ld	a0, 40(sp)
ffffffff802025a4: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff802025a8: e7 80 e0 fd          	jalr	-34(ra)
ffffffff802025ac: 2a e8                	sd	a0, 16(sp)
ffffffff802025ae: 2e e4                	sd	a1, 8(sp)
ffffffff802025b0: 09 a0                	j	2
ffffffff802025b2: 02 75                	ld	a0, 32(sp)
ffffffff802025b4: aa fc                	sd	a0, 120(sp)
ffffffff802025b6: e2 65                	ld	a1, 24(sp)
ffffffff802025b8: 2e e1                	sd	a1, 128(sp)
ffffffff802025ba: 42 66                	ld	a2, 16(sp)
ffffffff802025bc: 32 e5                	sd	a2, 136(sp)
ffffffff802025be: a2 66                	ld	a3, 8(sp)
ffffffff802025c0: 36 e9                	sd	a3, 144(sp)
ffffffff802025c2: a8 00                	addi	a0, sp, 72
ffffffff802025c4: 0d 46                	addi	a2, zero, 3
ffffffff802025c6: b4 18                	addi	a3, sp, 120
ffffffff802025c8: 09 47                	addi	a4, zero, 2
ffffffff802025ca: c2 75                	ld	a1, 48(sp)
ffffffff802025cc: 97 20 00 00          	auipc	ra, 2
ffffffff802025d0: e7 80 c0 9e          	jalr	-1556(ra)
ffffffff802025d4: 09 a0                	j	2
ffffffff802025d6: ac 00                	addi	a1, sp, 72
ffffffff802025d8: 62 75                	ld	a0, 56(sp)
ffffffff802025da: 97 90 00 00          	auipc	ra, 9
ffffffff802025de: e7 80 80 ce          	jalr	-792(ra)
ffffffff802025e2: 2a e0                	sd	a0, 0(sp)
ffffffff802025e4: 09 a0                	j	2
;             }
ffffffff802025e6: 02 65                	ld	a0, 0(sp)
ffffffff802025e8: ae 60                	ld	ra, 200(sp)
ffffffff802025ea: 69 61                	addi	sp, sp, 208
ffffffff802025ec: 82 80                	ret

ffffffff802025ee _ZN94_$LT$os..memory..address..PhysicalPageNumber$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h67ea00a78ffbda0dE:
;             fn add(self, other: usize) -> Self::Output {
ffffffff802025ee: 79 71                	addi	sp, sp, -48
ffffffff802025f0: 2a ec                	sd	a0, 24(sp)
ffffffff802025f2: 2a e8                	sd	a0, 16(sp)
ffffffff802025f4: 2e f4                	sd	a1, 40(sp)
;                 Self(self.0 + other)
ffffffff802025f6: aa 95                	add	a1, a1, a0
ffffffff802025f8: 2e e4                	sd	a1, 8(sp)
ffffffff802025fa: 63 e7 a5 00          	bltu	a1, a0, 14
ffffffff802025fe: 09 a0                	j	2
ffffffff80202600: 22 65                	ld	a0, 8(sp)
ffffffff80202602: 2a f0                	sd	a0, 32(sp)
;             }
ffffffff80202604: 45 61                	addi	sp, sp, 48
ffffffff80202606: 82 80                	ret

ffffffff80202608 .LBB6_3:
;                 Self(self.0 + other)
ffffffff80202608: 17 b5 00 00          	auipc	a0, 11
ffffffff8020260c: 13 05 85 0e          	addi	a0, a0, 232

ffffffff80202610 .LBB6_4:
ffffffff80202610: 17 b6 00 00          	auipc	a2, 11
ffffffff80202614: 13 06 86 18          	addi	a2, a2, 392
ffffffff80202618: f1 45                	addi	a1, zero, 28
ffffffff8020261a: 97 80 00 00          	auipc	ra, 8
ffffffff8020261e: e7 80 e0 d1          	jalr	-738(ra)
ffffffff80202622: 00 00                	unimp	

ffffffff80202624 _ZN81_$LT$os..memory..address..PhysicalPageNumber$u20$as$u20$core..ops..arith..Sub$GT$3sub17hd945e0d4b08dc1beE:
;             fn sub(self, other: $type_name) -> Self::Output {
ffffffff80202624: 79 71                	addi	sp, sp, -48
ffffffff80202626: 2a ec                	sd	a0, 24(sp)
ffffffff80202628: 2a e8                	sd	a0, 16(sp)
ffffffff8020262a: 2e f4                	sd	a1, 40(sp)
ffffffff8020262c: 2e f0                	sd	a1, 32(sp)
;                 self.0 - other.0
ffffffff8020262e: b3 05 b5 40          	sub	a1, a0, a1
ffffffff80202632: 2e e4                	sd	a1, 8(sp)
ffffffff80202634: 63 66 b5 00          	bltu	a0, a1, 12
ffffffff80202638: 09 a0                	j	2
;             }
ffffffff8020263a: 22 65                	ld	a0, 8(sp)
ffffffff8020263c: 45 61                	addi	sp, sp, 48
ffffffff8020263e: 82 80                	ret

ffffffff80202640 .LBB7_3:
;                 self.0 - other.0
ffffffff80202640: 17 b5 00 00          	auipc	a0, 11
ffffffff80202644: 13 05 05 04          	addi	a0, a0, 64

ffffffff80202648 .LBB7_4:
ffffffff80202648: 17 b6 00 00          	auipc	a2, 11
ffffffff8020264c: 13 06 06 15          	addi	a2, a2, 336
ffffffff80202650: 93 05 10 02          	addi	a1, zero, 33
ffffffff80202654: 97 80 00 00          	auipc	ra, 8
ffffffff80202658: e7 80 40 ce          	jalr	-796(ra)
ffffffff8020265c: 00 00                	unimp	

ffffffff8020265e _ZN2os6memory7address102_$LT$impl$u20$core..convert..From$LT$os..memory..address..PhysicalPageNumber$GT$$u20$for$u20$usize$GT$4from17hf67a8db46eacd238E:
;             fn from(value: $type_name) -> Self {
ffffffff8020265e: 41 11                	addi	sp, sp, -16
ffffffff80202660: 2a e4                	sd	a0, 8(sp)
ffffffff80202662: 2a e0                	sd	a0, 0(sp)
;             }
ffffffff80202664: 41 01                	addi	sp, sp, 16
ffffffff80202666: 82 80                	ret

ffffffff80202668 _ZN2os9interrupt4init17h9f48aa5701e69d02E:
; pub fn init() {
ffffffff80202668: 39 71                	addi	sp, sp, -64
;     handler::init();
ffffffff8020266a: 06 fc                	sd	ra, 56(sp)
ffffffff8020266c: 97 20 00 00          	auipc	ra, 2
ffffffff80202670: e7 80 40 eb          	jalr	-332(ra)
ffffffff80202674: 09 a0                	j	2
;     timer::init();
ffffffff80202676: 97 20 00 00          	auipc	ra, 2
ffffffff8020267a: e7 80 80 29          	jalr	664(ra)
ffffffff8020267e: 09 a0                	j	2

ffffffff80202680 .LBB0_5:
;     println!("mod interrupt initialized");
ffffffff80202680: 17 b5 00 00          	auipc	a0, 11
ffffffff80202684: 13 05 05 16          	addi	a0, a0, 352
ffffffff80202688: 0c 61                	ld	a1, 0(a0)

ffffffff8020268a .LBB0_6:
ffffffff8020268a: 17 b5 00 00          	auipc	a0, 11
ffffffff8020268e: 13 05 e5 15          	addi	a0, a0, 350
ffffffff80202692: 14 61                	ld	a3, 0(a0)
ffffffff80202694: 28 00                	addi	a0, sp, 8
ffffffff80202696: 05 46                	addi	a2, zero, 1
ffffffff80202698: 01 47                	mv	a4, zero
ffffffff8020269a: 97 20 00 00          	auipc	ra, 2
ffffffff8020269e: e7 80 e0 91          	jalr	-1762(ra)
ffffffff802026a2: 09 a0                	j	2
ffffffff802026a4: 28 00                	addi	a0, sp, 8
ffffffff802026a6: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff802026aa: e7 80 80 47          	jalr	1144(ra)
ffffffff802026ae: 09 a0                	j	2
; }
ffffffff802026b0: e2 70                	ld	ra, 56(sp)
ffffffff802026b2: 21 61                	addi	sp, sp, 64
ffffffff802026b4: 82 80                	ret

ffffffff802026b6 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hd2d747e1a82ed0d7E:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
ffffffff802026b6: 1d 71                	addi	sp, sp, -96
ffffffff802026b8: 86 ec                	sd	ra, 88(sp)
ffffffff802026ba: aa e0                	sd	a0, 64(sp)
ffffffff802026bc: ae e4                	sd	a1, 72(sp)
ffffffff802026be: b2 e8                	sd	a2, 80(sp)
ffffffff802026c0: 01 47                	mv	a4, zero
;         (0..self.end).index_mut(slice)
ffffffff802026c2: 3a f8                	sd	a4, 48(sp)
ffffffff802026c4: 2a fc                	sd	a0, 56(sp)
ffffffff802026c6: 2a f4                	sd	a0, 40(sp)
ffffffff802026c8: 3a 85                	add	a0, zero, a4
ffffffff802026ca: 22 77                	ld	a4, 40(sp)
ffffffff802026cc: 2e f0                	sd	a1, 32(sp)
ffffffff802026ce: ba 85                	add	a1, zero, a4
ffffffff802026d0: 82 77                	ld	a5, 32(sp)
ffffffff802026d2: 32 ec                	sd	a2, 24(sp)
ffffffff802026d4: 3e 86                	add	a2, zero, a5
ffffffff802026d6: 62 68                	ld	a6, 24(sp)
ffffffff802026d8: 36 e8                	sd	a3, 16(sp)
ffffffff802026da: c2 86                	add	a3, zero, a6
ffffffff802026dc: 42 67                	ld	a4, 16(sp)
ffffffff802026de: 97 00 00 00          	auipc	ra, 0
ffffffff802026e2: e7 80 60 0f          	jalr	246(ra)
ffffffff802026e6: 2a e4                	sd	a0, 8(sp)
ffffffff802026e8: 2e e0                	sd	a1, 0(sp)
ffffffff802026ea: 09 a0                	j	2
;     }
ffffffff802026ec: 22 65                	ld	a0, 8(sp)
ffffffff802026ee: 82 65                	ld	a1, 0(sp)
ffffffff802026f0: e6 60                	ld	ra, 88(sp)
ffffffff802026f2: 25 61                	addi	sp, sp, 96
ffffffff802026f4: 82 80                	ret

ffffffff802026f6 _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hddcb86d3d6e7ca8bE:
;     fn next(&mut self) -> Option<A> {
ffffffff802026f6: 5d 71                	addi	sp, sp, -80
ffffffff802026f8: 86 e4                	sd	ra, 72(sp)
ffffffff802026fa: 2a fc                	sd	a0, 56(sp)
;         if self.start < self.end {
ffffffff802026fc: 93 05 45 00          	addi	a1, a0, 4
ffffffff80202700: 2a f4                	sd	a0, 40(sp)
ffffffff80202702: 97 20 00 00          	auipc	ra, 2
ffffffff80202706: e7 80 e0 09          	jalr	158(ra)
ffffffff8020270a: 2a f0                	sd	a0, 32(sp)
ffffffff8020270c: 09 a0                	j	2
ffffffff8020270e: 02 75                	ld	a0, 32(sp)
ffffffff80202710: 09 e5                	bnez	a0, 10
ffffffff80202712: 09 a0                	j	2
ffffffff80202714: 01 45                	mv	a0, zero
;             None
ffffffff80202716: 2a d8                	sw	a0, 48(sp)
;         if self.start < self.end {
ffffffff80202718: 3d a8                	j	62
;             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
ffffffff8020271a: 22 75                	ld	a0, 40(sp)
ffffffff8020271c: 97 00 00 00          	auipc	ra, 0
ffffffff80202720: e7 80 20 50          	jalr	1282(ra)
ffffffff80202724: 2a ec                	sd	a0, 24(sp)
ffffffff80202726: 09 a0                	j	2
ffffffff80202728: 85 45                	addi	a1, zero, 1
ffffffff8020272a: 62 65                	ld	a0, 24(sp)
ffffffff8020272c: 97 30 00 00          	auipc	ra, 3
ffffffff80202730: e7 80 80 c7          	jalr	-904(ra)
ffffffff80202734: aa 85                	add	a1, zero, a0
ffffffff80202736: aa c2                	sw	a0, 68(sp)
ffffffff80202738: 2e e8                	sd	a1, 16(sp)
ffffffff8020273a: 09 a0                	j	2
;             Some(mem::replace(&mut self.start, n))
ffffffff8020273c: 22 75                	ld	a0, 40(sp)
ffffffff8020273e: c2 65                	ld	a1, 16(sp)
ffffffff80202740: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202744: e7 80 c0 a3          	jalr	-1476(ra)
ffffffff80202748: 2a e4                	sd	a0, 8(sp)
ffffffff8020274a: 09 a0                	j	2
ffffffff8020274c: 22 65                	ld	a0, 8(sp)
ffffffff8020274e: 2a da                	sw	a0, 52(sp)
ffffffff80202750: 85 45                	addi	a1, zero, 1
ffffffff80202752: 2e d8                	sw	a1, 48(sp)
;         if self.start < self.end {
ffffffff80202754: 09 a0                	j	2
;     }
ffffffff80202756: 42 55                	lw	a0, 48(sp)
ffffffff80202758: d2 55                	lw	a1, 52(sp)
ffffffff8020275a: a6 60                	ld	ra, 72(sp)
ffffffff8020275c: 61 61                	addi	sp, sp, 80
ffffffff8020275e: 82 80                	ret

ffffffff80202760 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdf300d14b110e080E:
;     fn into_iter(self) -> I {
ffffffff80202760: 41 11                	addi	sp, sp, -16
ffffffff80202762: 2e 86                	add	a2, zero, a1
ffffffff80202764: aa 86                	add	a3, zero, a0
ffffffff80202766: 2a c4                	sw	a0, 8(sp)
ffffffff80202768: 2e c6                	sw	a1, 12(sp)
;     }
ffffffff8020276a: 41 01                	addi	sp, sp, 16
ffffffff8020276c: 82 80                	ret

ffffffff8020276e _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hc71a1fec0e6ecd1dE:
;     fn index(self, slice: &[T]) -> &[T] {
ffffffff8020276e: 01 11                	addi	sp, sp, -32
ffffffff80202770: 2a e8                	sd	a0, 16(sp)
ffffffff80202772: 2e ec                	sd	a1, 24(sp)
;     }
ffffffff80202774: 05 61                	addi	sp, sp, 32
ffffffff80202776: 82 80                	ret

ffffffff80202778 _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h43894af863eaf8eaE:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
ffffffff80202778: 01 11                	addi	sp, sp, -32
ffffffff8020277a: 2a e8                	sd	a0, 16(sp)
ffffffff8020277c: 2e ec                	sd	a1, 24(sp)
;     }
ffffffff8020277e: 05 61                	addi	sp, sp, 32
ffffffff80202780: 82 80                	ret

ffffffff80202782 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17haf13789ede226644E:
;     unsafe fn get_unchecked_mut(self, slice: &mut [T]) -> &mut [T] {
ffffffff80202782: 1d 71                	addi	sp, sp, -96
ffffffff80202784: 86 ec                	sd	ra, 88(sp)
ffffffff80202786: 2a fc                	sd	a0, 56(sp)
ffffffff80202788: ae e0                	sd	a1, 64(sp)
ffffffff8020278a: b2 e4                	sd	a2, 72(sp)
ffffffff8020278c: b6 e8                	sd	a3, 80(sp)
;         from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
ffffffff8020278e: 2a f8                	sd	a0, 48(sp)
ffffffff80202790: 32 85                	add	a0, zero, a2
ffffffff80202792: 2e f4                	sd	a1, 40(sp)
ffffffff80202794: b6 85                	add	a1, zero, a3
ffffffff80202796: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff8020279a: e7 80 e0 3c          	jalr	974(ra)
ffffffff8020279e: 2a f0                	sd	a0, 32(sp)
ffffffff802027a0: 09 a0                	j	2
ffffffff802027a2: 02 75                	ld	a0, 32(sp)
ffffffff802027a4: c2 75                	ld	a1, 48(sp)
ffffffff802027a6: 97 40 00 00          	auipc	ra, 4
ffffffff802027aa: e7 80 c0 22          	jalr	556(ra)
ffffffff802027ae: 2a ec                	sd	a0, 24(sp)
ffffffff802027b0: 09 a0                	j	2
ffffffff802027b2: 22 75                	ld	a0, 40(sp)
ffffffff802027b4: c2 75                	ld	a1, 48(sp)
ffffffff802027b6: b3 05 b5 40          	sub	a1, a0, a1
ffffffff802027ba: 62 65                	ld	a0, 24(sp)
ffffffff802027bc: 97 50 00 00          	auipc	ra, 5
ffffffff802027c0: e7 80 00 8f          	jalr	-1808(ra)
ffffffff802027c4: 2a e8                	sd	a0, 16(sp)
ffffffff802027c6: 2e e4                	sd	a1, 8(sp)
ffffffff802027c8: 09 a0                	j	2
;     }
ffffffff802027ca: 42 65                	ld	a0, 16(sp)
ffffffff802027cc: a2 65                	ld	a1, 8(sp)
ffffffff802027ce: e6 60                	ld	ra, 88(sp)
ffffffff802027d0: 25 61                	addi	sp, sp, 96
ffffffff802027d2: 82 80                	ret

ffffffff802027d4 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h961660208edca6daE:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
ffffffff802027d4: 59 71                	addi	sp, sp, -112
ffffffff802027d6: 86 f4                	sd	ra, 104(sp)
ffffffff802027d8: aa e4                	sd	a0, 72(sp)
ffffffff802027da: ae e8                	sd	a1, 80(sp)
ffffffff802027dc: b2 ec                	sd	a2, 88(sp)
ffffffff802027de: b6 f0                	sd	a3, 96(sp)
;         if self.start > self.end {
ffffffff802027e0: ba e0                	sd	a4, 64(sp)
ffffffff802027e2: 36 fc                	sd	a3, 56(sp)
ffffffff802027e4: 32 f8                	sd	a2, 48(sp)
ffffffff802027e6: 2e f4                	sd	a1, 40(sp)
ffffffff802027e8: 2a f0                	sd	a0, 32(sp)
ffffffff802027ea: 63 eb a5 00          	bltu	a1, a0, 22
ffffffff802027ee: 09 a0                	j	2
;         } else if self.end > slice.len() {
ffffffff802027f0: 42 75                	ld	a0, 48(sp)
ffffffff802027f2: e2 75                	ld	a1, 56(sp)
ffffffff802027f4: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff802027f8: e7 80 a0 37          	jalr	890(ra)
ffffffff802027fc: 2a ec                	sd	a0, 24(sp)
ffffffff802027fe: 09 a8                	j	18
;             slice_index_order_fail(self.start, self.end);
ffffffff80202800: 02 75                	ld	a0, 32(sp)
ffffffff80202802: a2 75                	ld	a1, 40(sp)
ffffffff80202804: 06 66                	ld	a2, 64(sp)
ffffffff80202806: 97 90 00 00          	auipc	ra, 9
ffffffff8020280a: e7 80 e0 03          	jalr	62(ra)
ffffffff8020280e: 00 00                	unimp	
;         } else if self.end > slice.len() {
ffffffff80202810: 62 65                	ld	a0, 24(sp)
ffffffff80202812: a2 75                	ld	a1, 40(sp)
ffffffff80202814: 63 6e b5 00          	bltu	a0, a1, 28
ffffffff80202818: 09 a0                	j	2
;         unsafe { self.get_unchecked_mut(slice) }
ffffffff8020281a: 02 75                	ld	a0, 32(sp)
ffffffff8020281c: a2 75                	ld	a1, 40(sp)
ffffffff8020281e: 42 76                	ld	a2, 48(sp)
ffffffff80202820: e2 76                	ld	a3, 56(sp)
ffffffff80202822: 97 00 00 00          	auipc	ra, 0
ffffffff80202826: e7 80 00 f6          	jalr	-160(ra)
ffffffff8020282a: 2a e8                	sd	a0, 16(sp)
ffffffff8020282c: 2e e4                	sd	a1, 8(sp)
ffffffff8020282e: 0d a0                	j	34
;             slice_index_len_fail(self.end, slice.len());
ffffffff80202830: 42 75                	ld	a0, 48(sp)
ffffffff80202832: e2 75                	ld	a1, 56(sp)
ffffffff80202834: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202838: e7 80 a0 33          	jalr	826(ra)
ffffffff8020283c: 2a e0                	sd	a0, 0(sp)
ffffffff8020283e: 09 a0                	j	2
ffffffff80202840: 22 75                	ld	a0, 40(sp)
ffffffff80202842: 82 65                	ld	a1, 0(sp)
ffffffff80202844: 06 66                	ld	a2, 64(sp)
ffffffff80202846: 97 90 00 00          	auipc	ra, 9
ffffffff8020284a: e7 80 e0 fb          	jalr	-66(ra)
ffffffff8020284e: 00 00                	unimp	
;     }
ffffffff80202850: 42 65                	ld	a0, 16(sp)
ffffffff80202852: a2 65                	ld	a1, 8(sp)
ffffffff80202854: a6 70                	ld	ra, 104(sp)
ffffffff80202856: 65 61                	addi	sp, sp, 112
ffffffff80202858: 82 80                	ret

ffffffff8020285a _ZN4core3str15next_code_point17h3f4dfa2443e0a154E:
; pub fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
ffffffff8020285a: 31 71                	addi	sp, sp, -192
ffffffff8020285c: 06 fd                	sd	ra, 184(sp)
ffffffff8020285e: 2a e5                	sd	a0, 136(sp)
;     let x = *bytes.next()?;
ffffffff80202860: aa f4                	sd	a0, 104(sp)
ffffffff80202862: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202866: e7 80 e0 44          	jalr	1102(ra)
ffffffff8020286a: aa f0                	sd	a0, 96(sp)
ffffffff8020286c: 09 a0                	j	2
ffffffff8020286e: 06 75                	ld	a0, 96(sp)
ffffffff80202870: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202874: e7 80 20 0f          	jalr	242(ra)
ffffffff80202878: aa fc                	sd	a0, 120(sp)
ffffffff8020287a: 09 a0                	j	2
ffffffff8020287c: 66 75                	ld	a0, 120(sp)
ffffffff8020287e: 93 35 15 00          	seqz	a1, a0
ffffffff80202882: 01 46                	mv	a2, zero
ffffffff80202884: 63 14 c5 00          	bne	a0, a2, 8
ffffffff80202888: 09 a0                	j	2
ffffffff8020288a: 39 a8                	j	30
ffffffff8020288c: 66 75                	ld	a0, 120(sp)
ffffffff8020288e: 2a ed                	sd	a0, 152(sp)
ffffffff80202890: 03 05 05 00          	lb	a0, 0(a0)
ffffffff80202894: 93 75 f5 0f          	andi	a1, a0, 255
ffffffff80202898: a3 03 a1 0a          	sb	a0, 167(sp)
ffffffff8020289c: 7d 56                	addi	a2, zero, -1
;     if x < 128 {
ffffffff8020289e: ae ec                	sd	a1, 88(sp)
ffffffff802028a0: 63 41 a6 04          	blt	a2, a0, 66
ffffffff802028a4: 2d a0                	j	42
;     let x = *bytes.next()?;
ffffffff802028a6: 00 00                	unimp	
ffffffff802028a8: 97 70 00 00          	auipc	ra, 7
ffffffff802028ac: e7 80 00 d9          	jalr	-624(ra)
ffffffff802028b0: 31 a0                	j	12
; }
ffffffff802028b2: 46 55                	lw	a0, 112(sp)
ffffffff802028b4: d6 55                	lw	a1, 116(sp)
ffffffff802028b6: ea 70                	ld	ra, 184(sp)
ffffffff802028b8: 29 61                	addi	sp, sp, 192
ffffffff802028ba: 82 80                	ret
;     let x = *bytes.next()?;
ffffffff802028bc: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff802028c0: e7 80 00 07          	jalr	112(ra)
ffffffff802028c4: aa d8                	sw	a0, 112(sp)
ffffffff802028c6: ae da                	sw	a1, 116(sp)
ffffffff802028c8: 09 a0                	j	2
ffffffff802028ca: 09 a0                	j	2
ffffffff802028cc: dd b7                	j	-26
ffffffff802028ce: 89 45                	addi	a1, zero, 2
;     let init = utf8_first_byte(x, 2);
ffffffff802028d0: 66 65                	ld	a0, 88(sp)
ffffffff802028d2: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff802028d6: e7 80 a0 ae          	jalr	-1302(ra)
ffffffff802028da: aa 85                	add	a1, zero, a0
ffffffff802028dc: 2a d5                	sw	a0, 168(sp)
ffffffff802028de: ae e8                	sd	a1, 80(sp)
ffffffff802028e0: 31 a0                	j	12
;         return Some(x as u32);
ffffffff802028e2: 66 65                	ld	a0, 88(sp)
ffffffff802028e4: aa da                	sw	a0, 116(sp)
ffffffff802028e6: 85 45                	addi	a1, zero, 1
ffffffff802028e8: ae d8                	sw	a1, 112(sp)
ffffffff802028ea: cd b7                	j	-30
;     let y = unwrap_or_0(bytes.next());
ffffffff802028ec: 26 75                	ld	a0, 104(sp)
ffffffff802028ee: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff802028f2: e7 80 20 3c          	jalr	962(ra)
ffffffff802028f6: aa e4                	sd	a0, 72(sp)
ffffffff802028f8: 09 a0                	j	2
ffffffff802028fa: 26 65                	ld	a0, 72(sp)
ffffffff802028fc: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202900: e7 80 c0 a8          	jalr	-1396(ra)
ffffffff80202904: aa 85                	add	a1, zero, a0
ffffffff80202906: 23 07 a1 0a          	sb	a0, 174(sp)
ffffffff8020290a: ae e0                	sd	a1, 64(sp)
ffffffff8020290c: 09 a0                	j	2
;     let mut ch = utf8_acc_cont_byte(init, y);
ffffffff8020290e: 46 65                	ld	a0, 80(sp)
ffffffff80202910: 86 65                	ld	a1, 64(sp)
ffffffff80202912: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202916: e7 80 60 ac          	jalr	-1338(ra)
ffffffff8020291a: 2a c3                	sw	a0, 132(sp)
ffffffff8020291c: 09 a0                	j	2
ffffffff8020291e: 13 05 f0 0d          	addi	a0, zero, 223
;     if x >= 0xE0 {
ffffffff80202922: e6 65                	ld	a1, 88(sp)
ffffffff80202924: 63 64 b5 00          	bltu	a0, a1, 8
ffffffff80202928: 09 a0                	j	2
ffffffff8020292a: 4d a0                	j	162
;         let z = unwrap_or_0(bytes.next());
ffffffff8020292c: 26 75                	ld	a0, 104(sp)
ffffffff8020292e: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202932: e7 80 20 38          	jalr	898(ra)
ffffffff80202936: 2a fc                	sd	a0, 56(sp)
ffffffff80202938: 09 a0                	j	2
ffffffff8020293a: 62 75                	ld	a0, 56(sp)
ffffffff8020293c: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202940: e7 80 c0 a4          	jalr	-1460(ra)
ffffffff80202944: aa 85                	add	a1, zero, a0
ffffffff80202946: a3 07 a1 0a          	sb	a0, 175(sp)
ffffffff8020294a: 2e f8                	sd	a1, 48(sp)
ffffffff8020294c: 09 a0                	j	2
;         let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
ffffffff8020294e: 06 65                	ld	a0, 64(sp)
ffffffff80202950: 13 75 f5 03          	andi	a0, a0, 63
ffffffff80202954: c2 75                	ld	a1, 48(sp)
ffffffff80202956: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff8020295a: e7 80 20 a8          	jalr	-1406(ra)
ffffffff8020295e: aa 85                	add	a1, zero, a0
ffffffff80202960: 2a d9                	sw	a0, 176(sp)
ffffffff80202962: 2e f4                	sd	a1, 40(sp)
ffffffff80202964: 09 a0                	j	2
;         ch = init << 12 | y_z;
ffffffff80202966: 46 65                	ld	a0, 80(sp)
ffffffff80202968: 93 15 c5 00          	slli	a1, a0, 12
ffffffff8020296c: 22 76                	ld	a2, 40(sp)
ffffffff8020296e: d1 8d                	or	a1, a1, a2
ffffffff80202970: 2e c3                	sw	a1, 132(sp)
ffffffff80202972: 93 05 f0 0e          	addi	a1, zero, 239
;         if x >= 0xF0 {
ffffffff80202976: e6 66                	ld	a3, 88(sp)
ffffffff80202978: 63 e4 d5 00          	bltu	a1, a3, 8
ffffffff8020297c: 09 a0                	j	2
ffffffff8020297e: b1 a0                	j	76
;             let w = unwrap_or_0(bytes.next());
ffffffff80202980: 26 75                	ld	a0, 104(sp)
ffffffff80202982: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202986: e7 80 e0 32          	jalr	814(ra)
ffffffff8020298a: 2a f0                	sd	a0, 32(sp)
ffffffff8020298c: 09 a0                	j	2
ffffffff8020298e: 02 75                	ld	a0, 32(sp)
ffffffff80202990: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202994: e7 80 80 9f          	jalr	-1544(ra)
ffffffff80202998: aa 85                	add	a1, zero, a0
ffffffff8020299a: a3 0b a1 0a          	sb	a0, 183(sp)
ffffffff8020299e: 2e ec                	sd	a1, 24(sp)
ffffffff802029a0: 09 a0                	j	2
;             ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
ffffffff802029a2: 46 65                	ld	a0, 80(sp)
ffffffff802029a4: 93 75 75 00          	andi	a1, a0, 7
ffffffff802029a8: ca 05                	slli	a1, a1, 18
ffffffff802029aa: 22 75                	ld	a0, 40(sp)
ffffffff802029ac: 62 66                	ld	a2, 24(sp)
ffffffff802029ae: 2e e8                	sd	a1, 16(sp)
ffffffff802029b0: b2 85                	add	a1, zero, a2
ffffffff802029b2: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff802029b6: e7 80 60 a2          	jalr	-1498(ra)
ffffffff802029ba: 2a e4                	sd	a0, 8(sp)
ffffffff802029bc: 09 a0                	j	2
ffffffff802029be: 42 65                	ld	a0, 16(sp)
ffffffff802029c0: a2 65                	ld	a1, 8(sp)
ffffffff802029c2: 33 66 b5 00          	or	a2, a0, a1
ffffffff802029c6: 32 c3                	sw	a2, 132(sp)
;         if x >= 0xF0 {
ffffffff802029c8: 09 a0                	j	2
;     if x >= 0xE0 {
ffffffff802029ca: 09 a0                	j	2
;     Some(ch)
ffffffff802029cc: 1a 45                	lw	a0, 132(sp)
ffffffff802029ce: aa da                	sw	a0, 116(sp)
ffffffff802029d0: 05 45                	addi	a0, zero, 1
ffffffff802029d2: aa d8                	sw	a0, 112(sp)
; }
ffffffff802029d4: f9 bd                	j	-290

ffffffff802029d6 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6623b7e1490837f4E:
;     fn into_iter(self) -> I {
ffffffff802029d6: 41 11                	addi	sp, sp, -16
ffffffff802029d8: 2a e0                	sd	a0, 0(sp)
ffffffff802029da: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff802029dc: 41 01                	addi	sp, sp, 16
ffffffff802029de: 82 80                	ret

ffffffff802029e0 _ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h2520c688e8403dd0E:
;         next_code_point(&mut self.iter).map(|ch| {
ffffffff802029e0: 01 11                	addi	sp, sp, -32
ffffffff802029e2: 06 ec                	sd	ra, 24(sp)
ffffffff802029e4: aa 85                	add	a1, zero, a0
ffffffff802029e6: 2a ca                	sw	a0, 20(sp)
;             unsafe { char::from_u32_unchecked(ch) }
ffffffff802029e8: 2e e4                	sd	a1, 8(sp)
ffffffff802029ea: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff802029ee: e7 80 80 64          	jalr	1608(ra)
ffffffff802029f2: 02 15                	slli	a0, a0, 32
ffffffff802029f4: 01 91                	srli	a0, a0, 32
ffffffff802029f6: 2a e0                	sd	a0, 0(sp)
ffffffff802029f8: 09 a0                	j	2
;         })
ffffffff802029fa: 02 65                	ld	a0, 0(sp)
ffffffff802029fc: e2 60                	ld	ra, 24(sp)
ffffffff802029fe: 05 61                	addi	sp, sp, 32
ffffffff80202a00: 82 80                	ret

ffffffff80202a02 _ZN2os6memory4init17hed3ce2534c377e48E:
; pub fn init() {
ffffffff80202a02: 39 71                	addi	sp, sp, -64
;     heap::init();
ffffffff80202a04: 06 fc                	sd	ra, 56(sp)
ffffffff80202a06: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80202a0a: e7 80 60 79          	jalr	1942(ra)
ffffffff80202a0e: 09 a0                	j	2
;     unsafe { riscv::register::sstatus::set_sum() };
ffffffff80202a10: 97 00 00 00          	auipc	ra, 0
ffffffff80202a14: e7 80 00 9c          	jalr	-1600(ra)
ffffffff80202a18: 09 a0                	j	2

ffffffff80202a1a .LBB0_5:
;     println!("mod memory initialized");
ffffffff80202a1a: 17 b5 00 00          	auipc	a0, 11
ffffffff80202a1e: 13 05 e5 df          	addi	a0, a0, -514
ffffffff80202a22: 0c 61                	ld	a1, 0(a0)

ffffffff80202a24 .LBB0_6:
ffffffff80202a24: 17 b5 00 00          	auipc	a0, 11
ffffffff80202a28: 13 05 c5 df          	addi	a0, a0, -516
ffffffff80202a2c: 14 61                	ld	a3, 0(a0)
ffffffff80202a2e: 28 00                	addi	a0, sp, 8
ffffffff80202a30: 05 46                	addi	a2, zero, 1
ffffffff80202a32: 01 47                	mv	a4, zero
ffffffff80202a34: 97 10 00 00          	auipc	ra, 1
ffffffff80202a38: e7 80 40 58          	jalr	1412(ra)
ffffffff80202a3c: 09 a0                	j	2
ffffffff80202a3e: 28 00                	addi	a0, sp, 8
ffffffff80202a40: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202a44: e7 80 e0 0d          	jalr	222(ra)
ffffffff80202a48: 09 a0                	j	2
; }
ffffffff80202a4a: e2 70                	ld	ra, 56(sp)
ffffffff80202a4c: 21 61                	addi	sp, sp, 64
ffffffff80202a4e: 82 80                	ret

ffffffff80202a50 _ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h1aa80fc6652ecb13E:
;     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
ffffffff80202a50: 1d 71                	addi	sp, sp, -96
ffffffff80202a52: 86 ec                	sd	ra, 88(sp)
ffffffff80202a54: 2e f8                	sd	a1, 48(sp)
ffffffff80202a56: 32 fc                	sd	a2, 56(sp)
ffffffff80202a58: aa e0                	sd	a0, 64(sp)
ffffffff80202a5a: 0c 18                	addi	a1, sp, 48
;         let size = layout.size();
ffffffff80202a5c: 2a f4                	sd	a0, 40(sp)
ffffffff80202a5e: 2e 85                	add	a0, zero, a1
ffffffff80202a60: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80202a64: e7 80 a0 d7          	jalr	-646(ra)
ffffffff80202a68: aa 85                	add	a1, zero, a0
ffffffff80202a6a: aa e4                	sd	a0, 72(sp)
ffffffff80202a6c: 2e f0                	sd	a1, 32(sp)
ffffffff80202a6e: 09 a0                	j	2
;         let ptr = self.alloc(layout);
ffffffff80202a70: c2 75                	ld	a1, 48(sp)
ffffffff80202a72: 62 76                	ld	a2, 56(sp)
ffffffff80202a74: 22 75                	ld	a0, 40(sp)
ffffffff80202a76: 97 50 00 00          	auipc	ra, 5
ffffffff80202a7a: e7 80 e0 35          	jalr	862(ra)
ffffffff80202a7e: aa 85                	add	a1, zero, a0
ffffffff80202a80: aa e8                	sd	a0, 80(sp)
ffffffff80202a82: 2e ec                	sd	a1, 24(sp)
ffffffff80202a84: 09 a0                	j	2
;         if !ptr.is_null() {
ffffffff80202a86: 62 65                	ld	a0, 24(sp)
ffffffff80202a88: 97 40 00 00          	auipc	ra, 4
ffffffff80202a8c: e7 80 e0 fb          	jalr	-66(ra)
ffffffff80202a90: 2a e8                	sd	a0, 16(sp)
ffffffff80202a92: 09 a0                	j	2
ffffffff80202a94: 01 45                	mv	a0, zero
ffffffff80202a96: c2 65                	ld	a1, 16(sp)
ffffffff80202a98: 63 84 a5 00          	beq	a1, a0, 8
ffffffff80202a9c: 09 a0                	j	2
ffffffff80202a9e: 29 a8                	j	26
ffffffff80202aa0: 01 45                	mv	a0, zero
;             ptr::write_bytes(ptr, 0, size);
ffffffff80202aa2: e2 65                	ld	a1, 24(sp)
ffffffff80202aa4: 2a e4                	sd	a0, 8(sp)
ffffffff80202aa6: 2e 85                	add	a0, zero, a1
ffffffff80202aa8: a2 65                	ld	a1, 8(sp)
ffffffff80202aaa: 02 76                	ld	a2, 32(sp)
ffffffff80202aac: 97 40 00 00          	auipc	ra, 4
ffffffff80202ab0: e7 80 a0 35          	jalr	858(ra)
ffffffff80202ab4: 09 a0                	j	2
;         if !ptr.is_null() {
ffffffff80202ab6: 09 a0                	j	2
;     }
ffffffff80202ab8: 62 65                	ld	a0, 24(sp)
ffffffff80202aba: e6 60                	ld	ra, 88(sp)
ffffffff80202abc: 25 61                	addi	sp, sp, 96
ffffffff80202abe: 82 80                	ret

ffffffff80202ac0 _ZN4core5alloc6global11GlobalAlloc7realloc17hc75b267ce08f5e5bE:
;     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
ffffffff80202ac0: 35 71                	addi	sp, sp, -160
ffffffff80202ac2: 06 ed                	sd	ra, 152(sp)
ffffffff80202ac4: b2 ec                	sd	a2, 88(sp)
ffffffff80202ac6: b6 f0                	sd	a3, 96(sp)
ffffffff80202ac8: aa f4                	sd	a0, 104(sp)
ffffffff80202aca: ae f8                	sd	a1, 112(sp)
ffffffff80202acc: ba fc                	sd	a4, 120(sp)
ffffffff80202ace: b0 08                	addi	a2, sp, 88
;         let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());
ffffffff80202ad0: aa e8                	sd	a0, 80(sp)
ffffffff80202ad2: 32 85                	add	a0, zero, a2
ffffffff80202ad4: ba e4                	sd	a4, 72(sp)
ffffffff80202ad6: ae e0                	sd	a1, 64(sp)
ffffffff80202ad8: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80202adc: e7 80 c0 d0          	jalr	-756(ra)
ffffffff80202ae0: 2a fc                	sd	a0, 56(sp)
ffffffff80202ae2: 09 a0                	j	2
ffffffff80202ae4: 26 65                	ld	a0, 72(sp)
ffffffff80202ae6: e2 75                	ld	a1, 56(sp)
ffffffff80202ae8: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80202aec: e7 80 c0 cc          	jalr	-820(ra)
ffffffff80202af0: 2a 86                	add	a2, zero, a0
ffffffff80202af2: ae 86                	add	a3, zero, a1
ffffffff80202af4: 2a e1                	sd	a0, 128(sp)
ffffffff80202af6: 2e e5                	sd	a1, 136(sp)
ffffffff80202af8: 32 f8                	sd	a2, 48(sp)
ffffffff80202afa: 36 f4                	sd	a3, 40(sp)
ffffffff80202afc: 09 a0                	j	2
;         let new_ptr = self.alloc(new_layout);
ffffffff80202afe: 46 65                	ld	a0, 80(sp)
ffffffff80202b00: c2 75                	ld	a1, 48(sp)
ffffffff80202b02: 22 76                	ld	a2, 40(sp)
ffffffff80202b04: 97 50 00 00          	auipc	ra, 5
ffffffff80202b08: e7 80 00 2d          	jalr	720(ra)
ffffffff80202b0c: aa 85                	add	a1, zero, a0
ffffffff80202b0e: 2a e9                	sd	a0, 144(sp)
ffffffff80202b10: 2e f0                	sd	a1, 32(sp)
ffffffff80202b12: 09 a0                	j	2
;         if !new_ptr.is_null() {
ffffffff80202b14: 02 75                	ld	a0, 32(sp)
ffffffff80202b16: 97 40 00 00          	auipc	ra, 4
ffffffff80202b1a: e7 80 00 f3          	jalr	-208(ra)
ffffffff80202b1e: 2a ec                	sd	a0, 24(sp)
ffffffff80202b20: 09 a0                	j	2
ffffffff80202b22: 01 45                	mv	a0, zero
ffffffff80202b24: e2 65                	ld	a1, 24(sp)
ffffffff80202b26: 63 84 a5 00          	beq	a1, a0, 8
ffffffff80202b2a: 09 a0                	j	2
ffffffff80202b2c: 91 a0                	j	68
ffffffff80202b2e: a8 08                	addi	a0, sp, 88
;             ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
ffffffff80202b30: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80202b34: e7 80 a0 ca          	jalr	-854(ra)
ffffffff80202b38: 2a e8                	sd	a0, 16(sp)
ffffffff80202b3a: 09 a0                	j	2
ffffffff80202b3c: 42 65                	ld	a0, 16(sp)
ffffffff80202b3e: a6 65                	ld	a1, 72(sp)
ffffffff80202b40: 97 70 00 00          	auipc	ra, 7
ffffffff80202b44: e7 80 80 83          	jalr	-1992(ra)
ffffffff80202b48: 2a e4                	sd	a0, 8(sp)
ffffffff80202b4a: 09 a0                	j	2
ffffffff80202b4c: 06 65                	ld	a0, 64(sp)
ffffffff80202b4e: 82 75                	ld	a1, 32(sp)
ffffffff80202b50: 22 66                	ld	a2, 8(sp)
ffffffff80202b52: 97 40 00 00          	auipc	ra, 4
ffffffff80202b56: e7 80 80 31          	jalr	792(ra)
ffffffff80202b5a: 09 a0                	j	2
;             self.dealloc(ptr, layout);
ffffffff80202b5c: 66 66                	ld	a2, 88(sp)
ffffffff80202b5e: 86 76                	ld	a3, 96(sp)
ffffffff80202b60: 46 65                	ld	a0, 80(sp)
ffffffff80202b62: 86 65                	ld	a1, 64(sp)
ffffffff80202b64: 97 50 00 00          	auipc	ra, 5
ffffffff80202b68: e7 80 e0 2f          	jalr	766(ra)
ffffffff80202b6c: 09 a0                	j	2
;         if !new_ptr.is_null() {
ffffffff80202b6e: 09 a0                	j	2
;     }
ffffffff80202b70: 02 75                	ld	a0, 32(sp)
ffffffff80202b72: ea 60                	ld	ra, 152(sp)
ffffffff80202b74: 0d 61                	addi	sp, sp, 160
ffffffff80202b76: 82 80                	ret

ffffffff80202b78 _ZN4core3mem12maybe_uninit20MaybeUninit$LT$T$GT$6zeroed17h203f6e47364b05f1E:
;     pub fn zeroed() -> MaybeUninit<T> {
ffffffff80202b78: 79 71                	addi	sp, sp, -48
;     }
ffffffff80202b7a: 06 f4                	sd	ra, 40(sp)
ffffffff80202b7c: 42 65                	ld	a0, 16(sp)
;         let mut u = MaybeUninit::<T>::uninit();
ffffffff80202b7e: 2a e4                	sd	a0, 8(sp)
ffffffff80202b80: 09 a0                	j	2
ffffffff80202b82: 28 00                	addi	a0, sp, 8
ffffffff80202b84: 2a ec                	sd	a0, 24(sp)
ffffffff80202b86: 2a f0                	sd	a0, 32(sp)
;             u.as_mut_ptr().write_bytes(0u8, 1);
ffffffff80202b88: 09 a0                	j	2
ffffffff80202b8a: 28 00                	addi	a0, sp, 8
ffffffff80202b8c: 81 45                	mv	a1, zero
ffffffff80202b8e: 05 46                	addi	a2, zero, 1
ffffffff80202b90: 97 20 00 00          	auipc	ra, 2
ffffffff80202b94: e7 80 20 8c          	jalr	-1854(ra)
ffffffff80202b98: 09 a0                	j	2
;     }
ffffffff80202b9a: 22 65                	ld	a0, 8(sp)
ffffffff80202b9c: a2 70                	ld	ra, 40(sp)
ffffffff80202b9e: 45 61                	addi	sp, sp, 48
ffffffff80202ba0: 82 80                	ret

ffffffff80202ba2 _ZN4core5array69_$LT$impl$u20$core..fmt..Debug$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$3fmt17hdbc8f2365d2628b3E:
;     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
ffffffff80202ba2: 5d 71                	addi	sp, sp, -80
ffffffff80202ba4: 86 e4                	sd	ra, 72(sp)
ffffffff80202ba6: 2a fc                	sd	a0, 56(sp)
ffffffff80202ba8: ae e0                	sd	a1, 64(sp)

ffffffff80202baa .LBB0_3:
;         fmt::Debug::fmt(&&self[..], f)
ffffffff80202baa: 17 b6 00 00          	auipc	a2, 11
ffffffff80202bae: 13 06 66 cf          	addi	a2, a2, -778
ffffffff80202bb2: 93 06 00 02          	addi	a3, zero, 32
ffffffff80202bb6: 2e f0                	sd	a1, 32(sp)
ffffffff80202bb8: b6 85                	add	a1, zero, a3
ffffffff80202bba: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202bbe: e7 80 40 07          	jalr	116(ra)
ffffffff80202bc2: 2a ec                	sd	a0, 24(sp)
ffffffff80202bc4: 2e e8                	sd	a1, 16(sp)
ffffffff80202bc6: 09 a0                	j	2
ffffffff80202bc8: 62 65                	ld	a0, 24(sp)
ffffffff80202bca: 2a f4                	sd	a0, 40(sp)
ffffffff80202bcc: c2 65                	ld	a1, 16(sp)
ffffffff80202bce: 2e f8                	sd	a1, 48(sp)
ffffffff80202bd0: 28 10                	addi	a0, sp, 40
ffffffff80202bd2: 82 75                	ld	a1, 32(sp)
ffffffff80202bd4: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202bd8: e7 80 a0 8a          	jalr	-1878(ra)
ffffffff80202bdc: 2a e4                	sd	a0, 8(sp)
ffffffff80202bde: 09 a0                	j	2
;     }
ffffffff80202be0: 22 65                	ld	a0, 8(sp)
ffffffff80202be2: a6 60                	ld	ra, 72(sp)
ffffffff80202be4: 61 61                	addi	sp, sp, 80
ffffffff80202be6: 82 80                	ret

ffffffff80202be8 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h038cf88507c19b85E:
;     pub const fn get(&self) -> *mut T {
ffffffff80202be8: 41 11                	addi	sp, sp, -16
ffffffff80202bea: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80202bec: 41 01                	addi	sp, sp, 16
ffffffff80202bee: 82 80                	ret

ffffffff80202bf0 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h098177f875c0eb8fE:
;     pub const fn get(&self) -> *mut T {
ffffffff80202bf0: 41 11                	addi	sp, sp, -16
ffffffff80202bf2: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80202bf4: 41 01                	addi	sp, sp, 16
ffffffff80202bf6: 82 80                	ret

ffffffff80202bf8 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h3c9d10687bb22c89E:
;     pub const fn get(&self) -> *mut T {
ffffffff80202bf8: 41 11                	addi	sp, sp, -16
ffffffff80202bfa: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80202bfc: 41 01                	addi	sp, sp, 16
ffffffff80202bfe: 82 80                	ret

ffffffff80202c00 _ZN4core4cell19UnsafeCell$LT$T$GT$3new17h70e4bf7b54f6737bE:
;     pub const fn new(value: T) -> UnsafeCell<T> {
ffffffff80202c00: 01 11                	addi	sp, sp, -32
;         UnsafeCell { value }
ffffffff80202c02: 90 6d                	ld	a2, 24(a1)
ffffffff80202c04: 32 ec                	sd	a2, 24(sp)
ffffffff80202c06: 94 69                	ld	a3, 16(a1)
ffffffff80202c08: 36 e8                	sd	a3, 16(sp)
ffffffff80202c0a: 98 65                	ld	a4, 8(a1)
ffffffff80202c0c: 3a e4                	sd	a4, 8(sp)
ffffffff80202c0e: 8c 61                	ld	a1, 0(a1)
ffffffff80202c10: 2e e0                	sd	a1, 0(sp)
ffffffff80202c12: 10 ed                	sd	a2, 24(a0)
ffffffff80202c14: 14 e9                	sd	a3, 16(a0)
ffffffff80202c16: 18 e5                	sd	a4, 8(a0)
ffffffff80202c18: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff80202c1a: 05 61                	addi	sp, sp, 32
ffffffff80202c1c: 82 80                	ret

ffffffff80202c1e _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i32$GT$5clone17h11c6624f3991355aE:
;                     fn clone(&self) -> Self {
ffffffff80202c1e: 41 11                	addi	sp, sp, -16
ffffffff80202c20: 2a e4                	sd	a0, 8(sp)
;                     }
ffffffff80202c22: 08 41                	lw	a0, 0(a0)
ffffffff80202c24: 41 01                	addi	sp, sp, 16
ffffffff80202c26: 82 80                	ret

ffffffff80202c28 _ZN4core4hint21unreachable_unchecked17h9873850a7ebd483cE:
;     intrinsics::unreachable()
ffffffff80202c28: 00 00                	unimp	

ffffffff80202c2a _ZN4core4hint9spin_loop17h8fca43a146a180d8E:
; }
ffffffff80202c2a: 82 80                	ret

ffffffff80202c2c _ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17h7f08b2b9e1c302e4E:
;             fn get_bit(&self, bit: usize) -> bool {
ffffffff80202c2c: 79 71                	addi	sp, sp, -48
ffffffff80202c2e: 2a f0                	sd	a0, 32(sp)
ffffffff80202c30: 2e f4                	sd	a1, 40(sp)
ffffffff80202c32: 13 06 f0 03          	addi	a2, zero, 63
;                 assert!(bit < Self::BIT_LENGTH);
ffffffff80202c36: 2e ec                	sd	a1, 24(sp)
ffffffff80202c38: 2a e8                	sd	a0, 16(sp)
ffffffff80202c3a: 63 61 b6 02          	bltu	a2, a1, 34
ffffffff80202c3e: 09 a0                	j	2
;                 (*self & (1 << bit)) != 0
ffffffff80202c40: 42 65                	ld	a0, 16(sp)
ffffffff80202c42: 0c 61                	ld	a1, 0(a0)
ffffffff80202c44: 62 66                	ld	a2, 24(sp)
ffffffff80202c46: 93 76 06 fc          	andi	a3, a2, -64
ffffffff80202c4a: 05 47                	addi	a4, zero, 1
ffffffff80202c4c: 33 17 c7 00          	sll	a4, a4, a2
ffffffff80202c50: 81 47                	mv	a5, zero
ffffffff80202c52: 2e e4                	sd	a1, 8(sp)
ffffffff80202c54: 3a e0                	sd	a4, 0(sp)
ffffffff80202c56: 63 9a f6 02          	bne	a3, a5, 52
ffffffff80202c5a: 05 a0                	j	32

ffffffff80202c5c .LBB0_5:
;         $crate::panicking::panic($msg)
ffffffff80202c5c: 17 b5 00 00          	auipc	a0, 11
ffffffff80202c60: 13 05 c5 c5          	addi	a0, a0, -932

ffffffff80202c64 .LBB0_6:
ffffffff80202c64: 17 b6 00 00          	auipc	a2, 11
ffffffff80202c68: 13 06 46 cf          	addi	a2, a2, -780
ffffffff80202c6c: 93 05 80 02          	addi	a1, zero, 40
ffffffff80202c70: 97 70 00 00          	auipc	ra, 7
ffffffff80202c74: e7 80 80 6c          	jalr	1736(ra)
ffffffff80202c78: 00 00                	unimp	
;                 (*self & (1 << bit)) != 0
ffffffff80202c7a: 22 65                	ld	a0, 8(sp)
ffffffff80202c7c: 82 65                	ld	a1, 0(sp)
ffffffff80202c7e: 33 76 b5 00          	and	a2, a0, a1
ffffffff80202c82: 33 35 c0 00          	snez	a0, a2
;             }
ffffffff80202c86: 45 61                	addi	sp, sp, 48
ffffffff80202c88: 82 80                	ret

ffffffff80202c8a .LBB0_7:
;                 (*self & (1 << bit)) != 0
ffffffff80202c8a: 17 b5 00 00          	auipc	a0, 11
ffffffff80202c8e: 13 05 65 d6          	addi	a0, a0, -666

ffffffff80202c92 .LBB0_8:
ffffffff80202c92: 17 b6 00 00          	auipc	a2, 11
ffffffff80202c96: 13 06 e6 d3          	addi	a2, a2, -706
ffffffff80202c9a: 93 05 30 02          	addi	a1, zero, 35
ffffffff80202c9e: 97 70 00 00          	auipc	ra, 7
ffffffff80202ca2: e7 80 a0 69          	jalr	1690(ra)
ffffffff80202ca6: 00 00                	unimp	

ffffffff80202ca8 rust_begin_unwind:
; fn panic_handler(info: &PanicInfo) -> ! {
ffffffff80202ca8: 75 71                	addi	sp, sp, -144
ffffffff80202caa: 06 e5                	sd	ra, 136(sp)
ffffffff80202cac: aa fc                	sd	a0, 120(sp)

ffffffff80202cae .LBB0_6:
;     println!("\x1b[1;31mpanic: '{}'\x1b[0m", info.message().unwrap());
ffffffff80202cae: 97 b5 00 00          	auipc	a1, 11
ffffffff80202cb2: 93 85 a5 d9          	addi	a1, a1, -614
ffffffff80202cb6: 8c 61                	ld	a1, 0(a1)
ffffffff80202cb8: 2e f0                	sd	a1, 32(sp)
ffffffff80202cba: 97 70 00 00          	auipc	ra, 7
ffffffff80202cbe: e7 80 a0 67          	jalr	1658(ra)
ffffffff80202cc2: 2a ec                	sd	a0, 24(sp)
ffffffff80202cc4: 09 a0                	j	2

ffffffff80202cc6 .LBB0_7:
ffffffff80202cc6: 97 b5 00 00          	auipc	a1, 11
ffffffff80202cca: 93 85 a5 d9          	addi	a1, a1, -614
ffffffff80202cce: 62 65                	ld	a0, 24(sp)
ffffffff80202cd0: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202cd4: e7 80 c0 b8          	jalr	-1140(ra)
ffffffff80202cd8: aa f8                	sd	a0, 112(sp)
ffffffff80202cda: 09 a0                	j	2
ffffffff80202cdc: 88 18                	addi	a0, sp, 112
ffffffff80202cde: aa f4                	sd	a0, 104(sp)
ffffffff80202ce0: 2a e1                	sd	a0, 128(sp)

ffffffff80202ce2 .LBB0_8:
ffffffff80202ce2: 97 d5 ff ff          	auipc	a1, 1048573
ffffffff80202ce6: 93 85 65 7e          	addi	a1, a1, 2022
ffffffff80202cea: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202cee: e7 80 40 85          	jalr	-1964(ra)
ffffffff80202cf2: 2a e8                	sd	a0, 16(sp)
ffffffff80202cf4: 2e e4                	sd	a1, 8(sp)
ffffffff80202cf6: 09 a0                	j	2
ffffffff80202cf8: 42 65                	ld	a0, 16(sp)
ffffffff80202cfa: aa ec                	sd	a0, 88(sp)
ffffffff80202cfc: a2 65                	ld	a1, 8(sp)
ffffffff80202cfe: ae f0                	sd	a1, 96(sp)
ffffffff80202d00: 28 10                	addi	a0, sp, 40
ffffffff80202d02: 09 46                	addi	a2, zero, 2
ffffffff80202d04: b4 08                	addi	a3, sp, 88
ffffffff80202d06: 05 47                	addi	a4, zero, 1
ffffffff80202d08: 82 75                	ld	a1, 32(sp)
ffffffff80202d0a: 97 10 00 00          	auipc	ra, 1
ffffffff80202d0e: e7 80 e0 2a          	jalr	686(ra)
ffffffff80202d12: 09 a0                	j	2
ffffffff80202d14: 28 10                	addi	a0, sp, 40
ffffffff80202d16: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202d1a: e7 80 80 e0          	jalr	-504(ra)
ffffffff80202d1e: 09 a0                	j	2
;     shutdown()
ffffffff80202d20: 97 20 00 00          	auipc	ra, 2
ffffffff80202d24: e7 80 80 ac          	jalr	-1336(ra)
ffffffff80202d28: 00 00                	unimp	

ffffffff80202d2a _ZN4core4iter6traits10exact_size17ExactSizeIterator3len17haa73921565ecb870E:
;     fn len(&self) -> usize {
ffffffff80202d2a: 4d 71                	addi	sp, sp, -336
ffffffff80202d2c: 86 e6                	sd	ra, 328(sp)
ffffffff80202d2e: 2a ee                	sd	a0, 280(sp)
ffffffff80202d30: 8c 18                	addi	a1, sp, 112
;         let (lower, upper) = self.size_hint();
ffffffff80202d32: aa ec                	sd	a0, 88(sp)
ffffffff80202d34: 2e 85                	add	a0, zero, a1
ffffffff80202d36: e6 65                	ld	a1, 88(sp)
ffffffff80202d38: 97 00 00 00          	auipc	ra, 0
ffffffff80202d3c: e7 80 80 3e          	jalr	1000(ra)
ffffffff80202d40: 09 a0                	j	2
ffffffff80202d42: 46 75                	ld	a0, 112(sp)
ffffffff80202d44: 2a f2                	sd	a0, 288(sp)
ffffffff80202d46: e6 75                	ld	a1, 120(sp)
ffffffff80202d48: 0a 66                	ld	a2, 128(sp)
ffffffff80202d4a: ae f0                	sd	a1, 96(sp)
ffffffff80202d4c: b2 f4                	sd	a2, 104(sp)
;         assert_eq!(upper, Some(lower));
ffffffff80202d4e: 2a f1                	sd	a0, 160(sp)
ffffffff80202d50: 85 45                	addi	a1, zero, 1
ffffffff80202d52: 2e ed                	sd	a1, 152(sp)
ffffffff80202d54: 8c 10                	addi	a1, sp, 96
;         match (&$left, &$right) {
ffffffff80202d56: 2e e5                	sd	a1, 136(sp)
ffffffff80202d58: 30 09                	addi	a2, sp, 152
ffffffff80202d5a: 32 e9                	sd	a2, 144(sp)
;             (left_val, right_val) => {
ffffffff80202d5c: 2e f6                	sd	a1, 296(sp)
ffffffff80202d5e: 32 fa                	sd	a2, 304(sp)
;                 if !(*left_val == *right_val) {
ffffffff80202d60: aa e8                	sd	a0, 80(sp)
ffffffff80202d62: 2e 85                	add	a0, zero, a1
ffffffff80202d64: ae e4                	sd	a1, 72(sp)
ffffffff80202d66: b2 85                	add	a1, zero, a2
ffffffff80202d68: b2 e0                	sd	a2, 64(sp)
ffffffff80202d6a: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202d6e: e7 80 20 c1          	jalr	-1006(ra)
ffffffff80202d72: 2a fc                	sd	a0, 56(sp)
ffffffff80202d74: 09 a0                	j	2
ffffffff80202d76: 01 45                	mv	a0, zero
ffffffff80202d78: e2 75                	ld	a1, 56(sp)
ffffffff80202d7a: 63 87 a5 00          	beq	a1, a0, 14
ffffffff80202d7e: 09 a0                	j	2
;     }
ffffffff80202d80: 46 65                	ld	a0, 80(sp)
ffffffff80202d82: b6 60                	ld	ra, 328(sp)
ffffffff80202d84: 71 61                	addi	sp, sp, 336
ffffffff80202d86: 82 80                	ret

ffffffff80202d88 .LBB0_8:
;                     panic!(r#"assertion failed: `(left == right)`
ffffffff80202d88: 17 b5 00 00          	auipc	a0, 11
ffffffff80202d8c: 13 05 05 d6          	addi	a0, a0, -672
ffffffff80202d90: 0c 61                	ld	a1, 0(a0)
;  right: `{:?}`"#, &*left_val, &*right_val)
ffffffff80202d92: 26 65                	ld	a0, 72(sp)
ffffffff80202d94: 2a e6                	sd	a0, 264(sp)
ffffffff80202d96: 06 66                	ld	a2, 64(sp)
ffffffff80202d98: 32 ea                	sd	a2, 272(sp)
ffffffff80202d9a: 34 02                	addi	a3, sp, 264
;         $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))
ffffffff80202d9c: b6 fd                	sd	a3, 248(sp)
ffffffff80202d9e: 18 0a                	addi	a4, sp, 272
ffffffff80202da0: 3a e2                	sd	a4, 256(sp)
;  right: `{:?}`"#, &*left_val, &*right_val)
ffffffff80202da2: 36 fe                	sd	a3, 312(sp)
ffffffff80202da4: ba e2                	sd	a4, 320(sp)

ffffffff80202da6 .LBB0_9:
;         $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))
ffffffff80202da6: 97 e7 ff ff          	auipc	a5, 1048574
ffffffff80202daa: 93 87 c7 8e          	addi	a5, a5, -1812
ffffffff80202dae: 36 85                	add	a0, zero, a3
ffffffff80202db0: 2e f8                	sd	a1, 48(sp)
ffffffff80202db2: be 85                	add	a1, zero, a5
ffffffff80202db4: 3a f4                	sd	a4, 40(sp)
ffffffff80202db6: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80202dba: e7 80 a0 7a          	jalr	1962(ra)
ffffffff80202dbe: 2a f0                	sd	a0, 32(sp)
ffffffff80202dc0: 2e ec                	sd	a1, 24(sp)
ffffffff80202dc2: 09 a0                	j	2

ffffffff80202dc4 .LBB0_10:
ffffffff80202dc4: 97 e5 ff ff          	auipc	a1, 1048574
ffffffff80202dc8: 93 85 e5 8c          	addi	a1, a1, -1842
ffffffff80202dcc: 22 75                	ld	a0, 40(sp)
ffffffff80202dce: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80202dd2: e7 80 20 79          	jalr	1938(ra)
ffffffff80202dd6: 2a e8                	sd	a0, 16(sp)
ffffffff80202dd8: 2e e4                	sd	a1, 8(sp)
ffffffff80202dda: 09 a0                	j	2
ffffffff80202ddc: 02 75                	ld	a0, 32(sp)
ffffffff80202dde: aa ed                	sd	a0, 216(sp)
ffffffff80202de0: e2 65                	ld	a1, 24(sp)
ffffffff80202de2: ae f1                	sd	a1, 224(sp)
ffffffff80202de4: 42 66                	ld	a2, 16(sp)
ffffffff80202de6: b2 f5                	sd	a2, 232(sp)
ffffffff80202de8: a2 66                	ld	a3, 8(sp)
ffffffff80202dea: b6 f9                	sd	a3, 240(sp)
ffffffff80202dec: 28 11                	addi	a0, sp, 168
ffffffff80202dee: 0d 46                	addi	a2, zero, 3
ffffffff80202df0: b4 09                	addi	a3, sp, 216
ffffffff80202df2: 09 47                	addi	a4, zero, 2
ffffffff80202df4: c2 75                	ld	a1, 48(sp)
ffffffff80202df6: 97 10 00 00          	auipc	ra, 1
ffffffff80202dfa: e7 80 20 1c          	jalr	450(ra)
ffffffff80202dfe: 09 a0                	j	2

ffffffff80202e00 .LBB0_11:
ffffffff80202e00: 97 b5 00 00          	auipc	a1, 11
ffffffff80202e04: 93 85 85 d6          	addi	a1, a1, -664
ffffffff80202e08: 28 11                	addi	a0, sp, 168
ffffffff80202e0a: 97 70 00 00          	auipc	ra, 7
ffffffff80202e0e: e7 80 a0 59          	jalr	1434(ra)
ffffffff80202e12: 00 00                	unimp	

ffffffff80202e14 _ZN4core4iter6traits8iterator8Iterator9enumerate17hb51de1823a362759E:
;     fn enumerate(self) -> Enumerate<Self>
ffffffff80202e14: 79 71                	addi	sp, sp, -48
;         Enumerate::new(self)
ffffffff80202e16: 06 f4                	sd	ra, 40(sp)
ffffffff80202e18: 90 6d                	ld	a2, 24(a1)
ffffffff80202e1a: 32 f0                	sd	a2, 32(sp)
ffffffff80202e1c: 90 69                	ld	a2, 16(a1)
ffffffff80202e1e: 32 ec                	sd	a2, 24(sp)
ffffffff80202e20: 90 65                	ld	a2, 8(a1)
ffffffff80202e22: 32 e8                	sd	a2, 16(sp)
ffffffff80202e24: 8c 61                	ld	a1, 0(a1)
ffffffff80202e26: 2e e4                	sd	a1, 8(sp)
ffffffff80202e28: 2c 00                	addi	a1, sp, 8
ffffffff80202e2a: 97 20 00 00          	auipc	ra, 2
ffffffff80202e2e: e7 80 c0 a1          	jalr	-1508(ra)
ffffffff80202e32: 09 a0                	j	2
;     }
ffffffff80202e34: a2 70                	ld	ra, 40(sp)
ffffffff80202e36: 45 61                	addi	sp, sp, 48
ffffffff80202e38: 82 80                	ret

ffffffff80202e3a _ZN5alloc3vec12Vec$LT$T$GT$10as_mut_ptr17h5975343a98b05538E:
;     pub fn as_mut_ptr(&mut self) -> *mut T {
ffffffff80202e3a: 01 11                	addi	sp, sp, -32
ffffffff80202e3c: 06 ec                	sd	ra, 24(sp)
ffffffff80202e3e: 2a e4                	sd	a0, 8(sp)
;         let ptr = self.buf.ptr();
ffffffff80202e40: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202e44: e7 80 80 79          	jalr	1944(ra)
ffffffff80202e48: aa 85                	add	a1, zero, a0
ffffffff80202e4a: 2a e8                	sd	a0, 16(sp)
ffffffff80202e4c: 2e e0                	sd	a1, 0(sp)
ffffffff80202e4e: 09 a0                	j	2
;             assume(!ptr.is_null());
ffffffff80202e50: 02 65                	ld	a0, 0(sp)
ffffffff80202e52: 97 60 00 00          	auipc	ra, 6
ffffffff80202e56: e7 80 a0 04          	jalr	74(ra)
ffffffff80202e5a: 09 a0                	j	2
ffffffff80202e5c: 09 a0                	j	2
;     }
ffffffff80202e5e: 02 65                	ld	a0, 0(sp)
ffffffff80202e60: e2 60                	ld	ra, 24(sp)
ffffffff80202e62: 05 61                	addi	sp, sp, 32
ffffffff80202e64: 82 80                	ret

ffffffff80202e66 _ZN5alloc3vec12Vec$LT$T$GT$3len17h1db630d512558300E:
;     pub fn len(&self) -> usize {
ffffffff80202e66: 41 11                	addi	sp, sp, -16
ffffffff80202e68: 2a e4                	sd	a0, 8(sp)
;         self.len
ffffffff80202e6a: 08 69                	ld	a0, 16(a0)
;     }
ffffffff80202e6c: 41 01                	addi	sp, sp, 16
ffffffff80202e6e: 82 80                	ret

ffffffff80202e70 _ZN5alloc3vec12Vec$LT$T$GT$3new17hb34cb3ee8581f476E:
;     pub const fn new() -> Vec<T> {
ffffffff80202e70: 97 b5 00 00          	auipc	a1, 11
ffffffff80202e74: 93 85 05 d1          	addi	a1, a1, -752
;         Vec { buf: RawVec::NEW, len: 0 }
ffffffff80202e78: 90 61                	ld	a2, 0(a1)
ffffffff80202e7a: 8c 65                	ld	a1, 8(a1)
ffffffff80202e7c: 10 e1                	sd	a2, 0(a0)
ffffffff80202e7e: 0c e5                	sd	a1, 8(a0)
ffffffff80202e80: 81 45                	mv	a1, zero
ffffffff80202e82: 0c e9                	sd	a1, 16(a0)
;     }
ffffffff80202e84: 82 80                	ret

ffffffff80202e86 _ZN5alloc3vec12Vec$LT$T$GT$4push17ha870fdd33127ba98E:
;     pub fn push(&mut self, value: T) {
ffffffff80202e86: 59 71                	addi	sp, sp, -112
ffffffff80202e88: 86 f4                	sd	ra, 104(sp)
ffffffff80202e8a: 2a fc                	sd	a0, 56(sp)
ffffffff80202e8c: ae e0                	sd	a1, 64(sp)
;         if self.len == self.buf.capacity() {
ffffffff80202e8e: 10 69                	ld	a2, 16(a0)
ffffffff80202e90: aa 86                	add	a3, zero, a0
ffffffff80202e92: aa ec                	sd	a0, 88(sp)
ffffffff80202e94: 21 47                	addi	a4, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80202e96: ba f0                	sd	a4, 96(sp)
ffffffff80202e98: 01 47                	mv	a4, zero
;         if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
ffffffff80202e9a: 2e f8                	sd	a1, 48(sp)
ffffffff80202e9c: 2a f4                	sd	a0, 40(sp)
ffffffff80202e9e: 32 f0                	sd	a2, 32(sp)
ffffffff80202ea0: 36 ec                	sd	a3, 24(sp)
ffffffff80202ea2: 11 e7                	bnez	a4, 12
ffffffff80202ea4: 09 a0                	j	2
ffffffff80202ea6: 62 65                	ld	a0, 24(sp)
ffffffff80202ea8: 0c 65                	ld	a1, 8(a0)
ffffffff80202eaa: ae e8                	sd	a1, 80(sp)
ffffffff80202eac: 21 a0                	j	8
ffffffff80202eae: 7d 55                	addi	a0, zero, -1
ffffffff80202eb0: aa e8                	sd	a0, 80(sp)
ffffffff80202eb2: 09 a0                	j	2
;     }
ffffffff80202eb4: 46 65                	ld	a0, 80(sp)
;         if self.len == self.buf.capacity() {
ffffffff80202eb6: 2a e8                	sd	a0, 16(sp)
ffffffff80202eb8: 09 a0                	j	2
ffffffff80202eba: 02 75                	ld	a0, 32(sp)
ffffffff80202ebc: c2 65                	ld	a1, 16(sp)
ffffffff80202ebe: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80202ec2: 09 a0                	j	2
ffffffff80202ec4: 09 a8                	j	18
ffffffff80202ec6: 85 45                	addi	a1, zero, 1
;             self.reserve(1);
ffffffff80202ec8: 22 75                	ld	a0, 40(sp)
ffffffff80202eca: 97 00 00 00          	auipc	ra, 0
ffffffff80202ece: e7 80 c0 04          	jalr	76(ra)
ffffffff80202ed2: 09 a0                	j	2
;         if self.len == self.buf.capacity() {
ffffffff80202ed4: 09 a0                	j	2
;             let end = self.as_mut_ptr().add(self.len);
ffffffff80202ed6: 22 75                	ld	a0, 40(sp)
ffffffff80202ed8: 97 00 00 00          	auipc	ra, 0
ffffffff80202edc: e7 80 20 f6          	jalr	-158(ra)
ffffffff80202ee0: 2a e4                	sd	a0, 8(sp)
ffffffff80202ee2: 09 a0                	j	2
ffffffff80202ee4: 22 75                	ld	a0, 40(sp)
ffffffff80202ee6: 0c 69                	ld	a1, 16(a0)
ffffffff80202ee8: 22 65                	ld	a0, 8(sp)
ffffffff80202eea: 97 60 00 00          	auipc	ra, 6
ffffffff80202eee: e7 80 e0 f3          	jalr	-194(ra)
ffffffff80202ef2: aa 85                	add	a1, zero, a0
ffffffff80202ef4: aa e4                	sd	a0, 72(sp)
ffffffff80202ef6: 2e e0                	sd	a1, 0(sp)
ffffffff80202ef8: 09 a0                	j	2
;             ptr::write(end, value);
ffffffff80202efa: 02 65                	ld	a0, 0(sp)
ffffffff80202efc: c2 75                	ld	a1, 48(sp)
ffffffff80202efe: 97 40 00 00          	auipc	ra, 4
ffffffff80202f02: e7 80 80 96          	jalr	-1688(ra)
ffffffff80202f06: 09 a0                	j	2
;             self.len += 1;
ffffffff80202f08: 22 75                	ld	a0, 40(sp)
ffffffff80202f0a: 0c 69                	ld	a1, 16(a0)
ffffffff80202f0c: 85 05                	addi	a1, a1, 1
ffffffff80202f0e: 0c e9                	sd	a1, 16(a0)
;     }
ffffffff80202f10: a6 70                	ld	ra, 104(sp)
ffffffff80202f12: 65 61                	addi	sp, sp, 112
ffffffff80202f14: 82 80                	ret

ffffffff80202f16 _ZN5alloc3vec12Vec$LT$T$GT$7reserve17h7894363346ca17f4E:
;     pub fn reserve(&mut self, additional: usize) {
ffffffff80202f16: 01 11                	addi	sp, sp, -32
ffffffff80202f18: 06 ec                	sd	ra, 24(sp)
ffffffff80202f1a: 2a e4                	sd	a0, 8(sp)
ffffffff80202f1c: 2e e8                	sd	a1, 16(sp)
;         self.buf.reserve(self.len, additional);
ffffffff80202f1e: 10 69                	ld	a2, 16(a0)
ffffffff80202f20: 2e e0                	sd	a1, 0(sp)
ffffffff80202f22: b2 85                	add	a1, zero, a2
ffffffff80202f24: 02 66                	ld	a2, 0(sp)
ffffffff80202f26: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80202f2a: e7 80 e0 6c          	jalr	1742(ra)
ffffffff80202f2e: 09 a0                	j	2
;     }
ffffffff80202f30: e2 60                	ld	ra, 24(sp)
ffffffff80202f32: 05 61                	addi	sp, sp, 32
ffffffff80202f34: 82 80                	ret

ffffffff80202f36 _ZN5alloc3vec17IntoIter$LT$T$GT$16as_raw_mut_slice17h3238808f5efaf352E:
;     fn as_raw_mut_slice(&mut self) -> *mut [T] {
ffffffff80202f36: 79 71                	addi	sp, sp, -48
ffffffff80202f38: 06 f4                	sd	ra, 40(sp)
ffffffff80202f3a: 2a f0                	sd	a0, 32(sp)
;         ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())
ffffffff80202f3c: 08 69                	ld	a0, 16(a0)
ffffffff80202f3e: 0c 10                	addi	a1, sp, 32
ffffffff80202f40: 2a ec                	sd	a0, 24(sp)
ffffffff80202f42: 2e 85                	add	a0, zero, a1
ffffffff80202f44: 97 00 00 00          	auipc	ra, 0
ffffffff80202f48: e7 80 80 02          	jalr	40(ra)
ffffffff80202f4c: 2a e8                	sd	a0, 16(sp)
ffffffff80202f4e: 09 a0                	j	2
ffffffff80202f50: 62 65                	ld	a0, 24(sp)
ffffffff80202f52: c2 65                	ld	a1, 16(sp)
ffffffff80202f54: 97 60 00 00          	auipc	ra, 6
ffffffff80202f58: e7 80 60 08          	jalr	134(ra)
ffffffff80202f5c: 2a e4                	sd	a0, 8(sp)
ffffffff80202f5e: 2e e0                	sd	a1, 0(sp)
ffffffff80202f60: 09 a0                	j	2
;     }
ffffffff80202f62: 22 65                	ld	a0, 8(sp)
ffffffff80202f64: 82 65                	ld	a1, 0(sp)
ffffffff80202f66: a2 70                	ld	ra, 40(sp)
ffffffff80202f68: 45 61                	addi	sp, sp, 48
ffffffff80202f6a: 82 80                	ret

ffffffff80202f6c _ZN83_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17h01793bee812c041cE:
;     fn len(&self) -> usize {
ffffffff80202f6c: 01 11                	addi	sp, sp, -32
ffffffff80202f6e: 06 ec                	sd	ra, 24(sp)
ffffffff80202f70: 2a e8                	sd	a0, 16(sp)
;         (**self).len()
ffffffff80202f72: 08 61                	ld	a0, 0(a0)
ffffffff80202f74: 97 00 00 00          	auipc	ra, 0
ffffffff80202f78: e7 80 60 db          	jalr	-586(ra)
ffffffff80202f7c: 2a e4                	sd	a0, 8(sp)
ffffffff80202f7e: 09 a0                	j	2
;     }
ffffffff80202f80: 22 65                	ld	a0, 8(sp)
ffffffff80202f82: e2 60                	ld	ra, 24(sp)
ffffffff80202f84: 05 61                	addi	sp, sp, 32
ffffffff80202f86: 82 80                	ret

ffffffff80202f88 _ZN86_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h087e38fb8baf2e3eE:
;     fn into_iter(self) -> IntoIter<T> {
ffffffff80202f88: 69 71                	addi	sp, sp, -304
;             let mut me = ManuallyDrop::new(self);
ffffffff80202f8a: 06 f6                	sd	ra, 296(sp)
ffffffff80202f8c: 90 69                	ld	a2, 16(a1)
ffffffff80202f8e: 32 f1                	sd	a2, 160(sp)
ffffffff80202f90: 94 65                	ld	a3, 8(a1)
ffffffff80202f92: 36 ed                	sd	a3, 152(sp)
ffffffff80202f94: 8c 61                	ld	a1, 0(a1)
ffffffff80202f96: 2e e9                	sd	a1, 144(sp)
;         ManuallyDrop { value }
ffffffff80202f98: ae e9                	sd	a1, 208(sp)
ffffffff80202f9a: b6 ed                	sd	a3, 216(sp)
ffffffff80202f9c: b2 f1                	sd	a2, 224(sp)
ffffffff80202f9e: ae fc                	sd	a1, 120(sp)
ffffffff80202fa0: 36 e1                	sd	a3, 128(sp)
ffffffff80202fa2: 32 e5                	sd	a2, 136(sp)
;             let mut me = ManuallyDrop::new(self);
ffffffff80202fa4: aa f8                	sd	a0, 112(sp)
ffffffff80202fa6: 09 a0                	j	2
ffffffff80202fa8: a8 18                	addi	a0, sp, 120
ffffffff80202faa: 2a e6                	sd	a0, 264(sp)
;             let begin = me.as_mut_ptr();
ffffffff80202fac: aa f4                	sd	a0, 104(sp)
ffffffff80202fae: 09 a0                	j	2
ffffffff80202fb0: 26 75                	ld	a0, 104(sp)
ffffffff80202fb2: 97 00 00 00          	auipc	ra, 0
ffffffff80202fb6: e7 80 80 e8          	jalr	-376(ra)
ffffffff80202fba: aa 85                	add	a1, zero, a0
ffffffff80202fbc: 2a fd                	sd	a0, 184(sp)
ffffffff80202fbe: ae f0                	sd	a1, 96(sp)
ffffffff80202fc0: 09 a0                	j	2
ffffffff80202fc2: 21 45                	addi	a0, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80202fc4: 2a ea                	sd	a0, 272(sp)
;             let end = if mem::size_of::<T>() == 0 {
ffffffff80202fc6: aa ec                	sd	a0, 88(sp)
ffffffff80202fc8: 09 a0                	j	2
ffffffff80202fca: 01 45                	mv	a0, zero
ffffffff80202fcc: e6 65                	ld	a1, 88(sp)
ffffffff80202fce: 63 87 a5 00          	beq	a1, a0, 14
ffffffff80202fd2: 09 a0                	j	2
ffffffff80202fd4: a8 18                	addi	a0, sp, 120
ffffffff80202fd6: 2a f2                	sd	a0, 288(sp)
;                 begin.add(me.len()) as *const T
ffffffff80202fd8: aa e8                	sd	a0, 80(sp)
ffffffff80202fda: 05 a8                	j	48
;                 arith_offset(begin as *const i8, me.len() as isize) as *const T
ffffffff80202fdc: 06 75                	ld	a0, 96(sp)
ffffffff80202fde: ac 18                	addi	a1, sp, 120
ffffffff80202fe0: 2e ee                	sd	a1, 280(sp)
ffffffff80202fe2: aa e4                	sd	a0, 72(sp)
ffffffff80202fe4: ae e0                	sd	a1, 64(sp)
ffffffff80202fe6: 09 a0                	j	2
ffffffff80202fe8: 06 65                	ld	a0, 64(sp)
ffffffff80202fea: 97 00 00 00          	auipc	ra, 0
ffffffff80202fee: e7 80 c0 e7          	jalr	-388(ra)
ffffffff80202ff2: 2a fc                	sd	a0, 56(sp)
ffffffff80202ff4: 09 a0                	j	2
ffffffff80202ff6: 26 65                	ld	a0, 72(sp)
ffffffff80202ff8: e2 75                	ld	a1, 56(sp)
ffffffff80202ffa: 33 06 b5 00          	add	a2, a0, a1
ffffffff80202ffe: b2 e1                	sd	a2, 192(sp)
ffffffff80203000: 32 f8                	sd	a2, 48(sp)
ffffffff80203002: 09 a0                	j	2
ffffffff80203004: 42 75                	ld	a0, 48(sp)
ffffffff80203006: 2a f5                	sd	a0, 168(sp)
;             let end = if mem::size_of::<T>() == 0 {
ffffffff80203008: 1d a0                	j	38
;                 begin.add(me.len()) as *const T
ffffffff8020300a: 46 65                	ld	a0, 80(sp)
ffffffff8020300c: 97 00 00 00          	auipc	ra, 0
ffffffff80203010: e7 80 a0 e5          	jalr	-422(ra)
ffffffff80203014: 2a f4                	sd	a0, 40(sp)
ffffffff80203016: 09 a0                	j	2
ffffffff80203018: 06 75                	ld	a0, 96(sp)
ffffffff8020301a: a2 75                	ld	a1, 40(sp)
ffffffff8020301c: 97 60 00 00          	auipc	ra, 6
ffffffff80203020: e7 80 c0 e0          	jalr	-500(ra)
ffffffff80203024: 2a f0                	sd	a0, 32(sp)
ffffffff80203026: 09 a0                	j	2
ffffffff80203028: 02 75                	ld	a0, 32(sp)
ffffffff8020302a: 2a f5                	sd	a0, 168(sp)
;             let end = if mem::size_of::<T>() == 0 {
ffffffff8020302c: 09 a0                	j	2
ffffffff8020302e: a8 18                	addi	a0, sp, 120
ffffffff80203030: 2a e2                	sd	a0, 256(sp)
;             let cap = me.buf.capacity();
ffffffff80203032: 2a ec                	sd	a0, 24(sp)
ffffffff80203034: 09 a0                	j	2
ffffffff80203036: 62 65                	ld	a0, 24(sp)
ffffffff80203038: e2 65                	ld	a1, 24(sp)
ffffffff8020303a: ae f9                	sd	a1, 240(sp)
ffffffff8020303c: 21 46                	addi	a2, zero, 8
;     intrinsics::size_of::<T>()
ffffffff8020303e: b2 fd                	sd	a2, 248(sp)
ffffffff80203040: 01 46                	mv	a2, zero
;         if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
ffffffff80203042: 2a e8                	sd	a0, 16(sp)
ffffffff80203044: 11 e6                	bnez	a2, 12
ffffffff80203046: 09 a0                	j	2
ffffffff80203048: 42 65                	ld	a0, 16(sp)
ffffffff8020304a: 0c 65                	ld	a1, 8(a0)
ffffffff8020304c: ae f5                	sd	a1, 232(sp)
ffffffff8020304e: 21 a0                	j	8
ffffffff80203050: 7d 55                	addi	a0, zero, -1
ffffffff80203052: aa f5                	sd	a0, 232(sp)
ffffffff80203054: 09 a0                	j	2
;     }
ffffffff80203056: 2e 75                	ld	a0, 232(sp)
;             let cap = me.buf.capacity();
ffffffff80203058: aa e5                	sd	a0, 200(sp)
ffffffff8020305a: 2a e4                	sd	a0, 8(sp)
ffffffff8020305c: 09 a0                	j	2
;                 buf: NonNull::new_unchecked(begin),
ffffffff8020305e: 06 75                	ld	a0, 96(sp)
ffffffff80203060: 97 60 00 00          	auipc	ra, 6
ffffffff80203064: e7 80 80 e5          	jalr	-424(ra)
ffffffff80203068: 2a e0                	sd	a0, 0(sp)
ffffffff8020306a: 09 a0                	j	2
;                 end,
ffffffff8020306c: 2a 75                	ld	a0, 168(sp)
;             IntoIter {
ffffffff8020306e: 82 65                	ld	a1, 0(sp)
ffffffff80203070: 46 76                	ld	a2, 112(sp)
ffffffff80203072: 0c e2                	sd	a1, 0(a2)
ffffffff80203074: a2 66                	ld	a3, 8(sp)
ffffffff80203076: 14 e6                	sd	a3, 8(a2)
ffffffff80203078: 06 77                	ld	a4, 96(sp)
ffffffff8020307a: 18 ea                	sd	a4, 16(a2)
ffffffff8020307c: 08 ee                	sd	a0, 24(a2)
;     }
ffffffff8020307e: b2 70                	ld	ra, 296(sp)
ffffffff80203080: 55 61                	addi	sp, sp, 304
ffffffff80203082: 82 80                	ret

ffffffff80203084 _ZN88_$LT$alloc..vec..IntoIter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf96996db0d820efbE:
;     fn next(&mut self) -> Option<T> {
ffffffff80203084: 19 71                	addi	sp, sp, -128
ffffffff80203086: 86 fc                	sd	ra, 120(sp)
ffffffff80203088: aa e4                	sd	a0, 72(sp)
;             if self.ptr as *const _ == self.end {
ffffffff8020308a: 0c 69                	ld	a1, 16(a0)
ffffffff8020308c: 10 6d                	ld	a2, 24(a0)
ffffffff8020308e: 2a f8                	sd	a0, 48(sp)
ffffffff80203090: 63 87 c5 00          	beq	a1, a2, 14
ffffffff80203094: 09 a0                	j	2
ffffffff80203096: 21 45                	addi	a0, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80203098: aa f0                	sd	a0, 96(sp)
;                 if mem::size_of::<T>() == 0 {
ffffffff8020309a: 2a f4                	sd	a0, 40(sp)
ffffffff8020309c: 21 a0                	j	8
ffffffff8020309e: 01 45                	mv	a0, zero
;                 None
ffffffff802030a0: 2a fc                	sd	a0, 56(sp)
;             if self.ptr as *const _ == self.end {
ffffffff802030a2: 95 a8                	j	116
ffffffff802030a4: 01 45                	mv	a0, zero
;                 if mem::size_of::<T>() == 0 {
ffffffff802030a6: a2 75                	ld	a1, 40(sp)
ffffffff802030a8: 63 80 a5 02          	beq	a1, a0, 32
ffffffff802030ac: 09 a0                	j	2
;                     let old = self.ptr;
ffffffff802030ae: 42 75                	ld	a0, 48(sp)
ffffffff802030b0: 0c 69                	ld	a1, 16(a0)
ffffffff802030b2: ae ec                	sd	a1, 88(sp)
;                     self.ptr = self.ptr.offset(1);
ffffffff802030b4: 08 69                	ld	a0, 16(a0)
ffffffff802030b6: 05 46                	addi	a2, zero, 1
ffffffff802030b8: 2e f0                	sd	a1, 32(sp)
ffffffff802030ba: b2 85                	add	a1, zero, a2
ffffffff802030bc: 97 60 00 00          	auipc	ra, 6
ffffffff802030c0: e7 80 80 cb          	jalr	-840(ra)
ffffffff802030c4: 2a ec                	sd	a0, 24(sp)
ffffffff802030c6: 05 a8                	j	48
;                     self.ptr = arith_offset(self.ptr as *const i8, 1) as *mut T;
ffffffff802030c8: 42 75                	ld	a0, 48(sp)
ffffffff802030ca: 0c 69                	ld	a1, 16(a0)
ffffffff802030cc: 85 05                	addi	a1, a1, 1
ffffffff802030ce: ae e8                	sd	a1, 80(sp)
ffffffff802030d0: 2e e8                	sd	a1, 16(sp)
ffffffff802030d2: 09 a0                	j	2
ffffffff802030d4: 42 65                	ld	a0, 16(sp)
ffffffff802030d6: c2 75                	ld	a1, 48(sp)
ffffffff802030d8: 88 e9                	sd	a0, 16(a1)
;     MaybeUninit::zeroed().assume_init()
ffffffff802030da: 97 00 00 00          	auipc	ra, 0
ffffffff802030de: e7 80 e0 a9          	jalr	-1378(ra)
ffffffff802030e2: aa 85                	add	a1, zero, a0
ffffffff802030e4: aa f4                	sd	a0, 104(sp)
ffffffff802030e6: aa f8                	sd	a0, 112(sp)
;                     Some(mem::zeroed())
ffffffff802030e8: 2e e4                	sd	a1, 8(sp)
ffffffff802030ea: 09 a0                	j	2
ffffffff802030ec: 22 65                	ld	a0, 8(sp)
ffffffff802030ee: aa e0                	sd	a0, 64(sp)
ffffffff802030f0: 85 45                	addi	a1, zero, 1
ffffffff802030f2: 2e fc                	sd	a1, 56(sp)
;                 if mem::size_of::<T>() == 0 {
ffffffff802030f4: 05 a0                	j	32
;                     self.ptr = self.ptr.offset(1);
ffffffff802030f6: 62 65                	ld	a0, 24(sp)
ffffffff802030f8: c2 75                	ld	a1, 48(sp)
ffffffff802030fa: 88 e9                	sd	a0, 16(a1)
;                     Some(ptr::read(old))
ffffffff802030fc: 02 75                	ld	a0, 32(sp)
ffffffff802030fe: 97 30 00 00          	auipc	ra, 3
ffffffff80203102: e7 80 a0 6d          	jalr	1754(ra)
ffffffff80203106: 2a e0                	sd	a0, 0(sp)
ffffffff80203108: 09 a0                	j	2
ffffffff8020310a: 02 65                	ld	a0, 0(sp)
ffffffff8020310c: aa e0                	sd	a0, 64(sp)
ffffffff8020310e: 85 45                	addi	a1, zero, 1
ffffffff80203110: 2e fc                	sd	a1, 56(sp)
;                 if mem::size_of::<T>() == 0 {
ffffffff80203112: 09 a0                	j	2
;             if self.ptr as *const _ == self.end {
ffffffff80203114: 09 a0                	j	2
;     }
ffffffff80203116: 62 75                	ld	a0, 56(sp)
ffffffff80203118: 86 65                	ld	a1, 64(sp)
ffffffff8020311a: e6 70                	ld	ra, 120(sp)
ffffffff8020311c: 09 61                	addi	sp, sp, 128
ffffffff8020311e: 82 80                	ret

ffffffff80203120 _ZN88_$LT$alloc..vec..IntoIter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9size_hint17h79083b8eb727c6eeE:
;     fn size_hint(&self) -> (usize, Option<usize>) {
ffffffff80203120: 5d 71                	addi	sp, sp, -80
ffffffff80203122: 86 e4                	sd	ra, 72(sp)
ffffffff80203124: 2e fc                	sd	a1, 56(sp)
ffffffff80203126: 21 46                	addi	a2, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80203128: b2 e0                	sd	a2, 64(sp)
;         let exact = if mem::size_of::<T>() == 0 {
ffffffff8020312a: 2e ec                	sd	a1, 24(sp)
ffffffff8020312c: 2a e8                	sd	a0, 16(sp)
ffffffff8020312e: 32 e4                	sd	a2, 8(sp)
ffffffff80203130: 09 a0                	j	2
ffffffff80203132: 01 45                	mv	a0, zero
ffffffff80203134: a2 65                	ld	a1, 8(sp)
ffffffff80203136: 63 8d a5 00          	beq	a1, a0, 26
ffffffff8020313a: 09 a0                	j	2
;             unsafe { self.end.offset_from(self.ptr) as usize }
ffffffff8020313c: 62 65                	ld	a0, 24(sp)
ffffffff8020313e: 08 6d                	ld	a0, 24(a0)
ffffffff80203140: e2 65                	ld	a1, 24(sp)
ffffffff80203142: 8c 69                	ld	a1, 16(a1)
ffffffff80203144: 97 20 00 00          	auipc	ra, 2
ffffffff80203148: e7 80 c0 94          	jalr	-1716(ra)
ffffffff8020314c: 2a e0                	sd	a0, 0(sp)
ffffffff8020314e: 21 a8                	j	24
;             (self.end as usize).wrapping_sub(self.ptr as usize)
ffffffff80203150: 62 65                	ld	a0, 24(sp)
ffffffff80203152: 08 6d                	ld	a0, 24(a0)
ffffffff80203154: e2 65                	ld	a1, 24(sp)
ffffffff80203156: 8c 69                	ld	a1, 16(a1)
ffffffff80203158: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020315c: e7 80 20 e6          	jalr	-414(ra)
ffffffff80203160: 2a f0                	sd	a0, 32(sp)
ffffffff80203162: 09 a0                	j	2
;         let exact = if mem::size_of::<T>() == 0 {
ffffffff80203164: 21 a0                	j	8
;             unsafe { self.end.offset_from(self.ptr) as usize }
ffffffff80203166: 02 65                	ld	a0, 0(sp)
ffffffff80203168: 2a f0                	sd	a0, 32(sp)
;         let exact = if mem::size_of::<T>() == 0 {
ffffffff8020316a: 09 a0                	j	2
;         (exact, Some(exact))
ffffffff8020316c: 02 75                	ld	a0, 32(sp)
ffffffff8020316e: 2a f8                	sd	a0, 48(sp)
ffffffff80203170: 85 45                	addi	a1, zero, 1
ffffffff80203172: 2e f4                	sd	a1, 40(sp)
ffffffff80203174: c2 65                	ld	a1, 16(sp)
ffffffff80203176: 88 e1                	sd	a0, 0(a1)
ffffffff80203178: 22 75                	ld	a0, 40(sp)
ffffffff8020317a: 42 76                	ld	a2, 48(sp)
ffffffff8020317c: 88 e5                	sd	a0, 8(a1)
ffffffff8020317e: 90 e9                	sd	a2, 16(a1)
;     }
ffffffff80203180: a6 60                	ld	ra, 72(sp)
ffffffff80203182: 61 61                	addi	sp, sp, 80
ffffffff80203184: 82 80                	ret

ffffffff80203186 _ZN4core4sync6atomic10AtomicBool16compare_and_swap17hdb59a57c71e4e0ffE:
;     pub fn compare_and_swap(&self, current: bool, new: bool, order: Ordering) -> bool {
ffffffff80203186: 5d 71                	addi	sp, sp, -80
ffffffff80203188: 86 e4                	sd	ra, 72(sp)
ffffffff8020318a: 36 87                	add	a4, zero, a3
ffffffff8020318c: b2 87                	add	a5, zero, a2
ffffffff8020318e: 2e 88                	add	a6, zero, a1
ffffffff80203190: 2a fc                	sd	a0, 56(sp)
ffffffff80203192: a3 01 b1 04          	sb	a1, 67(sp)
ffffffff80203196: 23 02 c1 04          	sb	a2, 68(sp)
ffffffff8020319a: a3 02 d1 04          	sb	a3, 69(sp)
;         match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {
ffffffff8020319e: 2a f0                	sd	a0, 32(sp)
ffffffff802031a0: 36 85                	add	a0, zero, a3
ffffffff802031a2: 3a ec                	sd	a4, 24(sp)
ffffffff802031a4: 3e e8                	sd	a5, 16(sp)
ffffffff802031a6: 42 e4                	sd	a6, 8(sp)
ffffffff802031a8: 97 00 00 00          	auipc	ra, 0
ffffffff802031ac: e7 80 00 2c          	jalr	704(ra)
ffffffff802031b0: 13 77 f5 0f          	andi	a4, a0, 255
ffffffff802031b4: 3a e0                	sd	a4, 0(sp)
ffffffff802031b6: 09 a0                	j	2
ffffffff802031b8: 02 75                	ld	a0, 32(sp)
ffffffff802031ba: a2 65                	ld	a1, 8(sp)
ffffffff802031bc: 42 66                	ld	a2, 16(sp)
ffffffff802031be: e2 66                	ld	a3, 24(sp)
ffffffff802031c0: 02 67                	ld	a4, 0(sp)
ffffffff802031c2: 97 00 00 00          	auipc	ra, 0
ffffffff802031c6: e7 80 80 04          	jalr	72(ra)
ffffffff802031ca: 23 08 a1 02          	sb	a0, 48(sp)
ffffffff802031ce: a3 08 b1 02          	sb	a1, 49(sp)
ffffffff802031d2: 09 a0                	j	2
;             Ok(x) => x,
ffffffff802031d4: 03 45 01 03          	lbu	a0, 48(sp)
ffffffff802031d8: 05 89                	andi	a0, a0, 1
ffffffff802031da: 81 45                	mv	a1, zero
ffffffff802031dc: 63 0b b5 00          	beq	a0, a1, 22
ffffffff802031e0: 09 a0                	j	2
;             Err(x) => x,
ffffffff802031e2: 03 05 11 03          	lb	a0, 49(sp)
ffffffff802031e6: 23 03 a1 04          	sb	a0, 70(sp)
ffffffff802031ea: a3 07 a1 02          	sb	a0, 47(sp)
;         match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {
ffffffff802031ee: 09 a8                	j	18
ffffffff802031f0: 00 00                	unimp	
;             Ok(x) => x,
ffffffff802031f2: 03 05 11 03          	lb	a0, 49(sp)
ffffffff802031f6: a3 03 a1 04          	sb	a0, 71(sp)
ffffffff802031fa: a3 07 a1 02          	sb	a0, 47(sp)
;         match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {
ffffffff802031fe: 09 a0                	j	2
;     }
ffffffff80203200: 03 45 f1 02          	lbu	a0, 47(sp)
ffffffff80203204: a6 60                	ld	ra, 72(sp)
ffffffff80203206: 61 61                	addi	sp, sp, 80
ffffffff80203208: 82 80                	ret

ffffffff8020320a _ZN4core4sync6atomic10AtomicBool16compare_exchange17h86352637142ffd83E:
;     pub fn compare_exchange(
ffffffff8020320a: 5d 71                	addi	sp, sp, -80
ffffffff8020320c: 86 e4                	sd	ra, 72(sp)
ffffffff8020320e: ba 87                	add	a5, zero, a4
ffffffff80203210: 36 88                	add	a6, zero, a3
ffffffff80203212: b2 88                	add	a7, zero, a2
ffffffff80203214: ae 82                	add	t0, zero, a1
ffffffff80203216: 2a fc                	sd	a0, 56(sp)
ffffffff80203218: 23 01 b1 04          	sb	a1, 66(sp)
ffffffff8020321c: a3 01 c1 04          	sb	a2, 67(sp)
ffffffff80203220: 23 02 d1 04          	sb	a3, 68(sp)
ffffffff80203224: a3 02 e1 04          	sb	a4, 69(sp)
;             atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)
ffffffff80203228: 3e f0                	sd	a5, 32(sp)
ffffffff8020322a: 42 ec                	sd	a6, 24(sp)
ffffffff8020322c: 46 e8                	sd	a7, 16(sp)
ffffffff8020322e: 16 e4                	sd	t0, 8(sp)
ffffffff80203230: 97 60 00 00          	auipc	ra, 6
ffffffff80203234: e7 80 a0 ce          	jalr	-790(ra)
ffffffff80203238: 2a e0                	sd	a0, 0(sp)
ffffffff8020323a: 09 a0                	j	2
ffffffff8020323c: 02 65                	ld	a0, 0(sp)
ffffffff8020323e: a2 65                	ld	a1, 8(sp)
ffffffff80203240: 42 66                	ld	a2, 16(sp)
ffffffff80203242: e2 66                	ld	a3, 24(sp)
ffffffff80203244: 02 77                	ld	a4, 32(sp)
ffffffff80203246: 97 50 00 00          	auipc	ra, 5
ffffffff8020324a: e7 80 e0 06          	jalr	110(ra)
ffffffff8020324e: 23 08 a1 02          	sb	a0, 48(sp)
ffffffff80203252: a3 08 b1 02          	sb	a1, 49(sp)
ffffffff80203256: 09 a0                	j	2
;             Ok(x) => Ok(x != 0),
ffffffff80203258: 03 45 01 03          	lbu	a0, 48(sp)
ffffffff8020325c: 05 89                	andi	a0, a0, 1
ffffffff8020325e: 81 45                	mv	a1, zero
ffffffff80203260: 63 00 b5 02          	beq	a0, a1, 32
ffffffff80203264: 09 a0                	j	2
;             Err(x) => Err(x != 0),
ffffffff80203266: 03 45 11 03          	lbu	a0, 49(sp)
ffffffff8020326a: 23 03 a1 04          	sb	a0, 70(sp)
ffffffff8020326e: 33 35 a0 00          	snez	a0, a0
ffffffff80203272: a3 04 a1 02          	sb	a0, 41(sp)
ffffffff80203276: 05 45                	addi	a0, zero, 1
ffffffff80203278: 23 04 a1 02          	sb	a0, 40(sp)
;         match unsafe {
ffffffff8020327c: 31 a8                	j	28
ffffffff8020327e: 00 00                	unimp	
;             Ok(x) => Ok(x != 0),
ffffffff80203280: 03 45 11 03          	lbu	a0, 49(sp)
ffffffff80203284: a3 03 a1 04          	sb	a0, 71(sp)
ffffffff80203288: 33 35 a0 00          	snez	a0, a0
ffffffff8020328c: a3 04 a1 02          	sb	a0, 41(sp)
ffffffff80203290: 01 45                	mv	a0, zero
ffffffff80203292: 23 04 a1 02          	sb	a0, 40(sp)
;         match unsafe {
ffffffff80203296: 09 a0                	j	2
;     }
ffffffff80203298: 03 45 81 02          	lbu	a0, 40(sp)
ffffffff8020329c: 83 05 91 02          	lb	a1, 41(sp)
ffffffff802032a0: a6 60                	ld	ra, 72(sp)
ffffffff802032a2: 61 61                	addi	sp, sp, 80
ffffffff802032a4: 82 80                	ret

ffffffff802032a6 _ZN4core4sync6atomic10AtomicBool3new17hcc81d8d56c37b7b0E:
;     pub const fn new(v: bool) -> AtomicBool {
ffffffff802032a6: 01 11                	addi	sp, sp, -32
ffffffff802032a8: 06 ec                	sd	ra, 24(sp)
ffffffff802032aa: aa 85                	add	a1, zero, a0
ffffffff802032ac: a3 0b a1 00          	sb	a0, 23(sp)
;         AtomicBool { v: UnsafeCell::new(v as u8) }
ffffffff802032b0: 2e e4                	sd	a1, 8(sp)
ffffffff802032b2: 97 60 00 00          	auipc	ra, 6
ffffffff802032b6: e7 80 00 c7          	jalr	-912(ra)
ffffffff802032ba: 2a e0                	sd	a0, 0(sp)
ffffffff802032bc: 09 a0                	j	2
ffffffff802032be: 02 65                	ld	a0, 0(sp)
ffffffff802032c0: 23 08 a1 00          	sb	a0, 16(sp)
;     }
ffffffff802032c4: e2 60                	ld	ra, 24(sp)
ffffffff802032c6: 05 61                	addi	sp, sp, 32
ffffffff802032c8: 82 80                	ret

ffffffff802032ca _ZN4core4sync6atomic10AtomicBool4load17h353aa56b61d78867E:
;     pub fn load(&self, order: Ordering) -> bool {
ffffffff802032ca: 79 71                	addi	sp, sp, -48
ffffffff802032cc: 06 f4                	sd	ra, 40(sp)
ffffffff802032ce: 2e 86                	add	a2, zero, a1
ffffffff802032d0: 2a ec                	sd	a0, 24(sp)
ffffffff802032d2: a3 03 b1 02          	sb	a1, 39(sp)
;         unsafe { atomic_load(self.v.get(), order) != 0 }
ffffffff802032d6: 32 e8                	sd	a2, 16(sp)
ffffffff802032d8: 97 60 00 00          	auipc	ra, 6
ffffffff802032dc: e7 80 20 c4          	jalr	-958(ra)
ffffffff802032e0: 2a e4                	sd	a0, 8(sp)
ffffffff802032e2: 09 a0                	j	2
ffffffff802032e4: 22 65                	ld	a0, 8(sp)
ffffffff802032e6: c2 65                	ld	a1, 16(sp)
ffffffff802032e8: 97 50 00 00          	auipc	ra, 5
ffffffff802032ec: e7 80 20 e5          	jalr	-430(ra)
ffffffff802032f0: 2a e0                	sd	a0, 0(sp)
ffffffff802032f2: 09 a0                	j	2
ffffffff802032f4: 02 65                	ld	a0, 0(sp)
ffffffff802032f6: 93 75 f5 0f          	andi	a1, a0, 255
ffffffff802032fa: 33 35 b0 00          	snez	a0, a1
;     }
ffffffff802032fe: a2 70                	ld	ra, 40(sp)
ffffffff80203300: 45 61                	addi	sp, sp, 48
ffffffff80203302: 82 80                	ret

ffffffff80203304 _ZN4core4sync6atomic10AtomicBool5store17h93457c27d8212f8dE:
;     pub fn store(&self, val: bool, order: Ordering) {
ffffffff80203304: 79 71                	addi	sp, sp, -48
ffffffff80203306: 06 f4                	sd	ra, 40(sp)
ffffffff80203308: b2 86                	add	a3, zero, a2
ffffffff8020330a: 2e 87                	add	a4, zero, a1
ffffffff8020330c: 2a ec                	sd	a0, 24(sp)
ffffffff8020330e: 23 03 b1 02          	sb	a1, 38(sp)
ffffffff80203312: a3 03 c1 02          	sb	a2, 39(sp)
;             atomic_store(self.v.get(), val as u8, order);
ffffffff80203316: 36 e8                	sd	a3, 16(sp)
ffffffff80203318: 3a e4                	sd	a4, 8(sp)
ffffffff8020331a: 97 60 00 00          	auipc	ra, 6
ffffffff8020331e: e7 80 00 c0          	jalr	-1024(ra)
ffffffff80203322: 2a e0                	sd	a0, 0(sp)
ffffffff80203324: 09 a0                	j	2
ffffffff80203326: 02 65                	ld	a0, 0(sp)
ffffffff80203328: a2 65                	ld	a1, 8(sp)
ffffffff8020332a: 42 66                	ld	a2, 16(sp)
ffffffff8020332c: 97 50 00 00          	auipc	ra, 5
ffffffff80203330: e7 80 40 ec          	jalr	-316(ra)
ffffffff80203334: 09 a0                	j	2
;     }
ffffffff80203336: a2 70                	ld	ra, 40(sp)
ffffffff80203338: 45 61                	addi	sp, sp, 48
ffffffff8020333a: 82 80                	ret

ffffffff8020333c _ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h3b0d3d42433bae4aE:
;                 pub fn compare_and_swap(&self,
ffffffff8020333c: 19 71                	addi	sp, sp, -128
ffffffff8020333e: 86 fc                	sd	ra, 120(sp)
ffffffff80203340: 36 87                	add	a4, zero, a3
ffffffff80203342: aa e4                	sd	a0, 72(sp)
ffffffff80203344: ae e8                	sd	a1, 80(sp)
ffffffff80203346: b2 ec                	sd	a2, 88(sp)
ffffffff80203348: a3 03 d1 06          	sb	a3, 103(sp)
;                                                 strongest_failure_ordering(order)) {
ffffffff8020334c: 2a f4                	sd	a0, 40(sp)
ffffffff8020334e: 36 85                	add	a0, zero, a3
ffffffff80203350: 32 f0                	sd	a2, 32(sp)
ffffffff80203352: 2e ec                	sd	a1, 24(sp)
ffffffff80203354: 3a e8                	sd	a4, 16(sp)
ffffffff80203356: 97 00 00 00          	auipc	ra, 0
ffffffff8020335a: e7 80 20 11          	jalr	274(ra)
ffffffff8020335e: 13 77 f5 0f          	andi	a4, a0, 255
ffffffff80203362: 3a e4                	sd	a4, 8(sp)
ffffffff80203364: 09 a0                	j	2
;                     match self.compare_exchange(current,
ffffffff80203366: 22 75                	ld	a0, 40(sp)
ffffffff80203368: e2 65                	ld	a1, 24(sp)
ffffffff8020336a: 02 76                	ld	a2, 32(sp)
ffffffff8020336c: c2 66                	ld	a3, 16(sp)
ffffffff8020336e: 22 67                	ld	a4, 8(sp)
ffffffff80203370: 97 00 00 00          	auipc	ra, 0
ffffffff80203374: e7 80 20 03          	jalr	50(ra)
ffffffff80203378: 2a fc                	sd	a0, 56(sp)
ffffffff8020337a: ae e0                	sd	a1, 64(sp)
ffffffff8020337c: 09 a0                	j	2
;                         Ok(x) => x,
ffffffff8020337e: 62 75                	ld	a0, 56(sp)
ffffffff80203380: 81 45                	mv	a1, zero
ffffffff80203382: 63 08 b5 00          	beq	a0, a1, 16
ffffffff80203386: 09 a0                	j	2
;                         Err(x) => x,
ffffffff80203388: 06 65                	ld	a0, 64(sp)
ffffffff8020338a: aa f4                	sd	a0, 104(sp)
ffffffff8020338c: 2a f8                	sd	a0, 48(sp)
;                     match self.compare_exchange(current,
ffffffff8020338e: 31 a0                	j	12
ffffffff80203390: 00 00                	unimp	
;                         Ok(x) => x,
ffffffff80203392: 06 65                	ld	a0, 64(sp)
ffffffff80203394: aa f8                	sd	a0, 112(sp)
ffffffff80203396: 2a f8                	sd	a0, 48(sp)
;                     match self.compare_exchange(current,
ffffffff80203398: 09 a0                	j	2
;                 }
ffffffff8020339a: 42 75                	ld	a0, 48(sp)
ffffffff8020339c: e6 70                	ld	ra, 120(sp)
ffffffff8020339e: 09 61                	addi	sp, sp, 128
ffffffff802033a0: 82 80                	ret

ffffffff802033a2 _ZN4core4sync6atomic11AtomicUsize16compare_exchange17h276138b54aaf3e89E:
;                 pub fn compare_exchange(&self,
ffffffff802033a2: 1d 71                	addi	sp, sp, -96
ffffffff802033a4: 86 ec                	sd	ra, 88(sp)
ffffffff802033a6: ba 87                	add	a5, zero, a4
ffffffff802033a8: 36 88                	add	a6, zero, a3
ffffffff802033aa: 2a fc                	sd	a0, 56(sp)
ffffffff802033ac: ae e0                	sd	a1, 64(sp)
ffffffff802033ae: b2 e4                	sd	a2, 72(sp)
ffffffff802033b0: 23 0b d1 04          	sb	a3, 86(sp)
ffffffff802033b4: a3 0b e1 04          	sb	a4, 87(sp)
;                     unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
ffffffff802033b8: 32 f8                	sd	a2, 48(sp)
ffffffff802033ba: 2e f4                	sd	a1, 40(sp)
ffffffff802033bc: 3e f0                	sd	a5, 32(sp)
ffffffff802033be: 42 ec                	sd	a6, 24(sp)
ffffffff802033c0: 97 60 00 00          	auipc	ra, 6
ffffffff802033c4: e7 80 a0 61          	jalr	1562(ra)
ffffffff802033c8: 2a e8                	sd	a0, 16(sp)
ffffffff802033ca: 09 a0                	j	2
ffffffff802033cc: 42 65                	ld	a0, 16(sp)
ffffffff802033ce: a2 75                	ld	a1, 40(sp)
ffffffff802033d0: 42 76                	ld	a2, 48(sp)
ffffffff802033d2: e2 66                	ld	a3, 24(sp)
ffffffff802033d4: 02 77                	ld	a4, 32(sp)
ffffffff802033d6: 97 00 00 00          	auipc	ra, 0
ffffffff802033da: e7 80 80 21          	jalr	536(ra)
ffffffff802033de: 2a e4                	sd	a0, 8(sp)
ffffffff802033e0: 2e e0                	sd	a1, 0(sp)
ffffffff802033e2: 09 a0                	j	2
;                 }
ffffffff802033e4: 22 65                	ld	a0, 8(sp)
ffffffff802033e6: 82 65                	ld	a1, 0(sp)
ffffffff802033e8: e6 60                	ld	ra, 88(sp)
ffffffff802033ea: 25 61                	addi	sp, sp, 96
ffffffff802033ec: 82 80                	ret

ffffffff802033ee _ZN4core4sync6atomic11AtomicUsize4load17h64407dc48c4f962dE:
;                 pub fn load(&self, order: Ordering) -> $int_type {
ffffffff802033ee: 79 71                	addi	sp, sp, -48
ffffffff802033f0: 06 f4                	sd	ra, 40(sp)
ffffffff802033f2: 2e 86                	add	a2, zero, a1
ffffffff802033f4: 2a ec                	sd	a0, 24(sp)
ffffffff802033f6: a3 03 b1 02          	sb	a1, 39(sp)
;                     unsafe { atomic_load(self.v.get(), order) }
ffffffff802033fa: 32 e8                	sd	a2, 16(sp)
ffffffff802033fc: 97 60 00 00          	auipc	ra, 6
ffffffff80203400: e7 80 e0 5d          	jalr	1502(ra)
ffffffff80203404: 2a e4                	sd	a0, 8(sp)
ffffffff80203406: 09 a0                	j	2
ffffffff80203408: 22 65                	ld	a0, 8(sp)
ffffffff8020340a: c2 65                	ld	a1, 16(sp)
ffffffff8020340c: 97 00 00 00          	auipc	ra, 0
ffffffff80203410: e7 80 a0 13          	jalr	314(ra)
ffffffff80203414: 2a e0                	sd	a0, 0(sp)
ffffffff80203416: 09 a0                	j	2
;                 }
ffffffff80203418: 02 65                	ld	a0, 0(sp)
ffffffff8020341a: a2 70                	ld	ra, 40(sp)
ffffffff8020341c: 45 61                	addi	sp, sp, 48
ffffffff8020341e: 82 80                	ret

ffffffff80203420 _ZN4core4sync6atomic11AtomicUsize5store17he1f050ff6fc58296E:
;                 pub fn store(&self, val: $int_type, order: Ordering) {
ffffffff80203420: 39 71                	addi	sp, sp, -64
ffffffff80203422: 06 fc                	sd	ra, 56(sp)
ffffffff80203424: b2 86                	add	a3, zero, a2
ffffffff80203426: 2a f0                	sd	a0, 32(sp)
ffffffff80203428: 2e f4                	sd	a1, 40(sp)
ffffffff8020342a: a3 0b c1 02          	sb	a2, 55(sp)
;                     unsafe { atomic_store(self.v.get(), val, order); }
ffffffff8020342e: 2e ec                	sd	a1, 24(sp)
ffffffff80203430: 36 e8                	sd	a3, 16(sp)
ffffffff80203432: 97 60 00 00          	auipc	ra, 6
ffffffff80203436: e7 80 80 5a          	jalr	1448(ra)
ffffffff8020343a: 2a e4                	sd	a0, 8(sp)
ffffffff8020343c: 09 a0                	j	2
ffffffff8020343e: 22 65                	ld	a0, 8(sp)
ffffffff80203440: e2 65                	ld	a1, 24(sp)
ffffffff80203442: 42 66                	ld	a2, 16(sp)
ffffffff80203444: 97 60 00 00          	auipc	ra, 6
ffffffff80203448: e7 80 00 4f          	jalr	1264(ra)
ffffffff8020344c: 09 a0                	j	2
;                 }
ffffffff8020344e: e2 70                	ld	ra, 56(sp)
ffffffff80203450: 21 61                	addi	sp, sp, 64
ffffffff80203452: 82 80                	ret

ffffffff80203454 _ZN4core4sync6atomic14spin_loop_hint17h599368a8108353f7E:
; pub fn spin_loop_hint() {
ffffffff80203454: 41 11                	addi	sp, sp, -16
;     spin_loop()
ffffffff80203456: 06 e4                	sd	ra, 8(sp)
ffffffff80203458: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020345c: e7 80 20 7d          	jalr	2002(ra)
ffffffff80203460: 09 a0                	j	2
; }
ffffffff80203462: a2 60                	ld	ra, 8(sp)
ffffffff80203464: 41 01                	addi	sp, sp, 16
ffffffff80203466: 82 80                	ret

ffffffff80203468 _ZN4core4sync6atomic26strongest_failure_ordering17hb0827736631f5864E:
; fn strongest_failure_ordering(order: Ordering) -> Ordering {
ffffffff80203468: 41 11                	addi	sp, sp, -16
ffffffff8020346a: aa 85                	add	a1, zero, a0
ffffffff8020346c: 23 07 a1 00          	sb	a0, 14(sp)
;         Release => Relaxed,
ffffffff80203470: 13 75 f5 0f          	andi	a0, a0, 255
ffffffff80203474: 01 46                	mv	a2, zero
ffffffff80203476: 2a e0                	sd	a0, 0(sp)
ffffffff80203478: 63 0c c5 02          	beq	a0, a2, 56
ffffffff8020347c: 09 a0                	j	2
ffffffff8020347e: 05 45                	addi	a0, zero, 1
ffffffff80203480: 82 65                	ld	a1, 0(sp)
ffffffff80203482: 63 83 a5 02          	beq	a1, a0, 38
ffffffff80203486: 09 a0                	j	2
ffffffff80203488: 09 45                	addi	a0, zero, 2
ffffffff8020348a: 82 65                	ld	a1, 0(sp)
ffffffff8020348c: 63 8a a5 02          	beq	a1, a0, 52
ffffffff80203490: 09 a0                	j	2
ffffffff80203492: 0d 45                	addi	a0, zero, 3
ffffffff80203494: 82 65                	ld	a1, 0(sp)
ffffffff80203496: 63 84 a5 00          	beq	a1, a0, 8
ffffffff8020349a: 09 a0                	j	2
ffffffff8020349c: 31 a8                	j	28
ffffffff8020349e: 09 45                	addi	a0, zero, 2
;         AcqRel => Acquire,
ffffffff802034a0: a3 07 a1 00          	sb	a0, 15(sp)
;     match order {
ffffffff802034a4: 15 a0                	j	36
ffffffff802034a6: 00 00                	unimp	
ffffffff802034a8: 01 45                	mv	a0, zero
;         Release => Relaxed,
ffffffff802034aa: a3 07 a1 00          	sb	a0, 15(sp)
;     match order {
ffffffff802034ae: 29 a8                	j	26
ffffffff802034b0: 01 45                	mv	a0, zero
;         Relaxed => Relaxed,
ffffffff802034b2: a3 07 a1 00          	sb	a0, 15(sp)
;     match order {
ffffffff802034b6: 09 a8                	j	18
ffffffff802034b8: 11 45                	addi	a0, zero, 4
;         SeqCst => SeqCst,
ffffffff802034ba: a3 07 a1 00          	sb	a0, 15(sp)
;     match order {
ffffffff802034be: 29 a0                	j	10
ffffffff802034c0: 09 45                	addi	a0, zero, 2
;         Acquire => Acquire,
ffffffff802034c2: a3 07 a1 00          	sb	a0, 15(sp)
;     match order {
ffffffff802034c6: 09 a0                	j	2
; }
ffffffff802034c8: 03 05 f1 00          	lb	a0, 15(sp)
ffffffff802034cc: 41 01                	addi	sp, sp, 16
ffffffff802034ce: 82 80                	ret

ffffffff802034d0 _ZN4core3fmt8builders9DebugList7entries17h3fcbf5cda057728cE:
;     pub fn entries<D, I>(&mut self, entries: I) -> &mut Self
ffffffff802034d0: 59 71                	addi	sp, sp, -112
ffffffff802034d2: 86 f4                	sd	ra, 104(sp)
ffffffff802034d4: aa e0                	sd	a0, 64(sp)
ffffffff802034d6: ae e4                	sd	a1, 72(sp)
ffffffff802034d8: b2 e8                	sd	a2, 80(sp)
;         for entry in entries {
ffffffff802034da: 2a ec                	sd	a0, 24(sp)
ffffffff802034dc: 2e 85                	add	a0, zero, a1
ffffffff802034de: b2 85                	add	a1, zero, a2
ffffffff802034e0: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff802034e4: e7 80 c0 7b          	jalr	1980(ra)
ffffffff802034e8: 2a e8                	sd	a0, 16(sp)
ffffffff802034ea: 2e e4                	sd	a1, 8(sp)
ffffffff802034ec: 09 a0                	j	2
ffffffff802034ee: 42 65                	ld	a0, 16(sp)
ffffffff802034f0: 2a f0                	sd	a0, 32(sp)
ffffffff802034f2: a2 65                	ld	a1, 8(sp)
ffffffff802034f4: 2e f4                	sd	a1, 40(sp)
ffffffff802034f6: 09 a0                	j	2
ffffffff802034f8: 08 10                	addi	a0, sp, 32
ffffffff802034fa: 97 60 00 00          	auipc	ra, 6
ffffffff802034fe: e7 80 c0 d3          	jalr	-708(ra)
ffffffff80203502: 2a f8                	sd	a0, 48(sp)
ffffffff80203504: 09 a0                	j	2
ffffffff80203506: 42 75                	ld	a0, 48(sp)
ffffffff80203508: b3 35 a0 00          	snez	a1, a0
ffffffff8020350c: 01 46                	mv	a2, zero
ffffffff8020350e: 63 04 c5 00          	beq	a0, a2, 8
ffffffff80203512: 09 a0                	j	2
ffffffff80203514: 19 a0                	j	6
ffffffff80203516: 0d a0                	j	34
ffffffff80203518: 00 00                	unimp	
ffffffff8020351a: 42 75                	ld	a0, 48(sp)
ffffffff8020351c: aa ec                	sd	a0, 88(sp)
ffffffff8020351e: aa f0                	sd	a0, 96(sp)
ffffffff80203520: 2a fc                	sd	a0, 56(sp)

ffffffff80203522 .LBB0_12:
;             self.entry(&entry);
ffffffff80203522: 17 a6 00 00          	auipc	a2, 10
ffffffff80203526: 13 06 e6 6a          	addi	a2, a2, 1710
ffffffff8020352a: 2c 18                	addi	a1, sp, 56
ffffffff8020352c: 62 65                	ld	a0, 24(sp)
ffffffff8020352e: 97 70 00 00          	auipc	ra, 7
ffffffff80203532: e7 80 a0 44          	jalr	1098(ra)
ffffffff80203536: 11 a0                	j	4
;         }
ffffffff80203538: 19 a0                	j	6
ffffffff8020353a: 09 a0                	j	2
;         for entry in entries {
ffffffff8020353c: 75 bf                	j	-68
;     }
ffffffff8020353e: 62 65                	ld	a0, 24(sp)
ffffffff80203540: a6 70                	ld	ra, 104(sp)
ffffffff80203542: 65 61                	addi	sp, sp, 112
ffffffff80203544: 82 80                	ret

ffffffff80203546 _ZN4core4sync6atomic11atomic_load17hc54b86e8d4590c3eE:
; unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
ffffffff80203546: 79 71                	addi	sp, sp, -48
ffffffff80203548: 2e 86                	add	a2, zero, a1
ffffffff8020354a: a3 0f b1 00          	sb	a1, 31(sp)
ffffffff8020354e: 2a f4                	sd	a0, 40(sp)
;         Acquire => intrinsics::atomic_load_acq(dst),
ffffffff80203550: 93 f5 f5 0f          	andi	a1, a1, 255
ffffffff80203554: 81 46                	mv	a3, zero
ffffffff80203556: 2a e8                	sd	a0, 16(sp)
ffffffff80203558: 2e e4                	sd	a1, 8(sp)
ffffffff8020355a: 63 8a d5 04          	beq	a1, a3, 84
ffffffff8020355e: 09 a0                	j	2
ffffffff80203560: 05 45                	addi	a0, zero, 1
ffffffff80203562: a2 65                	ld	a1, 8(sp)
ffffffff80203564: 63 83 a5 06          	beq	a1, a0, 102
ffffffff80203568: 09 a0                	j	2
ffffffff8020356a: 09 45                	addi	a0, zero, 2
ffffffff8020356c: a2 65                	ld	a1, 8(sp)
ffffffff8020356e: 63 89 a5 02          	beq	a1, a0, 50
ffffffff80203572: 09 a0                	j	2
ffffffff80203574: 0d 45                	addi	a0, zero, 3
ffffffff80203576: a2 65                	ld	a1, 8(sp)
ffffffff80203578: 63 84 a5 00          	beq	a1, a0, 8
ffffffff8020357c: 09 a0                	j	2
ffffffff8020357e: 2d a8                	j	58

ffffffff80203580 .LBB0_15:
;         $crate::panicking::panic($msg)
ffffffff80203580: 17 a5 00 00          	auipc	a0, 10
ffffffff80203584: 13 05 05 67          	addi	a0, a0, 1648

ffffffff80203588 .LBB0_16:
ffffffff80203588: 17 a6 00 00          	auipc	a2, 10
ffffffff8020358c: 13 06 06 71          	addi	a2, a2, 1808
ffffffff80203590: 93 05 10 03          	addi	a1, zero, 49
ffffffff80203594: 97 70 00 00          	auipc	ra, 7
ffffffff80203598: e7 80 40 da          	jalr	-604(ra)
ffffffff8020359c: 00 00                	unimp	
;     match order {
ffffffff8020359e: 00 00                	unimp	
;         Acquire => intrinsics::atomic_load_acq(dst),
ffffffff802035a0: 42 65                	ld	a0, 16(sp)
ffffffff802035a2: 0c 61                	ld	a1, 0(a0)
ffffffff802035a4: 0f 00 30 02          	fence	r, rw
ffffffff802035a8: 2e f0                	sd	a1, 32(sp)
ffffffff802035aa: 09 a0                	j	2
;     match order {
ffffffff802035ac: 35 a8                	j	60
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
ffffffff802035ae: 42 65                	ld	a0, 16(sp)
ffffffff802035b0: 0c 61                	ld	a1, 0(a0)
ffffffff802035b2: 2e f0                	sd	a1, 32(sp)
ffffffff802035b4: 09 a0                	j	2
;     match order {
ffffffff802035b6: 0d a8                	j	50
;         SeqCst => intrinsics::atomic_load(dst),
ffffffff802035b8: 0f 00 30 03          	fence	rw, rw
ffffffff802035bc: 42 65                	ld	a0, 16(sp)
ffffffff802035be: 0c 61                	ld	a1, 0(a0)
ffffffff802035c0: 0f 00 30 02          	fence	r, rw
ffffffff802035c4: 2e f0                	sd	a1, 32(sp)
ffffffff802035c6: 09 a0                	j	2
;     match order {
ffffffff802035c8: 05 a0                	j	32

ffffffff802035ca .LBB0_17:
;         $crate::panicking::panic($msg)
ffffffff802035ca: 17 a5 00 00          	auipc	a0, 10
ffffffff802035ce: 13 05 65 6e          	addi	a0, a0, 1766

ffffffff802035d2 .LBB0_18:
ffffffff802035d2: 17 a6 00 00          	auipc	a2, 10
ffffffff802035d6: 13 06 66 6c          	addi	a2, a2, 1734
ffffffff802035da: 93 05 80 02          	addi	a1, zero, 40
ffffffff802035de: 97 70 00 00          	auipc	ra, 7
ffffffff802035e2: e7 80 a0 d5          	jalr	-678(ra)
ffffffff802035e6: 00 00                	unimp	
; }
ffffffff802035e8: 02 75                	ld	a0, 32(sp)
ffffffff802035ea: 45 61                	addi	sp, sp, 48
ffffffff802035ec: 82 80                	ret

ffffffff802035ee _ZN4core4sync6atomic23atomic_compare_exchange17h82a7bd0965652cb1E:
; unsafe fn atomic_compare_exchange<T: Copy>(
ffffffff802035ee: 35 71                	addi	sp, sp, -160
ffffffff802035f0: ba 87                	add	a5, zero, a4
ffffffff802035f2: 36 88                	add	a6, zero, a3
ffffffff802035f4: aa f8                	sd	a0, 112(sp)
ffffffff802035f6: ae fc                	sd	a1, 120(sp)
ffffffff802035f8: 32 e1                	sd	a2, 128(sp)
ffffffff802035fa: 23 07 d1 08          	sb	a3, 142(sp)
ffffffff802035fe: a3 07 e1 08          	sb	a4, 143(sp)
;     let (val, ok) = match (success, failure) {
ffffffff80203602: 23 04 d1 06          	sb	a3, 104(sp)
ffffffff80203606: a3 04 e1 06          	sb	a4, 105(sp)
;         (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
ffffffff8020360a: 93 f6 f6 0f          	andi	a3, a3, 255
ffffffff8020360e: 01 47                	mv	a4, zero
ffffffff80203610: b2 e0                	sd	a2, 64(sp)
ffffffff80203612: 2e fc                	sd	a1, 56(sp)
ffffffff80203614: 2a f8                	sd	a0, 48(sp)
ffffffff80203616: 36 f4                	sd	a3, 40(sp)
ffffffff80203618: 63 87 e6 02          	beq	a3, a4, 46
ffffffff8020361c: 09 a0                	j	2
ffffffff8020361e: 05 45                	addi	a0, zero, 1
ffffffff80203620: a2 75                	ld	a1, 40(sp)
ffffffff80203622: 63 84 a5 04          	beq	a1, a0, 72
ffffffff80203626: 09 a0                	j	2
ffffffff80203628: 09 45                	addi	a0, zero, 2
ffffffff8020362a: a2 75                	ld	a1, 40(sp)
ffffffff8020362c: 63 85 a5 04          	beq	a1, a0, 74
ffffffff80203630: 09 a0                	j	2
ffffffff80203632: 0d 45                	addi	a0, zero, 3
ffffffff80203634: a2 75                	ld	a1, 40(sp)
ffffffff80203636: 63 8c a5 04          	beq	a1, a0, 88
ffffffff8020363a: 09 a0                	j	2
ffffffff8020363c: 11 45                	addi	a0, zero, 4
ffffffff8020363e: a2 75                	ld	a1, 40(sp)
ffffffff80203640: 63 83 a5 06          	beq	a1, a0, 102
ffffffff80203644: 39 a0                	j	14
;         (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
ffffffff80203646: 03 45 91 06          	lbu	a0, 105(sp)
ffffffff8020364a: 81 45                	mv	a1, zero
ffffffff8020364c: 63 06 b5 10          	beq	a0, a1, 268
ffffffff80203650: 09 a0                	j	2
;         (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
ffffffff80203652: 03 45 91 06          	lbu	a0, 105(sp)
ffffffff80203656: 85 45                	addi	a1, zero, 1
ffffffff80203658: 2a f0                	sd	a0, 32(sp)
ffffffff8020365a: 63 00 b5 20          	beq	a0, a1, 512
ffffffff8020365e: 09 a0                	j	2
ffffffff80203660: 0d 45                	addi	a0, zero, 3
ffffffff80203662: 82 75                	ld	a1, 32(sp)
ffffffff80203664: 63 8c a5 1c          	beq	a1, a0, 472
ffffffff80203668: 85 a0                	j	96
;         (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
ffffffff8020366a: 03 45 91 06          	lbu	a0, 105(sp)
ffffffff8020366e: 81 45                	mv	a1, zero
ffffffff80203670: 63 0e b5 08          	beq	a0, a1, 156
ffffffff80203674: f9 bf                	j	-34
;         (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
ffffffff80203676: 03 45 91 06          	lbu	a0, 105(sp)
ffffffff8020367a: 81 45                	mv	a1, zero
ffffffff8020367c: 2a ec                	sd	a0, 24(sp)
ffffffff8020367e: 63 03 b5 12          	beq	a0, a1, 294
ffffffff80203682: 09 a0                	j	2
ffffffff80203684: 09 45                	addi	a0, zero, 2
ffffffff80203686: e2 65                	ld	a1, 24(sp)
ffffffff80203688: 63 8f a5 04          	beq	a1, a0, 94
ffffffff8020368c: d9 b7                	j	-58
;         (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
ffffffff8020368e: 03 45 91 06          	lbu	a0, 105(sp)
ffffffff80203692: 81 45                	mv	a1, zero
ffffffff80203694: 2a e8                	sd	a0, 16(sp)
ffffffff80203696: 63 0a b5 12          	beq	a0, a1, 308
ffffffff8020369a: 09 a0                	j	2
ffffffff8020369c: 09 45                	addi	a0, zero, 2
ffffffff8020369e: c2 65                	ld	a1, 16(sp)
ffffffff802036a0: 63 89 a5 08          	beq	a1, a0, 146
ffffffff802036a4: 7d b7                	j	-82
;         (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
ffffffff802036a6: 03 45 91 06          	lbu	a0, 105(sp)
ffffffff802036aa: 81 45                	mv	a1, zero
ffffffff802036ac: 2a e4                	sd	a0, 8(sp)
ffffffff802036ae: 63 01 b5 14          	beq	a0, a1, 322
ffffffff802036b2: 09 a0                	j	2
ffffffff802036b4: 09 45                	addi	a0, zero, 2
ffffffff802036b6: a2 65                	ld	a1, 8(sp)
ffffffff802036b8: 63 8f a5 14          	beq	a1, a0, 350
ffffffff802036bc: 09 a0                	j	2
ffffffff802036be: 11 45                	addi	a0, zero, 4
ffffffff802036c0: a2 65                	ld	a1, 8(sp)
ffffffff802036c2: 63 8e a5 0a          	beq	a1, a0, 188
ffffffff802036c6: 71 b7                	j	-116

ffffffff802036c8 .LBB1_41:
;         $crate::panicking::panic($msg)
ffffffff802036c8: 17 a5 00 00          	auipc	a0, 10
ffffffff802036cc: 13 05 05 61          	addi	a0, a0, 1552

ffffffff802036d0 .LBB1_42:
ffffffff802036d0: 17 a6 00 00          	auipc	a2, 10
ffffffff802036d4: 13 06 86 5c          	addi	a2, a2, 1480
ffffffff802036d8: 93 05 c0 03          	addi	a1, zero, 60
ffffffff802036dc: 97 70 00 00          	auipc	ra, 7
ffffffff802036e0: e7 80 c0 c5          	jalr	-932(ra)
ffffffff802036e4: 00 00                	unimp	
;         (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
ffffffff802036e6: 42 76                	ld	a2, 48(sp)
ffffffff802036e8: e2 76                	ld	a3, 56(sp)
ffffffff802036ea: 06 67                	ld	a4, 64(sp)
ffffffff802036ec: 2f 35 06 14          	<unknown>
ffffffff802036f0: 63 15 d5 00          	bne	a0, a3, 10
ffffffff802036f4: af 35 e6 18          	<unknown>
ffffffff802036f8: f5 f9                	bnez	a1, -12
ffffffff802036fa: b3 47 d5 00          	xor	a5, a0, a3
ffffffff802036fe: 93 b7 17 00          	seqz	a5, a5
ffffffff80203702: aa ec                	sd	a0, 88(sp)
ffffffff80203704: 23 00 f1 06          	sb	a5, 96(sp)
ffffffff80203708: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff8020370a: bd a2                	j	366
;         (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
ffffffff8020370c: 42 76                	ld	a2, 48(sp)
ffffffff8020370e: e2 76                	ld	a3, 56(sp)
ffffffff80203710: 06 67                	ld	a4, 64(sp)
ffffffff80203712: 2f 35 06 10          	<unknown>
ffffffff80203716: 63 15 d5 00          	bne	a0, a3, 10
ffffffff8020371a: af 35 e6 1a          	<unknown>
ffffffff8020371e: f5 f9                	bnez	a1, -12
ffffffff80203720: b3 47 d5 00          	xor	a5, a0, a3
ffffffff80203724: 93 b7 17 00          	seqz	a5, a5
ffffffff80203728: aa ec                	sd	a0, 88(sp)
ffffffff8020372a: 23 00 f1 06          	sb	a5, 96(sp)
ffffffff8020372e: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff80203730: a1 a2                	j	328
;         (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
ffffffff80203732: 42 76                	ld	a2, 48(sp)
ffffffff80203734: e2 76                	ld	a3, 56(sp)
ffffffff80203736: 06 67                	ld	a4, 64(sp)
ffffffff80203738: 2f 35 06 14          	<unknown>
ffffffff8020373c: 63 15 d5 00          	bne	a0, a3, 10
ffffffff80203740: af 35 e6 1a          	<unknown>
ffffffff80203744: f5 f9                	bnez	a1, -12
ffffffff80203746: b3 47 d5 00          	xor	a5, a0, a3
ffffffff8020374a: 93 b7 17 00          	seqz	a5, a5
ffffffff8020374e: aa ec                	sd	a0, 88(sp)
ffffffff80203750: 23 00 f1 06          	sb	a5, 96(sp)
ffffffff80203754: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff80203756: 0d a2                	j	290
;         (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
ffffffff80203758: 42 76                	ld	a2, 48(sp)
ffffffff8020375a: e2 76                	ld	a3, 56(sp)
ffffffff8020375c: 06 67                	ld	a4, 64(sp)
ffffffff8020375e: 2f 35 06 10          	<unknown>
ffffffff80203762: 63 15 d5 00          	bne	a0, a3, 10
ffffffff80203766: af 35 e6 18          	<unknown>
ffffffff8020376a: f5 f9                	bnez	a1, -12
ffffffff8020376c: b3 47 d5 00          	xor	a5, a0, a3
ffffffff80203770: 93 b7 17 00          	seqz	a5, a5
ffffffff80203774: aa ec                	sd	a0, 88(sp)
ffffffff80203776: 23 00 f1 06          	sb	a5, 96(sp)
ffffffff8020377a: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff8020377c: f5 a8                	j	252
;         (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
ffffffff8020377e: 42 76                	ld	a2, 48(sp)
ffffffff80203780: e2 76                	ld	a3, 56(sp)
ffffffff80203782: 06 67                	ld	a4, 64(sp)
ffffffff80203784: 2f 35 06 16          	<unknown>
ffffffff80203788: 63 15 d5 00          	bne	a0, a3, 10
ffffffff8020378c: af 35 e6 1e          	<unknown>
ffffffff80203790: f5 f9                	bnez	a1, -12
ffffffff80203792: b3 47 d5 00          	xor	a5, a0, a3
ffffffff80203796: 93 b7 17 00          	seqz	a5, a5
ffffffff8020379a: aa ec                	sd	a0, 88(sp)
ffffffff8020379c: 23 00 f1 06          	sb	a5, 96(sp)
ffffffff802037a0: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff802037a2: d9 a8                	j	214
;         (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
ffffffff802037a4: 42 76                	ld	a2, 48(sp)
ffffffff802037a6: e2 76                	ld	a3, 56(sp)
ffffffff802037a8: 06 67                	ld	a4, 64(sp)
ffffffff802037aa: 2f 35 06 14          	<unknown>
ffffffff802037ae: 63 15 d5 00          	bne	a0, a3, 10
ffffffff802037b2: af 35 e6 18          	<unknown>
ffffffff802037b6: f5 f9                	bnez	a1, -12
ffffffff802037b8: b3 47 d5 00          	xor	a5, a0, a3
ffffffff802037bc: 93 b7 17 00          	seqz	a5, a5
ffffffff802037c0: aa ec                	sd	a0, 88(sp)
ffffffff802037c2: 23 00 f1 06          	sb	a5, 96(sp)
ffffffff802037c6: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff802037c8: 45 a8                	j	176
;         (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
ffffffff802037ca: 42 76                	ld	a2, 48(sp)
ffffffff802037cc: e2 76                	ld	a3, 56(sp)
ffffffff802037ce: 06 67                	ld	a4, 64(sp)
ffffffff802037d0: 2f 35 06 14          	<unknown>
ffffffff802037d4: 63 15 d5 00          	bne	a0, a3, 10
ffffffff802037d8: af 35 e6 1a          	<unknown>
ffffffff802037dc: f5 f9                	bnez	a1, -12
ffffffff802037de: b3 47 d5 00          	xor	a5, a0, a3
ffffffff802037e2: 93 b7 17 00          	seqz	a5, a5
ffffffff802037e6: aa ec                	sd	a0, 88(sp)
ffffffff802037e8: 23 00 f1 06          	sb	a5, 96(sp)
ffffffff802037ec: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff802037ee: 69 a0                	j	138
;         (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
ffffffff802037f0: 42 76                	ld	a2, 48(sp)
ffffffff802037f2: e2 76                	ld	a3, 56(sp)
ffffffff802037f4: 06 67                	ld	a4, 64(sp)
ffffffff802037f6: 2f 35 06 16          	<unknown>
ffffffff802037fa: 63 15 d5 00          	bne	a0, a3, 10
ffffffff802037fe: af 35 e6 1e          	<unknown>
ffffffff80203802: f5 f9                	bnez	a1, -12
ffffffff80203804: b3 47 d5 00          	xor	a5, a0, a3
ffffffff80203808: 93 b7 17 00          	seqz	a5, a5
ffffffff8020380c: aa ec                	sd	a0, 88(sp)
ffffffff8020380e: 23 00 f1 06          	sb	a5, 96(sp)
ffffffff80203812: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff80203814: 95 a0                	j	100
;         (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
ffffffff80203816: 42 76                	ld	a2, 48(sp)
ffffffff80203818: e2 76                	ld	a3, 56(sp)
ffffffff8020381a: 06 67                	ld	a4, 64(sp)
ffffffff8020381c: 2f 35 06 16          	<unknown>
ffffffff80203820: 63 15 d5 00          	bne	a0, a3, 10
ffffffff80203824: af 35 e6 1e          	<unknown>
ffffffff80203828: f5 f9                	bnez	a1, -12
ffffffff8020382a: b3 47 d5 00          	xor	a5, a0, a3
ffffffff8020382e: 93 b7 17 00          	seqz	a5, a5
ffffffff80203832: aa ec                	sd	a0, 88(sp)
ffffffff80203834: 23 00 f1 06          	sb	a5, 96(sp)
ffffffff80203838: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff8020383a: 3d a8                	j	62

ffffffff8020383c .LBB1_70:
;         $crate::panicking::panic($msg)
ffffffff8020383c: 17 a5 00 00          	auipc	a0, 10
ffffffff80203840: 13 05 85 4d          	addi	a0, a0, 1240

ffffffff80203844 .LBB1_71:
ffffffff80203844: 17 a6 00 00          	auipc	a2, 10
ffffffff80203848: 13 06 46 45          	addi	a2, a2, 1108
ffffffff8020384c: 93 05 d0 03          	addi	a1, zero, 61
ffffffff80203850: 97 70 00 00          	auipc	ra, 7
ffffffff80203854: e7 80 80 ae          	jalr	-1304(ra)
ffffffff80203858: 00 00                	unimp	

ffffffff8020385a .LBB1_72:
ffffffff8020385a: 17 a5 00 00          	auipc	a0, 10
ffffffff8020385e: 13 05 75 4f          	addi	a0, a0, 1271

ffffffff80203862 .LBB1_73:
ffffffff80203862: 17 a6 00 00          	auipc	a2, 10
ffffffff80203866: 13 06 66 43          	addi	a2, a2, 1078
ffffffff8020386a: 93 05 40 03          	addi	a1, zero, 52
ffffffff8020386e: 97 70 00 00          	auipc	ra, 7
ffffffff80203872: e7 80 a0 ac          	jalr	-1334(ra)
ffffffff80203876: 00 00                	unimp	
;     let (val, ok) = match (success, failure) {
ffffffff80203878: 66 65                	ld	a0, 88(sp)
ffffffff8020387a: 2a e9                	sd	a0, 144(sp)
ffffffff8020387c: 83 45 01 06          	lbu	a1, 96(sp)
ffffffff80203880: 13 f6 15 00          	andi	a2, a1, 1
ffffffff80203884: a3 0f b1 08          	sb	a1, 159(sp)
;     if ok { Ok(val) } else { Err(val) }
ffffffff80203888: 2a e0                	sd	a0, 0(sp)
ffffffff8020388a: 19 e6                	bnez	a2, 14
ffffffff8020388c: 09 a0                	j	2
ffffffff8020388e: 02 65                	ld	a0, 0(sp)
ffffffff80203890: aa e8                	sd	a0, 80(sp)
ffffffff80203892: 85 45                	addi	a1, zero, 1
ffffffff80203894: ae e4                	sd	a1, 72(sp)
ffffffff80203896: 31 a0                	j	12
ffffffff80203898: 02 65                	ld	a0, 0(sp)
ffffffff8020389a: aa e8                	sd	a0, 80(sp)
ffffffff8020389c: 81 45                	mv	a1, zero
ffffffff8020389e: ae e4                	sd	a1, 72(sp)
ffffffff802038a0: 09 a0                	j	2
; }
ffffffff802038a2: 26 65                	ld	a0, 72(sp)
ffffffff802038a4: c6 65                	ld	a1, 80(sp)
ffffffff802038a6: 0d 61                	addi	sp, sp, 160
ffffffff802038a8: 82 80                	ret

ffffffff802038aa _ZN4core3ptr25swap_nonoverlapping_bytes17h578d6835caa40869E:
; unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
ffffffff802038aa: 09 71                	addi	sp, sp, -384
ffffffff802038ac: 86 fe                	sd	ra, 376(sp)
ffffffff802038ae: a2 fa                	sd	s0, 368(sp)
ffffffff802038b0: 00 03                	addi	s0, sp, 384
ffffffff802038b2: 13 71 01 fe          	andi	sp, sp, -32
ffffffff802038b6: aa f9                	sd	a0, 240(sp)
ffffffff802038b8: ae fd                	sd	a1, 248(sp)
ffffffff802038ba: 32 e2                	sd	a2, 256(sp)
ffffffff802038bc: 93 06 00 02          	addi	a3, zero, 32
;     intrinsics::size_of::<T>()
ffffffff802038c0: b6 e6                	sd	a3, 328(sp)
;     let block_size = mem::size_of::<Block>();
ffffffff802038c2: 36 e6                	sd	a3, 264(sp)
ffffffff802038c4: 32 e5                	sd	a2, 136(sp)
ffffffff802038c6: 2e e1                	sd	a1, 128(sp)
ffffffff802038c8: aa fc                	sd	a0, 120(sp)
ffffffff802038ca: b6 f8                	sd	a3, 112(sp)
ffffffff802038cc: 09 a0                	j	2
ffffffff802038ce: 01 45                	mv	a0, zero
;     let mut i = 0;
ffffffff802038d0: 2a ed                	sd	a0, 152(sp)
;     while i + block_size <= len {
ffffffff802038d2: 09 a0                	j	2
ffffffff802038d4: 6a 65                	ld	a0, 152(sp)
ffffffff802038d6: c6 75                	ld	a1, 112(sp)
ffffffff802038d8: 2e 95                	add	a0, a0, a1
ffffffff802038da: 2a 66                	ld	a2, 136(sp)
ffffffff802038dc: 63 78 a6 00          	bgeu	a2, a0, 16
ffffffff802038e0: 09 a0                	j	2
;     if i < len {
ffffffff802038e2: 6a 65                	ld	a0, 152(sp)
ffffffff802038e4: aa 65                	ld	a1, 136(sp)
ffffffff802038e6: 63 6e b5 06          	bltu	a0, a1, 124
ffffffff802038ea: 9d a8                	j	118
;         let mut t = mem::MaybeUninit::<Block>::uninit();
ffffffff802038ec: 09 a0                	j	2
ffffffff802038ee: 08 11                	addi	a0, sp, 160
ffffffff802038f0: aa f2                	sd	a0, 352(sp)
ffffffff802038f2: aa f6                	sd	a0, 360(sp)
;         let t = t.as_mut_ptr() as *mut u8;
ffffffff802038f4: 09 a0                	j	2
ffffffff802038f6: 08 11                	addi	a0, sp, 160
ffffffff802038f8: 2a ea                	sd	a0, 272(sp)
;         let x = x.add(i);
ffffffff802038fa: ea 65                	ld	a1, 152(sp)
ffffffff802038fc: 66 76                	ld	a2, 120(sp)
ffffffff802038fe: aa f4                	sd	a0, 104(sp)
ffffffff80203900: 32 85                	add	a0, zero, a2
ffffffff80203902: 97 30 00 00          	auipc	ra, 3
ffffffff80203906: e7 80 00 0d          	jalr	208(ra)
ffffffff8020390a: aa 85                	add	a1, zero, a0
ffffffff8020390c: 2a ee                	sd	a0, 280(sp)
ffffffff8020390e: ae f0                	sd	a1, 96(sp)
ffffffff80203910: 09 a0                	j	2
;         let y = y.add(i);
ffffffff80203912: ea 65                	ld	a1, 152(sp)
ffffffff80203914: 0a 65                	ld	a0, 128(sp)
ffffffff80203916: 97 30 00 00          	auipc	ra, 3
ffffffff8020391a: e7 80 c0 0b          	jalr	188(ra)
ffffffff8020391e: aa 85                	add	a1, zero, a0
ffffffff80203920: 2a f2                	sd	a0, 288(sp)
ffffffff80203922: ae ec                	sd	a1, 88(sp)
ffffffff80203924: 09 a0                	j	2
;         copy_nonoverlapping(x, t, block_size);
ffffffff80203926: 06 75                	ld	a0, 96(sp)
ffffffff80203928: a6 75                	ld	a1, 104(sp)
ffffffff8020392a: 46 76                	ld	a2, 112(sp)
ffffffff8020392c: 97 30 00 00          	auipc	ra, 3
ffffffff80203930: e7 80 e0 53          	jalr	1342(ra)
ffffffff80203934: 09 a0                	j	2
;         copy_nonoverlapping(y, x, block_size);
ffffffff80203936: 66 65                	ld	a0, 88(sp)
ffffffff80203938: 86 75                	ld	a1, 96(sp)
ffffffff8020393a: 46 76                	ld	a2, 112(sp)
ffffffff8020393c: 97 30 00 00          	auipc	ra, 3
ffffffff80203940: e7 80 e0 52          	jalr	1326(ra)
ffffffff80203944: 09 a0                	j	2
;         copy_nonoverlapping(t, y, block_size);
ffffffff80203946: 26 75                	ld	a0, 104(sp)
ffffffff80203948: e6 65                	ld	a1, 88(sp)
ffffffff8020394a: 46 76                	ld	a2, 112(sp)
ffffffff8020394c: 97 30 00 00          	auipc	ra, 3
ffffffff80203950: e7 80 e0 51          	jalr	1310(ra)
ffffffff80203954: 09 a0                	j	2
;         i += block_size;
ffffffff80203956: 6a 65                	ld	a0, 152(sp)
ffffffff80203958: c6 75                	ld	a1, 112(sp)
ffffffff8020395a: 2e 95                	add	a0, a0, a1
ffffffff8020395c: 2a ed                	sd	a0, 152(sp)
;     while i + block_size <= len {
ffffffff8020395e: 9d bf                	j	-138
;     if i < len {
ffffffff80203960: bd a8                	j	126
;         let mut t = mem::MaybeUninit::<UnalignedBlock>::uninit();
ffffffff80203962: 09 a0                	j	2
;         let rem = len - i;
ffffffff80203964: 6a 65                	ld	a0, 152(sp)
ffffffff80203966: aa 65                	ld	a1, 136(sp)
ffffffff80203968: 33 85 a5 40          	sub	a0, a1, a0
ffffffff8020396c: 2a f6                	sd	a0, 296(sp)
ffffffff8020396e: 90 09                	addi	a2, sp, 208
ffffffff80203970: b2 ea                	sd	a2, 336(sp)
ffffffff80203972: b2 ee                	sd	a2, 344(sp)
;         let t = t.as_mut_ptr() as *mut u8;
ffffffff80203974: aa e8                	sd	a0, 80(sp)
ffffffff80203976: b2 e4                	sd	a2, 72(sp)
ffffffff80203978: 09 a0                	j	2
ffffffff8020397a: 26 65                	ld	a0, 72(sp)
ffffffff8020397c: a6 65                	ld	a1, 72(sp)
ffffffff8020397e: 2e fa                	sd	a1, 304(sp)
;         let x = x.add(i);
ffffffff80203980: ea 65                	ld	a1, 152(sp)
ffffffff80203982: 66 76                	ld	a2, 120(sp)
ffffffff80203984: aa e0                	sd	a0, 64(sp)
ffffffff80203986: 32 85                	add	a0, zero, a2
ffffffff80203988: 97 30 00 00          	auipc	ra, 3
ffffffff8020398c: e7 80 a0 04          	jalr	74(ra)
ffffffff80203990: aa 85                	add	a1, zero, a0
ffffffff80203992: 2a fe                	sd	a0, 312(sp)
ffffffff80203994: 2e fc                	sd	a1, 56(sp)
ffffffff80203996: 09 a0                	j	2
;         let y = y.add(i);
ffffffff80203998: ea 65                	ld	a1, 152(sp)
ffffffff8020399a: 0a 65                	ld	a0, 128(sp)
ffffffff8020399c: 97 30 00 00          	auipc	ra, 3
ffffffff802039a0: e7 80 60 03          	jalr	54(ra)
ffffffff802039a4: aa 85                	add	a1, zero, a0
ffffffff802039a6: aa e2                	sd	a0, 320(sp)
ffffffff802039a8: 2e f8                	sd	a1, 48(sp)
ffffffff802039aa: 09 a0                	j	2
;         copy_nonoverlapping(x, t, rem);
ffffffff802039ac: 62 75                	ld	a0, 56(sp)
ffffffff802039ae: 86 65                	ld	a1, 64(sp)
ffffffff802039b0: 46 66                	ld	a2, 80(sp)
ffffffff802039b2: 97 30 00 00          	auipc	ra, 3
ffffffff802039b6: e7 80 80 4b          	jalr	1208(ra)
ffffffff802039ba: 09 a0                	j	2
;         copy_nonoverlapping(y, x, rem);
ffffffff802039bc: 42 75                	ld	a0, 48(sp)
ffffffff802039be: e2 75                	ld	a1, 56(sp)
ffffffff802039c0: 46 66                	ld	a2, 80(sp)
ffffffff802039c2: 97 30 00 00          	auipc	ra, 3
ffffffff802039c6: e7 80 80 4a          	jalr	1192(ra)
ffffffff802039ca: 09 a0                	j	2
;         copy_nonoverlapping(t, y, rem);
ffffffff802039cc: 06 65                	ld	a0, 64(sp)
ffffffff802039ce: c2 75                	ld	a1, 48(sp)
ffffffff802039d0: 46 66                	ld	a2, 80(sp)
ffffffff802039d2: 97 30 00 00          	auipc	ra, 3
ffffffff802039d6: e7 80 80 49          	jalr	1176(ra)
ffffffff802039da: 09 a0                	j	2
;     if i < len {
ffffffff802039dc: 09 a0                	j	2
; }
ffffffff802039de: 13 01 04 e8          	addi	sp, s0, -384
ffffffff802039e2: 56 74                	ld	s0, 368(sp)
ffffffff802039e4: f6 70                	ld	ra, 376(sp)
ffffffff802039e6: 19 61                	addi	sp, sp, 384
ffffffff802039e8: 82 80                	ret

ffffffff802039ea _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h1aca96e835e2cbf0E:
;         t
ffffffff802039ea: 90 65                	ld	a2, 8(a1)
ffffffff802039ec: 10 e5                	sd	a2, 8(a0)
ffffffff802039ee: 8c 61                	ld	a1, 0(a1)
ffffffff802039f0: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff802039f2: 82 80                	ret

ffffffff802039f4 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h10a6fc31ba6b554aE:
;     fn into(self) -> U {
ffffffff802039f4: 01 11                	addi	sp, sp, -32
;         U::from(self)
ffffffff802039f6: 06 ec                	sd	ra, 24(sp)
ffffffff802039f8: 90 65                	ld	a2, 8(a1)
ffffffff802039fa: 32 e8                	sd	a2, 16(sp)
ffffffff802039fc: 8c 61                	ld	a1, 0(a1)
ffffffff802039fe: 2e e4                	sd	a1, 8(sp)
ffffffff80203a00: 2c 00                	addi	a1, sp, 8
ffffffff80203a02: 97 00 00 00          	auipc	ra, 0
ffffffff80203a06: e7 80 80 fe          	jalr	-24(ra)
ffffffff80203a0a: 09 a0                	j	2
;     }
ffffffff80203a0c: e2 60                	ld	ra, 24(sp)
ffffffff80203a0e: 05 61                	addi	sp, sp, 32
ffffffff80203a10: 82 80                	ret

ffffffff80203a12 _ZN113_$LT$os..memory..range..Range$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ops..range..Range$LT$U$GT$$GT$$GT$4from17h1691e20a36a6a783E:
;     fn from(range: core::ops::Range<U>) -> Self {
ffffffff80203a12: 5d 71                	addi	sp, sp, -80
;             start: range.start.into(),
ffffffff80203a14: 86 e4                	sd	ra, 72(sp)
ffffffff80203a16: 90 61                	ld	a2, 0(a1)
ffffffff80203a18: 32 f0                	sd	a2, 32(sp)
ffffffff80203a1a: 2a e8                	sd	a0, 16(sp)
ffffffff80203a1c: 32 85                	add	a0, zero, a2
ffffffff80203a1e: 2e e4                	sd	a1, 8(sp)
ffffffff80203a20: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80203a24: e7 80 a0 90          	jalr	-1782(ra)
ffffffff80203a28: 2a fc                	sd	a0, 56(sp)
ffffffff80203a2a: 2a ec                	sd	a0, 24(sp)
ffffffff80203a2c: 09 a0                	j	2
;             end: range.end.into(),
ffffffff80203a2e: 22 65                	ld	a0, 8(sp)
ffffffff80203a30: 0c 65                	ld	a1, 8(a0)
ffffffff80203a32: 2e f8                	sd	a1, 48(sp)
ffffffff80203a34: 2e 85                	add	a0, zero, a1
ffffffff80203a36: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80203a3a: e7 80 40 8f          	jalr	-1804(ra)
ffffffff80203a3e: aa e0                	sd	a0, 64(sp)
ffffffff80203a40: 2a f4                	sd	a0, 40(sp)
ffffffff80203a42: 09 a0                	j	2
;         Self {
ffffffff80203a44: 62 65                	ld	a0, 24(sp)
ffffffff80203a46: c2 65                	ld	a1, 16(sp)
ffffffff80203a48: 88 e1                	sd	a0, 0(a1)
ffffffff80203a4a: 22 75                	ld	a0, 40(sp)
ffffffff80203a4c: 88 e5                	sd	a0, 8(a1)
;     }
ffffffff80203a4e: a6 60                	ld	ra, 72(sp)
ffffffff80203a50: 61 61                	addi	sp, sp, 80
ffffffff80203a52: 82 80                	ret

ffffffff80203a54 _ZN2os6memory5range14Range$LT$T$GT$3len17hb43cb6684a60056fE:
;     pub fn len(&self) -> usize {
ffffffff80203a54: 39 71                	addi	sp, sp, -64
ffffffff80203a56: 06 fc                	sd	ra, 56(sp)
ffffffff80203a58: 2a f8                	sd	a0, 48(sp)
;         self.end.into() - self.start.into()
ffffffff80203a5a: 0c 65                	ld	a1, 8(a0)
ffffffff80203a5c: 2e f0                	sd	a1, 32(sp)
ffffffff80203a5e: 2a ec                	sd	a0, 24(sp)
ffffffff80203a60: 2e 85                	add	a0, zero, a1
ffffffff80203a62: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80203a66: e7 80 80 8e          	jalr	-1816(ra)
ffffffff80203a6a: 2a e8                	sd	a0, 16(sp)
ffffffff80203a6c: 09 a0                	j	2
ffffffff80203a6e: 62 65                	ld	a0, 24(sp)
ffffffff80203a70: 0c 61                	ld	a1, 0(a0)
ffffffff80203a72: 2e f4                	sd	a1, 40(sp)
ffffffff80203a74: 2e 85                	add	a0, zero, a1
ffffffff80203a76: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80203a7a: e7 80 40 8d          	jalr	-1836(ra)
ffffffff80203a7e: 2a e4                	sd	a0, 8(sp)
ffffffff80203a80: 09 a0                	j	2
ffffffff80203a82: 42 65                	ld	a0, 16(sp)
ffffffff80203a84: a2 65                	ld	a1, 8(sp)
ffffffff80203a86: 33 06 b5 40          	sub	a2, a0, a1
ffffffff80203a8a: 32 e0                	sd	a2, 0(sp)
ffffffff80203a8c: 63 67 c5 00          	bltu	a0, a2, 14
ffffffff80203a90: 09 a0                	j	2
;     }
ffffffff80203a92: 02 65                	ld	a0, 0(sp)
ffffffff80203a94: e2 70                	ld	ra, 56(sp)
ffffffff80203a96: 21 61                	addi	sp, sp, 64
ffffffff80203a98: 82 80                	ret

ffffffff80203a9a .LBB3_5:
;         self.end.into() - self.start.into()
ffffffff80203a9a: 17 a5 00 00          	auipc	a0, 10
ffffffff80203a9e: 13 05 65 31          	addi	a0, a0, 790

ffffffff80203aa2 .LBB3_6:
ffffffff80203aa2: 17 a6 00 00          	auipc	a2, 10
ffffffff80203aa6: 13 06 66 2f          	addi	a2, a2, 758
ffffffff80203aaa: 93 05 10 02          	addi	a1, zero, 33
ffffffff80203aae: 97 70 00 00          	auipc	ra, 7
ffffffff80203ab2: e7 80 a0 88          	jalr	-1910(ra)
ffffffff80203ab6: 00 00                	unimp	

ffffffff80203ab8 _ZN4core3fmt5Write10write_char17ha070ccebcb8f74dbE:
;     fn write_char(&mut self, c: char) -> Result {
ffffffff80203ab8: 5d 71                	addi	sp, sp, -80
ffffffff80203aba: 86 e4                	sd	ra, 72(sp)
ffffffff80203abc: 2e 86                	add	a2, zero, a1
ffffffff80203abe: 2a fc                	sd	a0, 56(sp)
ffffffff80203ac0: ae c2                	sw	a1, 68(sp)
ffffffff80203ac2: 81 46                	mv	a3, zero
;         self.write_str(c.encode_utf8(&mut [0; 4]))
ffffffff80203ac4: 36 da                	sw	a3, 52(sp)
ffffffff80203ac6: 54 18                	addi	a3, sp, 52
ffffffff80203ac8: 11 47                	addi	a4, zero, 4
ffffffff80203aca: 2a f4                	sd	a0, 40(sp)
ffffffff80203acc: 2e 85                	add	a0, zero, a1
ffffffff80203ace: b6 85                	add	a1, zero, a3
ffffffff80203ad0: 32 f0                	sd	a2, 32(sp)
ffffffff80203ad2: 3a 86                	add	a2, zero, a4
ffffffff80203ad4: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80203ad8: e7 80 60 0b          	jalr	182(ra)
ffffffff80203adc: 2a ec                	sd	a0, 24(sp)
ffffffff80203ade: 2e e8                	sd	a1, 16(sp)
ffffffff80203ae0: 09 a0                	j	2
ffffffff80203ae2: 22 75                	ld	a0, 40(sp)
ffffffff80203ae4: e2 65                	ld	a1, 24(sp)
ffffffff80203ae6: 42 66                	ld	a2, 16(sp)
ffffffff80203ae8: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80203aec: e7 80 00 f3          	jalr	-208(ra)
ffffffff80203af0: 2a e4                	sd	a0, 8(sp)
ffffffff80203af2: 09 a0                	j	2
;     }
ffffffff80203af4: 22 65                	ld	a0, 8(sp)
ffffffff80203af6: a6 60                	ld	ra, 72(sp)
ffffffff80203af8: 61 61                	addi	sp, sp, 80
ffffffff80203afa: 82 80                	ret

ffffffff80203afc _ZN4core3fmt5Write9write_fmt17he36600b4942d07feE:
;     fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
ffffffff80203afc: 5d 71                	addi	sp, sp, -80
ffffffff80203afe: 86 e4                	sd	ra, 72(sp)
ffffffff80203b00: 2a e8                	sd	a0, 16(sp)
;         write(&mut self, args)
ffffffff80203b02: 88 61                	ld	a0, 0(a1)
ffffffff80203b04: 2a ec                	sd	a0, 24(sp)
ffffffff80203b06: 88 65                	ld	a0, 8(a1)
ffffffff80203b08: 2a f0                	sd	a0, 32(sp)
ffffffff80203b0a: 88 69                	ld	a0, 16(a1)
ffffffff80203b0c: 2a f4                	sd	a0, 40(sp)
ffffffff80203b0e: 88 6d                	ld	a0, 24(a1)
ffffffff80203b10: 2a f8                	sd	a0, 48(sp)
ffffffff80203b12: 88 71                	ld	a0, 32(a1)
ffffffff80203b14: 2a fc                	sd	a0, 56(sp)
ffffffff80203b16: 88 75                	ld	a0, 40(a1)
ffffffff80203b18: aa e0                	sd	a0, 64(sp)

ffffffff80203b1a .LBB1_2:
ffffffff80203b1a: 97 a5 00 00          	auipc	a1, 10
ffffffff80203b1e: 93 85 e5 2b          	addi	a1, a1, 702
ffffffff80203b22: 08 08                	addi	a0, sp, 16
ffffffff80203b24: 30 08                	addi	a2, sp, 24
ffffffff80203b26: 97 70 00 00          	auipc	ra, 7
ffffffff80203b2a: e7 80 a0 10          	jalr	266(ra)
ffffffff80203b2e: 2a e4                	sd	a0, 8(sp)
ffffffff80203b30: 09 a0                	j	2
;     }
ffffffff80203b32: 22 65                	ld	a0, 8(sp)
ffffffff80203b34: a6 60                	ld	ra, 72(sp)
ffffffff80203b36: 61 61                	addi	sp, sp, 80
ffffffff80203b38: 82 80                	ret

ffffffff80203b3a _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h86b67d208ebb53f1E:
;     fn write_char(&mut self, c: char) -> Result {
ffffffff80203b3a: 79 71                	addi	sp, sp, -48
ffffffff80203b3c: 06 f4                	sd	ra, 40(sp)
ffffffff80203b3e: 2e 86                	add	a2, zero, a1
ffffffff80203b40: 2a ec                	sd	a0, 24(sp)
ffffffff80203b42: 2e d2                	sw	a1, 36(sp)
;         (**self).write_char(c)
ffffffff80203b44: 08 61                	ld	a0, 0(a0)
ffffffff80203b46: 32 e8                	sd	a2, 16(sp)
ffffffff80203b48: 97 00 00 00          	auipc	ra, 0
ffffffff80203b4c: e7 80 00 f7          	jalr	-144(ra)
ffffffff80203b50: 2a e4                	sd	a0, 8(sp)
ffffffff80203b52: 09 a0                	j	2
;     }
ffffffff80203b54: 22 65                	ld	a0, 8(sp)
ffffffff80203b56: a2 70                	ld	ra, 40(sp)
ffffffff80203b58: 45 61                	addi	sp, sp, 48
ffffffff80203b5a: 82 80                	ret

ffffffff80203b5c _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hc8375245de81ab5aE:
;     fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
ffffffff80203b5c: 5d 71                	addi	sp, sp, -80
ffffffff80203b5e: 86 e4                	sd	ra, 72(sp)
ffffffff80203b60: aa e0                	sd	a0, 64(sp)
;         (**self).write_fmt(args)
ffffffff80203b62: 08 61                	ld	a0, 0(a0)
ffffffff80203b64: 90 75                	ld	a2, 40(a1)
ffffffff80203b66: 32 fc                	sd	a2, 56(sp)
ffffffff80203b68: 90 71                	ld	a2, 32(a1)
ffffffff80203b6a: 32 f8                	sd	a2, 48(sp)
ffffffff80203b6c: 90 6d                	ld	a2, 24(a1)
ffffffff80203b6e: 32 f4                	sd	a2, 40(sp)
ffffffff80203b70: 90 69                	ld	a2, 16(a1)
ffffffff80203b72: 32 f0                	sd	a2, 32(sp)
ffffffff80203b74: 90 65                	ld	a2, 8(a1)
ffffffff80203b76: 32 ec                	sd	a2, 24(sp)
ffffffff80203b78: 8c 61                	ld	a1, 0(a1)
ffffffff80203b7a: 2e e8                	sd	a1, 16(sp)
ffffffff80203b7c: 0c 08                	addi	a1, sp, 16
ffffffff80203b7e: 97 00 00 00          	auipc	ra, 0
ffffffff80203b82: e7 80 e0 f7          	jalr	-130(ra)
ffffffff80203b86: 2a e4                	sd	a0, 8(sp)
ffffffff80203b88: 09 a0                	j	2
;     }
ffffffff80203b8a: 22 65                	ld	a0, 8(sp)
ffffffff80203b8c: a6 60                	ld	ra, 72(sp)
ffffffff80203b8e: 61 61                	addi	sp, sp, 80
ffffffff80203b90: 82 80                	ret

ffffffff80203b92 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hec78b41dbe7fddb9E:
;     fn write_str(&mut self, s: &str) -> Result {
ffffffff80203b92: 79 71                	addi	sp, sp, -48
ffffffff80203b94: 06 f4                	sd	ra, 40(sp)
ffffffff80203b96: 2a e8                	sd	a0, 16(sp)
ffffffff80203b98: 2e ec                	sd	a1, 24(sp)
ffffffff80203b9a: 32 f0                	sd	a2, 32(sp)
;         (**self).write_str(s)
ffffffff80203b9c: 08 61                	ld	a0, 0(a0)
ffffffff80203b9e: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80203ba2: e7 80 a0 e7          	jalr	-390(ra)
ffffffff80203ba6: 2a e4                	sd	a0, 8(sp)
ffffffff80203ba8: 09 a0                	j	2
;     }
ffffffff80203baa: 22 65                	ld	a0, 8(sp)
ffffffff80203bac: a2 70                	ld	ra, 40(sp)
ffffffff80203bae: 45 61                	addi	sp, sp, 48
ffffffff80203bb0: 82 80                	ret

ffffffff80203bb2 _ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hed4f5a56f501fcc5E:
;     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
ffffffff80203bb2: 01 11                	addi	sp, sp, -32
ffffffff80203bb4: 2a ec                	sd	a0, 24(sp)
;         Unique { pointer: ptr as _, _marker: PhantomData }
ffffffff80203bb6: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80203bb8: 05 61                	addi	sp, sp, 32
ffffffff80203bba: 82 80                	ret

ffffffff80203bbc _ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h218c9e8c2853739cE:
;     pub const fn cast<U>(self) -> Unique<U> {
ffffffff80203bbc: 01 11                	addi	sp, sp, -32
ffffffff80203bbe: 06 ec                	sd	ra, 24(sp)
ffffffff80203bc0: 2a e8                	sd	a0, 16(sp)
;         unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
ffffffff80203bc2: 97 00 00 00          	auipc	ra, 0
ffffffff80203bc6: e7 80 20 05          	jalr	82(ra)
ffffffff80203bca: 2a e4                	sd	a0, 8(sp)
ffffffff80203bcc: 09 a0                	j	2
ffffffff80203bce: 22 65                	ld	a0, 8(sp)
ffffffff80203bd0: 97 30 00 00          	auipc	ra, 3
ffffffff80203bd4: e7 80 e0 16          	jalr	366(ra)
ffffffff80203bd8: 2a e0                	sd	a0, 0(sp)
ffffffff80203bda: 09 a0                	j	2
;     }
ffffffff80203bdc: 02 65                	ld	a0, 0(sp)
ffffffff80203bde: e2 60                	ld	ra, 24(sp)
ffffffff80203be0: 05 61                	addi	sp, sp, 32
ffffffff80203be2: 82 80                	ret

ffffffff80203be4 _ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h5cb20ec085f180b4E:
;     pub const fn cast<U>(self) -> Unique<U> {
ffffffff80203be4: 01 11                	addi	sp, sp, -32
ffffffff80203be6: 06 ec                	sd	ra, 24(sp)
ffffffff80203be8: 2a e8                	sd	a0, 16(sp)
;         unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
ffffffff80203bea: 97 00 00 00          	auipc	ra, 0
ffffffff80203bee: e7 80 20 02          	jalr	34(ra)
ffffffff80203bf2: 2a e4                	sd	a0, 8(sp)
ffffffff80203bf4: 09 a0                	j	2
ffffffff80203bf6: 22 65                	ld	a0, 8(sp)
ffffffff80203bf8: 97 30 00 00          	auipc	ra, 3
ffffffff80203bfc: e7 80 60 14          	jalr	326(ra)
ffffffff80203c00: 2a e0                	sd	a0, 0(sp)
ffffffff80203c02: 09 a0                	j	2
;     }
ffffffff80203c04: 02 65                	ld	a0, 0(sp)
ffffffff80203c06: e2 60                	ld	ra, 24(sp)
ffffffff80203c08: 05 61                	addi	sp, sp, 32
ffffffff80203c0a: 82 80                	ret

ffffffff80203c0c _ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h1671abaaa6710ac4E:
;     pub const fn as_ptr(self) -> *mut T {
ffffffff80203c0c: 41 11                	addi	sp, sp, -16
ffffffff80203c0e: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80203c10: 41 01                	addi	sp, sp, 16
ffffffff80203c12: 82 80                	ret

ffffffff80203c14 _ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h1731adc8bee6a5b7E:
;     pub const fn as_ptr(self) -> *mut T {
ffffffff80203c14: 41 11                	addi	sp, sp, -16
ffffffff80203c16: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80203c18: 41 01                	addi	sp, sp, 16
ffffffff80203c1a: 82 80                	ret

ffffffff80203c1c _ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17h7976b178624c58b5E:
;     pub unsafe fn as_ref(&self) -> &T {
ffffffff80203c1c: 01 11                	addi	sp, sp, -32
ffffffff80203c1e: 06 ec                	sd	ra, 24(sp)
ffffffff80203c20: 2a e8                	sd	a0, 16(sp)
;         &*self.as_ptr()
ffffffff80203c22: 08 61                	ld	a0, 0(a0)
ffffffff80203c24: 97 00 00 00          	auipc	ra, 0
ffffffff80203c28: e7 80 80 fe          	jalr	-24(ra)
ffffffff80203c2c: 2a e4                	sd	a0, 8(sp)
ffffffff80203c2e: 09 a0                	j	2
;     }
ffffffff80203c30: 22 65                	ld	a0, 8(sp)
ffffffff80203c32: e2 60                	ld	ra, 24(sp)
ffffffff80203c34: 05 61                	addi	sp, sp, 32
ffffffff80203c36: 82 80                	ret

ffffffff80203c38 _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h750d1c9a462a202fE:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
ffffffff80203c38: 39 71                	addi	sp, sp, -64
ffffffff80203c3a: 06 fc                	sd	ra, 56(sp)
ffffffff80203c3c: 2a f4                	sd	a0, 40(sp)
ffffffff80203c3e: 2e f8                	sd	a1, 48(sp)
;                 if f.debug_lower_hex() {
ffffffff80203c40: 2a ec                	sd	a0, 24(sp)
ffffffff80203c42: 2e 85                	add	a0, zero, a1
ffffffff80203c44: 2e e8                	sd	a1, 16(sp)
ffffffff80203c46: 97 70 00 00          	auipc	ra, 7
ffffffff80203c4a: e7 80 00 6b          	jalr	1712(ra)
ffffffff80203c4e: 2a e4                	sd	a0, 8(sp)
ffffffff80203c50: 09 a0                	j	2
ffffffff80203c52: 22 65                	ld	a0, 8(sp)
ffffffff80203c54: 09 e9                	bnez	a0, 18
ffffffff80203c56: 09 a0                	j	2
;                 } else if f.debug_upper_hex() {
ffffffff80203c58: 42 65                	ld	a0, 16(sp)
ffffffff80203c5a: 97 70 00 00          	auipc	ra, 7
ffffffff80203c5e: e7 80 60 6a          	jalr	1702(ra)
ffffffff80203c62: 2a e0                	sd	a0, 0(sp)
ffffffff80203c64: 19 a8                	j	22
;                     fmt::LowerHex::fmt(self, f)
ffffffff80203c66: 62 65                	ld	a0, 24(sp)
ffffffff80203c68: c2 65                	ld	a1, 16(sp)
ffffffff80203c6a: 97 80 00 00          	auipc	ra, 8
ffffffff80203c6e: e7 80 c0 08          	jalr	140(ra)
ffffffff80203c72: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff80203c76: 09 a0                	j	2
;                 if f.debug_lower_hex() {
ffffffff80203c78: 0d a8                	j	50
;                 } else if f.debug_upper_hex() {
ffffffff80203c7a: 02 65                	ld	a0, 0(sp)
ffffffff80203c7c: 19 e9                	bnez	a0, 22
ffffffff80203c7e: 09 a0                	j	2
;                     fmt::Display::fmt(self, f)
ffffffff80203c80: 62 65                	ld	a0, 24(sp)
ffffffff80203c82: c2 65                	ld	a1, 16(sp)
ffffffff80203c84: 97 80 00 00          	auipc	ra, 8
ffffffff80203c88: e7 80 40 44          	jalr	1092(ra)
ffffffff80203c8c: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff80203c90: 19 a8                	j	22
;                     fmt::UpperHex::fmt(self, f)
ffffffff80203c92: 62 65                	ld	a0, 24(sp)
ffffffff80203c94: c2 65                	ld	a1, 16(sp)
ffffffff80203c96: 97 80 00 00          	auipc	ra, 8
ffffffff80203c9a: e7 80 00 0f          	jalr	240(ra)
ffffffff80203c9e: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff80203ca2: 09 a0                	j	2
;                 } else if f.debug_upper_hex() {
ffffffff80203ca4: 11 a0                	j	4
ffffffff80203ca6: 09 a0                	j	2
;                 if f.debug_lower_hex() {
ffffffff80203ca8: 09 a0                	j	2
;             }
ffffffff80203caa: 03 45 71 02          	lbu	a0, 39(sp)
ffffffff80203cae: e2 70                	ld	ra, 56(sp)
ffffffff80203cb0: 21 61                	addi	sp, sp, 64
ffffffff80203cb2: 82 80                	ret

ffffffff80203cb4 _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h9a33e4ebdd7d1b3dE:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
ffffffff80203cb4: 39 71                	addi	sp, sp, -64
ffffffff80203cb6: 06 fc                	sd	ra, 56(sp)
ffffffff80203cb8: 2a f4                	sd	a0, 40(sp)
ffffffff80203cba: 2e f8                	sd	a1, 48(sp)
;                 if f.debug_lower_hex() {
ffffffff80203cbc: 2a ec                	sd	a0, 24(sp)
ffffffff80203cbe: 2e 85                	add	a0, zero, a1
ffffffff80203cc0: 2e e8                	sd	a1, 16(sp)
ffffffff80203cc2: 97 70 00 00          	auipc	ra, 7
ffffffff80203cc6: e7 80 40 63          	jalr	1588(ra)
ffffffff80203cca: 2a e4                	sd	a0, 8(sp)
ffffffff80203ccc: 09 a0                	j	2
ffffffff80203cce: 22 65                	ld	a0, 8(sp)
ffffffff80203cd0: 09 e9                	bnez	a0, 18
ffffffff80203cd2: 09 a0                	j	2
;                 } else if f.debug_upper_hex() {
ffffffff80203cd4: 42 65                	ld	a0, 16(sp)
ffffffff80203cd6: 97 70 00 00          	auipc	ra, 7
ffffffff80203cda: e7 80 a0 62          	jalr	1578(ra)
ffffffff80203cde: 2a e0                	sd	a0, 0(sp)
ffffffff80203ce0: 19 a8                	j	22
;                     fmt::LowerHex::fmt(self, f)
ffffffff80203ce2: 62 65                	ld	a0, 24(sp)
ffffffff80203ce4: c2 65                	ld	a1, 16(sp)
ffffffff80203ce6: 97 80 00 00          	auipc	ra, 8
ffffffff80203cea: e7 80 00 13          	jalr	304(ra)
ffffffff80203cee: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff80203cf2: 09 a0                	j	2
;                 if f.debug_lower_hex() {
ffffffff80203cf4: 0d a8                	j	50
;                 } else if f.debug_upper_hex() {
ffffffff80203cf6: 02 65                	ld	a0, 0(sp)
ffffffff80203cf8: 19 e9                	bnez	a0, 22
ffffffff80203cfa: 09 a0                	j	2
;                     fmt::Display::fmt(self, f)
ffffffff80203cfc: 62 65                	ld	a0, 24(sp)
ffffffff80203cfe: c2 65                	ld	a1, 16(sp)
ffffffff80203d00: 97 80 00 00          	auipc	ra, 8
ffffffff80203d04: e7 80 80 3e          	jalr	1000(ra)
ffffffff80203d08: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff80203d0c: 19 a8                	j	22
;                     fmt::UpperHex::fmt(self, f)
ffffffff80203d0e: 62 65                	ld	a0, 24(sp)
ffffffff80203d10: c2 65                	ld	a1, 16(sp)
ffffffff80203d12: 97 80 00 00          	auipc	ra, 8
ffffffff80203d16: e7 80 40 18          	jalr	388(ra)
ffffffff80203d1a: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff80203d1e: 09 a0                	j	2
;                 } else if f.debug_upper_hex() {
ffffffff80203d20: 11 a0                	j	4
ffffffff80203d22: 09 a0                	j	2
;                 if f.debug_lower_hex() {
ffffffff80203d24: 09 a0                	j	2
;             }
ffffffff80203d26: 03 45 71 02          	lbu	a0, 39(sp)
ffffffff80203d2a: e2 70                	ld	ra, 56(sp)
ffffffff80203d2c: 21 61                	addi	sp, sp, 64
ffffffff80203d2e: 82 80                	ret

ffffffff80203d30 _ZN4core10intrinsics11write_bytes17h31b0aece83a00d7eE:
; pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
ffffffff80203d30: 79 71                	addi	sp, sp, -48
ffffffff80203d32: 06 f4                	sd	ra, 40(sp)
ffffffff80203d34: ae 86                	add	a3, zero, a1
ffffffff80203d36: 2a e8                	sd	a0, 16(sp)
ffffffff80203d38: a3 0f b1 00          	sb	a1, 31(sp)
ffffffff80203d3c: 32 f0                	sd	a2, 32(sp)
;     write_bytes(dst, val, count)
ffffffff80203d3e: 0e 06                	slli	a2, a2, 3
ffffffff80203d40: 36 e4                	sd	a3, 8(sp)
ffffffff80203d42: 97 80 00 00          	auipc	ra, 8
ffffffff80203d46: e7 80 40 60          	jalr	1540(ra)
ffffffff80203d4a: 09 a0                	j	2
; }
ffffffff80203d4c: a2 70                	ld	ra, 40(sp)
ffffffff80203d4e: 45 61                	addi	sp, sp, 48
ffffffff80203d50: 82 80                	ret

ffffffff80203d52 _ZN4core10intrinsics19copy_nonoverlapping17hcfed0a4198432462E:
; pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
ffffffff80203d52: 79 71                	addi	sp, sp, -48
ffffffff80203d54: 06 f4                	sd	ra, 40(sp)
ffffffff80203d56: 2a e8                	sd	a0, 16(sp)
ffffffff80203d58: 2e ec                	sd	a1, 24(sp)
ffffffff80203d5a: 32 f0                	sd	a2, 32(sp)
;     copy_nonoverlapping(src, dst, count)
ffffffff80203d5c: 0a 06                	slli	a2, a2, 2
ffffffff80203d5e: 2a e4                	sd	a0, 8(sp)
ffffffff80203d60: 2e 85                	add	a0, zero, a1
ffffffff80203d62: a2 65                	ld	a1, 8(sp)
ffffffff80203d64: 97 80 00 00          	auipc	ra, 8
ffffffff80203d68: e7 80 c0 5c          	jalr	1484(ra)
ffffffff80203d6c: 09 a0                	j	2
; }
ffffffff80203d6e: a2 70                	ld	ra, 40(sp)
ffffffff80203d70: 45 61                	addi	sp, sp, 48
ffffffff80203d72: 82 80                	ret

ffffffff80203d74 _ZN2os6memory5frame9allocator23FrameAllocator$LT$T$GT$3new17h47efbdb37872a276E:
;     pub fn new(range: impl Into<Range<PhysicalPageNumber>> + Copy) -> Self {
ffffffff80203d74: 19 71                	addi	sp, sp, -128
;             start_ppn: range.into().start,
ffffffff80203d76: 86 fc                	sd	ra, 120(sp)
ffffffff80203d78: 90 65                	ld	a2, 8(a1)
ffffffff80203d7a: 32 fc                	sd	a2, 56(sp)
ffffffff80203d7c: 90 61                	ld	a2, 0(a1)
ffffffff80203d7e: 32 f8                	sd	a2, 48(sp)
ffffffff80203d80: 10 10                	addi	a2, sp, 32
ffffffff80203d82: 14 18                	addi	a3, sp, 48
ffffffff80203d84: 2a e8                	sd	a0, 16(sp)
ffffffff80203d86: 32 85                	add	a0, zero, a2
ffffffff80203d88: 2e e4                	sd	a1, 8(sp)
ffffffff80203d8a: b6 85                	add	a1, zero, a3
ffffffff80203d8c: 97 00 00 00          	auipc	ra, 0
ffffffff80203d90: e7 80 80 c6          	jalr	-920(ra)
ffffffff80203d94: 09 a0                	j	2
ffffffff80203d96: 02 75                	ld	a0, 32(sp)
ffffffff80203d98: 2a ec                	sd	a0, 24(sp)
;             allocator: T::new(range.into().len()),
ffffffff80203d9a: 22 65                	ld	a0, 8(sp)
ffffffff80203d9c: 0c 61                	ld	a1, 0(a0)
ffffffff80203d9e: ae f4                	sd	a1, 104(sp)
ffffffff80203da0: 0c 65                	ld	a1, 8(a0)
ffffffff80203da2: ae f8                	sd	a1, 112(sp)
ffffffff80203da4: a8 08                	addi	a0, sp, 88
ffffffff80203da6: ac 10                	addi	a1, sp, 104
ffffffff80203da8: 97 00 00 00          	auipc	ra, 0
ffffffff80203dac: e7 80 c0 c4          	jalr	-948(ra)
ffffffff80203db0: 09 a0                	j	2
ffffffff80203db2: a8 08                	addi	a0, sp, 88
ffffffff80203db4: 97 00 00 00          	auipc	ra, 0
ffffffff80203db8: e7 80 00 ca          	jalr	-864(ra)
ffffffff80203dbc: 2a e0                	sd	a0, 0(sp)
ffffffff80203dbe: 09 a0                	j	2
ffffffff80203dc0: 88 00                	addi	a0, sp, 64
ffffffff80203dc2: 82 65                	ld	a1, 0(sp)
ffffffff80203dc4: 97 20 00 00          	auipc	ra, 2
ffffffff80203dc8: e7 80 60 6f          	jalr	1782(ra)
ffffffff80203dcc: 09 a0                	j	2
;         FrameAllocator {
ffffffff80203dce: 62 65                	ld	a0, 24(sp)
ffffffff80203dd0: c2 65                	ld	a1, 16(sp)
ffffffff80203dd2: 88 e1                	sd	a0, 0(a1)
ffffffff80203dd4: 06 65                	ld	a0, 64(sp)
ffffffff80203dd6: 88 e5                	sd	a0, 8(a1)
ffffffff80203dd8: 26 65                	ld	a0, 72(sp)
ffffffff80203dda: 88 e9                	sd	a0, 16(a1)
ffffffff80203ddc: 46 65                	ld	a0, 80(sp)
ffffffff80203dde: 88 ed                	sd	a0, 24(a1)
;     }
ffffffff80203de0: e6 70                	ld	ra, 120(sp)
ffffffff80203de2: 09 61                	addi	sp, sp, 128
ffffffff80203de4: 82 80                	ret

ffffffff80203de6 _ZN2os6memory5frame9allocator23FrameAllocator$LT$T$GT$5alloc17h3513312ce7c14072E:
;     pub fn alloc(&mut self) -> MemoryResult<FrameTracker> {
ffffffff80203de6: 5d 71                	addi	sp, sp, -80
ffffffff80203de8: 86 e4                	sd	ra, 72(sp)
ffffffff80203dea: 2e f0                	sd	a1, 32(sp)
;         self.allocator
ffffffff80203dec: a1 05                	addi	a1, a1, 8
ffffffff80203dee: 2a ec                	sd	a0, 24(sp)
ffffffff80203df0: 2e 85                	add	a0, zero, a1
ffffffff80203df2: 97 20 00 00          	auipc	ra, 2
ffffffff80203df6: e7 80 60 71          	jalr	1814(ra)
ffffffff80203dfa: 2a e8                	sd	a0, 16(sp)
ffffffff80203dfc: 2e e4                	sd	a1, 8(sp)
ffffffff80203dfe: 09 a0                	j	2

ffffffff80203e00 .LBB1_4:
ffffffff80203e00: 97 a6 00 00          	auipc	a3, 10
ffffffff80203e04: 93 86 86 00          	addi	a3, a3, 8
ffffffff80203e08: 28 10                	addi	a0, sp, 40
ffffffff80203e0a: 79 47                	addi	a4, zero, 30
ffffffff80203e0c: c2 65                	ld	a1, 16(sp)
ffffffff80203e0e: 22 66                	ld	a2, 8(sp)
ffffffff80203e10: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80203e14: e7 80 a0 94          	jalr	-1718(ra)
ffffffff80203e18: 09 a0                	j	2
ffffffff80203e1a: 08 10                	addi	a0, sp, 32
;             .map(|offset| FrameTracker(self.start_ppn + offset))
ffffffff80203e1c: aa e0                	sd	a0, 64(sp)
ffffffff80203e1e: 2c 10                	addi	a1, sp, 40
;         self.allocator
ffffffff80203e20: 62 66                	ld	a2, 24(sp)
ffffffff80203e22: 2a e0                	sd	a0, 0(sp)
ffffffff80203e24: 32 85                	add	a0, zero, a2
ffffffff80203e26: 02 66                	ld	a2, 0(sp)
ffffffff80203e28: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80203e2c: e7 80 c0 22          	jalr	556(ra)
ffffffff80203e30: 09 a0                	j	2
;     }
ffffffff80203e32: a6 60                	ld	ra, 72(sp)
ffffffff80203e34: 61 61                	addi	sp, sp, 80
ffffffff80203e36: 82 80                	ret

ffffffff80203e38 _ZN2os6memory5frame9allocator23FrameAllocator$LT$T$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h4b1980d3d105c0f9E:
;             .map(|offset| FrameTracker(self.start_ppn + offset))
ffffffff80203e38: 39 71                	addi	sp, sp, -64
ffffffff80203e3a: 06 fc                	sd	ra, 56(sp)
ffffffff80203e3c: 2a f0                	sd	a0, 32(sp)
ffffffff80203e3e: 2e f4                	sd	a1, 40(sp)
ffffffff80203e40: 08 61                	ld	a0, 0(a0)
ffffffff80203e42: 08 61                	ld	a0, 0(a0)
ffffffff80203e44: 2a ec                	sd	a0, 24(sp)
ffffffff80203e46: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80203e4a: e7 80 80 7a          	jalr	1960(ra)
ffffffff80203e4e: 2a f8                	sd	a0, 48(sp)
ffffffff80203e50: 2a e8                	sd	a0, 16(sp)
ffffffff80203e52: 09 a0                	j	2
ffffffff80203e54: 42 65                	ld	a0, 16(sp)
ffffffff80203e56: 2a e4                	sd	a0, 8(sp)
ffffffff80203e58: e2 70                	ld	ra, 56(sp)
ffffffff80203e5a: 21 61                	addi	sp, sp, 64
ffffffff80203e5c: 82 80                	ret

ffffffff80203e5e _ZN2os6memory5frame9allocator23FrameAllocator$LT$T$GT$7dealloc17h744f52c58764c03bE:
;     pub(super) fn dealloc(&mut self, frame: &FrameTracker) {
ffffffff80203e5e: 5d 71                	addi	sp, sp, -80
ffffffff80203e60: 86 e4                	sd	ra, 72(sp)
ffffffff80203e62: 2a f8                	sd	a0, 48(sp)
ffffffff80203e64: 2e fc                	sd	a1, 56(sp)
;         self.allocator.dealloc(frame.page_number() - self.start_ppn);
ffffffff80203e66: 13 06 85 00          	addi	a2, a0, 8
ffffffff80203e6a: 2a ec                	sd	a0, 24(sp)
ffffffff80203e6c: 2e 85                	add	a0, zero, a1
ffffffff80203e6e: 32 e8                	sd	a2, 16(sp)
ffffffff80203e70: 97 10 00 00          	auipc	ra, 1
ffffffff80203e74: e7 80 40 92          	jalr	-1756(ra)
ffffffff80203e78: aa e0                	sd	a0, 64(sp)
ffffffff80203e7a: 2a f0                	sd	a0, 32(sp)
ffffffff80203e7c: 09 a0                	j	2
ffffffff80203e7e: 62 65                	ld	a0, 24(sp)
ffffffff80203e80: 0c 61                	ld	a1, 0(a0)
ffffffff80203e82: 2e f4                	sd	a1, 40(sp)
ffffffff80203e84: 02 75                	ld	a0, 32(sp)
ffffffff80203e86: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80203e8a: e7 80 e0 79          	jalr	1950(ra)
ffffffff80203e8e: 2a e4                	sd	a0, 8(sp)
ffffffff80203e90: 09 a0                	j	2
ffffffff80203e92: 42 65                	ld	a0, 16(sp)
ffffffff80203e94: a2 65                	ld	a1, 8(sp)
ffffffff80203e96: 97 20 00 00          	auipc	ra, 2
ffffffff80203e9a: e7 80 80 73          	jalr	1848(ra)
ffffffff80203e9e: 09 a0                	j	2
;     }
ffffffff80203ea0: a6 60                	ld	ra, 72(sp)
ffffffff80203ea2: 61 61                	addi	sp, sp, 80
ffffffff80203ea4: 82 80                	ret

ffffffff80203ea6 _ZN4core5alloc6layout10size_align17hdf911229a7cdeb51E:
; const fn size_align<T>() -> (usize, usize) {
ffffffff80203ea6: 79 71                	addi	sp, sp, -48
ffffffff80203ea8: 21 45                	addi	a0, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80203eaa: 2a f0                	sd	a0, 32(sp)
;     (mem::size_of::<T>(), mem::align_of::<T>())
ffffffff80203eac: 2a e4                	sd	a0, 8(sp)
ffffffff80203eae: 09 a0                	j	2
ffffffff80203eb0: 21 45                	addi	a0, zero, 8
;     intrinsics::min_align_of::<T>()
ffffffff80203eb2: 2a f4                	sd	a0, 40(sp)
;     (mem::size_of::<T>(), mem::align_of::<T>())
ffffffff80203eb4: 2a e0                	sd	a0, 0(sp)
ffffffff80203eb6: 09 a0                	j	2
ffffffff80203eb8: 22 65                	ld	a0, 8(sp)
ffffffff80203eba: 2a e8                	sd	a0, 16(sp)
ffffffff80203ebc: 82 65                	ld	a1, 0(sp)
ffffffff80203ebe: 2e ec                	sd	a1, 24(sp)
; }
ffffffff80203ec0: 45 61                	addi	sp, sp, 48
ffffffff80203ec2: 82 80                	ret

ffffffff80203ec4 _ZN4core5alloc6layout6Layout3new17hde8b4c50ddebcd59E:
;     pub const fn new<T>() -> Self {
ffffffff80203ec4: 39 71                	addi	sp, sp, -64
;         let (size, align) = size_align::<T>();
ffffffff80203ec6: 06 fc                	sd	ra, 56(sp)
ffffffff80203ec8: 97 00 00 00          	auipc	ra, 0
ffffffff80203ecc: e7 80 e0 fd          	jalr	-34(ra)
ffffffff80203ed0: 2a f0                	sd	a0, 32(sp)
ffffffff80203ed2: 2e ec                	sd	a1, 24(sp)
ffffffff80203ed4: 09 a0                	j	2
ffffffff80203ed6: 02 75                	ld	a0, 32(sp)
ffffffff80203ed8: 2a f4                	sd	a0, 40(sp)
ffffffff80203eda: e2 65                	ld	a1, 24(sp)
ffffffff80203edc: 2e f8                	sd	a1, 48(sp)
;         unsafe { Layout::from_size_align_unchecked(size, align) }
ffffffff80203ede: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80203ee2: e7 80 60 8d          	jalr	-1834(ra)
ffffffff80203ee6: 2a e8                	sd	a0, 16(sp)
ffffffff80203ee8: 2e e4                	sd	a1, 8(sp)
ffffffff80203eea: 09 a0                	j	2
;     }
ffffffff80203eec: 42 65                	ld	a0, 16(sp)
ffffffff80203eee: a2 65                	ld	a1, 8(sp)
ffffffff80203ef0: e2 70                	ld	ra, 56(sp)
ffffffff80203ef2: 21 61                	addi	sp, sp, 64
ffffffff80203ef4: 82 80                	ret

ffffffff80203ef6 _ZN4core5alloc6layout6Layout5array17h424a584d781c3a8cE:
;     pub fn array<T>(n: usize) -> Result<Self, LayoutErr> {
ffffffff80203ef6: 55 71                	addi	sp, sp, -208
ffffffff80203ef8: 86 e5                	sd	ra, 200(sp)
ffffffff80203efa: 2a f9                	sd	a0, 176(sp)
;         let (layout, offset) = Layout::new::<T>().repeat(n)?;
ffffffff80203efc: 2a ec                	sd	a0, 24(sp)
ffffffff80203efe: 97 00 00 00          	auipc	ra, 0
ffffffff80203f02: e7 80 60 fc          	jalr	-58(ra)
ffffffff80203f06: 2a e5                	sd	a0, 136(sp)
ffffffff80203f08: 2e e9                	sd	a1, 144(sp)
ffffffff80203f0a: 09 a0                	j	2
ffffffff80203f0c: 88 18                	addi	a0, sp, 112
ffffffff80203f0e: 2c 01                	addi	a1, sp, 136
ffffffff80203f10: 62 66                	ld	a2, 24(sp)
ffffffff80203f12: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80203f16: e7 80 e0 8e          	jalr	-1810(ra)
ffffffff80203f1a: 09 a0                	j	2
ffffffff80203f1c: a8 08                	addi	a0, sp, 88
ffffffff80203f1e: 8c 18                	addi	a1, sp, 112
ffffffff80203f20: 97 30 00 00          	auipc	ra, 3
ffffffff80203f24: e7 80 80 37          	jalr	888(ra)
ffffffff80203f28: 09 a0                	j	2
ffffffff80203f2a: 06 75                	ld	a0, 96(sp)
ffffffff80203f2c: 93 35 15 00          	seqz	a1, a0
ffffffff80203f30: 01 46                	mv	a2, zero
ffffffff80203f32: 63 14 c5 00          	bne	a0, a2, 8
ffffffff80203f36: 09 a0                	j	2
ffffffff80203f38: 35 a0                	j	44
ffffffff80203f3a: 26 75                	ld	a0, 104(sp)
ffffffff80203f3c: 2a f5                	sd	a0, 168(sp)
ffffffff80203f3e: 86 75                	ld	a1, 96(sp)
ffffffff80203f40: 2e f1                	sd	a1, 160(sp)
ffffffff80203f42: 66 66                	ld	a2, 88(sp)
ffffffff80203f44: 32 ed                	sd	a2, 152(sp)
ffffffff80203f46: b2 e0                	sd	a2, 64(sp)
ffffffff80203f48: ae e4                	sd	a1, 72(sp)
ffffffff80203f4a: aa e8                	sd	a0, 80(sp)
ffffffff80203f4c: 32 f8                	sd	a2, 48(sp)
ffffffff80203f4e: 2e fc                	sd	a1, 56(sp)
ffffffff80203f50: aa e1                	sd	a0, 192(sp)
ffffffff80203f52: 08 18                	addi	a0, sp, 48
;         Ok(layout.pad_to_align())
ffffffff80203f54: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80203f58: e7 80 80 70          	jalr	1800(ra)
ffffffff80203f5c: 2a e8                	sd	a0, 16(sp)
ffffffff80203f5e: 2e e4                	sd	a1, 8(sp)
ffffffff80203f60: 25 a0                	j	40
;         let (layout, offset) = Layout::new::<T>().repeat(n)?;
ffffffff80203f62: 00 00                	unimp	
ffffffff80203f64: 97 30 00 00          	auipc	ra, 3
ffffffff80203f68: e7 80 a0 dc          	jalr	-566(ra)
ffffffff80203f6c: 31 a0                	j	12
;     }
ffffffff80203f6e: 02 75                	ld	a0, 32(sp)
ffffffff80203f70: a2 75                	ld	a1, 40(sp)
ffffffff80203f72: ae 60                	ld	ra, 200(sp)
ffffffff80203f74: 69 61                	addi	sp, sp, 208
ffffffff80203f76: 82 80                	ret
;         let (layout, offset) = Layout::new::<T>().repeat(n)?;
ffffffff80203f78: 97 30 00 00          	auipc	ra, 3
ffffffff80203f7c: e7 80 c0 29          	jalr	668(ra)
ffffffff80203f80: 2a f0                	sd	a0, 32(sp)
ffffffff80203f82: 2e f4                	sd	a1, 40(sp)
ffffffff80203f84: 09 a0                	j	2
ffffffff80203f86: e5 b7                	j	-24
;         Ok(layout.pad_to_align())
ffffffff80203f88: 42 65                	ld	a0, 16(sp)
ffffffff80203f8a: 2a f0                	sd	a0, 32(sp)
ffffffff80203f8c: a2 65                	ld	a1, 8(sp)
ffffffff80203f8e: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff80203f90: f9 bf                	j	-34

ffffffff80203f92 _ZN4core3fmt9Arguments16new_v1_formatted17h1667604a3ffbc414E:
;     pub fn new_v1_formatted(
ffffffff80203f92: 39 71                	addi	sp, sp, -64
ffffffff80203f94: 2e e8                	sd	a1, 16(sp)
ffffffff80203f96: 32 ec                	sd	a2, 24(sp)
ffffffff80203f98: 36 f0                	sd	a3, 32(sp)
ffffffff80203f9a: 3a f4                	sd	a4, 40(sp)
ffffffff80203f9c: 3e f8                	sd	a5, 48(sp)
ffffffff80203f9e: 42 fc                	sd	a6, 56(sp)
;         Arguments { pieces, fmt: Some(fmt), args }
ffffffff80203fa0: 3e e0                	sd	a5, 0(sp)
ffffffff80203fa2: 42 e4                	sd	a6, 8(sp)
ffffffff80203fa4: 0c e1                	sd	a1, 0(a0)
ffffffff80203fa6: 10 e5                	sd	a2, 8(a0)
ffffffff80203fa8: 82 65                	ld	a1, 0(sp)
ffffffff80203faa: 22 66                	ld	a2, 8(sp)
ffffffff80203fac: 0c e9                	sd	a1, 16(a0)
ffffffff80203fae: 10 ed                	sd	a2, 24(a0)
ffffffff80203fb0: 14 f1                	sd	a3, 32(a0)
ffffffff80203fb2: 18 f5                	sd	a4, 40(a0)
;     }
ffffffff80203fb4: 21 61                	addi	sp, sp, 64
ffffffff80203fb6: 82 80                	ret

ffffffff80203fb8 _ZN4core3fmt9Arguments6new_v117hd827237398e0f863E:
;     pub fn new_v1(pieces: &'a [&'a str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
ffffffff80203fb8: 79 71                	addi	sp, sp, -48
ffffffff80203fba: 2e e8                	sd	a1, 16(sp)
ffffffff80203fbc: 32 ec                	sd	a2, 24(sp)
ffffffff80203fbe: 36 f0                	sd	a3, 32(sp)
ffffffff80203fc0: 3a f4                	sd	a4, 40(sp)
ffffffff80203fc2: 81 47                	mv	a5, zero
;         Arguments { pieces, fmt: None, args }
ffffffff80203fc4: 3e e0                	sd	a5, 0(sp)
ffffffff80203fc6: 0c e1                	sd	a1, 0(a0)
ffffffff80203fc8: 10 e5                	sd	a2, 8(a0)
ffffffff80203fca: 82 65                	ld	a1, 0(sp)
ffffffff80203fcc: 22 66                	ld	a2, 8(sp)
ffffffff80203fce: 0c e9                	sd	a1, 16(a0)
ffffffff80203fd0: 10 ed                	sd	a2, 24(a0)
ffffffff80203fd2: 14 f1                	sd	a3, 32(a0)
ffffffff80203fd4: 18 f5                	sd	a4, 40(a0)
;     }
ffffffff80203fd6: 45 61                	addi	sp, sp, 48
ffffffff80203fd8: 82 80                	ret

ffffffff80203fda _ZN4spin4once13Once$LT$T$GT$9call_once17h4ff8895b69e51408E:
;     pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
ffffffff80203fda: 71 71                	addi	sp, sp, -176
ffffffff80203fdc: 06 f5                	sd	ra, 168(sp)
ffffffff80203fde: 2a e9                	sd	a0, 144(sp)
ffffffff80203fe0: 85 45                	addi	a1, zero, 1
;         loop {
ffffffff80203fe2: a3 07 b1 08          	sb	a1, 143(sp)
ffffffff80203fe6: 91 45                	addi	a1, zero, 4
;         let mut status = self.state.load(Ordering::SeqCst);
ffffffff80203fe8: aa e4                	sd	a0, 72(sp)
ffffffff80203fea: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80203fee: e7 80 40 40          	jalr	1028(ra)
ffffffff80203ff2: aa ec                	sd	a0, 88(sp)
ffffffff80203ff4: 09 a0                	j	2
;         if status == INCOMPLETE {
ffffffff80203ff6: 66 65                	ld	a0, 88(sp)
ffffffff80203ff8: 81 45                	mv	a1, zero
ffffffff80203ffa: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80203ffe: 09 a0                	j	2
ffffffff80204000: 51 a8                	j	148
ffffffff80204002: 01 45                	mv	a0, zero
ffffffff80204004: 05 46                	addi	a2, zero, 1
ffffffff80204006: 91 46                	addi	a3, zero, 4
;             status = self.state.compare_and_swap(INCOMPLETE,
ffffffff80204008: a6 65                	ld	a1, 72(sp)
ffffffff8020400a: aa e0                	sd	a0, 64(sp)
ffffffff8020400c: 2e 85                	add	a0, zero, a1
ffffffff8020400e: 86 65                	ld	a1, 64(sp)
ffffffff80204010: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80204014: e7 80 c0 32          	jalr	812(ra)
ffffffff80204018: 2a fc                	sd	a0, 56(sp)
ffffffff8020401a: 09 a0                	j	2
ffffffff8020401c: 62 75                	ld	a0, 56(sp)
ffffffff8020401e: aa ec                	sd	a0, 88(sp)
ffffffff80204020: 81 45                	mv	a1, zero
;             if status == INCOMPLETE { // We init
ffffffff80204022: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80204026: 09 a0                	j	2
;         if status == INCOMPLETE {
ffffffff80204028: b5 a0                	j	108
;                 let mut finish = Finish { state: &self.state, panicked: true };
ffffffff8020402a: 26 65                	ld	a0, 72(sp)
ffffffff8020402c: aa f0                	sd	a0, 96(sp)
ffffffff8020402e: 85 45                	addi	a1, zero, 1
ffffffff80204030: 23 04 b1 06          	sb	a1, 104(sp)
ffffffff80204034: 81 45                	mv	a1, zero
;                 unsafe { *self.data.get() = Some(builder()) };
ffffffff80204036: a3 07 b1 08          	sb	a1, 143(sp)
ffffffff8020403a: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff8020403e: e7 80 60 e7          	jalr	-394(ra)
ffffffff80204042: 2a f1                	sd	a0, 160(sp)
ffffffff80204044: 2a e1                	sd	a0, 128(sp)
ffffffff80204046: 09 a0                	j	2
ffffffff80204048: 0a 65                	ld	a0, 128(sp)
ffffffff8020404a: aa fc                	sd	a0, 120(sp)
ffffffff8020404c: 05 45                	addi	a0, zero, 1
ffffffff8020404e: aa f8                	sd	a0, 112(sp)
ffffffff80204050: 26 65                	ld	a0, 72(sp)
ffffffff80204052: 21 05                	addi	a0, a0, 8
ffffffff80204054: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80204058: e7 80 c0 b9          	jalr	-1124(ra)
ffffffff8020405c: 2a f8                	sd	a0, 48(sp)
ffffffff8020405e: 09 a0                	j	2
ffffffff80204060: e1 a8                	j	216
;                 return self.force_get();
ffffffff80204062: 26 65                	ld	a0, 72(sp)
ffffffff80204064: 97 00 00 00          	auipc	ra, 0
ffffffff80204068: e7 80 a0 2b          	jalr	698(ra)
ffffffff8020406c: 2a f4                	sd	a0, 40(sp)
ffffffff8020406e: 09 a0                	j	2
ffffffff80204070: 22 75                	ld	a0, 40(sp)
ffffffff80204072: aa e8                	sd	a0, 80(sp)
ffffffff80204074: 88 10                	addi	a0, sp, 96
;             }
ffffffff80204076: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff8020407a: e7 80 60 e8          	jalr	-378(ra)
ffffffff8020407e: 09 a0                	j	2
;                 return self.force_get();
ffffffff80204080: 09 a0                	j	2
;     }
ffffffff80204082: 03 45 f1 08          	lbu	a0, 143(sp)
ffffffff80204086: 05 89                	andi	a0, a0, 1
ffffffff80204088: 61 ed                	bnez	a0, 216
ffffffff8020408a: 09 a0                	j	2
ffffffff8020408c: 46 65                	ld	a0, 80(sp)
ffffffff8020408e: aa 70                	ld	ra, 168(sp)
ffffffff80204090: 4d 61                	addi	sp, sp, 176
ffffffff80204092: 82 80                	ret
;         loop {
ffffffff80204094: 09 a0                	j	2
;                 INCOMPLETE => unreachable!(),
ffffffff80204096: 66 65                	ld	a0, 88(sp)
ffffffff80204098: 81 45                	mv	a1, zero
ffffffff8020409a: 2a f0                	sd	a0, 32(sp)
ffffffff8020409c: 63 07 b5 02          	beq	a0, a1, 46
ffffffff802040a0: 09 a0                	j	2
ffffffff802040a2: 05 45                	addi	a0, zero, 1
ffffffff802040a4: 82 75                	ld	a1, 32(sp)
ffffffff802040a6: 63 81 a5 04          	beq	a1, a0, 66
ffffffff802040aa: 09 a0                	j	2
ffffffff802040ac: 09 45                	addi	a0, zero, 2
ffffffff802040ae: 82 75                	ld	a1, 32(sp)
ffffffff802040b0: 63 8a a5 06          	beq	a1, a0, 116
ffffffff802040b4: 09 a0                	j	2
ffffffff802040b6: 0d 45                	addi	a0, zero, 3
ffffffff802040b8: 82 75                	ld	a1, 32(sp)
ffffffff802040ba: 63 87 a5 04          	beq	a1, a0, 78
ffffffff802040be: 09 a0                	j	2
;                 _ => unsafe { unreachable() },
ffffffff802040c0: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802040c4: e7 80 80 b6          	jalr	-1176(ra)
ffffffff802040c8: 00 00                	unimp	

ffffffff802040ca .LBB0_29:
;         $crate::panicking::panic($msg)
ffffffff802040ca: 17 a5 00 00          	auipc	a0, 10
ffffffff802040ce: 13 05 e5 df          	addi	a0, a0, -514

ffffffff802040d2 .LBB0_30:
ffffffff802040d2: 17 a6 00 00          	auipc	a2, 10
ffffffff802040d6: 13 06 e6 dd          	addi	a2, a2, -546
ffffffff802040da: 93 05 80 02          	addi	a1, zero, 40
ffffffff802040de: 97 60 00 00          	auipc	ra, 6
ffffffff802040e2: e7 80 a0 25          	jalr	602(ra)
ffffffff802040e6: 00 00                	unimp	
;                     cpu_relax();
ffffffff802040e8: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802040ec: e7 80 c0 36          	jalr	876(ra)
ffffffff802040f0: 09 a0                	j	2
ffffffff802040f2: 91 45                	addi	a1, zero, 4
;                     status = self.state.load(Ordering::SeqCst)
ffffffff802040f4: 26 65                	ld	a0, 72(sp)
ffffffff802040f6: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802040fa: e7 80 80 2f          	jalr	760(ra)
ffffffff802040fe: 2a ec                	sd	a0, 24(sp)
ffffffff80204100: 09 a0                	j	2
ffffffff80204102: 62 65                	ld	a0, 24(sp)
ffffffff80204104: aa ec                	sd	a0, 88(sp)
;             match status {
ffffffff80204106: 41 bf                	j	-112

ffffffff80204108 .LBB0_31:
;         $crate::panicking::panic($msg)
ffffffff80204108: 17 a5 00 00          	auipc	a0, 10
ffffffff8020410c: 13 05 e5 d1          	addi	a0, a0, -738

ffffffff80204110 .LBB0_32:
ffffffff80204110: 17 a6 00 00          	auipc	a2, 10
ffffffff80204114: 13 06 06 da          	addi	a2, a2, -608
ffffffff80204118: c5 45                	addi	a1, zero, 17
ffffffff8020411a: 97 60 00 00          	auipc	ra, 6
ffffffff8020411e: e7 80 e0 21          	jalr	542(ra)
ffffffff80204122: 00 00                	unimp	
;                 COMPLETE => return self.force_get(),
ffffffff80204124: 26 65                	ld	a0, 72(sp)
ffffffff80204126: 97 00 00 00          	auipc	ra, 0
ffffffff8020412a: e7 80 80 1f          	jalr	504(ra)
ffffffff8020412e: 2a e8                	sd	a0, 16(sp)
ffffffff80204130: 09 a0                	j	2
ffffffff80204132: 42 65                	ld	a0, 16(sp)
ffffffff80204134: aa e8                	sd	a0, 80(sp)
ffffffff80204136: b1 b7                	j	-180
;                 unsafe { *self.data.get() = Some(builder()) };
ffffffff80204138: 66 75                	ld	a0, 120(sp)
ffffffff8020413a: c2 75                	ld	a1, 48(sp)
ffffffff8020413c: 88 e5                	sd	a0, 8(a1)
ffffffff8020413e: 46 75                	ld	a0, 112(sp)
ffffffff80204140: 88 e1                	sd	a0, 0(a1)
ffffffff80204142: 01 45                	mv	a0, zero
;                 finish.panicked = false;
ffffffff80204144: 23 04 a1 06          	sb	a0, 104(sp)
ffffffff80204148: 09 45                	addi	a0, zero, 2
;                 status = COMPLETE;
ffffffff8020414a: aa ec                	sd	a0, 88(sp)
ffffffff8020414c: 11 46                	addi	a2, zero, 4
;                 self.state.store(status, Ordering::SeqCst);
ffffffff8020414e: a6 66                	ld	a3, 72(sp)
ffffffff80204150: 2a e4                	sd	a0, 8(sp)
ffffffff80204152: 36 85                	add	a0, zero, a3
ffffffff80204154: a2 65                	ld	a1, 8(sp)
ffffffff80204156: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020415a: e7 80 a0 2c          	jalr	714(ra)
ffffffff8020415e: 11 b7                	j	-252
ffffffff80204160: 01 45                	mv	a0, zero
;     }
ffffffff80204162: a3 07 a1 08          	sb	a0, 143(sp)
ffffffff80204166: 1d b7                	j	-218

ffffffff80204168 _ZN4spin4once13Once$LT$T$GT$9call_once17hc8d99f131d0cdf62E:
;     pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
ffffffff80204168: 15 71                	addi	sp, sp, -224
ffffffff8020416a: 86 ed                	sd	ra, 216(sp)
ffffffff8020416c: aa e5                	sd	a0, 200(sp)
ffffffff8020416e: 85 45                	addi	a1, zero, 1
;         loop {
ffffffff80204170: a3 03 b1 0c          	sb	a1, 199(sp)
ffffffff80204174: 91 45                	addi	a1, zero, 4
;         let mut status = self.state.load(Ordering::SeqCst);
ffffffff80204176: aa e0                	sd	a0, 64(sp)
ffffffff80204178: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020417c: e7 80 60 27          	jalr	630(ra)
ffffffff80204180: aa e8                	sd	a0, 80(sp)
ffffffff80204182: 09 a0                	j	2
;         if status == INCOMPLETE {
ffffffff80204184: 46 65                	ld	a0, 80(sp)
ffffffff80204186: 81 45                	mv	a1, zero
ffffffff80204188: 63 04 b5 00          	beq	a0, a1, 8
ffffffff8020418c: 09 a0                	j	2
ffffffff8020418e: 75 a0                	j	172
ffffffff80204190: 01 45                	mv	a0, zero
ffffffff80204192: 05 46                	addi	a2, zero, 1
ffffffff80204194: 91 46                	addi	a3, zero, 4
;             status = self.state.compare_and_swap(INCOMPLETE,
ffffffff80204196: 86 65                	ld	a1, 64(sp)
ffffffff80204198: 2a fc                	sd	a0, 56(sp)
ffffffff8020419a: 2e 85                	add	a0, zero, a1
ffffffff8020419c: e2 75                	ld	a1, 56(sp)
ffffffff8020419e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802041a2: e7 80 e0 19          	jalr	414(ra)
ffffffff802041a6: 2a f8                	sd	a0, 48(sp)
ffffffff802041a8: 09 a0                	j	2
ffffffff802041aa: 42 75                	ld	a0, 48(sp)
ffffffff802041ac: aa e8                	sd	a0, 80(sp)
ffffffff802041ae: 81 45                	mv	a1, zero
;             if status == INCOMPLETE { // We init
ffffffff802041b0: 63 04 b5 00          	beq	a0, a1, 8
ffffffff802041b4: 09 a0                	j	2
;         if status == INCOMPLETE {
ffffffff802041b6: 51 a0                	j	132
;                 let mut finish = Finish { state: &self.state, panicked: true };
ffffffff802041b8: 06 65                	ld	a0, 64(sp)
ffffffff802041ba: aa ec                	sd	a0, 88(sp)
ffffffff802041bc: 85 45                	addi	a1, zero, 1
ffffffff802041be: 23 00 b1 06          	sb	a1, 96(sp)
ffffffff802041c2: 81 45                	mv	a1, zero
;                 unsafe { *self.data.get() = Some(builder()) };
ffffffff802041c4: a3 03 b1 0c          	sb	a1, 199(sp)
ffffffff802041c8: 28 09                	addi	a0, sp, 152
ffffffff802041ca: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff802041ce: e7 80 40 c6          	jalr	-924(ra)
ffffffff802041d2: 09 a0                	j	2
ffffffff802041d4: 6a 75                	ld	a0, 184(sp)
ffffffff802041d6: 2a e9                	sd	a0, 144(sp)
ffffffff802041d8: 4a 75                	ld	a0, 176(sp)
ffffffff802041da: 2a e5                	sd	a0, 136(sp)
ffffffff802041dc: 2a 75                	ld	a0, 168(sp)
ffffffff802041de: 2a e1                	sd	a0, 128(sp)
ffffffff802041e0: 0a 75                	ld	a0, 160(sp)
ffffffff802041e2: aa fc                	sd	a0, 120(sp)
ffffffff802041e4: 6a 65                	ld	a0, 152(sp)
ffffffff802041e6: aa f8                	sd	a0, 112(sp)
ffffffff802041e8: 05 45                	addi	a0, zero, 1
ffffffff802041ea: aa f4                	sd	a0, 104(sp)
ffffffff802041ec: 06 65                	ld	a0, 64(sp)
ffffffff802041ee: 21 05                	addi	a0, a0, 8
ffffffff802041f0: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802041f4: e7 80 80 9f          	jalr	-1544(ra)
ffffffff802041f8: 2a f4                	sd	a0, 40(sp)
ffffffff802041fa: 09 a0                	j	2
ffffffff802041fc: 22 75                	ld	a0, 40(sp)
ffffffff802041fe: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80204202: e7 80 a0 e2          	jalr	-470(ra)
ffffffff80204206: e1 a8                	j	216
;                 return self.force_get();
ffffffff80204208: 06 65                	ld	a0, 64(sp)
ffffffff8020420a: 97 00 00 00          	auipc	ra, 0
ffffffff8020420e: e7 80 a0 15          	jalr	346(ra)
ffffffff80204212: 2a f0                	sd	a0, 32(sp)
ffffffff80204214: 09 a0                	j	2
ffffffff80204216: 02 75                	ld	a0, 32(sp)
ffffffff80204218: aa e4                	sd	a0, 72(sp)
ffffffff8020421a: a8 08                	addi	a0, sp, 88
;             }
ffffffff8020421c: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80204220: e7 80 00 ce          	jalr	-800(ra)
ffffffff80204224: 09 a0                	j	2
;                 return self.force_get();
ffffffff80204226: 09 a0                	j	2
;     }
ffffffff80204228: 03 45 71 0c          	lbu	a0, 199(sp)
ffffffff8020422c: 05 89                	andi	a0, a0, 1
ffffffff8020422e: 65 e5                	bnez	a0, 232
ffffffff80204230: 09 a0                	j	2
ffffffff80204232: 26 65                	ld	a0, 72(sp)
ffffffff80204234: ee 60                	ld	ra, 216(sp)
ffffffff80204236: 2d 61                	addi	sp, sp, 224
ffffffff80204238: 82 80                	ret
;         loop {
ffffffff8020423a: 09 a0                	j	2
;                 INCOMPLETE => unreachable!(),
ffffffff8020423c: 46 65                	ld	a0, 80(sp)
ffffffff8020423e: 81 45                	mv	a1, zero
ffffffff80204240: 2a ec                	sd	a0, 24(sp)
ffffffff80204242: 63 07 b5 02          	beq	a0, a1, 46
ffffffff80204246: 09 a0                	j	2
ffffffff80204248: 05 45                	addi	a0, zero, 1
ffffffff8020424a: e2 65                	ld	a1, 24(sp)
ffffffff8020424c: 63 81 a5 04          	beq	a1, a0, 66
ffffffff80204250: 09 a0                	j	2
ffffffff80204252: 09 45                	addi	a0, zero, 2
ffffffff80204254: e2 65                	ld	a1, 24(sp)
ffffffff80204256: 63 8a a5 06          	beq	a1, a0, 116
ffffffff8020425a: 09 a0                	j	2
ffffffff8020425c: 0d 45                	addi	a0, zero, 3
ffffffff8020425e: e2 65                	ld	a1, 24(sp)
ffffffff80204260: 63 87 a5 04          	beq	a1, a0, 78
ffffffff80204264: 09 a0                	j	2
;                 _ => unsafe { unreachable() },
ffffffff80204266: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020426a: e7 80 20 9c          	jalr	-1598(ra)
ffffffff8020426e: 00 00                	unimp	

ffffffff80204270 .LBB1_29:
;         $crate::panicking::panic($msg)
ffffffff80204270: 17 a5 00 00          	auipc	a0, 10
ffffffff80204274: 13 05 85 c5          	addi	a0, a0, -936

ffffffff80204278 .LBB1_30:
ffffffff80204278: 17 a6 00 00          	auipc	a2, 10
ffffffff8020427c: 13 06 86 c3          	addi	a2, a2, -968
ffffffff80204280: 93 05 80 02          	addi	a1, zero, 40
ffffffff80204284: 97 60 00 00          	auipc	ra, 6
ffffffff80204288: e7 80 40 0b          	jalr	180(ra)
ffffffff8020428c: 00 00                	unimp	
;                     cpu_relax();
ffffffff8020428e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80204292: e7 80 60 1c          	jalr	454(ra)
ffffffff80204296: 09 a0                	j	2
ffffffff80204298: 91 45                	addi	a1, zero, 4
;                     status = self.state.load(Ordering::SeqCst)
ffffffff8020429a: 06 65                	ld	a0, 64(sp)
ffffffff8020429c: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802042a0: e7 80 20 15          	jalr	338(ra)
ffffffff802042a4: 2a e8                	sd	a0, 16(sp)
ffffffff802042a6: 09 a0                	j	2
ffffffff802042a8: 42 65                	ld	a0, 16(sp)
ffffffff802042aa: aa e8                	sd	a0, 80(sp)
;             match status {
ffffffff802042ac: 41 bf                	j	-112

ffffffff802042ae .LBB1_31:
;         $crate::panicking::panic($msg)
ffffffff802042ae: 17 a5 00 00          	auipc	a0, 10
ffffffff802042b2: 13 05 85 b7          	addi	a0, a0, -1160

ffffffff802042b6 .LBB1_32:
ffffffff802042b6: 17 a6 00 00          	auipc	a2, 10
ffffffff802042ba: 13 06 a6 bf          	addi	a2, a2, -1030
ffffffff802042be: c5 45                	addi	a1, zero, 17
ffffffff802042c0: 97 60 00 00          	auipc	ra, 6
ffffffff802042c4: e7 80 80 07          	jalr	120(ra)
ffffffff802042c8: 00 00                	unimp	
;                 COMPLETE => return self.force_get(),
ffffffff802042ca: 06 65                	ld	a0, 64(sp)
ffffffff802042cc: 97 00 00 00          	auipc	ra, 0
ffffffff802042d0: e7 80 80 09          	jalr	152(ra)
ffffffff802042d4: 2a e4                	sd	a0, 8(sp)
ffffffff802042d6: 09 a0                	j	2
ffffffff802042d8: 22 65                	ld	a0, 8(sp)
ffffffff802042da: aa e4                	sd	a0, 72(sp)
ffffffff802042dc: b1 b7                	j	-180
;                 unsafe { *self.data.get() = Some(builder()) };
ffffffff802042de: 4a 65                	ld	a0, 144(sp)
ffffffff802042e0: a2 75                	ld	a1, 40(sp)
ffffffff802042e2: 88 f5                	sd	a0, 40(a1)
ffffffff802042e4: 2a 65                	ld	a0, 136(sp)
ffffffff802042e6: 88 f1                	sd	a0, 32(a1)
ffffffff802042e8: 0a 65                	ld	a0, 128(sp)
ffffffff802042ea: 88 ed                	sd	a0, 24(a1)
ffffffff802042ec: 66 75                	ld	a0, 120(sp)
ffffffff802042ee: 88 e9                	sd	a0, 16(a1)
ffffffff802042f0: 46 75                	ld	a0, 112(sp)
ffffffff802042f2: 88 e5                	sd	a0, 8(a1)
ffffffff802042f4: 26 75                	ld	a0, 104(sp)
ffffffff802042f6: 88 e1                	sd	a0, 0(a1)
ffffffff802042f8: 01 45                	mv	a0, zero
;                 finish.panicked = false;
ffffffff802042fa: 23 00 a1 06          	sb	a0, 96(sp)
ffffffff802042fe: 09 45                	addi	a0, zero, 2
;                 status = COMPLETE;
ffffffff80204300: aa e8                	sd	a0, 80(sp)
ffffffff80204302: 11 46                	addi	a2, zero, 4
;                 self.state.store(status, Ordering::SeqCst);
ffffffff80204304: 86 66                	ld	a3, 64(sp)
ffffffff80204306: 2a e0                	sd	a0, 0(sp)
ffffffff80204308: 36 85                	add	a0, zero, a3
ffffffff8020430a: 82 65                	ld	a1, 0(sp)
ffffffff8020430c: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80204310: e7 80 40 11          	jalr	276(ra)
ffffffff80204314: d5 bd                	j	-268
ffffffff80204316: 01 45                	mv	a0, zero
;     }
ffffffff80204318: a3 03 a1 0c          	sb	a0, 199(sp)
ffffffff8020431c: 19 bf                	j	-234

ffffffff8020431e _ZN4spin4once13Once$LT$T$GT$9force_get17had39945d140e977cE:
;     fn force_get<'a>(&'a self) -> &'a T {
ffffffff8020431e: 79 71                	addi	sp, sp, -48
ffffffff80204320: 06 f4                	sd	ra, 40(sp)
ffffffff80204322: 2a ec                	sd	a0, 24(sp)
;         match unsafe { &*self.data.get() }.as_ref() {
ffffffff80204324: 21 05                	addi	a0, a0, 8
ffffffff80204326: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020432a: e7 80 a0 8c          	jalr	-1846(ra)
ffffffff8020432e: 2a e4                	sd	a0, 8(sp)
ffffffff80204330: 09 a0                	j	2
ffffffff80204332: 22 65                	ld	a0, 8(sp)
ffffffff80204334: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204338: e7 80 c0 4f          	jalr	1276(ra)
ffffffff8020433c: 2a e8                	sd	a0, 16(sp)
ffffffff8020433e: 09 a0                	j	2
;             None    => unsafe { unreachable() },
ffffffff80204340: 42 65                	ld	a0, 16(sp)
ffffffff80204342: b3 35 a0 00          	snez	a1, a0
ffffffff80204346: 01 46                	mv	a2, zero
ffffffff80204348: 63 09 c5 00          	beq	a0, a2, 18
ffffffff8020434c: 09 a0                	j	2
;             Some(p) => p,
ffffffff8020434e: 42 65                	ld	a0, 16(sp)
ffffffff80204350: 2a f0                	sd	a0, 32(sp)
;     }
ffffffff80204352: a2 70                	ld	ra, 40(sp)
ffffffff80204354: 45 61                	addi	sp, sp, 48
ffffffff80204356: 82 80                	ret
;         match unsafe { &*self.data.get() }.as_ref() {
ffffffff80204358: 00 00                	unimp	
;             None    => unsafe { unreachable() },
ffffffff8020435a: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020435e: e7 80 e0 8c          	jalr	-1842(ra)
ffffffff80204362: 00 00                	unimp	

ffffffff80204364 _ZN4spin4once13Once$LT$T$GT$9force_get17hf9fad5d504c708d7E:
;     fn force_get<'a>(&'a self) -> &'a T {
ffffffff80204364: 79 71                	addi	sp, sp, -48
ffffffff80204366: 06 f4                	sd	ra, 40(sp)
ffffffff80204368: 2a ec                	sd	a0, 24(sp)
;         match unsafe { &*self.data.get() }.as_ref() {
ffffffff8020436a: 21 05                	addi	a0, a0, 8
ffffffff8020436c: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80204370: e7 80 c0 87          	jalr	-1924(ra)
ffffffff80204374: 2a e4                	sd	a0, 8(sp)
ffffffff80204376: 09 a0                	j	2
ffffffff80204378: 22 65                	ld	a0, 8(sp)
ffffffff8020437a: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff8020437e: e7 80 a0 48          	jalr	1162(ra)
ffffffff80204382: 2a e8                	sd	a0, 16(sp)
ffffffff80204384: 09 a0                	j	2
;             None    => unsafe { unreachable() },
ffffffff80204386: 42 65                	ld	a0, 16(sp)
ffffffff80204388: b3 35 a0 00          	snez	a1, a0
ffffffff8020438c: 01 46                	mv	a2, zero
ffffffff8020438e: 63 09 c5 00          	beq	a0, a2, 18
ffffffff80204392: 09 a0                	j	2
;             Some(p) => p,
ffffffff80204394: 42 65                	ld	a0, 16(sp)
ffffffff80204396: 2a f0                	sd	a0, 32(sp)
;     }
ffffffff80204398: a2 70                	ld	ra, 40(sp)
ffffffff8020439a: 45 61                	addi	sp, sp, 48
ffffffff8020439c: 82 80                	ret
;         match unsafe { &*self.data.get() }.as_ref() {
ffffffff8020439e: 00 00                	unimp	
;             None    => unsafe { unreachable() },
ffffffff802043a0: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802043a4: e7 80 80 88          	jalr	-1912(ra)
ffffffff802043a8: 00 00                	unimp	

ffffffff802043aa _ZN68_$LT$os..interrupt..context..Context$u20$as$u20$core..fmt..Debug$GT$3fmt17h05f62b1ebba63930E:
;     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
ffffffff802043aa: 5d 71                	addi	sp, sp, -80
ffffffff802043ac: 86 e4                	sd	ra, 72(sp)
ffffffff802043ae: 2a fc                	sd	a0, 56(sp)
ffffffff802043b0: ae e0                	sd	a1, 64(sp)

ffffffff802043b2 .LBB0_6:
;         f.debug_struct("Context")
ffffffff802043b2: 17 a6 00 00          	auipc	a2, 10
ffffffff802043b6: 13 06 e6 b3          	addi	a2, a2, -1218
ffffffff802043ba: 34 10                	addi	a3, sp, 40
ffffffff802043bc: 1d 47                	addi	a4, zero, 7
ffffffff802043be: 2a f0                	sd	a0, 32(sp)
ffffffff802043c0: 36 85                	add	a0, zero, a3
ffffffff802043c2: ba 86                	add	a3, zero, a4
ffffffff802043c4: 97 70 00 00          	auipc	ra, 7
ffffffff802043c8: e7 80 80 f4          	jalr	-184(ra)
ffffffff802043cc: 09 a0                	j	2

ffffffff802043ce .LBB0_7:
ffffffff802043ce: 97 a5 00 00          	auipc	a1, 10
ffffffff802043d2: 93 85 95 b2          	addi	a1, a1, -1239

ffffffff802043d6 .LBB0_8:
ffffffff802043d6: 17 a7 00 00          	auipc	a4, 10
ffffffff802043da: 13 07 a7 b2          	addi	a4, a4, -1238
ffffffff802043de: 28 10                	addi	a0, sp, 40
ffffffff802043e0: 25 46                	addi	a2, zero, 9
ffffffff802043e2: 82 76                	ld	a3, 32(sp)
ffffffff802043e4: 97 60 00 00          	auipc	ra, 6
ffffffff802043e8: e7 80 40 1a          	jalr	420(ra)
ffffffff802043ec: 2a ec                	sd	a0, 24(sp)
ffffffff802043ee: 09 a0                	j	2
;             .field("sstatus", &self.sstatus)
ffffffff802043f0: 02 75                	ld	a0, 32(sp)
ffffffff802043f2: 93 06 05 10          	addi	a3, a0, 256

ffffffff802043f6 .LBB0_9:
;         f.debug_struct("Context")
ffffffff802043f6: 97 a5 00 00          	auipc	a1, 10
ffffffff802043fa: 93 85 a5 b2          	addi	a1, a1, -1238

ffffffff802043fe .LBB0_10:
ffffffff802043fe: 17 a7 00 00          	auipc	a4, 10
ffffffff80204402: 13 07 a7 b2          	addi	a4, a4, -1238
ffffffff80204406: 1d 46                	addi	a2, zero, 7
ffffffff80204408: 62 65                	ld	a0, 24(sp)
ffffffff8020440a: 97 60 00 00          	auipc	ra, 6
ffffffff8020440e: e7 80 e0 17          	jalr	382(ra)
ffffffff80204412: 2a e8                	sd	a0, 16(sp)
ffffffff80204414: 09 a0                	j	2
;             .field("sepc", &self.sepc)
ffffffff80204416: 02 75                	ld	a0, 32(sp)
ffffffff80204418: 93 06 85 10          	addi	a3, a0, 264

ffffffff8020441c .LBB0_11:
;         f.debug_struct("Context")
ffffffff8020441c: 97 95 00 00          	auipc	a1, 9
ffffffff80204420: 93 85 85 d1          	addi	a1, a1, -744

ffffffff80204424 .LBB0_12:
ffffffff80204424: 17 a7 00 00          	auipc	a4, 10
ffffffff80204428: 13 07 47 b2          	addi	a4, a4, -1244
ffffffff8020442c: 11 46                	addi	a2, zero, 4
ffffffff8020442e: 42 65                	ld	a0, 16(sp)
ffffffff80204430: 97 60 00 00          	auipc	ra, 6
ffffffff80204434: e7 80 80 15          	jalr	344(ra)
ffffffff80204438: 2a e4                	sd	a0, 8(sp)
ffffffff8020443a: 09 a0                	j	2
ffffffff8020443c: 22 65                	ld	a0, 8(sp)
ffffffff8020443e: 97 60 00 00          	auipc	ra, 6
ffffffff80204442: e7 80 20 2a          	jalr	674(ra)
ffffffff80204446: 2a e0                	sd	a0, 0(sp)
ffffffff80204448: 09 a0                	j	2
;     }
ffffffff8020444a: 02 65                	ld	a0, 0(sp)
ffffffff8020444c: a6 60                	ld	ra, 72(sp)
ffffffff8020444e: 61 61                	addi	sp, sp, 80
ffffffff80204450: 82 80                	ret

ffffffff80204452 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$11write_bytes17h83c9f50a8d76e250E:
;     pub unsafe fn write_bytes(self, val: u8, count: usize)
ffffffff80204452: 79 71                	addi	sp, sp, -48
ffffffff80204454: 06 f4                	sd	ra, 40(sp)
ffffffff80204456: ae 86                	add	a3, zero, a1
ffffffff80204458: 2a e8                	sd	a0, 16(sp)
ffffffff8020445a: a3 0f b1 00          	sb	a1, 31(sp)
ffffffff8020445e: 32 f0                	sd	a2, 32(sp)
;         write_bytes(self, val, count)
ffffffff80204460: 36 e4                	sd	a3, 8(sp)
ffffffff80204462: 97 00 00 00          	auipc	ra, 0
ffffffff80204466: e7 80 e0 8c          	jalr	-1842(ra)
ffffffff8020446a: 09 a0                	j	2
;     }
ffffffff8020446c: a2 70                	ld	ra, 40(sp)
ffffffff8020446e: 45 61                	addi	sp, sp, 48
ffffffff80204470: 82 80                	ret
ffffffff80204472: 00 00                	unimp	

ffffffff80204474 __interrupt:
ffffffff80204474: 6d 71                	addi	sp, sp, -272
ffffffff80204476: 06 e4                	sd	ra, 8(sp)
ffffffff80204478: 93 00 01 11          	addi	ra, sp, 272
ffffffff8020447c: 06 e8                	sd	ra, 16(sp)
ffffffff8020447e: 0e ec                	sd	gp, 24(sp)
ffffffff80204480: 12 f0                	sd	tp, 32(sp)
ffffffff80204482: 16 f4                	sd	t0, 40(sp)
ffffffff80204484: 1a f8                	sd	t1, 48(sp)
ffffffff80204486: 1e fc                	sd	t2, 56(sp)
ffffffff80204488: a2 e0                	sd	s0, 64(sp)
ffffffff8020448a: a6 e4                	sd	s1, 72(sp)
ffffffff8020448c: aa e8                	sd	a0, 80(sp)
ffffffff8020448e: ae ec                	sd	a1, 88(sp)
ffffffff80204490: b2 f0                	sd	a2, 96(sp)
ffffffff80204492: b6 f4                	sd	a3, 104(sp)
ffffffff80204494: ba f8                	sd	a4, 112(sp)
ffffffff80204496: be fc                	sd	a5, 120(sp)
ffffffff80204498: 42 e1                	sd	a6, 128(sp)
ffffffff8020449a: 46 e5                	sd	a7, 136(sp)
ffffffff8020449c: 4a e9                	sd	s2, 144(sp)
ffffffff8020449e: 4e ed                	sd	s3, 152(sp)
ffffffff802044a0: 52 f1                	sd	s4, 160(sp)
ffffffff802044a2: 56 f5                	sd	s5, 168(sp)
ffffffff802044a4: 5a f9                	sd	s6, 176(sp)
ffffffff802044a6: 5e fd                	sd	s7, 184(sp)
ffffffff802044a8: e2 e1                	sd	s8, 192(sp)
ffffffff802044aa: e6 e5                	sd	s9, 200(sp)
ffffffff802044ac: ea e9                	sd	s10, 208(sp)
ffffffff802044ae: ee ed                	sd	s11, 216(sp)
ffffffff802044b0: f2 f1                	sd	t3, 224(sp)
ffffffff802044b2: f6 f5                	sd	t4, 232(sp)
ffffffff802044b4: fa f9                	sd	t5, 240(sp)
ffffffff802044b6: fe fd                	sd	t6, 248(sp)
ffffffff802044b8: f3 24 00 10          	csrr	s1, sstatus
ffffffff802044bc: 73 29 10 14          	csrr	s2, sepc
ffffffff802044c0: 26 e2                	sd	s1, 256(sp)
ffffffff802044c2: 4a e6                	sd	s2, 264(sp)
ffffffff802044c4: 0a 85                	add	a0, zero, sp
ffffffff802044c6: f3 25 20 14          	csrr	a1, scause
ffffffff802044ca: 73 26 30 14          	csrr	a2, stval
ffffffff802044ce: ef 00 00 07          	jal	112

ffffffff802044d2 __restore:
ffffffff802044d2: 92 64                	ld	s1, 256(sp)
ffffffff802044d4: 32 69                	ld	s2, 264(sp)
ffffffff802044d6: 73 90 04 10          	csrw	sstatus, s1
ffffffff802044da: 73 10 19 14          	csrw	sepc, s2
ffffffff802044de: a2 60                	ld	ra, 8(sp)
ffffffff802044e0: e2 61                	ld	gp, 24(sp)
ffffffff802044e2: 02 72                	ld	tp, 32(sp)
ffffffff802044e4: a2 72                	ld	t0, 40(sp)
ffffffff802044e6: 42 73                	ld	t1, 48(sp)
ffffffff802044e8: e2 73                	ld	t2, 56(sp)
ffffffff802044ea: 06 64                	ld	s0, 64(sp)
ffffffff802044ec: a6 64                	ld	s1, 72(sp)
ffffffff802044ee: 46 65                	ld	a0, 80(sp)
ffffffff802044f0: e6 65                	ld	a1, 88(sp)
ffffffff802044f2: 06 76                	ld	a2, 96(sp)
ffffffff802044f4: a6 76                	ld	a3, 104(sp)
ffffffff802044f6: 46 77                	ld	a4, 112(sp)
ffffffff802044f8: e6 77                	ld	a5, 120(sp)
ffffffff802044fa: 0a 68                	ld	a6, 128(sp)
ffffffff802044fc: aa 68                	ld	a7, 136(sp)
ffffffff802044fe: 4a 69                	ld	s2, 144(sp)
ffffffff80204500: ea 69                	ld	s3, 152(sp)
ffffffff80204502: 0a 7a                	ld	s4, 160(sp)
ffffffff80204504: aa 7a                	ld	s5, 168(sp)
ffffffff80204506: 4a 7b                	ld	s6, 176(sp)
ffffffff80204508: ea 7b                	ld	s7, 184(sp)
ffffffff8020450a: 0e 6c                	ld	s8, 192(sp)
ffffffff8020450c: ae 6c                	ld	s9, 200(sp)
ffffffff8020450e: 4e 6d                	ld	s10, 208(sp)
ffffffff80204510: ee 6d                	ld	s11, 216(sp)
ffffffff80204512: 0e 7e                	ld	t3, 224(sp)
ffffffff80204514: ae 7e                	ld	t4, 232(sp)
ffffffff80204516: 4e 7f                	ld	t5, 240(sp)
ffffffff80204518: ee 7f                	ld	t6, 248(sp)
ffffffff8020451a: 42 61                	ld	sp, 16(sp)
ffffffff8020451c: 73 00 20 10          	sret	

ffffffff80204520 _ZN2os9interrupt7handler4init17hd4f129371b162b98E:
; pub fn init(){
ffffffff80204520: 41 11                	addi	sp, sp, -16
;         stvec::write(__interrupt as usize, stvec::TrapMode::Direct);
ffffffff80204522: 06 e4                	sd	ra, 8(sp)

ffffffff80204524 .LBB0_2:
ffffffff80204524: 17 05 00 00          	auipc	a0, 0
ffffffff80204528: 13 05 05 f5          	addi	a0, a0, -176
ffffffff8020452c: 81 45                	mv	a1, zero
ffffffff8020452e: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80204532: e7 80 e0 86          	jalr	-1938(ra)
ffffffff80204536: 09 a0                	j	2
; }
ffffffff80204538: a2 60                	ld	ra, 8(sp)
ffffffff8020453a: 41 01                	addi	sp, sp, 16
ffffffff8020453c: 82 80                	ret

ffffffff8020453e handle_interrupt:
; pub fn handle_interrupt(context: &mut Context, scause: Scause, stval: usize) {
ffffffff8020453e: 5d 71                	addi	sp, sp, -80
ffffffff80204540: 86 e4                	sd	ra, 72(sp)
ffffffff80204542: 2e f0                	sd	a1, 32(sp)
ffffffff80204544: 2a fc                	sd	a0, 56(sp)
ffffffff80204546: b2 e0                	sd	a2, 64(sp)
ffffffff80204548: 0c 10                	addi	a1, sp, 32
;     match scause.cause() {
ffffffff8020454a: 2a ec                	sd	a0, 24(sp)
ffffffff8020454c: 2e 85                	add	a0, zero, a1
ffffffff8020454e: 32 e8                	sd	a2, 16(sp)
ffffffff80204550: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204554: e7 80 80 b7          	jalr	-1160(ra)
ffffffff80204558: 23 08 a1 02          	sb	a0, 48(sp)
ffffffff8020455c: a3 08 b1 02          	sb	a1, 49(sp)
ffffffff80204560: 09 a0                	j	2
;         Trap::Exception(Exception::Breakpoint) => breakpoint(context),
ffffffff80204562: 03 45 01 03          	lbu	a0, 48(sp)
ffffffff80204566: 93 75 15 00          	andi	a1, a0, 1
ffffffff8020456a: 01 46                	mv	a2, zero
ffffffff8020456c: 2a e4                	sd	a0, 8(sp)
ffffffff8020456e: 63 88 c5 00          	beq	a1, a2, 16
ffffffff80204572: 09 a0                	j	2
ffffffff80204574: 05 45                	addi	a0, zero, 1
ffffffff80204576: a2 65                	ld	a1, 8(sp)
ffffffff80204578: 63 81 a5 02          	beq	a1, a0, 34
ffffffff8020457c: 39 a0                	j	14
;         Trap::Interrupt(Interrupt::SupervisorTimer) => supervisor_timer(context),
ffffffff8020457e: 03 45 11 03          	lbu	a0, 49(sp)
ffffffff80204582: 8d 45                	addi	a1, zero, 3
ffffffff80204584: 63 08 b5 02          	beq	a0, a1, 48
ffffffff80204588: 09 a0                	j	2
;         _ => fault(context, scause, stval),
ffffffff8020458a: 82 75                	ld	a1, 32(sp)
ffffffff8020458c: 62 65                	ld	a0, 24(sp)
ffffffff8020458e: 42 66                	ld	a2, 16(sp)
ffffffff80204590: 97 00 00 00          	auipc	ra, 0
ffffffff80204594: e7 80 a0 0e          	jalr	234(ra)
ffffffff80204598: 2d a0                	j	42
;         Trap::Exception(Exception::Breakpoint) => breakpoint(context),
ffffffff8020459a: 03 45 11 03          	lbu	a0, 49(sp)
ffffffff8020459e: 8d 45                	addi	a1, zero, 3
ffffffff802045a0: e3 15 b5 fe          	bne	a0, a1, -22
ffffffff802045a4: 09 a0                	j	2
ffffffff802045a6: 62 65                	ld	a0, 24(sp)
ffffffff802045a8: 97 00 00 00          	auipc	ra, 0
ffffffff802045ac: e7 80 20 02          	jalr	34(ra)
ffffffff802045b0: 09 a0                	j	2
;     match scause.cause() {
ffffffff802045b2: 09 a8                	j	18
;         Trap::Interrupt(Interrupt::SupervisorTimer) => supervisor_timer(context),
ffffffff802045b4: 62 65                	ld	a0, 24(sp)
ffffffff802045b6: 97 00 00 00          	auipc	ra, 0
ffffffff802045ba: e7 80 e0 0a          	jalr	174(ra)
ffffffff802045be: 09 a0                	j	2
;     match scause.cause() {
ffffffff802045c0: 11 a0                	j	4
ffffffff802045c2: 09 a0                	j	2
; }
ffffffff802045c4: a6 60                	ld	ra, 72(sp)
ffffffff802045c6: 61 61                	addi	sp, sp, 80
ffffffff802045c8: 82 80                	ret

ffffffff802045ca _ZN2os9interrupt7handler10breakpoint17hc9c7135cb598fc58E:
; fn breakpoint(context: &mut Context) {
ffffffff802045ca: 75 71                	addi	sp, sp, -144
ffffffff802045cc: 06 e5                	sd	ra, 136(sp)
ffffffff802045ce: aa fc                	sd	a0, 120(sp)

ffffffff802045d0 .LBB2_6:
;     println!("Breakpoint at 0x{:x}", context.sepc);
ffffffff802045d0: 97 a5 00 00          	auipc	a1, 10
ffffffff802045d4: 93 85 05 9c          	addi	a1, a1, -1600
ffffffff802045d8: 8c 61                	ld	a1, 0(a1)
ffffffff802045da: 13 06 85 10          	addi	a2, a0, 264
ffffffff802045de: b2 f8                	sd	a2, 112(sp)
ffffffff802045e0: 32 e1                	sd	a2, 128(sp)

ffffffff802045e2 .LBB2_7:
ffffffff802045e2: 97 86 00 00          	auipc	a3, 8
ffffffff802045e6: 93 86 46 83          	addi	a3, a3, -1996
ffffffff802045ea: 2a f4                	sd	a0, 40(sp)
ffffffff802045ec: 32 85                	add	a0, zero, a2
ffffffff802045ee: 2e f0                	sd	a1, 32(sp)
ffffffff802045f0: b6 85                	add	a1, zero, a3
ffffffff802045f2: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802045f6: e7 80 00 f9          	jalr	-112(ra)
ffffffff802045fa: 2a ec                	sd	a0, 24(sp)
ffffffff802045fc: 2e e8                	sd	a1, 16(sp)
ffffffff802045fe: 09 a0                	j	2
ffffffff80204600: 62 65                	ld	a0, 24(sp)
ffffffff80204602: aa f0                	sd	a0, 96(sp)
ffffffff80204604: c2 65                	ld	a1, 16(sp)
ffffffff80204606: ae f4                	sd	a1, 104(sp)
ffffffff80204608: 08 18                	addi	a0, sp, 48
ffffffff8020460a: 09 46                	addi	a2, zero, 2
ffffffff8020460c: 94 10                	addi	a3, sp, 96
ffffffff8020460e: 05 47                	addi	a4, zero, 1
ffffffff80204610: 82 75                	ld	a1, 32(sp)
ffffffff80204612: 97 00 00 00          	auipc	ra, 0
ffffffff80204616: e7 80 60 9a          	jalr	-1626(ra)
ffffffff8020461a: 09 a0                	j	2
ffffffff8020461c: 08 18                	addi	a0, sp, 48
ffffffff8020461e: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204622: e7 80 00 50          	jalr	1280(ra)
ffffffff80204626: 09 a0                	j	2
;     context.sepc += 2;
ffffffff80204628: 22 75                	ld	a0, 40(sp)
ffffffff8020462a: 83 35 85 10          	ld	a1, 264(a0)
ffffffff8020462e: 13 86 25 00          	addi	a2, a1, 2
ffffffff80204632: 32 e4                	sd	a2, 8(sp)
ffffffff80204634: 63 6a b6 00          	bltu	a2, a1, 20
ffffffff80204638: 09 a0                	j	2
ffffffff8020463a: 22 65                	ld	a0, 8(sp)
ffffffff8020463c: a2 75                	ld	a1, 40(sp)
ffffffff8020463e: 23 b4 a5 10          	sd	a0, 264(a1)
; }
ffffffff80204642: aa 60                	ld	ra, 136(sp)
ffffffff80204644: 49 61                	addi	sp, sp, 144
ffffffff80204646: 82 80                	ret

ffffffff80204648 .LBB2_8:
;     context.sepc += 2;
ffffffff80204648: 17 a5 00 00          	auipc	a0, 10
ffffffff8020464c: 13 05 85 98          	addi	a0, a0, -1656

ffffffff80204650 .LBB2_9:
ffffffff80204650: 17 a6 00 00          	auipc	a2, 10
ffffffff80204654: 13 06 06 96          	addi	a2, a2, -1696
ffffffff80204658: f1 45                	addi	a1, zero, 28
ffffffff8020465a: 97 60 00 00          	auipc	ra, 6
ffffffff8020465e: e7 80 e0 cd          	jalr	-802(ra)
ffffffff80204662: 00 00                	unimp	

ffffffff80204664 _ZN2os9interrupt7handler16supervisor_timer17h31a88e6db3b0d569E:
; fn supervisor_timer(_: &Context) {
ffffffff80204664: 41 11                	addi	sp, sp, -16
ffffffff80204666: 06 e4                	sd	ra, 8(sp)
ffffffff80204668: 2a e0                	sd	a0, 0(sp)
;     timer::tick();
ffffffff8020466a: 97 00 00 00          	auipc	ra, 0
ffffffff8020466e: e7 80 c0 31          	jalr	796(ra)
ffffffff80204672: 09 a0                	j	2
; }
ffffffff80204674: a2 60                	ld	ra, 8(sp)
ffffffff80204676: 41 01                	addi	sp, sp, 16
ffffffff80204678: 82 80                	ret

ffffffff8020467a _ZN2os9interrupt7handler5fault17hd4ca96a34fe6089dE:
; fn fault(context: &mut Context, scause: Scause, stval: usize) {
ffffffff8020467a: 11 71                	addi	sp, sp, -256
ffffffff8020467c: 86 fd                	sd	ra, 248(sp)
ffffffff8020467e: aa e4                	sd	a0, 72(sp)
ffffffff80204680: ae e8                	sd	a1, 80(sp)
ffffffff80204682: b2 ec                	sd	a2, 88(sp)

ffffffff80204684 .LBB4_6:
;         "Unresolved interrupt: {:?}\n{:x?}\nstval: {:x}",
ffffffff80204684: 17 a5 00 00          	auipc	a0, 10
ffffffff80204688: 13 05 45 9b          	addi	a0, a0, -1612
ffffffff8020468c: 0c 61                	ld	a1, 0(a0)
ffffffff8020468e: 88 08                	addi	a0, sp, 80
;         scause.cause(),
ffffffff80204690: ae e0                	sd	a1, 64(sp)
ffffffff80204692: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204696: e7 80 60 a3          	jalr	-1482(ra)
ffffffff8020469a: 23 0c a1 0c          	sb	a0, 216(sp)
ffffffff8020469e: a3 0c b1 0c          	sb	a1, 217(sp)
ffffffff802046a2: 09 a0                	j	2
ffffffff802046a4: a8 09                	addi	a0, sp, 216
;     panic!(
ffffffff802046a6: aa e1                	sd	a0, 192(sp)
ffffffff802046a8: ac 00                	addi	a1, sp, 72
ffffffff802046aa: ae e5                	sd	a1, 200(sp)
ffffffff802046ac: b0 08                	addi	a2, sp, 88
ffffffff802046ae: b2 e9                	sd	a2, 208(sp)
ffffffff802046b0: aa f1                	sd	a0, 224(sp)
ffffffff802046b2: ae f5                	sd	a1, 232(sp)
ffffffff802046b4: b2 f9                	sd	a2, 240(sp)

ffffffff802046b6 .LBB4_7:
ffffffff802046b6: 97 56 00 00          	auipc	a3, 5
ffffffff802046ba: 93 86 06 57          	addi	a3, a3, 1392
ffffffff802046be: 2e fc                	sd	a1, 56(sp)
ffffffff802046c0: b6 85                	add	a1, zero, a3
ffffffff802046c2: 32 f8                	sd	a2, 48(sp)
ffffffff802046c4: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802046c8: e7 80 a0 f8          	jalr	-118(ra)
ffffffff802046cc: 2a f4                	sd	a0, 40(sp)
ffffffff802046ce: 2e f0                	sd	a1, 32(sp)
ffffffff802046d0: 09 a0                	j	2

ffffffff802046d2 .LBB4_8:
ffffffff802046d2: 97 c5 ff ff          	auipc	a1, 1048572
ffffffff802046d6: 93 85 e5 d8          	addi	a1, a1, -626
ffffffff802046da: 62 75                	ld	a0, 56(sp)
ffffffff802046dc: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802046e0: e7 80 c0 f0          	jalr	-244(ra)
ffffffff802046e4: 2a ec                	sd	a0, 24(sp)
ffffffff802046e6: 2e e8                	sd	a1, 16(sp)
ffffffff802046e8: 09 a0                	j	2

ffffffff802046ea .LBB4_9:
ffffffff802046ea: 97 75 00 00          	auipc	a1, 7
ffffffff802046ee: 93 85 c5 72          	addi	a1, a1, 1836
ffffffff802046f2: 42 75                	ld	a0, 48(sp)
ffffffff802046f4: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802046f8: e7 80 e0 e8          	jalr	-370(ra)
ffffffff802046fc: 2a e4                	sd	a0, 8(sp)
ffffffff802046fe: 2e e0                	sd	a1, 0(sp)
ffffffff80204700: 09 a0                	j	2
ffffffff80204702: 22 75                	ld	a0, 40(sp)
ffffffff80204704: 2a e9                	sd	a0, 144(sp)
ffffffff80204706: 82 75                	ld	a1, 32(sp)
ffffffff80204708: 2e ed                	sd	a1, 152(sp)
ffffffff8020470a: 62 66                	ld	a2, 24(sp)
ffffffff8020470c: 32 f1                	sd	a2, 160(sp)
ffffffff8020470e: c2 66                	ld	a3, 16(sp)
ffffffff80204710: 36 f5                	sd	a3, 168(sp)
ffffffff80204712: 22 67                	ld	a4, 8(sp)
ffffffff80204714: 3a f9                	sd	a4, 176(sp)
ffffffff80204716: 82 67                	ld	a5, 0(sp)
ffffffff80204718: 3e fd                	sd	a5, 184(sp)

ffffffff8020471a .LBB4_10:
ffffffff8020471a: 17 a8 00 00          	auipc	a6, 10
ffffffff8020471e: 13 08 e8 9c          	addi	a6, a6, -1586
ffffffff80204722: 83 37 08 00          	ld	a5, 0(a6)
ffffffff80204726: 88 10                	addi	a0, sp, 96
ffffffff80204728: 14 09                	addi	a3, sp, 144
ffffffff8020472a: 0d 48                	addi	a6, zero, 3
ffffffff8020472c: 86 65                	ld	a1, 64(sp)
ffffffff8020472e: 42 86                	add	a2, zero, a6
ffffffff80204730: 42 87                	add	a4, zero, a6
ffffffff80204732: 97 00 00 00          	auipc	ra, 0
ffffffff80204736: e7 80 00 86          	jalr	-1952(ra)
ffffffff8020473a: 09 a0                	j	2

ffffffff8020473c .LBB4_11:
ffffffff8020473c: 97 a5 00 00          	auipc	a1, 10
ffffffff80204740: 93 85 45 9b          	addi	a1, a1, -1612
ffffffff80204744: 88 10                	addi	a0, sp, 96
ffffffff80204746: 97 60 00 00          	auipc	ra, 6
ffffffff8020474a: e7 80 e0 c5          	jalr	-930(ra)
ffffffff8020474e: 00 00                	unimp	

ffffffff80204750 _ZN82_$LT$os..memory..config..KERNEL_END_ADDRESS$u20$as$u20$core..ops..deref..Deref$GT$5deref17h280956bcae13ee79E:
;             fn deref(&self) -> &$T {
ffffffff80204750: 01 11                	addi	sp, sp, -32
ffffffff80204752: 06 ec                	sd	ra, 24(sp)
ffffffff80204754: 2a e4                	sd	a0, 8(sp)

ffffffff80204756 .LBB0_2:
ffffffff80204756: 17 e5 80 00          	auipc	a0, 2062
ffffffff8020475a: 13 05 25 a0          	addi	a0, a0, -1534
ffffffff8020475e: 2a e8                	sd	a0, 16(sp)
;         self.0.call_once(builder)
ffffffff80204760: 97 00 00 00          	auipc	ra, 0
ffffffff80204764: e7 80 a0 87          	jalr	-1926(ra)
;                 __stability()
ffffffff80204768: 2a e0                	sd	a0, 0(sp)
ffffffff8020476a: 09 a0                	j	2
;             }
ffffffff8020476c: 02 65                	ld	a0, 0(sp)
ffffffff8020476e: e2 60                	ld	ra, 24(sp)
ffffffff80204770: 05 61                	addi	sp, sp, 32
ffffffff80204772: 82 80                	ret

ffffffff80204774 _ZN2os6memory5frame13frame_tracker12FrameTracker7address17h1c5cb2b79d5d1271E:
;     pub fn address(&self) -> PhysicalAddress {
ffffffff80204774: 79 71                	addi	sp, sp, -48
ffffffff80204776: 06 f4                	sd	ra, 40(sp)
ffffffff80204778: 2a ec                	sd	a0, 24(sp)
;         self.0.into()
ffffffff8020477a: 08 61                	ld	a0, 0(a0)
ffffffff8020477c: 2a e8                	sd	a0, 16(sp)
ffffffff8020477e: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204782: e7 80 a0 be          	jalr	-1046(ra)
ffffffff80204786: 2a f0                	sd	a0, 32(sp)
ffffffff80204788: 2a e4                	sd	a0, 8(sp)
ffffffff8020478a: 09 a0                	j	2
;     }
ffffffff8020478c: 22 65                	ld	a0, 8(sp)
ffffffff8020478e: a2 70                	ld	ra, 40(sp)
ffffffff80204790: 45 61                	addi	sp, sp, 48
ffffffff80204792: 82 80                	ret

ffffffff80204794 _ZN2os6memory5frame13frame_tracker12FrameTracker11page_number17h538f854007f27418E:
;     pub fn page_number(&self) -> PhysicalPageNumber {
ffffffff80204794: 41 11                	addi	sp, sp, -16
ffffffff80204796: 2a e4                	sd	a0, 8(sp)
;         self.0
ffffffff80204798: 08 61                	ld	a0, 0(a0)
ffffffff8020479a: 2a e0                	sd	a0, 0(sp)
;     }
ffffffff8020479c: 41 01                	addi	sp, sp, 16
ffffffff8020479e: 82 80                	ret

ffffffff802047a0 _ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$i32$GT$2lt17h115007d32d38d14cE:
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
ffffffff802047a0: 41 11                	addi	sp, sp, -16
ffffffff802047a2: 2a e0                	sd	a0, 0(sp)
ffffffff802047a4: 2e e4                	sd	a1, 8(sp)
ffffffff802047a6: 08 41                	lw	a0, 0(a0)
ffffffff802047a8: 8c 41                	lw	a1, 0(a1)
ffffffff802047aa: 33 25 b5 00          	slt	a0, a0, a1
ffffffff802047ae: 41 01                	addi	sp, sp, 16
ffffffff802047b0: 82 80                	ret

ffffffff802047b2 _ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hb1bfbbb569327573E:
;                 fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
ffffffff802047b2: 41 11                	addi	sp, sp, -16
ffffffff802047b4: 2a e0                	sd	a0, 0(sp)
ffffffff802047b6: 2e e4                	sd	a1, 8(sp)
ffffffff802047b8: 08 61                	ld	a0, 0(a0)
ffffffff802047ba: 8c 61                	ld	a1, 0(a1)
ffffffff802047bc: 2d 8d                	xor	a0, a0, a1
ffffffff802047be: 13 35 15 00          	seqz	a0, a0
ffffffff802047c2: 41 01                	addi	sp, sp, 16
ffffffff802047c4: 82 80                	ret

ffffffff802047c6 _ZN2os3sbi15console_putchar17h18f04475318414b5E:
; pub fn console_putchar(c: usize) {
ffffffff802047c6: 39 71                	addi	sp, sp, -64
ffffffff802047c8: 2a e8                	sd	a0, 16(sp)
ffffffff802047ca: 85 45                	addi	a1, zero, 1
ffffffff802047cc: 2e f0                	sd	a1, 32(sp)
ffffffff802047ce: 2a f4                	sd	a0, 40(sp)
ffffffff802047d0: 01 46                	mv	a2, zero
ffffffff802047d2: 32 f8                	sd	a2, 48(sp)
ffffffff802047d4: 32 fc                	sd	a2, 56(sp)
;         llvm_asm!("ecall"
ffffffff802047d6: 2e e4                	sd	a1, 8(sp)
ffffffff802047d8: b2 85                	add	a1, zero, a2
ffffffff802047da: a2 68                	ld	a7, 8(sp)
ffffffff802047dc: 73 00 00 00          	ecall	
ffffffff802047e0: 2a ec                	sd	a0, 24(sp)
;     sbi_call(SBI_CONSOLE_PUTCHAR, c, 0, 0);
ffffffff802047e2: 09 a0                	j	2
; }
ffffffff802047e4: 21 61                	addi	sp, sp, 64
ffffffff802047e6: 82 80                	ret

ffffffff802047e8 _ZN2os3sbi8shutdown17h8feeadf6aa0e5f8bE:
; pub fn shutdown() -> ! {
ffffffff802047e8: 39 71                	addi	sp, sp, -64
ffffffff802047ea: 21 45                	addi	a0, zero, 8
ffffffff802047ec: 2a f0                	sd	a0, 32(sp)
ffffffff802047ee: 81 45                	mv	a1, zero
ffffffff802047f0: 2e f4                	sd	a1, 40(sp)
ffffffff802047f2: 2e f8                	sd	a1, 48(sp)
ffffffff802047f4: 2e fc                	sd	a1, 56(sp)
;         llvm_asm!("ecall"
ffffffff802047f6: 2a e8                	sd	a0, 16(sp)
ffffffff802047f8: 2e 85                	add	a0, zero, a1
ffffffff802047fa: 2e e4                	sd	a1, 8(sp)
ffffffff802047fc: 22 66                	ld	a2, 8(sp)
ffffffff802047fe: c2 68                	ld	a7, 16(sp)
ffffffff80204800: 73 00 00 00          	ecall	
ffffffff80204804: 2a ec                	sd	a0, 24(sp)
;     sbi_call(SBI_SHUTDOWN, 0, 0, 0);
ffffffff80204806: 09 a0                	j	2

ffffffff80204808 .LBB1_2:
;     unreachable!()
ffffffff80204808: 17 a5 00 00          	auipc	a0, 10
ffffffff8020480c: 13 05 05 90          	addi	a0, a0, -1792

ffffffff80204810 .LBB1_3:
ffffffff80204810: 17 a6 00 00          	auipc	a2, 10
ffffffff80204814: 13 06 06 93          	addi	a2, a2, -1744
ffffffff80204818: 93 05 80 02          	addi	a1, zero, 40
ffffffff8020481c: 97 60 00 00          	auipc	ra, 6
ffffffff80204820: e7 80 c0 b1          	jalr	-1252(ra)
ffffffff80204824: 00 00                	unimp	

ffffffff80204826 _ZN2os3sbi9set_timer17hdb4fdc186ea5c321E:
; pub fn set_timer(time: usize) {
ffffffff80204826: 39 71                	addi	sp, sp, -64
ffffffff80204828: 2a e8                	sd	a0, 16(sp)
ffffffff8020482a: 81 45                	mv	a1, zero
ffffffff8020482c: 2e f0                	sd	a1, 32(sp)
ffffffff8020482e: 2a f4                	sd	a0, 40(sp)
ffffffff80204830: 2e f8                	sd	a1, 48(sp)
ffffffff80204832: 2e fc                	sd	a1, 56(sp)
;         llvm_asm!("ecall"
ffffffff80204834: 2e e4                	sd	a1, 8(sp)
ffffffff80204836: 22 66                	ld	a2, 8(sp)
ffffffff80204838: a2 68                	ld	a7, 8(sp)
ffffffff8020483a: 73 00 00 00          	ecall	
ffffffff8020483e: 2a ec                	sd	a0, 24(sp)
;     sbi_call(SBI_SET_TIMER, time, 0, 0);
ffffffff80204840: 09 a0                	j	2
; }
ffffffff80204842: 21 61                	addi	sp, sp, 64
ffffffff80204844: 82 80                	ret

ffffffff80204846 _ZN4core4iter8adapters18Enumerate$LT$I$GT$3new17h48f111247831417cE:
;     pub(super) fn new(iter: I) -> Enumerate<I> {
ffffffff80204846: 01 11                	addi	sp, sp, -32
;         Enumerate { iter, count: 0 }
ffffffff80204848: 90 6d                	ld	a2, 24(a1)
ffffffff8020484a: 32 ec                	sd	a2, 24(sp)
ffffffff8020484c: 94 69                	ld	a3, 16(a1)
ffffffff8020484e: 36 e8                	sd	a3, 16(sp)
ffffffff80204850: 98 65                	ld	a4, 8(a1)
ffffffff80204852: 3a e4                	sd	a4, 8(sp)
ffffffff80204854: 8c 61                	ld	a1, 0(a1)
ffffffff80204856: 2e e0                	sd	a1, 0(sp)
ffffffff80204858: 10 ed                	sd	a2, 24(a0)
ffffffff8020485a: 14 e9                	sd	a3, 16(a0)
ffffffff8020485c: 18 e5                	sd	a4, 8(a0)
ffffffff8020485e: 0c e1                	sd	a1, 0(a0)
ffffffff80204860: 81 45                	mv	a1, zero
ffffffff80204862: 0c f1                	sd	a1, 32(a0)
;     }
ffffffff80204864: 05 61                	addi	sp, sp, 32
ffffffff80204866: 82 80                	ret

ffffffff80204868 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hec1e8008ece72107E:
;         self
ffffffff80204868: 90 71                	ld	a2, 32(a1)
ffffffff8020486a: 10 f1                	sd	a2, 32(a0)
ffffffff8020486c: 90 6d                	ld	a2, 24(a1)
ffffffff8020486e: 10 ed                	sd	a2, 24(a0)
ffffffff80204870: 90 69                	ld	a2, 16(a1)
ffffffff80204872: 10 e9                	sd	a2, 16(a0)
ffffffff80204874: 90 65                	ld	a2, 8(a1)
ffffffff80204876: 10 e5                	sd	a2, 8(a0)
ffffffff80204878: 8c 61                	ld	a1, 0(a1)
ffffffff8020487a: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff8020487c: 82 80                	ret

ffffffff8020487e _ZN99_$LT$core..iter..adapters..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he0902053dca7e829E:
;     fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
ffffffff8020487e: 19 71                	addi	sp, sp, -128
ffffffff80204880: 86 fc                	sd	ra, 120(sp)
ffffffff80204882: ae e8                	sd	a1, 80(sp)
;         let a = self.iter.next()?;
ffffffff80204884: 2a f4                	sd	a0, 40(sp)
ffffffff80204886: 2e 85                	add	a0, zero, a1
ffffffff80204888: 2e f0                	sd	a1, 32(sp)
ffffffff8020488a: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff8020488e: e7 80 a0 7f          	jalr	2042(ra)
ffffffff80204892: 2a ec                	sd	a0, 24(sp)
ffffffff80204894: 2e e8                	sd	a1, 16(sp)
ffffffff80204896: 09 a0                	j	2
ffffffff80204898: 62 65                	ld	a0, 24(sp)
ffffffff8020489a: c2 65                	ld	a1, 16(sp)
ffffffff8020489c: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802048a0: e7 80 60 0a          	jalr	166(ra)
ffffffff802048a4: 2a f8                	sd	a0, 48(sp)
ffffffff802048a6: 2e fc                	sd	a1, 56(sp)
ffffffff802048a8: 09 a0                	j	2
ffffffff802048aa: 42 75                	ld	a0, 48(sp)
ffffffff802048ac: 81 45                	mv	a1, zero
ffffffff802048ae: 63 04 b5 00          	beq	a0, a1, 8
ffffffff802048b2: 09 a0                	j	2
ffffffff802048b4: 1d a0                	j	38
ffffffff802048b6: 62 75                	ld	a0, 56(sp)
ffffffff802048b8: aa f0                	sd	a0, 96(sp)
ffffffff802048ba: aa f4                	sd	a0, 104(sp)
;         let i = self.count;
ffffffff802048bc: 82 75                	ld	a1, 32(sp)
ffffffff802048be: 13 86 05 02          	addi	a2, a1, 32
ffffffff802048c2: 94 71                	ld	a3, 32(a1)
ffffffff802048c4: b6 f8                	sd	a3, 112(sp)
ffffffff802048c6: 85 45                	addi	a1, zero, 1
;         AddAssign::add_assign(&mut self.count, 1);
ffffffff802048c8: 2a e4                	sd	a0, 8(sp)
ffffffff802048ca: 32 85                	add	a0, zero, a2
ffffffff802048cc: 36 e0                	sd	a3, 0(sp)
ffffffff802048ce: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff802048d2: e7 80 80 83          	jalr	-1992(ra)
ffffffff802048d6: 15 a0                	j	36
;         let a = self.iter.next()?;
ffffffff802048d8: 00 00                	unimp	
ffffffff802048da: 97 50 00 00          	auipc	ra, 5
ffffffff802048de: e7 80 e0 d5          	jalr	-674(ra)
ffffffff802048e2: 21 a0                	j	8
;     }
ffffffff802048e4: e6 70                	ld	ra, 120(sp)
ffffffff802048e6: 09 61                	addi	sp, sp, 128
ffffffff802048e8: 82 80                	ret
;         let a = self.iter.next()?;
ffffffff802048ea: 22 75                	ld	a0, 40(sp)
ffffffff802048ec: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802048f0: e7 80 c0 04          	jalr	76(ra)
ffffffff802048f4: 09 a0                	j	2
ffffffff802048f6: 09 a0                	j	2
ffffffff802048f8: f5 b7                	j	-20
;         Some((i, a))
ffffffff802048fa: 02 65                	ld	a0, 0(sp)
ffffffff802048fc: aa e0                	sd	a0, 64(sp)
ffffffff802048fe: a2 65                	ld	a1, 8(sp)
ffffffff80204900: ae e4                	sd	a1, 72(sp)
ffffffff80204902: 22 76                	ld	a2, 40(sp)
ffffffff80204904: 08 e6                	sd	a0, 8(a2)
ffffffff80204906: 0c ea                	sd	a1, 16(a2)
ffffffff80204908: 85 46                	addi	a3, zero, 1
ffffffff8020490a: 14 e2                	sd	a3, 0(a2)
;     }
ffffffff8020490c: e1 bf                	j	-40

ffffffff8020490e _ZN2os9interrupt5timer4init17h1a5bdb87ff381fc8E:
; pub fn init() {
ffffffff8020490e: 41 11                	addi	sp, sp, -16
;         sie::set_stimer(); 
ffffffff80204910: 06 e4                	sd	ra, 8(sp)
ffffffff80204912: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80204916: e7 80 40 30          	jalr	772(ra)
ffffffff8020491a: 09 a0                	j	2
;         sstatus::set_sie();  // 开启 sstatus 寄存器中的 SIE 位
ffffffff8020491c: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80204920: e7 80 e0 a9          	jalr	-1378(ra)
ffffffff80204924: 09 a0                	j	2
;     set_next_timeout();
ffffffff80204926: 97 00 00 00          	auipc	ra, 0
ffffffff8020492a: e7 80 00 01          	jalr	16(ra)
ffffffff8020492e: 09 a0                	j	2
; }
ffffffff80204930: a2 60                	ld	ra, 8(sp)
ffffffff80204932: 41 01                	addi	sp, sp, 16
ffffffff80204934: 82 80                	ret

ffffffff80204936 _ZN2os9interrupt5timer16set_next_timeout17h5813d2bffdcaf4eeE:
; fn set_next_timeout() {
ffffffff80204936: 01 11                	addi	sp, sp, -32
;     set_timer(time::read() + INTERVAL);
ffffffff80204938: 06 ec                	sd	ra, 24(sp)
ffffffff8020493a: 97 00 00 00          	auipc	ra, 0
ffffffff8020493e: e7 80 20 13          	jalr	306(ra)
ffffffff80204942: 2a e8                	sd	a0, 16(sp)
ffffffff80204944: 09 a0                	j	2
ffffffff80204946: 61 65                	lui	a0, 24
ffffffff80204948: 1b 05 05 6a          	addiw	a0, a0, 1696
ffffffff8020494c: c2 65                	ld	a1, 16(sp)
ffffffff8020494e: 2e 95                	add	a0, a0, a1
ffffffff80204950: 2a e4                	sd	a0, 8(sp)
ffffffff80204952: 63 6c b5 00          	bltu	a0, a1, 24
ffffffff80204956: 09 a0                	j	2
ffffffff80204958: 22 65                	ld	a0, 8(sp)
ffffffff8020495a: 97 00 00 00          	auipc	ra, 0
ffffffff8020495e: e7 80 c0 ec          	jalr	-308(ra)
ffffffff80204962: 09 a0                	j	2
; }
ffffffff80204964: e2 60                	ld	ra, 24(sp)
ffffffff80204966: 05 61                	addi	sp, sp, 32
ffffffff80204968: 82 80                	ret

ffffffff8020496a .LBB1_5:
;     set_timer(time::read() + INTERVAL);
ffffffff8020496a: 17 a5 00 00          	auipc	a0, 10
ffffffff8020496e: 13 05 65 82          	addi	a0, a0, -2010

ffffffff80204972 .LBB1_6:
ffffffff80204972: 17 96 00 00          	auipc	a2, 9
ffffffff80204976: 13 06 e6 7f          	addi	a2, a2, 2046
ffffffff8020497a: f1 45                	addi	a1, zero, 28
ffffffff8020497c: 97 60 00 00          	auipc	ra, 6
ffffffff80204980: e7 80 c0 9b          	jalr	-1604(ra)
ffffffff80204984: 00 00                	unimp	

ffffffff80204986 _ZN2os9interrupt5timer4tick17h49503a0932e4eb57E:
; pub fn tick() {
ffffffff80204986: 19 71                	addi	sp, sp, -128
;     set_next_timeout();
ffffffff80204988: 86 fc                	sd	ra, 120(sp)
ffffffff8020498a: 97 00 00 00          	auipc	ra, 0
ffffffff8020498e: e7 80 c0 fa          	jalr	-84(ra)
ffffffff80204992: 09 a0                	j	2

ffffffff80204994 .LBB2_10:
;         TICKS += 1;
ffffffff80204994: 17 d5 80 00          	auipc	a0, 2061
ffffffff80204998: 13 05 c5 7d          	addi	a0, a0, 2012
ffffffff8020499c: 08 61                	ld	a0, 0(a0)
ffffffff8020499e: 93 05 15 00          	addi	a1, a0, 1
ffffffff802049a2: 2e ec                	sd	a1, 24(sp)
ffffffff802049a4: 63 e6 a5 0a          	bltu	a1, a0, 172
ffffffff802049a8: 09 a0                	j	2

ffffffff802049aa .LBB2_11:
ffffffff802049aa: 17 d5 80 00          	auipc	a0, 2061
ffffffff802049ae: 13 05 65 7c          	addi	a0, a0, 1990
ffffffff802049b2: e2 65                	ld	a1, 24(sp)
ffffffff802049b4: 0c e1                	sd	a1, 0(a0)
;         if TICKS % 100 == 0 {
ffffffff802049b6: 13 d5 25 00          	srli	a0, a1, 2
ffffffff802049ba: 37 f6 51 00          	lui	a2, 1311
ffffffff802049be: 1b 06 56 b8          	addiw	a2, a2, -1147
ffffffff802049c2: 36 06                	slli	a2, a2, 13
ffffffff802049c4: 13 06 76 3d          	addi	a2, a2, 983
ffffffff802049c8: 3a 06                	slli	a2, a2, 14
ffffffff802049ca: 13 06 f6 28          	addi	a2, a2, 655
ffffffff802049ce: 32 06                	slli	a2, a2, 12
ffffffff802049d0: 13 06 36 5c          	addi	a2, a2, 1475
ffffffff802049d4: 33 35 c5 02          	<unknown>
ffffffff802049d8: 09 81                	srli	a0, a0, 2
ffffffff802049da: 13 06 40 06          	addi	a2, zero, 100
ffffffff802049de: 33 05 c5 02          	<unknown>
ffffffff802049e2: 33 85 a5 40          	sub	a0, a1, a0
ffffffff802049e6: 01 46                	mv	a2, zero
ffffffff802049e8: 63 04 c5 00          	beq	a0, a2, 8
ffffffff802049ec: 09 a0                	j	2
ffffffff802049ee: b1 a8                	j	92

ffffffff802049f0 .LBB2_12:
;             println!("{} tick", TICKS);
ffffffff802049f0: 17 a5 00 00          	auipc	a0, 10
ffffffff802049f4: 13 05 05 80          	addi	a0, a0, -2048
ffffffff802049f8: 0c 61                	ld	a1, 0(a0)

ffffffff802049fa .LBB2_13:
ffffffff802049fa: 17 d5 80 00          	auipc	a0, 2061
ffffffff802049fe: 13 05 65 77          	addi	a0, a0, 1910
ffffffff80204a02: aa f4                	sd	a0, 104(sp)
ffffffff80204a04: aa f8                	sd	a0, 112(sp)

ffffffff80204a06 .LBB2_14:
ffffffff80204a06: 17 76 00 00          	auipc	a2, 7
ffffffff80204a0a: 13 06 26 6e          	addi	a2, a2, 1762
ffffffff80204a0e: 2e e8                	sd	a1, 16(sp)
ffffffff80204a10: b2 85                	add	a1, zero, a2
ffffffff80204a12: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204a16: e7 80 00 b7          	jalr	-1168(ra)
ffffffff80204a1a: 2a e4                	sd	a0, 8(sp)
ffffffff80204a1c: 2e e0                	sd	a1, 0(sp)
ffffffff80204a1e: 09 a0                	j	2
ffffffff80204a20: 22 65                	ld	a0, 8(sp)
ffffffff80204a22: aa ec                	sd	a0, 88(sp)
ffffffff80204a24: 82 65                	ld	a1, 0(sp)
ffffffff80204a26: ae f0                	sd	a1, 96(sp)
ffffffff80204a28: 28 10                	addi	a0, sp, 40
ffffffff80204a2a: 09 46                	addi	a2, zero, 2
ffffffff80204a2c: b4 08                	addi	a3, sp, 88
ffffffff80204a2e: 05 47                	addi	a4, zero, 1
ffffffff80204a30: c2 65                	ld	a1, 16(sp)
ffffffff80204a32: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80204a36: e7 80 60 58          	jalr	1414(ra)
ffffffff80204a3a: 09 a0                	j	2
ffffffff80204a3c: 28 10                	addi	a0, sp, 40
ffffffff80204a3e: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204a42: e7 80 00 0e          	jalr	224(ra)
ffffffff80204a46: 09 a0                	j	2
;         if TICKS % 100 == 0 {
ffffffff80204a48: 09 a0                	j	2
; }
ffffffff80204a4a: e6 70                	ld	ra, 120(sp)
ffffffff80204a4c: 09 61                	addi	sp, sp, 128
ffffffff80204a4e: 82 80                	ret

ffffffff80204a50 .LBB2_15:
;         TICKS += 1;
ffffffff80204a50: 17 95 00 00          	auipc	a0, 9
ffffffff80204a54: 13 05 05 74          	addi	a0, a0, 1856

ffffffff80204a58 .LBB2_16:
ffffffff80204a58: 17 96 00 00          	auipc	a2, 9
ffffffff80204a5c: 13 06 86 75          	addi	a2, a2, 1880
ffffffff80204a60: f1 45                	addi	a1, zero, 28
ffffffff80204a62: 97 60 00 00          	auipc	ra, 6
ffffffff80204a66: e7 80 60 8d          	jalr	-1834(ra)
ffffffff80204a6a: 00 00                	unimp	

ffffffff80204a6c _ZN5riscv8register4time4read17h599d63f064101cfdE:
;         pub fn read() -> usize {
ffffffff80204a6c: 41 11                	addi	sp, sp, -16
;             unsafe { _read() }
ffffffff80204a6e: 06 e4                	sd	ra, 8(sp)
ffffffff80204a70: 97 00 00 00          	auipc	ra, 0
ffffffff80204a74: e7 80 40 01          	jalr	20(ra)
ffffffff80204a78: 2a e0                	sd	a0, 0(sp)
ffffffff80204a7a: 09 a0                	j	2
;         }
ffffffff80204a7c: 02 65                	ld	a0, 0(sp)
ffffffff80204a7e: a2 60                	ld	ra, 8(sp)
ffffffff80204a80: 41 01                	addi	sp, sp, 16
ffffffff80204a82: 82 80                	ret

ffffffff80204a84 _ZN5riscv8register4time5_read17h4bb37e9e246c501dE:
;         unsafe fn _read() -> usize {
ffffffff80204a84: 41 11                	addi	sp, sp, -16
;                     llvm_asm!("csrrs $0, $1, x0" : "=r"(r) : "i"($csr_number) :: "volatile");
ffffffff80204a86: 73 25 10 c0          	rdtime	a0
ffffffff80204a8a: 2a e4                	sd	a0, 8(sp)
;         }
ffffffff80204a8c: 41 01                	addi	sp, sp, 16
ffffffff80204a8e: 82 80                	ret

ffffffff80204a90 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$11offset_from17hb17be9a056ac7d26E:
;     pub const unsafe fn offset_from(self, origin: *const T) -> isize
ffffffff80204a90: 5d 71                	addi	sp, sp, -80
ffffffff80204a92: 2a f4                	sd	a0, 40(sp)
ffffffff80204a94: 2e f8                	sd	a1, 48(sp)
ffffffff80204a96: 21 46                	addi	a2, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80204a98: b2 e4                	sd	a2, 72(sp)
;         let pointee_size = mem::size_of::<T>();
ffffffff80204a9a: 32 fc                	sd	a2, 56(sp)
ffffffff80204a9c: 2e ec                	sd	a1, 24(sp)
ffffffff80204a9e: 2a e8                	sd	a0, 16(sp)
ffffffff80204aa0: 32 e4                	sd	a2, 8(sp)
ffffffff80204aa2: 09 a0                	j	2
ffffffff80204aa4: 01 45                	mv	a0, zero
;         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
ffffffff80204aa6: a2 65                	ld	a1, 8(sp)
ffffffff80204aa8: 63 9b a5 00          	bne	a1, a0, 22
ffffffff80204aac: 29 a0                	j	10
ffffffff80204aae: 05 45                	addi	a0, zero, 1
ffffffff80204ab0: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff80204ab4: 11 a8                	j	20
ffffffff80204ab6: 01 45                	mv	a0, zero
ffffffff80204ab8: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff80204abc: 31 a0                	j	12
ffffffff80204abe: 7d 55                	addi	a0, zero, -1
ffffffff80204ac0: a2 65                	ld	a1, 8(sp)
ffffffff80204ac2: e3 46 b5 fe          	blt	a0, a1, -20
ffffffff80204ac6: c5 bf                	j	-16
ffffffff80204ac8: 03 45 71 02          	lbu	a0, 39(sp)
ffffffff80204acc: 05 89                	andi	a0, a0, 1
ffffffff80204ace: 81 45                	mv	a1, zero
ffffffff80204ad0: 63 0b b5 00          	beq	a0, a1, 22
ffffffff80204ad4: 09 a0                	j	2
;         intrinsics::ptr_offset_from(self, origin)
ffffffff80204ad6: 42 65                	ld	a0, 16(sp)
ffffffff80204ad8: e2 65                	ld	a1, 24(sp)
ffffffff80204ada: 33 06 b5 40          	sub	a2, a0, a1
ffffffff80204ade: 0d 86                	srai	a2, a2, 3
ffffffff80204ae0: b2 e0                	sd	a2, 64(sp)
ffffffff80204ae2: 32 e0                	sd	a2, 0(sp)
ffffffff80204ae4: 05 a0                	j	32

ffffffff80204ae6 .LBB0_9:
;         $crate::panicking::panic($msg)
ffffffff80204ae6: 17 95 00 00          	auipc	a0, 9
ffffffff80204aea: 13 05 25 71          	addi	a0, a0, 1810

ffffffff80204aee .LBB0_10:
ffffffff80204aee: 17 96 00 00          	auipc	a2, 9
ffffffff80204af2: 13 06 a6 7c          	addi	a2, a2, 1994
ffffffff80204af6: 93 05 90 04          	addi	a1, zero, 73
ffffffff80204afa: 97 60 00 00          	auipc	ra, 6
ffffffff80204afe: e7 80 e0 83          	jalr	-1986(ra)
ffffffff80204b02: 00 00                	unimp	
;     }
ffffffff80204b04: 02 65                	ld	a0, 0(sp)
ffffffff80204b06: 61 61                	addi	sp, sp, 80
ffffffff80204b08: 82 80                	ret

ffffffff80204b0a _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hda2665ddf0f4c9baE:
;     pub const unsafe fn add(self, count: usize) -> Self
ffffffff80204b0a: 01 11                	addi	sp, sp, -32
ffffffff80204b0c: 06 ec                	sd	ra, 24(sp)
ffffffff80204b0e: 2a e4                	sd	a0, 8(sp)
ffffffff80204b10: 2e e8                	sd	a1, 16(sp)
;         self.offset(count as isize)
ffffffff80204b12: 97 00 00 00          	auipc	ra, 0
ffffffff80204b16: e7 80 40 01          	jalr	20(ra)
ffffffff80204b1a: 2a e0                	sd	a0, 0(sp)
ffffffff80204b1c: 09 a0                	j	2
;     }
ffffffff80204b1e: 02 65                	ld	a0, 0(sp)
ffffffff80204b20: e2 60                	ld	ra, 24(sp)
ffffffff80204b22: 05 61                	addi	sp, sp, 32
ffffffff80204b24: 82 80                	ret

ffffffff80204b26 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h37b3466110ec9ef1E:
;     pub const unsafe fn offset(self, count: isize) -> *const T
ffffffff80204b26: 01 11                	addi	sp, sp, -32
ffffffff80204b28: 2a e4                	sd	a0, 8(sp)
ffffffff80204b2a: 2e e8                	sd	a1, 16(sp)
;         intrinsics::offset(self, count)
ffffffff80204b2c: 2e 95                	add	a0, a0, a1
ffffffff80204b2e: 2a ec                	sd	a0, 24(sp)
ffffffff80204b30: 2a e0                	sd	a0, 0(sp)
ffffffff80204b32: 09 a0                	j	2
;     }
ffffffff80204b34: 02 65                	ld	a0, 0(sp)
ffffffff80204b36: 05 61                	addi	sp, sp, 32
ffffffff80204b38: 82 80                	ret

ffffffff80204b3a _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h916ee230264ac8abE:
;     pub fn is_null(self) -> bool {
ffffffff80204b3a: 41 11                	addi	sp, sp, -16
ffffffff80204b3c: 2a e4                	sd	a0, 8(sp)
;         (self as *const u8) == null()
ffffffff80204b3e: 2a e0                	sd	a0, 0(sp)
ffffffff80204b40: 09 a0                	j	2
ffffffff80204b42: 02 65                	ld	a0, 0(sp)
ffffffff80204b44: 13 35 15 00          	seqz	a0, a0
;     }
ffffffff80204b48: 41 01                	addi	sp, sp, 16
ffffffff80204b4a: 82 80                	ret

ffffffff80204b4c rust_main:
; pub extern "C" fn rust_main() -> ! {
ffffffff80204b4c: 39 71                	addi	sp, sp, -64
;     println!("Hello rCore-Tutorial !!!");
ffffffff80204b4e: 06 fc                	sd	ra, 56(sp)

ffffffff80204b50 .LBB0_10:
ffffffff80204b50: 17 95 00 00          	auipc	a0, 9
ffffffff80204b54: 13 05 05 7b          	addi	a0, a0, 1968
ffffffff80204b58: 0c 61                	ld	a1, 0(a0)

ffffffff80204b5a .LBB0_11:
ffffffff80204b5a: 17 95 00 00          	auipc	a0, 9
ffffffff80204b5e: 13 05 e5 7a          	addi	a0, a0, 1966
ffffffff80204b62: 14 61                	ld	a3, 0(a0)
ffffffff80204b64: 28 00                	addi	a0, sp, 8
ffffffff80204b66: 05 46                	addi	a2, zero, 1
ffffffff80204b68: 01 47                	mv	a4, zero
ffffffff80204b6a: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80204b6e: e7 80 e0 44          	jalr	1102(ra)
ffffffff80204b72: 09 a0                	j	2
ffffffff80204b74: 28 00                	addi	a0, sp, 8
ffffffff80204b76: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204b7a: e7 80 80 fa          	jalr	-88(ra)
ffffffff80204b7e: 09 a0                	j	2
;     interrupt::init();
ffffffff80204b80: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80204b84: e7 80 80 ae          	jalr	-1304(ra)
ffffffff80204b88: 09 a0                	j	2
;     memory::init();
ffffffff80204b8a: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80204b8e: e7 80 80 e7          	jalr	-392(ra)
ffffffff80204b92: 09 a0                	j	2
;     test_timer();
ffffffff80204b94: 97 00 00 00          	auipc	ra, 0
ffffffff80204b98: e7 80 e0 04          	jalr	78(ra)
ffffffff80204b9c: 09 a0                	j	2
;     test_allocation();
ffffffff80204b9e: 97 00 00 00          	auipc	ra, 0
ffffffff80204ba2: e7 80 20 0b          	jalr	178(ra)
ffffffff80204ba6: 09 a0                	j	2
;     test_physical_memory_allocator();
ffffffff80204ba8: 97 00 00 00          	auipc	ra, 0
ffffffff80204bac: e7 80 e0 48          	jalr	1166(ra)
ffffffff80204bb0: 09 a0                	j	2
;     test_virtual_address();
ffffffff80204bb2: 97 00 00 00          	auipc	ra, 0
ffffffff80204bb6: e7 80 00 74          	jalr	1856(ra)
ffffffff80204bba: 09 a0                	j	2
;     print_line();
ffffffff80204bbc: 97 00 00 00          	auipc	ra, 0
ffffffff80204bc0: e7 80 e0 7a          	jalr	1966(ra)
ffffffff80204bc4: 09 a0                	j	2

ffffffff80204bc6 .LBB0_12:
;     panic!("end of rust_main")
ffffffff80204bc6: 17 95 00 00          	auipc	a0, 9
ffffffff80204bca: 13 05 a5 fe          	addi	a0, a0, -22

ffffffff80204bce .LBB0_13:
ffffffff80204bce: 17 96 00 00          	auipc	a2, 9
ffffffff80204bd2: 13 06 26 75          	addi	a2, a2, 1874
ffffffff80204bd6: c1 45                	addi	a1, zero, 16
ffffffff80204bd8: 97 50 00 00          	auipc	ra, 5
ffffffff80204bdc: e7 80 00 76          	jalr	1888(ra)
ffffffff80204be0: 00 00                	unimp	

ffffffff80204be2 _ZN2os10test_timer17hb42aae9146e2ce3eE:
; pub fn test_timer(){
ffffffff80204be2: 39 71                	addi	sp, sp, -64
;     print_line();
ffffffff80204be4: 06 fc                	sd	ra, 56(sp)
ffffffff80204be6: 97 00 00 00          	auipc	ra, 0
ffffffff80204bea: e7 80 40 78          	jalr	1924(ra)
ffffffff80204bee: 09 a0                	j	2
ffffffff80204bf0: 13 05 b0 04          	addi	a0, zero, 75
ffffffff80204bf4: 0a 15                	slli	a0, a0, 34
;         for i in 0..300{
ffffffff80204bf6: 2a e8                	sd	a0, 16(sp)
ffffffff80204bf8: 01 45                	mv	a0, zero
ffffffff80204bfa: 93 05 c0 12          	addi	a1, zero, 300
ffffffff80204bfe: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80204c02: e7 80 20 b6          	jalr	-1182(ra)
ffffffff80204c06: 2a e4                	sd	a0, 8(sp)
ffffffff80204c08: 2e e0                	sd	a1, 0(sp)
ffffffff80204c0a: 09 a0                	j	2
ffffffff80204c0c: 22 65                	ld	a0, 8(sp)
ffffffff80204c0e: 2a cc                	sw	a0, 24(sp)
ffffffff80204c10: 82 65                	ld	a1, 0(sp)
ffffffff80204c12: 2e ce                	sw	a1, 28(sp)
ffffffff80204c14: 09 a0                	j	2
ffffffff80204c16: 28 08                	addi	a0, sp, 24
ffffffff80204c18: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80204c1c: e7 80 e0 ad          	jalr	-1314(ra)
ffffffff80204c20: 2a d0                	sw	a0, 32(sp)
ffffffff80204c22: 2e d2                	sw	a1, 36(sp)
ffffffff80204c24: 09 a0                	j	2
ffffffff80204c26: 03 65 01 02          	lwu	a0, 32(sp)
ffffffff80204c2a: 81 45                	mv	a1, zero
ffffffff80204c2c: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80204c30: 09 a0                	j	2
ffffffff80204c32: 29 a0                	j	10
; }
ffffffff80204c34: e2 70                	ld	ra, 56(sp)
ffffffff80204c36: 21 61                	addi	sp, sp, 64
ffffffff80204c38: 82 80                	ret
;         for i in 0..300{
ffffffff80204c3a: 00 00                	unimp	
ffffffff80204c3c: 12 55                	lw	a0, 36(sp)
ffffffff80204c3e: 2a d6                	sw	a0, 44(sp)
ffffffff80204c40: 2a d8                	sw	a0, 48(sp)
ffffffff80204c42: 2a da                	sw	a0, 52(sp)
;             interrupt::timer::tick();
ffffffff80204c44: 97 00 00 00          	auipc	ra, 0
ffffffff80204c48: e7 80 20 d4          	jalr	-702(ra)
ffffffff80204c4c: 09 a0                	j	2
;         for i in 0..300{
ffffffff80204c4e: e1 b7                	j	-56

ffffffff80204c50 _ZN2os15test_allocation17h66fd79828a9a41a8E:
; pub fn test_allocation(){
ffffffff80204c50: 13 01 01 b8          	addi	sp, sp, -1152
;     print_line();
ffffffff80204c54: 23 3c 11 46          	sd	ra, 1144(sp)
ffffffff80204c58: 97 00 00 00          	auipc	ra, 0
ffffffff80204c5c: e7 80 20 71          	jalr	1810(ra)
ffffffff80204c60: 09 a0                	j	2
ffffffff80204c62: 15 45                	addi	a0, zero, 5
ffffffff80204c64: 23 2a a1 46          	sw	a0, 1140(sp)
ffffffff80204c68: 91 45                	addi	a1, zero, 4
;         box x
ffffffff80204c6a: aa f9                	sd	a0, 240(sp)
ffffffff80204c6c: 2e 85                	add	a0, zero, a1
ffffffff80204c6e: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80204c72: e7 80 e0 50          	jalr	1294(ra)
ffffffff80204c76: aa 85                	add	a1, zero, a0
ffffffff80204c78: 4e 76                	ld	a2, 240(sp)
ffffffff80204c7a: 10 c1                	sw	a2, 0(a0)
;     let v = Box::new(5);
ffffffff80204c7c: 23 38 a1 3c          	sd	a0, 976(sp)
ffffffff80204c80: ae f5                	sd	a1, 232(sp)
ffffffff80204c82: 09 a0                	j	2

ffffffff80204c84 .LBB2_41:
;     assert_eq!(*v, 5);
ffffffff80204c84: 17 95 00 00          	auipc	a0, 9
ffffffff80204c88: 13 05 45 6b          	addi	a0, a0, 1716
ffffffff80204c8c: 08 61                	ld	a0, 0(a0)
ffffffff80204c8e: ae 75                	ld	a1, 232(sp)
ffffffff80204c90: ae fd                	sd	a1, 248(sp)
ffffffff80204c92: 2a e2                	sd	a0, 256(sp)
ffffffff80204c94: 2e 76                	ld	a2, 232(sp)
ffffffff80204c96: 23 3c c1 3c          	sd	a2, 984(sp)
ffffffff80204c9a: 23 30 a1 3e          	sd	a0, 992(sp)
ffffffff80204c9e: 14 42                	lw	a3, 0(a2)
ffffffff80204ca0: 18 41                	lw	a4, 0(a0)
ffffffff80204ca2: aa f1                	sd	a0, 224(sp)
ffffffff80204ca4: ae ed                	sd	a1, 216(sp)
ffffffff80204ca6: 63 99 e6 00          	bne	a3, a4, 18
ffffffff80204caa: 09 a0                	j	2
;     core::mem::drop(v);
ffffffff80204cac: 2e 75                	ld	a0, 232(sp)
ffffffff80204cae: 97 b0 ff ff          	auipc	ra, 1048571
ffffffff80204cb2: e7 80 e0 49          	jalr	1182(ra)
ffffffff80204cb6: 49 a8                	j	146

ffffffff80204cb8 .LBB2_42:
;     assert_eq!(*v, 5);
ffffffff80204cb8: 17 95 00 00          	auipc	a0, 9
ffffffff80204cbc: 13 05 85 6f          	addi	a0, a0, 1784
ffffffff80204cc0: 0c 61                	ld	a1, 0(a0)
ffffffff80204cc2: 6e 65                	ld	a0, 216(sp)
ffffffff80204cc4: aa f6                	sd	a0, 360(sp)
ffffffff80204cc6: 0e 76                	ld	a2, 224(sp)
ffffffff80204cc8: b2 fa                	sd	a2, 368(sp)
ffffffff80204cca: b4 12                	addi	a3, sp, 360
ffffffff80204ccc: b6 ee                	sd	a3, 344(sp)
ffffffff80204cce: 98 1a                	addi	a4, sp, 368
ffffffff80204cd0: ba f2                	sd	a4, 352(sp)
ffffffff80204cd2: 23 34 d1 3e          	sd	a3, 1000(sp)
ffffffff80204cd6: 23 38 e1 3e          	sd	a4, 1008(sp)

ffffffff80204cda .LBB2_43:
ffffffff80204cda: 97 b7 ff ff          	auipc	a5, 1048571
ffffffff80204cde: 93 87 07 7d          	addi	a5, a5, 2000
ffffffff80204ce2: 36 85                	add	a0, zero, a3
ffffffff80204ce4: ae e9                	sd	a1, 208(sp)
ffffffff80204ce6: be 85                	add	a1, zero, a5
ffffffff80204ce8: ba e5                	sd	a4, 200(sp)
ffffffff80204cea: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204cee: e7 80 00 92          	jalr	-1760(ra)
ffffffff80204cf2: aa e1                	sd	a0, 192(sp)
ffffffff80204cf4: 2e fd                	sd	a1, 184(sp)
ffffffff80204cf6: 09 a0                	j	2

ffffffff80204cf8 .LBB2_44:
ffffffff80204cf8: 97 b5 ff ff          	auipc	a1, 1048571
ffffffff80204cfc: 93 85 25 7b          	addi	a1, a1, 1970
ffffffff80204d00: 2e 65                	ld	a0, 200(sp)
ffffffff80204d02: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204d06: e7 80 80 90          	jalr	-1784(ra)
ffffffff80204d0a: 2a f9                	sd	a0, 176(sp)
ffffffff80204d0c: 2e f5                	sd	a1, 168(sp)
ffffffff80204d0e: 09 a0                	j	2
ffffffff80204d10: 0e 65                	ld	a0, 192(sp)
ffffffff80204d12: 2a fe                	sd	a0, 312(sp)
ffffffff80204d14: ea 75                	ld	a1, 184(sp)
ffffffff80204d16: ae e2                	sd	a1, 320(sp)
ffffffff80204d18: 4a 76                	ld	a2, 176(sp)
ffffffff80204d1a: b2 e6                	sd	a2, 328(sp)
ffffffff80204d1c: aa 76                	ld	a3, 168(sp)
ffffffff80204d1e: b6 ea                	sd	a3, 336(sp)
ffffffff80204d20: 28 02                	addi	a0, sp, 264
ffffffff80204d22: 0d 46                	addi	a2, zero, 3
ffffffff80204d24: 34 1a                	addi	a3, sp, 312
ffffffff80204d26: 09 47                	addi	a4, zero, 2
ffffffff80204d28: ce 65                	ld	a1, 208(sp)
ffffffff80204d2a: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80204d2e: e7 80 e0 28          	jalr	654(ra)
ffffffff80204d32: 09 a0                	j	2

ffffffff80204d34 .LBB2_45:
ffffffff80204d34: 97 95 00 00          	auipc	a1, 9
ffffffff80204d38: 93 85 45 68          	addi	a1, a1, 1668
ffffffff80204d3c: 28 02                	addi	a0, sp, 264
ffffffff80204d3e: 97 50 00 00          	auipc	ra, 5
ffffffff80204d42: e7 80 60 66          	jalr	1638(ra)
ffffffff80204d46: 00 00                	unimp	
ffffffff80204d48: a8 1a                	addi	a0, sp, 376
;     let mut vec = Vec::new();
ffffffff80204d4a: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80204d4e: e7 80 60 12          	jalr	294(ra)
ffffffff80204d52: 09 a0                	j	2
ffffffff80204d54: 01 45                	mv	a0, zero
;     for i in 0..10000 {
ffffffff80204d56: 2a eb                	sd	a0, 400(sp)
ffffffff80204d58: 89 65                	lui	a1, 2
ffffffff80204d5a: 9b 85 05 71          	addiw	a1, a1, 1808
ffffffff80204d5e: 2e ef                	sd	a1, 408(sp)
ffffffff80204d60: 97 20 00 00          	auipc	ra, 2
ffffffff80204d64: e7 80 60 2b          	jalr	694(ra)
ffffffff80204d68: 2a f1                	sd	a0, 160(sp)
ffffffff80204d6a: 2e ed                	sd	a1, 152(sp)
ffffffff80204d6c: 09 a0                	j	2
ffffffff80204d6e: 0a 75                	ld	a0, 160(sp)
ffffffff80204d70: 2a f3                	sd	a0, 416(sp)
ffffffff80204d72: ea 65                	ld	a1, 152(sp)
ffffffff80204d74: 2e f7                	sd	a1, 424(sp)
ffffffff80204d76: 09 a0                	j	2
ffffffff80204d78: 08 13                	addi	a0, sp, 416
ffffffff80204d7a: 97 20 00 00          	auipc	ra, 2
ffffffff80204d7e: e7 80 20 23          	jalr	562(ra)
ffffffff80204d82: 2a fb                	sd	a0, 432(sp)
ffffffff80204d84: 2e ff                	sd	a1, 440(sp)
ffffffff80204d86: 09 a0                	j	2
ffffffff80204d88: 5a 75                	ld	a0, 432(sp)
ffffffff80204d8a: 81 45                	mv	a1, zero
ffffffff80204d8c: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80204d90: 09 a0                	j	2
ffffffff80204d92: 09 a8                	j	18
ffffffff80204d94: a8 1a                	addi	a0, sp, 376
;     assert_eq!(vec.len(), 10000);
ffffffff80204d96: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80204d9a: e7 80 00 0d          	jalr	208(ra)
ffffffff80204d9e: aa eb                	sd	a0, 464(sp)
ffffffff80204da0: 1d a0                	j	38
;     for i in 0..10000 {
ffffffff80204da2: 00 00                	unimp	
ffffffff80204da4: 7a 75                	ld	a0, 440(sp)
ffffffff80204da6: 23 3c a1 3e          	sd	a0, 1016(sp)
ffffffff80204daa: 23 30 a1 40          	sd	a0, 1024(sp)
ffffffff80204dae: 23 34 a1 40          	sd	a0, 1032(sp)
ffffffff80204db2: ac 1a                	addi	a1, sp, 376
;         vec.push(i);
ffffffff80204db4: 2a e9                	sd	a0, 144(sp)
ffffffff80204db6: 2e 85                	add	a0, zero, a1
ffffffff80204db8: ca 65                	ld	a1, 144(sp)
ffffffff80204dba: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80204dbe: e7 80 c0 0c          	jalr	204(ra)
ffffffff80204dc2: 09 a0                	j	2
;     for i in 0..10000 {
ffffffff80204dc4: 55 bf                	j	-76

ffffffff80204dc6 .LBB2_46:
;     assert_eq!(vec.len(), 10000);
ffffffff80204dc6: 17 95 00 00          	auipc	a0, 9
ffffffff80204dca: 13 05 a5 60          	addi	a0, a0, 1546
ffffffff80204dce: 08 61                	ld	a0, 0(a0)
ffffffff80204dd0: 8c 0b                	addi	a1, sp, 464
ffffffff80204dd2: ae e3                	sd	a1, 448(sp)
ffffffff80204dd4: aa e7                	sd	a0, 456(sp)
ffffffff80204dd6: 23 38 b1 40          	sd	a1, 1040(sp)
ffffffff80204dda: 23 3c a1 40          	sd	a0, 1048(sp)
ffffffff80204dde: 5e 66                	ld	a2, 464(sp)
ffffffff80204de0: 14 61                	ld	a3, 0(a0)
ffffffff80204de2: 2a e5                	sd	a0, 136(sp)
ffffffff80204de4: 2e e1                	sd	a1, 128(sp)
ffffffff80204de6: 63 13 d6 02          	bne	a2, a3, 38
ffffffff80204dea: 09 a0                	j	2
;     for (i, value) in vec.into_iter().enumerate() {
ffffffff80204dec: 3a 65                	ld	a0, 392(sp)
ffffffff80204dee: 23 34 a1 2c          	sd	a0, 712(sp)
ffffffff80204df2: 1a 65                	ld	a0, 384(sp)
ffffffff80204df4: 23 30 a1 2c          	sd	a0, 704(sp)
ffffffff80204df8: 76 75                	ld	a0, 376(sp)
ffffffff80204dfa: 23 3c a1 2a          	sd	a0, 696(sp)
ffffffff80204dfe: 28 0d                	addi	a0, sp, 664
ffffffff80204e00: 2c 1d                	addi	a1, sp, 696
ffffffff80204e02: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80204e06: e7 80 60 18          	jalr	390(ra)
ffffffff80204e0a: 4d a0                	j	162

ffffffff80204e0c .LBB2_47:
;     assert_eq!(vec.len(), 10000);
ffffffff80204e0c: 17 95 00 00          	auipc	a0, 9
ffffffff80204e10: 13 05 45 5a          	addi	a0, a0, 1444
ffffffff80204e14: 0c 61                	ld	a1, 0(a0)
ffffffff80204e16: 0a 65                	ld	a0, 128(sp)
ffffffff80204e18: 23 3c a1 22          	sd	a0, 568(sp)
ffffffff80204e1c: 2a 66                	ld	a2, 136(sp)
ffffffff80204e1e: 23 30 c1 24          	sd	a2, 576(sp)
ffffffff80204e22: 34 1c                	addi	a3, sp, 568
ffffffff80204e24: 23 34 d1 22          	sd	a3, 552(sp)
ffffffff80204e28: 98 04                	addi	a4, sp, 576
ffffffff80204e2a: 23 38 e1 22          	sd	a4, 560(sp)
ffffffff80204e2e: 23 30 d1 42          	sd	a3, 1056(sp)
ffffffff80204e32: 23 34 e1 42          	sd	a4, 1064(sp)

ffffffff80204e36 .LBB2_48:
ffffffff80204e36: 97 57 00 00          	auipc	a5, 5
ffffffff80204e3a: 93 87 67 34          	addi	a5, a5, 838
ffffffff80204e3e: 36 85                	add	a0, zero, a3
ffffffff80204e40: ae fc                	sd	a1, 120(sp)
ffffffff80204e42: be 85                	add	a1, zero, a5
ffffffff80204e44: ba f8                	sd	a4, 112(sp)
ffffffff80204e46: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204e4a: e7 80 a0 82          	jalr	-2006(ra)
ffffffff80204e4e: aa f4                	sd	a0, 104(sp)
ffffffff80204e50: ae f0                	sd	a1, 96(sp)
ffffffff80204e52: 09 a0                	j	2

ffffffff80204e54 .LBB2_49:
ffffffff80204e54: 97 55 00 00          	auipc	a1, 5
ffffffff80204e58: 93 85 85 32          	addi	a1, a1, 808
ffffffff80204e5c: 46 75                	ld	a0, 112(sp)
ffffffff80204e5e: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204e62: e7 80 20 81          	jalr	-2030(ra)
ffffffff80204e66: aa ec                	sd	a0, 88(sp)
ffffffff80204e68: ae e8                	sd	a1, 80(sp)
ffffffff80204e6a: 09 a0                	j	2
ffffffff80204e6c: 26 75                	ld	a0, 104(sp)
ffffffff80204e6e: 23 34 a1 20          	sd	a0, 520(sp)
ffffffff80204e72: 86 75                	ld	a1, 96(sp)
ffffffff80204e74: 23 38 b1 20          	sd	a1, 528(sp)
ffffffff80204e78: 66 66                	ld	a2, 88(sp)
ffffffff80204e7a: 23 3c c1 20          	sd	a2, 536(sp)
ffffffff80204e7e: c6 66                	ld	a3, 80(sp)
ffffffff80204e80: 23 30 d1 22          	sd	a3, 544(sp)
ffffffff80204e84: a8 0b                	addi	a0, sp, 472
ffffffff80204e86: 0d 46                	addi	a2, zero, 3
ffffffff80204e88: 34 04                	addi	a3, sp, 520
ffffffff80204e8a: 09 47                	addi	a4, zero, 2
ffffffff80204e8c: e6 75                	ld	a1, 120(sp)
ffffffff80204e8e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80204e92: e7 80 a0 12          	jalr	298(ra)
ffffffff80204e96: 09 a0                	j	2

ffffffff80204e98 .LBB2_50:
ffffffff80204e98: 97 95 00 00          	auipc	a1, 9
ffffffff80204e9c: 93 85 05 54          	addi	a1, a1, 1344
ffffffff80204ea0: a8 0b                	addi	a0, sp, 472
ffffffff80204ea2: 97 50 00 00          	auipc	ra, 5
ffffffff80204ea6: e7 80 20 50          	jalr	1282(ra)
ffffffff80204eaa: 00 00                	unimp	
ffffffff80204eac: 88 1c                	addi	a0, sp, 624
ffffffff80204eae: 2c 0d                	addi	a1, sp, 664
;     for (i, value) in vec.into_iter().enumerate() {
ffffffff80204eb0: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80204eb4: e7 80 40 f6          	jalr	-156(ra)
ffffffff80204eb8: 09 a0                	j	2
ffffffff80204eba: a8 04                	addi	a0, sp, 584
ffffffff80204ebc: 8c 1c                	addi	a1, sp, 624
ffffffff80204ebe: 97 00 00 00          	auipc	ra, 0
ffffffff80204ec2: e7 80 a0 9a          	jalr	-1622(ra)
ffffffff80204ec6: 09 a0                	j	2
ffffffff80204ec8: 03 35 81 26          	ld	a0, 616(sp)
ffffffff80204ecc: 23 38 a1 2e          	sd	a0, 752(sp)
ffffffff80204ed0: 03 35 01 26          	ld	a0, 608(sp)
ffffffff80204ed4: 23 34 a1 2e          	sd	a0, 744(sp)
ffffffff80204ed8: 03 35 81 25          	ld	a0, 600(sp)
ffffffff80204edc: 23 30 a1 2e          	sd	a0, 736(sp)
ffffffff80204ee0: 03 35 01 25          	ld	a0, 592(sp)
ffffffff80204ee4: 23 3c a1 2c          	sd	a0, 728(sp)
ffffffff80204ee8: 03 35 81 24          	ld	a0, 584(sp)
ffffffff80204eec: 23 38 a1 2c          	sd	a0, 720(sp)
ffffffff80204ef0: 09 a0                	j	2
ffffffff80204ef2: a8 1d                	addi	a0, sp, 760
ffffffff80204ef4: 8c 0d                	addi	a1, sp, 720
ffffffff80204ef6: 97 00 00 00          	auipc	ra, 0
ffffffff80204efa: e7 80 80 98          	jalr	-1656(ra)
ffffffff80204efe: 09 a0                	j	2
ffffffff80204f00: 03 35 81 2f          	ld	a0, 760(sp)
ffffffff80204f04: 81 45                	mv	a1, zero
ffffffff80204f06: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80204f0a: 09 a0                	j	2
ffffffff80204f0c: 01 a8                	j	16
ffffffff80204f0e: 88 0d                	addi	a0, sp, 720
;     }
ffffffff80204f10: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80204f14: e7 80 c0 05          	jalr	92(ra)
ffffffff80204f18: d5 a0                	j	228
;     for (i, value) in vec.into_iter().enumerate() {
ffffffff80204f1a: 00 00                	unimp	
ffffffff80204f1c: 03 35 01 30          	ld	a0, 768(sp)
ffffffff80204f20: 83 35 81 30          	ld	a1, 776(sp)
ffffffff80204f24: 23 38 a1 42          	sd	a0, 1072(sp)
ffffffff80204f28: 23 3c b1 42          	sd	a1, 1080(sp)
ffffffff80204f2c: 23 30 a1 44          	sd	a0, 1088(sp)
ffffffff80204f30: 23 34 b1 44          	sd	a1, 1096(sp)
ffffffff80204f34: 23 38 a1 30          	sd	a0, 784(sp)
ffffffff80204f38: 23 3c b1 30          	sd	a1, 792(sp)
ffffffff80204f3c: 30 0e                	addi	a2, sp, 792
;         assert_eq!(value, i);
ffffffff80204f3e: 23 30 c1 32          	sd	a2, 800(sp)
ffffffff80204f42: 14 0e                	addi	a3, sp, 784
ffffffff80204f44: 23 34 d1 32          	sd	a3, 808(sp)
ffffffff80204f48: 23 38 c1 44          	sd	a2, 1104(sp)
ffffffff80204f4c: 23 3c d1 44          	sd	a3, 1112(sp)
ffffffff80204f50: b2 e4                	sd	a2, 72(sp)
ffffffff80204f52: b6 e0                	sd	a3, 64(sp)
ffffffff80204f54: 63 94 a5 00          	bne	a1, a0, 8
ffffffff80204f58: 09 a0                	j	2
;     for (i, value) in vec.into_iter().enumerate() {
ffffffff80204f5a: 61 bf                	j	-104

ffffffff80204f5c .LBB2_51:
;         assert_eq!(value, i);
ffffffff80204f5c: 17 95 00 00          	auipc	a0, 9
ffffffff80204f60: 13 05 45 45          	addi	a0, a0, 1108
ffffffff80204f64: 0c 61                	ld	a1, 0(a0)
ffffffff80204f66: 26 65                	ld	a0, 72(sp)
ffffffff80204f68: 23 38 a1 38          	sd	a0, 912(sp)
ffffffff80204f6c: 06 66                	ld	a2, 64(sp)
ffffffff80204f6e: 23 3c c1 38          	sd	a2, 920(sp)
ffffffff80204f72: 14 0f                	addi	a3, sp, 912
ffffffff80204f74: 23 30 d1 38          	sd	a3, 896(sp)
ffffffff80204f78: 38 0f                	addi	a4, sp, 920
ffffffff80204f7a: 23 34 e1 38          	sd	a4, 904(sp)
ffffffff80204f7e: 23 30 d1 46          	sd	a3, 1120(sp)
ffffffff80204f82: 23 34 e1 46          	sd	a4, 1128(sp)

ffffffff80204f86 .LBB2_52:
ffffffff80204f86: 97 57 00 00          	auipc	a5, 5
ffffffff80204f8a: 93 87 67 1f          	addi	a5, a5, 502
ffffffff80204f8e: 36 85                	add	a0, zero, a3
ffffffff80204f90: 2e fc                	sd	a1, 56(sp)
ffffffff80204f92: be 85                	add	a1, zero, a5
ffffffff80204f94: 3a f8                	sd	a4, 48(sp)
ffffffff80204f96: 97 b0 ff ff          	auipc	ra, 1048571
ffffffff80204f9a: e7 80 a0 6d          	jalr	1754(ra)
ffffffff80204f9e: 2a f4                	sd	a0, 40(sp)
ffffffff80204fa0: 2e f0                	sd	a1, 32(sp)
ffffffff80204fa2: 09 a0                	j	2

ffffffff80204fa4 .LBB2_53:
ffffffff80204fa4: 97 55 00 00          	auipc	a1, 5
ffffffff80204fa8: 93 85 85 1d          	addi	a1, a1, 472
ffffffff80204fac: 42 75                	ld	a0, 48(sp)
ffffffff80204fae: 97 b0 ff ff          	auipc	ra, 1048571
ffffffff80204fb2: e7 80 20 6c          	jalr	1730(ra)
ffffffff80204fb6: 2a ec                	sd	a0, 24(sp)
ffffffff80204fb8: 2e e8                	sd	a1, 16(sp)
ffffffff80204fba: 09 a0                	j	2
ffffffff80204fbc: 22 75                	ld	a0, 40(sp)
ffffffff80204fbe: 23 30 a1 36          	sd	a0, 864(sp)
ffffffff80204fc2: 82 75                	ld	a1, 32(sp)
ffffffff80204fc4: 23 34 b1 36          	sd	a1, 872(sp)
ffffffff80204fc8: 62 66                	ld	a2, 24(sp)
ffffffff80204fca: 23 38 c1 36          	sd	a2, 880(sp)
ffffffff80204fce: c2 66                	ld	a3, 16(sp)
ffffffff80204fd0: 23 3c d1 36          	sd	a3, 888(sp)
ffffffff80204fd4: 08 1e                	addi	a0, sp, 816
ffffffff80204fd6: 0d 46                	addi	a2, zero, 3
ffffffff80204fd8: 94 16                	addi	a3, sp, 864
ffffffff80204fda: 09 47                	addi	a4, zero, 2
ffffffff80204fdc: e2 75                	ld	a1, 56(sp)
ffffffff80204fde: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80204fe2: e7 80 a0 fd          	jalr	-38(ra)
ffffffff80204fe6: 09 a0                	j	2

ffffffff80204fe8 .LBB2_54:
ffffffff80204fe8: 97 95 00 00          	auipc	a1, 9
ffffffff80204fec: 93 85 85 40          	addi	a1, a1, 1032
ffffffff80204ff0: 08 1e                	addi	a0, sp, 816
ffffffff80204ff2: 97 50 00 00          	auipc	ra, 5
ffffffff80204ff6: e7 80 20 3b          	jalr	946(ra)
ffffffff80204ffa: 00 00                	unimp	

ffffffff80204ffc .LBB2_55:
;     println!("heap test passed");
ffffffff80204ffc: 17 95 00 00          	auipc	a0, 9
ffffffff80205000: 13 05 45 43          	addi	a0, a0, 1076
ffffffff80205004: 0c 61                	ld	a1, 0(a0)

ffffffff80205006 .LBB2_56:
ffffffff80205006: 17 95 00 00          	auipc	a0, 9
ffffffff8020500a: 13 05 25 30          	addi	a0, a0, 770
ffffffff8020500e: 14 61                	ld	a3, 0(a0)
ffffffff80205010: 08 17                	addi	a0, sp, 928
ffffffff80205012: 05 46                	addi	a2, zero, 1
ffffffff80205014: 01 47                	mv	a4, zero
ffffffff80205016: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020501a: e7 80 20 fa          	jalr	-94(ra)
ffffffff8020501e: 09 a0                	j	2
ffffffff80205020: 08 17                	addi	a0, sp, 928
ffffffff80205022: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff80205026: e7 80 c0 af          	jalr	-1284(ra)
ffffffff8020502a: 09 a0                	j	2
; }
ffffffff8020502c: 83 30 81 47          	ld	ra, 1144(sp)
ffffffff80205030: 13 01 01 48          	addi	sp, sp, 1152
ffffffff80205034: 82 80                	ret

ffffffff80205036 _ZN2os30test_physical_memory_allocator17he3aa030e4b75391fE:
; pub fn test_physical_memory_allocator(){
ffffffff80205036: 13 01 01 d7          	addi	sp, sp, -656
;     print_line();
ffffffff8020503a: 23 34 11 28          	sd	ra, 648(sp)
ffffffff8020503e: 97 00 00 00          	auipc	ra, 0
ffffffff80205042: e7 80 c0 32          	jalr	812(ra)
ffffffff80205046: 09 a0                	j	2
ffffffff80205048: 05 45                	addi	a0, zero, 1
ffffffff8020504a: 06 15                	slli	a0, a0, 33
;     for _ in 0..2 {
ffffffff8020504c: 2a f5                	sd	a0, 168(sp)
ffffffff8020504e: 01 45                	mv	a0, zero
ffffffff80205050: 89 45                	addi	a1, zero, 2
ffffffff80205052: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80205056: e7 80 e0 70          	jalr	1806(ra)
ffffffff8020505a: 2a f1                	sd	a0, 160(sp)
ffffffff8020505c: 2e ed                	sd	a1, 152(sp)
ffffffff8020505e: 09 a0                	j	2
ffffffff80205060: 0a 75                	ld	a0, 160(sp)
ffffffff80205062: 2a d9                	sw	a0, 176(sp)
ffffffff80205064: ea 65                	ld	a1, 152(sp)
ffffffff80205066: 2e db                	sw	a1, 180(sp)
ffffffff80205068: 09 a0                	j	2
ffffffff8020506a: 08 19                	addi	a0, sp, 176
ffffffff8020506c: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80205070: e7 80 a0 68          	jalr	1674(ra)
ffffffff80205074: 2a dd                	sw	a0, 184(sp)
ffffffff80205076: 2e df                	sw	a1, 188(sp)
ffffffff80205078: 09 a0                	j	2
ffffffff8020507a: 03 65 81 0b          	lwu	a0, 184(sp)
ffffffff8020507e: 81 45                	mv	a1, zero
ffffffff80205080: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80205084: 09 a0                	j	2
ffffffff80205086: 39 a0                	j	14
; }
ffffffff80205088: 83 30 81 28          	ld	ra, 648(sp)
ffffffff8020508c: 13 01 01 29          	addi	sp, sp, 656
ffffffff80205090: 82 80                	ret
;     for _ in 0..2 {
ffffffff80205092: 00 00                	unimp	
ffffffff80205094: 7a 55                	lw	a0, 188(sp)
ffffffff80205096: 23 28 a1 24          	sw	a0, 592(sp)
ffffffff8020509a: 23 2a a1 24          	sw	a0, 596(sp)

ffffffff8020509e .LBB3_39:
;         let frame_0 = match memory::frame::FRAME_ALLOCATOR.lock().alloc() {
ffffffff8020509e: 17 85 00 00          	auipc	a0, 8
ffffffff802050a2: 13 05 25 2f          	addi	a0, a0, 754
ffffffff802050a6: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff802050aa: e7 80 a0 86          	jalr	-1942(ra)
ffffffff802050ae: 2a e9                	sd	a0, 144(sp)
ffffffff802050b0: 09 a0                	j	2
ffffffff802050b2: 4a 65                	ld	a0, 144(sp)
ffffffff802050b4: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff802050b8: e7 80 20 c4          	jalr	-958(ra)
ffffffff802050bc: aa f1                	sd	a0, 224(sp)
ffffffff802050be: ae f5                	sd	a1, 232(sp)
ffffffff802050c0: 09 a0                	j	2
ffffffff802050c2: 88 11                	addi	a0, sp, 224
ffffffff802050c4: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff802050c8: e7 80 a0 c6          	jalr	-918(ra)
ffffffff802050cc: 2a e5                	sd	a0, 136(sp)
ffffffff802050ce: 09 a0                	j	2
ffffffff802050d0: a8 01                	addi	a0, sp, 200
ffffffff802050d2: aa 65                	ld	a1, 136(sp)
ffffffff802050d4: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802050d8: e7 80 20 d1          	jalr	-750(ra)
ffffffff802050dc: 09 a0                	j	2
;             Result::Ok(frame_tracker) => frame_tracker,
ffffffff802050de: 2e 65                	ld	a0, 200(sp)
ffffffff802050e0: 81 45                	mv	a1, zero
ffffffff802050e2: 63 0e b5 02          	beq	a0, a1, 60
ffffffff802050e6: 09 a0                	j	2
;             Result::Err(err) => panic!("{}", err)
ffffffff802050e8: 4e 65                	ld	a0, 208(sp)
ffffffff802050ea: ee 65                	ld	a1, 216(sp)
ffffffff802050ec: aa fd                	sd	a0, 248(sp)
ffffffff802050ee: 2e e2                	sd	a1, 256(sp)

ffffffff802050f0 .LBB3_40:
ffffffff802050f0: 17 95 00 00          	auipc	a0, 9
ffffffff802050f4: 13 05 85 35          	addi	a0, a0, 856
ffffffff802050f8: 0c 61                	ld	a1, 0(a0)
ffffffff802050fa: a8 19                	addi	a0, sp, 248
ffffffff802050fc: aa e6                	sd	a0, 328(sp)
ffffffff802050fe: 23 3c a1 24          	sd	a0, 600(sp)

ffffffff80205102 .LBB3_41:
ffffffff80205102: 17 36 00 00          	auipc	a2, 3
ffffffff80205106: 13 06 46 78          	addi	a2, a2, 1924
ffffffff8020510a: 2e e1                	sd	a1, 128(sp)
ffffffff8020510c: b2 85                	add	a1, zero, a2
ffffffff8020510e: 97 30 00 00          	auipc	ra, 3
ffffffff80205112: e7 80 40 7a          	jalr	1956(ra)
ffffffff80205116: aa fc                	sd	a0, 120(sp)
ffffffff80205118: ae f8                	sd	a1, 112(sp)
ffffffff8020511a: 19 a8                	j	22
;         let frame_0 = match memory::frame::FRAME_ALLOCATOR.lock().alloc() {
ffffffff8020511c: 00 00                	unimp	
;             Result::Ok(frame_tracker) => frame_tracker,
ffffffff8020511e: 4e 65                	ld	a0, 208(sp)
ffffffff80205120: aa f9                	sd	a0, 240(sp)
ffffffff80205122: aa e1                	sd	a0, 192(sp)
ffffffff80205124: 88 11                	addi	a0, sp, 224
;         };
ffffffff80205126: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff8020512a: e7 80 20 da          	jalr	-606(ra)
ffffffff8020512e: 15 a8                	j	52
;             Result::Err(err) => panic!("{}", err)
ffffffff80205130: 66 75                	ld	a0, 120(sp)
ffffffff80205132: 2a fe                	sd	a0, 312(sp)
ffffffff80205134: c6 75                	ld	a1, 112(sp)
ffffffff80205136: ae e2                	sd	a1, 320(sp)
ffffffff80205138: 28 02                	addi	a0, sp, 264
ffffffff8020513a: 34 1a                	addi	a3, sp, 312
ffffffff8020513c: 05 46                	addi	a2, zero, 1
ffffffff8020513e: 8a 65                	ld	a1, 128(sp)
ffffffff80205140: b2 f4                	sd	a2, 104(sp)
ffffffff80205142: 26 77                	ld	a4, 104(sp)
ffffffff80205144: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80205148: e7 80 40 e7          	jalr	-396(ra)
ffffffff8020514c: 09 a0                	j	2

ffffffff8020514e .LBB3_42:
ffffffff8020514e: 97 95 00 00          	auipc	a1, 9
ffffffff80205152: 93 85 25 30          	addi	a1, a1, 770
ffffffff80205156: 28 02                	addi	a0, sp, 264
ffffffff80205158: 97 50 00 00          	auipc	ra, 5
ffffffff8020515c: e7 80 c0 24          	jalr	588(ra)
ffffffff80205160: 00 00                	unimp	

ffffffff80205162 .LBB3_43:
;         let frame_1 = match memory::frame::FRAME_ALLOCATOR.lock().alloc() {
ffffffff80205162: 17 85 00 00          	auipc	a0, 8
ffffffff80205166: 13 05 e5 22          	addi	a0, a0, 558
ffffffff8020516a: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff8020516e: e7 80 60 7a          	jalr	1958(ra)
ffffffff80205172: aa f0                	sd	a0, 96(sp)
ffffffff80205174: 09 a0                	j	2
ffffffff80205176: 06 75                	ld	a0, 96(sp)
ffffffff80205178: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff8020517c: e7 80 e0 b7          	jalr	-1154(ra)
ffffffff80205180: aa fa                	sd	a0, 368(sp)
ffffffff80205182: ae fe                	sd	a1, 376(sp)
ffffffff80205184: 09 a0                	j	2
ffffffff80205186: 88 1a                	addi	a0, sp, 368
ffffffff80205188: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff8020518c: e7 80 60 ba          	jalr	-1114(ra)
ffffffff80205190: aa ec                	sd	a0, 88(sp)
ffffffff80205192: 09 a0                	j	2
ffffffff80205194: a8 0a                	addi	a0, sp, 344
ffffffff80205196: e6 65                	ld	a1, 88(sp)
ffffffff80205198: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020519c: e7 80 e0 c4          	jalr	-946(ra)
ffffffff802051a0: 09 a0                	j	2
;             Result::Ok(frame_tracker) => frame_tracker,
ffffffff802051a2: 76 65                	ld	a0, 344(sp)
ffffffff802051a4: 81 45                	mv	a1, zero
ffffffff802051a6: 63 0e b5 02          	beq	a0, a1, 60
ffffffff802051aa: 09 a0                	j	2
;             Result::Err(err) => panic!("{}", err)
ffffffff802051ac: 16 75                	ld	a0, 352(sp)
ffffffff802051ae: b6 75                	ld	a1, 360(sp)
ffffffff802051b0: 2a e7                	sd	a0, 392(sp)
ffffffff802051b2: 2e eb                	sd	a1, 400(sp)

ffffffff802051b4 .LBB3_44:
ffffffff802051b4: 17 95 00 00          	auipc	a0, 9
ffffffff802051b8: 13 05 45 29          	addi	a0, a0, 660
ffffffff802051bc: 0c 61                	ld	a1, 0(a0)
ffffffff802051be: 28 03                	addi	a0, sp, 392
ffffffff802051c0: aa ef                	sd	a0, 472(sp)
ffffffff802051c2: 23 30 a1 26          	sd	a0, 608(sp)

ffffffff802051c6 .LBB3_45:
ffffffff802051c6: 17 36 00 00          	auipc	a2, 3
ffffffff802051ca: 13 06 06 6c          	addi	a2, a2, 1728
ffffffff802051ce: ae e8                	sd	a1, 80(sp)
ffffffff802051d0: b2 85                	add	a1, zero, a2
ffffffff802051d2: 97 30 00 00          	auipc	ra, 3
ffffffff802051d6: e7 80 00 6e          	jalr	1760(ra)
ffffffff802051da: aa e4                	sd	a0, 72(sp)
ffffffff802051dc: ae e0                	sd	a1, 64(sp)
ffffffff802051de: 19 a8                	j	22
;         let frame_1 = match memory::frame::FRAME_ALLOCATOR.lock().alloc() {
ffffffff802051e0: 00 00                	unimp	
;             Result::Ok(frame_tracker) => frame_tracker,
ffffffff802051e2: 16 75                	ld	a0, 352(sp)
ffffffff802051e4: 2a e3                	sd	a0, 384(sp)
ffffffff802051e6: aa ea                	sd	a0, 336(sp)
ffffffff802051e8: 88 1a                	addi	a0, sp, 368
;         };
ffffffff802051ea: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802051ee: e7 80 e0 cd          	jalr	-802(ra)
ffffffff802051f2: 15 a8                	j	52
;             Result::Err(err) => panic!("{}", err)
ffffffff802051f4: 26 65                	ld	a0, 72(sp)
ffffffff802051f6: aa e7                	sd	a0, 456(sp)
ffffffff802051f8: 86 65                	ld	a1, 64(sp)
ffffffff802051fa: ae eb                	sd	a1, 464(sp)
ffffffff802051fc: 28 0b                	addi	a0, sp, 408
ffffffff802051fe: b4 03                	addi	a3, sp, 456
ffffffff80205200: 05 46                	addi	a2, zero, 1
ffffffff80205202: c6 65                	ld	a1, 80(sp)
ffffffff80205204: 32 fc                	sd	a2, 56(sp)
ffffffff80205206: 62 77                	ld	a4, 56(sp)
ffffffff80205208: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020520c: e7 80 00 db          	jalr	-592(ra)
ffffffff80205210: 09 a0                	j	2

ffffffff80205212 .LBB3_46:
ffffffff80205212: 97 95 00 00          	auipc	a1, 9
ffffffff80205216: 93 85 65 25          	addi	a1, a1, 598
ffffffff8020521a: 28 0b                	addi	a0, sp, 408
ffffffff8020521c: 97 50 00 00          	auipc	ra, 5
ffffffff80205220: e7 80 80 18          	jalr	392(ra)
ffffffff80205224: 00 00                	unimp	

ffffffff80205226 .LBB3_47:
;         println!("{} and {}", frame_0.address(), frame_1.address());
ffffffff80205226: 17 95 00 00          	auipc	a0, 9
ffffffff8020522a: 13 05 25 29          	addi	a0, a0, 658
ffffffff8020522e: 0c 61                	ld	a1, 0(a0)
ffffffff80205230: 88 01                	addi	a0, sp, 192
ffffffff80205232: 2e f8                	sd	a1, 48(sp)
ffffffff80205234: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80205238: e7 80 00 54          	jalr	1344(ra)
ffffffff8020523c: 23 34 a1 26          	sd	a0, 616(sp)
ffffffff80205240: 23 30 a1 24          	sd	a0, 576(sp)
ffffffff80205244: 09 a0                	j	2
ffffffff80205246: 88 0a                	addi	a0, sp, 336
ffffffff80205248: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020524c: e7 80 c0 52          	jalr	1324(ra)
ffffffff80205250: 23 38 a1 26          	sd	a0, 624(sp)
ffffffff80205254: 23 34 a1 24          	sd	a0, 584(sp)
ffffffff80205258: 09 a0                	j	2
ffffffff8020525a: 88 04                	addi	a0, sp, 576
ffffffff8020525c: 23 38 a1 22          	sd	a0, 560(sp)
ffffffff80205260: ac 04                	addi	a1, sp, 584
ffffffff80205262: 23 3c b1 22          	sd	a1, 568(sp)
ffffffff80205266: 23 3c a1 26          	sd	a0, 632(sp)
ffffffff8020526a: 23 30 b1 28          	sd	a1, 640(sp)

ffffffff8020526e .LBB3_48:
ffffffff8020526e: 17 d6 ff ff          	auipc	a2, 1048573
ffffffff80205272: 13 06 46 24          	addi	a2, a2, 580
ffffffff80205276: 2e f4                	sd	a1, 40(sp)
ffffffff80205278: b2 85                	add	a1, zero, a2
ffffffff8020527a: 97 b0 ff ff          	auipc	ra, 1048571
ffffffff8020527e: e7 80 a0 32          	jalr	810(ra)
ffffffff80205282: 2a f0                	sd	a0, 32(sp)
ffffffff80205284: 2e ec                	sd	a1, 24(sp)
ffffffff80205286: 09 a0                	j	2

ffffffff80205288 .LBB3_49:
ffffffff80205288: 97 d5 ff ff          	auipc	a1, 1048573
ffffffff8020528c: 93 85 a5 22          	addi	a1, a1, 554
ffffffff80205290: 22 75                	ld	a0, 40(sp)
ffffffff80205292: 97 b0 ff ff          	auipc	ra, 1048571
ffffffff80205296: e7 80 20 31          	jalr	786(ra)
ffffffff8020529a: 2a e8                	sd	a0, 16(sp)
ffffffff8020529c: 2e e4                	sd	a1, 8(sp)
ffffffff8020529e: 09 a0                	j	2
ffffffff802052a0: 02 75                	ld	a0, 32(sp)
ffffffff802052a2: 23 38 a1 20          	sd	a0, 528(sp)
ffffffff802052a6: e2 65                	ld	a1, 24(sp)
ffffffff802052a8: 23 3c b1 20          	sd	a1, 536(sp)
ffffffff802052ac: 42 66                	ld	a2, 16(sp)
ffffffff802052ae: 23 30 c1 22          	sd	a2, 544(sp)
ffffffff802052b2: a2 66                	ld	a3, 8(sp)
ffffffff802052b4: 23 34 d1 22          	sd	a3, 552(sp)
ffffffff802052b8: 88 13                	addi	a0, sp, 480
ffffffff802052ba: 0d 46                	addi	a2, zero, 3
ffffffff802052bc: 14 0c                	addi	a3, sp, 528
ffffffff802052be: 09 47                	addi	a4, zero, 2
ffffffff802052c0: c2 75                	ld	a1, 48(sp)
ffffffff802052c2: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802052c6: e7 80 60 cf          	jalr	-778(ra)
ffffffff802052ca: 09 a0                	j	2
ffffffff802052cc: 88 13                	addi	a0, sp, 480
ffffffff802052ce: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802052d2: e7 80 00 85          	jalr	-1968(ra)
ffffffff802052d6: 09 a0                	j	2
ffffffff802052d8: 88 0a                	addi	a0, sp, 336
;     }
ffffffff802052da: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802052de: e7 80 40 c7          	jalr	-908(ra)
ffffffff802052e2: 09 a0                	j	2
ffffffff802052e4: 88 01                	addi	a0, sp, 192
ffffffff802052e6: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802052ea: e7 80 80 c6          	jalr	-920(ra)
ffffffff802052ee: 09 a0                	j	2
;     for _ in 0..2 {
ffffffff802052f0: ad bb                	j	-646

ffffffff802052f2 _ZN2os20test_virtual_address17ha1897e4a164afb44E:
; pub fn test_virtual_address(){
ffffffff802052f2: 19 71                	addi	sp, sp, -128
;     print_line();
ffffffff802052f4: 86 fc                	sd	ra, 120(sp)
ffffffff802052f6: 97 00 00 00          	auipc	ra, 0
ffffffff802052fa: e7 80 40 07          	jalr	116(ra)
ffffffff802052fe: 09 a0                	j	2

ffffffff80205300 .LBB4_6:
;     println!("{}", *memory::config::KERNEL_END_ADDRESS);
ffffffff80205300: 17 95 00 00          	auipc	a0, 9
ffffffff80205304: 13 05 05 1e          	addi	a0, a0, 480
ffffffff80205308: 0c 61                	ld	a1, 0(a0)

ffffffff8020530a .LBB4_7:
ffffffff8020530a: 17 95 00 00          	auipc	a0, 9
ffffffff8020530e: 13 05 e5 df          	addi	a0, a0, -514
ffffffff80205312: 2e f0                	sd	a1, 32(sp)
ffffffff80205314: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80205318: e7 80 c0 43          	jalr	1084(ra)
ffffffff8020531c: 2a ec                	sd	a0, 24(sp)
ffffffff8020531e: 09 a0                	j	2
ffffffff80205320: 62 65                	ld	a0, 24(sp)
ffffffff80205322: aa f4                	sd	a0, 104(sp)
ffffffff80205324: aa f8                	sd	a0, 112(sp)

ffffffff80205326 .LBB4_8:
ffffffff80205326: 97 d5 ff ff          	auipc	a1, 1048573
ffffffff8020532a: 93 85 a5 22          	addi	a1, a1, 554
ffffffff8020532e: 97 b0 ff ff          	auipc	ra, 1048571
ffffffff80205332: e7 80 80 29          	jalr	664(ra)
ffffffff80205336: 2a e8                	sd	a0, 16(sp)
ffffffff80205338: 2e e4                	sd	a1, 8(sp)
ffffffff8020533a: 09 a0                	j	2
ffffffff8020533c: 42 65                	ld	a0, 16(sp)
ffffffff8020533e: aa ec                	sd	a0, 88(sp)
ffffffff80205340: a2 65                	ld	a1, 8(sp)
ffffffff80205342: ae f0                	sd	a1, 96(sp)
ffffffff80205344: 28 10                	addi	a0, sp, 40
ffffffff80205346: 09 46                	addi	a2, zero, 2
ffffffff80205348: b4 08                	addi	a3, sp, 88
ffffffff8020534a: 05 47                	addi	a4, zero, 1
ffffffff8020534c: 82 75                	ld	a1, 32(sp)
ffffffff8020534e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80205352: e7 80 a0 c6          	jalr	-918(ra)
ffffffff80205356: 09 a0                	j	2
ffffffff80205358: 28 10                	addi	a0, sp, 40
ffffffff8020535a: 97 b0 ff ff          	auipc	ra, 1048571
ffffffff8020535e: e7 80 40 7c          	jalr	1988(ra)
ffffffff80205362: 09 a0                	j	2
; }
ffffffff80205364: e6 70                	ld	ra, 120(sp)
ffffffff80205366: 09 61                	addi	sp, sp, 128
ffffffff80205368: 82 80                	ret

ffffffff8020536a _ZN2os10print_line17h411746148b79e6caE:
; pub fn print_line(){
ffffffff8020536a: 39 71                	addi	sp, sp, -64
;     println!("-------------------------------------");
ffffffff8020536c: 06 fc                	sd	ra, 56(sp)

ffffffff8020536e .LBB5_3:
ffffffff8020536e: 17 95 00 00          	auipc	a0, 9
ffffffff80205372: 13 05 25 1b          	addi	a0, a0, 434
ffffffff80205376: 0c 61                	ld	a1, 0(a0)

ffffffff80205378 .LBB5_4:
ffffffff80205378: 17 95 00 00          	auipc	a0, 9
ffffffff8020537c: 13 05 05 f9          	addi	a0, a0, -112
ffffffff80205380: 14 61                	ld	a3, 0(a0)
ffffffff80205382: 28 00                	addi	a0, sp, 8
ffffffff80205384: 05 46                	addi	a2, zero, 1
ffffffff80205386: 01 47                	mv	a4, zero
ffffffff80205388: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020538c: e7 80 00 c3          	jalr	-976(ra)
ffffffff80205390: 09 a0                	j	2
ffffffff80205392: 28 00                	addi	a0, sp, 8
ffffffff80205394: 97 b0 ff ff          	auipc	ra, 1048571
ffffffff80205398: e7 80 a0 78          	jalr	1930(ra)
ffffffff8020539c: 09 a0                	j	2
; }
ffffffff8020539e: e2 70                	ld	ra, 56(sp)
ffffffff802053a0: 21 61                	addi	sp, sp, 64
ffffffff802053a2: 82 80                	ret

ffffffff802053a4 _ZN47_$LT$i32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17haa3a69d9e1d868b1E:
;         unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
ffffffff802053a4: 79 71                	addi	sp, sp, -48
ffffffff802053a6: 06 f4                	sd	ra, 40(sp)
ffffffff802053a8: 2a 86                	add	a2, zero, a0
ffffffff802053aa: 2a ce                	sw	a0, 28(sp)
ffffffff802053ac: 2e f0                	sd	a1, 32(sp)
;             start.unchecked_add(n as Self)
ffffffff802053ae: 32 e8                	sd	a2, 16(sp)
ffffffff802053b0: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff802053b4: e7 80 40 ac          	jalr	-1340(ra)
ffffffff802053b8: 2a e4                	sd	a0, 8(sp)
ffffffff802053ba: 09 a0                	j	2
;         }
ffffffff802053bc: 22 65                	ld	a0, 8(sp)
ffffffff802053be: a2 70                	ld	ra, 40(sp)
ffffffff802053c0: 45 61                	addi	sp, sp, 48
ffffffff802053c2: 82 80                	ret

ffffffff802053c4 _ZN5alloc5alloc8box_free17h92a0cabaf3f50f82E:
; pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {
ffffffff802053c4: 19 71                	addi	sp, sp, -128
ffffffff802053c6: 86 fc                	sd	ra, 120(sp)
ffffffff802053c8: 2a fc                	sd	a0, 56(sp)
ffffffff802053ca: 28 18                	addi	a0, sp, 56
;         let size = size_of_val(ptr.as_ref());
ffffffff802053cc: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802053d0: e7 80 00 85          	jalr	-1968(ra)
ffffffff802053d4: 09 a0                	j	2
ffffffff802053d6: 11 45                	addi	a0, zero, 4
ffffffff802053d8: aa e4                	sd	a0, 72(sp)
ffffffff802053da: aa e8                	sd	a0, 80(sp)
ffffffff802053dc: 2a f8                	sd	a0, 48(sp)
ffffffff802053de: 09 a0                	j	2
ffffffff802053e0: 28 18                	addi	a0, sp, 56
;         let align = min_align_of_val(ptr.as_ref());
ffffffff802053e2: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802053e6: e7 80 a0 83          	jalr	-1990(ra)
ffffffff802053ea: 09 a0                	j	2
ffffffff802053ec: 11 45                	addi	a0, zero, 4
ffffffff802053ee: aa ec                	sd	a0, 88(sp)
ffffffff802053f0: aa f0                	sd	a0, 96(sp)
ffffffff802053f2: 2a f4                	sd	a0, 40(sp)
ffffffff802053f4: 09 a0                	j	2
;         let layout = Layout::from_size_align_unchecked(size, align);
ffffffff802053f6: 42 75                	ld	a0, 48(sp)
ffffffff802053f8: a2 75                	ld	a1, 40(sp)
ffffffff802053fa: 97 c0 ff ff          	auipc	ra, 1048572
ffffffff802053fe: e7 80 a0 3b          	jalr	954(ra)
ffffffff80205402: 2a 86                	add	a2, zero, a0
ffffffff80205404: ae 86                	add	a3, zero, a1
ffffffff80205406: aa f4                	sd	a0, 104(sp)
ffffffff80205408: ae f8                	sd	a1, 112(sp)
ffffffff8020540a: 32 f0                	sd	a2, 32(sp)
ffffffff8020540c: 36 ec                	sd	a3, 24(sp)
ffffffff8020540e: 09 a0                	j	2
;         Global.dealloc(ptr.cast().into(), layout)
ffffffff80205410: 62 75                	ld	a0, 56(sp)
ffffffff80205412: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff80205416: e7 80 20 7d          	jalr	2002(ra)
ffffffff8020541a: 2a e8                	sd	a0, 16(sp)
ffffffff8020541c: 09 a0                	j	2
ffffffff8020541e: 42 65                	ld	a0, 16(sp)
ffffffff80205420: 97 20 00 00          	auipc	ra, 2
ffffffff80205424: e7 80 a0 96          	jalr	-1686(ra)
ffffffff80205428: 2a e4                	sd	a0, 8(sp)
ffffffff8020542a: 09 a0                	j	2
ffffffff8020542c: 88 00                	addi	a0, sp, 64
ffffffff8020542e: a2 65                	ld	a1, 8(sp)
ffffffff80205430: 02 76                	ld	a2, 32(sp)
ffffffff80205432: e2 66                	ld	a3, 24(sp)
ffffffff80205434: 97 d0 ff ff          	auipc	ra, 1048573
ffffffff80205438: e7 80 c0 f2          	jalr	-212(ra)
ffffffff8020543c: 09 a0                	j	2
; }
ffffffff8020543e: e6 70                	ld	ra, 120(sp)
ffffffff80205440: 09 61                	addi	sp, sp, 128
ffffffff80205442: 82 80                	ret

ffffffff80205444 __rust_alloc:
ffffffff80205444: 17 b3 ff ff          	auipc	t1, 1048571
ffffffff80205448: 67 00 c3 de          	jr	-532(t1)

ffffffff8020544c __rust_dealloc:
ffffffff8020544c: 17 b3 ff ff          	auipc	t1, 1048571
ffffffff80205450: 67 00 a3 e1          	jr	-486(t1)

ffffffff80205454 __rust_realloc:
ffffffff80205454: 17 b3 ff ff          	auipc	t1, 1048571
ffffffff80205458: 67 00 e3 e4          	jr	-434(t1)

ffffffff8020545c __rust_alloc_zeroed:
ffffffff8020545c: 17 b3 ff ff          	auipc	t1, 1048571
ffffffff80205460: 67 00 c3 e8          	jr	-372(t1)

ffffffff80205464 _ZN5alloc7raw_vec11finish_grow17h764e26a87c77f928E:
; fn finish_grow<A>(
ffffffff80205464: 41 71                	addi	sp, sp, -496
ffffffff80205466: 86 f7                	sd	ra, 488(sp)
ffffffff80205468: ae ea                	sd	a1, 336(sp)
ffffffff8020546a: b2 ee                	sd	a2, 344(sp)
ffffffff8020546c: ba f2                	sd	a4, 352(sp)
ffffffff8020546e: 3c 19                	addi	a5, sp, 184
;     let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
ffffffff80205470: 2a e5                	sd	a0, 136(sp)
ffffffff80205472: 3e 85                	add	a0, zero, a5
ffffffff80205474: 3a e1                	sd	a4, 128(sp)
ffffffff80205476: b6 fc                	sd	a3, 120(sp)
ffffffff80205478: 97 20 00 00          	auipc	ra, 2
ffffffff8020547c: e7 80 c0 d1          	jalr	-740(ra)
ffffffff80205480: 09 a0                	j	2
ffffffff80205482: 08 11                	addi	a0, sp, 160
ffffffff80205484: 2c 19                	addi	a1, sp, 184
ffffffff80205486: 97 20 00 00          	auipc	ra, 2
ffffffff8020548a: e7 80 80 de          	jalr	-536(ra)
ffffffff8020548e: 09 a0                	j	2
ffffffff80205490: 0a 75                	ld	a0, 160(sp)
ffffffff80205492: 81 45                	mv	a1, zero
ffffffff80205494: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80205498: 09 a0                	j	2
ffffffff8020549a: 39 a8                	j	30
ffffffff8020549c: 2a 75                	ld	a0, 168(sp)
ffffffff8020549e: ca 75                	ld	a1, 176(sp)
ffffffff802054a0: 2a e3                	sd	a0, 384(sp)
ffffffff802054a2: 2e e7                	sd	a1, 392(sp)
ffffffff802054a4: 2a e9                	sd	a0, 144(sp)
ffffffff802054a6: 2e ed                	sd	a1, 152(sp)
ffffffff802054a8: 08 09                	addi	a0, sp, 144
;     alloc_guard(new_layout.size())?;
ffffffff802054aa: 97 00 00 00          	auipc	ra, 0
ffffffff802054ae: e7 80 60 79          	jalr	1942(ra)
ffffffff802054b2: aa f8                	sd	a0, 112(sp)
ffffffff802054b4: 15 a8                	j	52
;     let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
ffffffff802054b6: 00 00                	unimp	
ffffffff802054b8: 2a 75                	ld	a0, 168(sp)
ffffffff802054ba: ca 75                	ld	a1, 176(sp)
ffffffff802054bc: aa fa                	sd	a0, 368(sp)
ffffffff802054be: ae fe                	sd	a1, 376(sp)
ffffffff802054c0: 97 10 00 00          	auipc	ra, 1
ffffffff802054c4: e7 80 40 25          	jalr	596(ra)
ffffffff802054c8: aa f4                	sd	a0, 104(sp)
ffffffff802054ca: ae f0                	sd	a1, 96(sp)
ffffffff802054cc: 21 a0                	j	8
; }
ffffffff802054ce: be 70                	ld	ra, 488(sp)
ffffffff802054d0: 7d 61                	addi	sp, sp, 496
ffffffff802054d2: 82 80                	ret
;     let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
ffffffff802054d4: 2a 65                	ld	a0, 136(sp)
ffffffff802054d6: a6 75                	ld	a1, 104(sp)
ffffffff802054d8: 06 76                	ld	a2, 96(sp)
ffffffff802054da: 97 20 00 00          	auipc	ra, 2
ffffffff802054de: e7 80 80 d2          	jalr	-728(ra)
ffffffff802054e2: 09 a0                	j	2
ffffffff802054e4: 09 a0                	j	2
ffffffff802054e6: e5 b7                	j	-24
ffffffff802054e8: 88 19                	addi	a0, sp, 240
;     alloc_guard(new_layout.size())?;
ffffffff802054ea: c6 75                	ld	a1, 112(sp)
ffffffff802054ec: 97 20 00 00          	auipc	ra, 2
ffffffff802054f0: e7 80 e0 99          	jalr	-1634(ra)
ffffffff802054f4: 09 a0                	j	2
ffffffff802054f6: a8 09                	addi	a0, sp, 216
ffffffff802054f8: 8c 19                	addi	a1, sp, 240
ffffffff802054fa: 97 20 00 00          	auipc	ra, 2
ffffffff802054fe: e7 80 40 d5          	jalr	-684(ra)
ffffffff80205502: 09 a0                	j	2
ffffffff80205504: 6e 65                	ld	a0, 216(sp)
ffffffff80205506: 81 45                	mv	a1, zero
ffffffff80205508: 63 04 b5 00          	beq	a0, a1, 8
ffffffff8020550c: 09 a0                	j	2
ffffffff8020550e: 01 a8                	j	16
;     let memory = if let Some((ptr, old_layout)) = current_memory {
ffffffff80205510: 66 75                	ld	a0, 120(sp)
ffffffff80205512: 0c 61                	ld	a1, 0(a0)
ffffffff80205514: 01 46                	mv	a2, zero
ffffffff80205516: 63 96 c5 04          	bne	a1, a2, 76
ffffffff8020551a: 35 a0                	j	44
;     alloc_guard(new_layout.size())?;
ffffffff8020551c: 00 00                	unimp	
ffffffff8020551e: 0e 75                	ld	a0, 224(sp)
ffffffff80205520: ae 75                	ld	a1, 232(sp)
ffffffff80205522: 2a eb                	sd	a0, 400(sp)
ffffffff80205524: 2e ef                	sd	a1, 408(sp)
ffffffff80205526: 97 10 00 00          	auipc	ra, 1
ffffffff8020552a: e7 80 e0 1e          	jalr	494(ra)
ffffffff8020552e: aa ec                	sd	a0, 88(sp)
ffffffff80205530: ae e8                	sd	a1, 80(sp)
ffffffff80205532: 09 a0                	j	2
ffffffff80205534: 2a 65                	ld	a0, 136(sp)
ffffffff80205536: e6 65                	ld	a1, 88(sp)
ffffffff80205538: 46 66                	ld	a2, 80(sp)
ffffffff8020553a: 97 20 00 00          	auipc	ra, 2
ffffffff8020553e: e7 80 80 cc          	jalr	-824(ra)
ffffffff80205542: 09 a0                	j	2
ffffffff80205544: 4d b7                	j	-94
;         alloc.alloc(new_layout, Uninitialized)
ffffffff80205546: ca 65                	ld	a1, 144(sp)
ffffffff80205548: 6a 66                	ld	a2, 152(sp)
ffffffff8020554a: 01 45                	mv	a0, zero
ffffffff8020554c: 8a 66                	ld	a3, 128(sp)
ffffffff8020554e: aa e4                	sd	a0, 72(sp)
ffffffff80205550: 36 85                	add	a0, zero, a3
ffffffff80205552: a6 66                	ld	a3, 72(sp)
ffffffff80205554: 97 10 00 00          	auipc	ra, 1
ffffffff80205558: e7 80 e0 ac          	jalr	-1330(ra)
ffffffff8020555c: 2a fe                	sd	a0, 312(sp)
ffffffff8020555e: ae e2                	sd	a1, 320(sp)
ffffffff80205560: a1 a0                	j	72
;     let memory = if let Some((ptr, old_layout)) = current_memory {
ffffffff80205562: 66 75                	ld	a0, 120(sp)
ffffffff80205564: 0c 61                	ld	a1, 0(a0)
ffffffff80205566: 2e f3                	sd	a1, 416(sp)
ffffffff80205568: 10 65                	ld	a2, 8(a0)
ffffffff8020556a: 14 69                	ld	a3, 16(a0)
ffffffff8020556c: 32 f7                	sd	a2, 424(sp)
ffffffff8020556e: 36 fb                	sd	a3, 432(sp)
ffffffff80205570: 08 09                	addi	a0, sp, 144
;         unsafe { alloc.grow(ptr, old_layout, new_layout.size(), MayMove, Uninitialized) }
ffffffff80205572: ae e0                	sd	a1, 64(sp)
ffffffff80205574: 32 fc                	sd	a2, 56(sp)
ffffffff80205576: 36 f8                	sd	a3, 48(sp)
ffffffff80205578: 97 00 00 00          	auipc	ra, 0
ffffffff8020557c: e7 80 80 6c          	jalr	1736(ra)
ffffffff80205580: 2a f4                	sd	a0, 40(sp)
ffffffff80205582: 09 a0                	j	2
ffffffff80205584: 01 45                	mv	a0, zero
ffffffff80205586: 8a 65                	ld	a1, 128(sp)
ffffffff80205588: 2a f0                	sd	a0, 32(sp)
ffffffff8020558a: 2e 85                	add	a0, zero, a1
ffffffff8020558c: 86 65                	ld	a1, 64(sp)
ffffffff8020558e: 62 76                	ld	a2, 56(sp)
ffffffff80205590: c2 76                	ld	a3, 48(sp)
ffffffff80205592: 22 77                	ld	a4, 40(sp)
ffffffff80205594: 82 77                	ld	a5, 32(sp)
ffffffff80205596: 02 78                	ld	a6, 32(sp)
ffffffff80205598: 97 10 00 00          	auipc	ra, 1
ffffffff8020559c: e7 80 40 91          	jalr	-1772(ra)
ffffffff802055a0: 2a fe                	sd	a0, 312(sp)
ffffffff802055a2: ae e2                	sd	a1, 320(sp)
ffffffff802055a4: 09 a0                	j	2
;     let memory = if let Some((ptr, old_layout)) = current_memory {
ffffffff802055a6: 11 a0                	j	4
ffffffff802055a8: 09 a0                	j	2
ffffffff802055aa: 08 09                	addi	a0, sp, 144
;     .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?;
ffffffff802055ac: aa e6                	sd	a0, 328(sp)
;     let memory = if let Some((ptr, old_layout)) = current_memory {
ffffffff802055ae: f2 75                	ld	a1, 312(sp)
ffffffff802055b0: 16 66                	ld	a2, 320(sp)
ffffffff802055b2: 14 12                	addi	a3, sp, 288
ffffffff802055b4: 2a ec                	sd	a0, 24(sp)
ffffffff802055b6: 36 85                	add	a0, zero, a3
ffffffff802055b8: e2 66                	ld	a3, 24(sp)
ffffffff802055ba: 97 20 00 00          	auipc	ra, 2
ffffffff802055be: e7 80 60 b6          	jalr	-1178(ra)
ffffffff802055c2: 09 a0                	j	2
ffffffff802055c4: 28 02                	addi	a0, sp, 264
ffffffff802055c6: 0c 12                	addi	a1, sp, 288
ffffffff802055c8: 97 20 00 00          	auipc	ra, 2
ffffffff802055cc: e7 80 20 cc          	jalr	-830(ra)
ffffffff802055d0: 09 a0                	j	2
;     .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?;
ffffffff802055d2: 32 65                	ld	a0, 264(sp)
ffffffff802055d4: 81 45                	mv	a1, zero
ffffffff802055d6: 63 04 b5 00          	beq	a0, a1, 8
ffffffff802055da: 09 a0                	j	2
ffffffff802055dc: 31 a8                	j	28
;     let memory = if let Some((ptr, old_layout)) = current_memory {
ffffffff802055de: 52 65                	ld	a0, 272(sp)
ffffffff802055e0: f2 65                	ld	a1, 280(sp)
ffffffff802055e2: aa e7                	sd	a0, 456(sp)
ffffffff802055e4: ae eb                	sd	a1, 464(sp)
ffffffff802055e6: aa ef                	sd	a0, 472(sp)
ffffffff802055e8: ae f3                	sd	a1, 480(sp)
;     Ok(memory)
ffffffff802055ea: 2a 66                	ld	a2, 136(sp)
ffffffff802055ec: 08 e6                	sd	a0, 8(a2)
ffffffff802055ee: 0c ea                	sd	a1, 16(a2)
ffffffff802055f0: 01 45                	mv	a0, zero
ffffffff802055f2: 08 e2                	sd	a0, 0(a2)
; }
ffffffff802055f4: e9 bd                	j	-294
;     let memory = if let Some((ptr, old_layout)) = current_memory {
ffffffff802055f6: 00 00                	unimp	
;     .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?;
ffffffff802055f8: 52 65                	ld	a0, 272(sp)
ffffffff802055fa: f2 65                	ld	a1, 280(sp)
ffffffff802055fc: 2a ff                	sd	a0, 440(sp)
ffffffff802055fe: ae e3                	sd	a1, 448(sp)
ffffffff80205600: 97 10 00 00          	auipc	ra, 1
ffffffff80205604: e7 80 40 11          	jalr	276(ra)
ffffffff80205608: 2a e8                	sd	a0, 16(sp)
ffffffff8020560a: 2e e4                	sd	a1, 8(sp)
ffffffff8020560c: 09 a0                	j	2
ffffffff8020560e: 2a 65                	ld	a0, 136(sp)
ffffffff80205610: c2 65                	ld	a1, 16(sp)
ffffffff80205612: 22 66                	ld	a2, 8(sp)
ffffffff80205614: 97 20 00 00          	auipc	ra, 2
ffffffff80205618: e7 80 e0 be          	jalr	-1042(ra)
ffffffff8020561c: 09 a0                	j	2
ffffffff8020561e: e1 b5                	j	-312

ffffffff80205620 _ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h465838c36f559cc6E:
;     let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
ffffffff80205620: 79 71                	addi	sp, sp, -48
ffffffff80205622: 01 45                	mv	a0, zero
ffffffff80205624: 2a ec                	sd	a0, 24(sp)
ffffffff80205626: c2 65                	ld	a1, 16(sp)
ffffffff80205628: 2a e4                	sd	a0, 8(sp)
ffffffff8020562a: 2e 85                	add	a0, zero, a1
ffffffff8020562c: a2 65                	ld	a1, 8(sp)
ffffffff8020562e: 45 61                	addi	sp, sp, 48
ffffffff80205630: 82 80                	ret

ffffffff80205632 _ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h5af93b06a3d4b0ceE:
;     .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?;
ffffffff80205632: 79 71                	addi	sp, sp, -48
ffffffff80205634: 2a f0                	sd	a0, 32(sp)
ffffffff80205636: 0c 61                	ld	a1, 0(a0)
ffffffff80205638: 08 65                	ld	a0, 8(a0)
ffffffff8020563a: 2e e8                	sd	a1, 16(sp)
ffffffff8020563c: 2a ec                	sd	a0, 24(sp)
ffffffff8020563e: 2a e4                	sd	a0, 8(sp)
ffffffff80205640: 2e 85                	add	a0, zero, a1
ffffffff80205642: a2 65                	ld	a1, 8(sp)
ffffffff80205644: 45 61                	addi	sp, sp, 48
ffffffff80205646: 82 80                	ret

ffffffff80205648 _ZN5alloc7raw_vec15RawVec$LT$T$GT$14from_raw_parts17h6579649ffae00f94E:
;     pub unsafe fn from_raw_parts(ptr: *mut T, capacity: usize) -> Self {
ffffffff80205648: 79 71                	addi	sp, sp, -48
ffffffff8020564a: 06 f4                	sd	ra, 40(sp)
ffffffff8020564c: 2a ec                	sd	a0, 24(sp)
ffffffff8020564e: 2e f0                	sd	a1, 32(sp)
;         unsafe { Self::from_raw_parts_in(ptr, capacity, Global) }
ffffffff80205650: 97 00 00 00          	auipc	ra, 0
ffffffff80205654: e7 80 a0 38          	jalr	906(ra)
ffffffff80205658: 2a e8                	sd	a0, 16(sp)
ffffffff8020565a: 2e e4                	sd	a1, 8(sp)
ffffffff8020565c: 09 a0                	j	2
;     }
ffffffff8020565e: 42 65                	ld	a0, 16(sp)
ffffffff80205660: a2 65                	ld	a1, 8(sp)
ffffffff80205662: a2 70                	ld	ra, 40(sp)
ffffffff80205664: 45 61                	addi	sp, sp, 48
ffffffff80205666: 82 80                	ret

ffffffff80205668 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$10set_memory17h032456e3e2ad62a6E:
;     fn set_memory(&mut self, memory: MemoryBlock) {
ffffffff80205668: 5d 71                	addi	sp, sp, -80
ffffffff8020566a: 86 e4                	sd	ra, 72(sp)
ffffffff8020566c: 2a f8                	sd	a0, 48(sp)
ffffffff8020566e: 2e fc                	sd	a1, 56(sp)
ffffffff80205670: b2 e0                	sd	a2, 64(sp)
;         self.ptr = unsafe { Unique::new_unchecked(memory.ptr.cast().as_ptr()) };
ffffffff80205672: 2a f4                	sd	a0, 40(sp)
ffffffff80205674: 2e 85                	add	a0, zero, a1
ffffffff80205676: 32 f0                	sd	a2, 32(sp)
ffffffff80205678: 97 10 00 00          	auipc	ra, 1
ffffffff8020567c: e7 80 a0 b1          	jalr	-1254(ra)
ffffffff80205680: 2a ec                	sd	a0, 24(sp)
ffffffff80205682: 09 a0                	j	2
ffffffff80205684: 62 65                	ld	a0, 24(sp)
ffffffff80205686: 97 10 00 00          	auipc	ra, 1
ffffffff8020568a: e7 80 40 b3          	jalr	-1228(ra)
ffffffff8020568e: 2a e8                	sd	a0, 16(sp)
ffffffff80205690: 09 a0                	j	2
ffffffff80205692: 42 65                	ld	a0, 16(sp)
ffffffff80205694: 97 10 00 00          	auipc	ra, 1
ffffffff80205698: e7 80 00 6a          	jalr	1696(ra)
ffffffff8020569c: 2a e4                	sd	a0, 8(sp)
ffffffff8020569e: 09 a0                	j	2
ffffffff802056a0: 22 65                	ld	a0, 8(sp)
ffffffff802056a2: a2 75                	ld	a1, 40(sp)
ffffffff802056a4: 88 e1                	sd	a0, 0(a1)
;         self.cap = Self::capacity_from_bytes(memory.size);
ffffffff802056a6: 02 75                	ld	a0, 32(sp)
ffffffff802056a8: 97 00 00 00          	auipc	ra, 0
ffffffff802056ac: e7 80 60 35          	jalr	854(ra)
ffffffff802056b0: 2a e0                	sd	a0, 0(sp)
ffffffff802056b2: 09 a0                	j	2
ffffffff802056b4: 02 65                	ld	a0, 0(sp)
ffffffff802056b6: a2 75                	ld	a1, 40(sp)
ffffffff802056b8: 88 e5                	sd	a0, 8(a1)
;     }
ffffffff802056ba: a6 60                	ld	ra, 72(sp)
ffffffff802056bc: 61 61                	addi	sp, sp, 80
ffffffff802056be: 82 80                	ret

ffffffff802056c0 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11try_reserve17h4d0c29a313f49aeeE:
;     pub fn try_reserve(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
ffffffff802056c0: 5d 71                	addi	sp, sp, -80
ffffffff802056c2: 86 e4                	sd	ra, 72(sp)
ffffffff802056c4: 2e f8                	sd	a1, 48(sp)
ffffffff802056c6: 32 fc                	sd	a2, 56(sp)
ffffffff802056c8: b6 e0                	sd	a3, 64(sp)
;         if self.needs_to_grow(len, additional) {
ffffffff802056ca: 2a f4                	sd	a0, 40(sp)
ffffffff802056cc: 2e 85                	add	a0, zero, a1
ffffffff802056ce: 2e f0                	sd	a1, 32(sp)
ffffffff802056d0: b2 85                	add	a1, zero, a2
ffffffff802056d2: 32 ec                	sd	a2, 24(sp)
ffffffff802056d4: 36 86                	add	a2, zero, a3
ffffffff802056d6: 36 e8                	sd	a3, 16(sp)
ffffffff802056d8: 97 00 00 00          	auipc	ra, 0
ffffffff802056dc: e7 80 40 03          	jalr	52(ra)
ffffffff802056e0: 2a e4                	sd	a0, 8(sp)
ffffffff802056e2: 09 a0                	j	2
ffffffff802056e4: 22 65                	ld	a0, 8(sp)
ffffffff802056e6: 11 e5                	bnez	a0, 12
ffffffff802056e8: 09 a0                	j	2
ffffffff802056ea: 01 45                	mv	a0, zero
;             Ok(())
ffffffff802056ec: a2 75                	ld	a1, 40(sp)
ffffffff802056ee: 88 e1                	sd	a0, 0(a1)
;         if self.needs_to_grow(len, additional) {
ffffffff802056f0: 19 a8                	j	22
;             self.grow_amortized(len, additional)
ffffffff802056f2: 22 75                	ld	a0, 40(sp)
ffffffff802056f4: 82 75                	ld	a1, 32(sp)
ffffffff802056f6: 62 66                	ld	a2, 24(sp)
ffffffff802056f8: c2 66                	ld	a3, 16(sp)
ffffffff802056fa: 97 00 00 00          	auipc	ra, 0
ffffffff802056fe: e7 80 c0 11          	jalr	284(ra)
ffffffff80205702: 09 a0                	j	2
;         if self.needs_to_grow(len, additional) {
ffffffff80205704: 09 a0                	j	2
;     }
ffffffff80205706: a6 60                	ld	ra, 72(sp)
ffffffff80205708: 61 61                	addi	sp, sp, 80
ffffffff8020570a: 82 80                	ret

ffffffff8020570c _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17hd381668aa5f106ddE:
;     fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
ffffffff8020570c: 1d 71                	addi	sp, sp, -96
ffffffff8020570e: 86 ec                	sd	ra, 88(sp)
ffffffff80205710: 2a f4                	sd	a0, 40(sp)
ffffffff80205712: 2e f8                	sd	a1, 48(sp)
ffffffff80205714: 32 fc                	sd	a2, 56(sp)
ffffffff80205716: aa e4                	sd	a0, 72(sp)
ffffffff80205718: c1 46                	addi	a3, zero, 16
;     intrinsics::size_of::<T>()
ffffffff8020571a: b6 e8                	sd	a3, 80(sp)
ffffffff8020571c: 81 46                	mv	a3, zero
;         if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
ffffffff8020571e: 32 f0                	sd	a2, 32(sp)
ffffffff80205720: 2e ec                	sd	a1, 24(sp)
ffffffff80205722: 2a e8                	sd	a0, 16(sp)
ffffffff80205724: 91 e6                	bnez	a3, 12
ffffffff80205726: 09 a0                	j	2
ffffffff80205728: 42 65                	ld	a0, 16(sp)
ffffffff8020572a: 0c 65                	ld	a1, 8(a0)
ffffffff8020572c: ae e0                	sd	a1, 64(sp)
ffffffff8020572e: 21 a0                	j	8
ffffffff80205730: 7d 55                	addi	a0, zero, -1
ffffffff80205732: aa e0                	sd	a0, 64(sp)
ffffffff80205734: 09 a0                	j	2
;     }
ffffffff80205736: 06 65                	ld	a0, 64(sp)
;         additional > self.capacity().wrapping_sub(len)
ffffffff80205738: 2a e4                	sd	a0, 8(sp)
ffffffff8020573a: 09 a0                	j	2
ffffffff8020573c: 22 65                	ld	a0, 8(sp)
ffffffff8020573e: e2 65                	ld	a1, 24(sp)
ffffffff80205740: 97 10 00 00          	auipc	ra, 1
ffffffff80205744: e7 80 40 45          	jalr	1108(ra)
ffffffff80205748: 2a e0                	sd	a0, 0(sp)
ffffffff8020574a: 09 a0                	j	2
ffffffff8020574c: 02 65                	ld	a0, 0(sp)
ffffffff8020574e: 82 75                	ld	a1, 32(sp)
ffffffff80205750: 33 35 b5 00          	sltu	a0, a0, a1
;     }
ffffffff80205754: e6 60                	ld	ra, 88(sp)
ffffffff80205756: 25 61                	addi	sp, sp, 96
ffffffff80205758: 82 80                	ret

ffffffff8020575a _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h186f528dcb191d63E:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
ffffffff8020575a: 71 71                	addi	sp, sp, -176
ffffffff8020575c: 06 f5                	sd	ra, 168(sp)
ffffffff8020575e: ae f4                	sd	a1, 104(sp)
ffffffff80205760: 41 46                	addi	a2, zero, 16
;     intrinsics::size_of::<T>()
ffffffff80205762: 32 e9                	sd	a2, 144(sp)
;         if mem::size_of::<T>() == 0 || self.cap == 0 {
ffffffff80205764: ae e0                	sd	a1, 64(sp)
ffffffff80205766: 2a fc                	sd	a0, 56(sp)
ffffffff80205768: 32 f8                	sd	a2, 48(sp)
ffffffff8020576a: 25 a0                	j	40
ffffffff8020576c: 05 45                	addi	a0, zero, 1
ffffffff8020576e: a3 07 a1 04          	sb	a0, 79(sp)
ffffffff80205772: 19 a8                	j	22
ffffffff80205774: 01 45                	mv	a0, zero
ffffffff80205776: a3 07 a1 04          	sb	a0, 79(sp)
ffffffff8020577a: 39 a0                	j	14
ffffffff8020577c: 06 65                	ld	a0, 64(sp)
ffffffff8020577e: 0c 65                	ld	a1, 8(a0)
ffffffff80205780: 01 46                	mv	a2, zero
ffffffff80205782: e3 85 c5 fe          	beq	a1, a2, -22
ffffffff80205786: fd b7                	j	-18
ffffffff80205788: 03 45 f1 04          	lbu	a0, 79(sp)
ffffffff8020578c: 05 89                	andi	a0, a0, 1
ffffffff8020578e: 01 ed                	bnez	a0, 24
ffffffff80205790: 31 a0                	j	12
ffffffff80205792: 01 45                	mv	a0, zero
ffffffff80205794: c2 75                	ld	a1, 48(sp)
ffffffff80205796: e3 8b a5 fc          	beq	a1, a0, -42
ffffffff8020579a: cd b7                	j	-30
ffffffff8020579c: 21 45                	addi	a0, zero, 8
;     intrinsics::min_align_of::<T>()
ffffffff8020579e: 2a f1                	sd	a0, 160(sp)
;                 let align = mem::align_of::<T>();
ffffffff802057a0: aa f8                	sd	a0, 112(sp)
ffffffff802057a2: 2a f4                	sd	a0, 40(sp)
ffffffff802057a4: 29 a0                	j	10
ffffffff802057a6: 01 45                	mv	a0, zero
;             None
ffffffff802057a8: e2 75                	ld	a1, 56(sp)
ffffffff802057aa: 88 e1                	sd	a0, 0(a1)
;         if mem::size_of::<T>() == 0 || self.cap == 0 {
ffffffff802057ac: 95 a0                	j	100
ffffffff802057ae: 41 45                	addi	a0, zero, 16
;     intrinsics::size_of::<T>()
ffffffff802057b0: 2a ed                	sd	a0, 152(sp)
;                 let size = mem::size_of::<T>() * self.cap;
ffffffff802057b2: 2a f0                	sd	a0, 32(sp)
ffffffff802057b4: 09 a0                	j	2
ffffffff802057b6: 06 65                	ld	a0, 64(sp)
ffffffff802057b8: 0c 65                	ld	a1, 8(a0)
ffffffff802057ba: 02 76                	ld	a2, 32(sp)
ffffffff802057bc: b3 05 b6 02          	<unknown>
ffffffff802057c0: ae fc                	sd	a1, 120(sp)
;                 let layout = Layout::from_size_align_unchecked(size, align);
ffffffff802057c2: 2e 85                	add	a0, zero, a1
ffffffff802057c4: a2 75                	ld	a1, 40(sp)
ffffffff802057c6: 97 00 00 00          	auipc	ra, 0
ffffffff802057ca: e7 80 40 45          	jalr	1108(ra)
ffffffff802057ce: 2a 86                	add	a2, zero, a0
ffffffff802057d0: ae 86                	add	a3, zero, a1
ffffffff802057d2: 2a e1                	sd	a0, 128(sp)
ffffffff802057d4: 2e e5                	sd	a1, 136(sp)
ffffffff802057d6: 32 ec                	sd	a2, 24(sp)
ffffffff802057d8: 36 e8                	sd	a3, 16(sp)
ffffffff802057da: 09 a0                	j	2
;                 Some((self.ptr.cast().into(), layout))
ffffffff802057dc: 06 65                	ld	a0, 64(sp)
ffffffff802057de: 08 61                	ld	a0, 0(a0)
ffffffff802057e0: 97 10 00 00          	auipc	ra, 1
ffffffff802057e4: e7 80 80 56          	jalr	1384(ra)
ffffffff802057e8: 2a e4                	sd	a0, 8(sp)
ffffffff802057ea: 09 a0                	j	2
ffffffff802057ec: 22 65                	ld	a0, 8(sp)
ffffffff802057ee: 97 10 00 00          	auipc	ra, 1
ffffffff802057f2: e7 80 c0 59          	jalr	1436(ra)
ffffffff802057f6: 2a e0                	sd	a0, 0(sp)
ffffffff802057f8: 09 a0                	j	2
ffffffff802057fa: 02 65                	ld	a0, 0(sp)
ffffffff802057fc: aa e8                	sd	a0, 80(sp)
ffffffff802057fe: e2 65                	ld	a1, 24(sp)
ffffffff80205800: ae ec                	sd	a1, 88(sp)
ffffffff80205802: 42 66                	ld	a2, 16(sp)
ffffffff80205804: b2 f0                	sd	a2, 96(sp)
ffffffff80205806: e2 76                	ld	a3, 56(sp)
ffffffff80205808: 90 ea                	sd	a2, 16(a3)
ffffffff8020580a: 8c e6                	sd	a1, 8(a3)
ffffffff8020580c: 88 e2                	sd	a0, 0(a3)
;         if mem::size_of::<T>() == 0 || self.cap == 0 {
ffffffff8020580e: 09 a0                	j	2
;     }
ffffffff80205810: aa 70                	ld	ra, 168(sp)
ffffffff80205812: 4d 61                	addi	sp, sp, 176
ffffffff80205814: 82 80                	ret

ffffffff80205816 _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he3cfb4548866a665E:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
ffffffff80205816: 41 71                	addi	sp, sp, -496
ffffffff80205818: 86 f7                	sd	ra, 488(sp)
ffffffff8020581a: ae e6                	sd	a1, 328(sp)
ffffffff8020581c: b2 ea                	sd	a2, 336(sp)
ffffffff8020581e: b6 ee                	sd	a3, 344(sp)
ffffffff80205820: 41 47                	addi	a4, zero, 16
;     intrinsics::size_of::<T>()
ffffffff80205822: ba ef                	sd	a4, 472(sp)
;         if mem::size_of::<T>() == 0 {
ffffffff80205824: 36 f1                	sd	a3, 160(sp)
ffffffff80205826: 32 ed                	sd	a2, 152(sp)
ffffffff80205828: 2e e9                	sd	a1, 144(sp)
ffffffff8020582a: 2a e5                	sd	a0, 136(sp)
ffffffff8020582c: 3a e1                	sd	a4, 128(sp)
ffffffff8020582e: 09 a0                	j	2
ffffffff80205830: 01 45                	mv	a0, zero
ffffffff80205832: 8a 65                	ld	a1, 128(sp)
ffffffff80205834: 63 8c a5 00          	beq	a1, a0, 24
ffffffff80205838: 09 a0                	j	2
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
ffffffff8020583a: 6a 65                	ld	a0, 152(sp)
ffffffff8020583c: 8a 75                	ld	a1, 160(sp)
ffffffff8020583e: 97 10 00 00          	auipc	ra, 1
ffffffff80205842: e7 80 e0 2b          	jalr	702(ra)
ffffffff80205846: aa fc                	sd	a0, 120(sp)
ffffffff80205848: ae f8                	sd	a1, 112(sp)
ffffffff8020584a: 29 a8                	j	26
ffffffff8020584c: 01 45                	mv	a0, zero
;             return Err(CapacityOverflow);
ffffffff8020584e: 2a f9                	sd	a0, 176(sp)
ffffffff80205850: aa 75                	ld	a1, 168(sp)
ffffffff80205852: 2a 66                	ld	a2, 136(sp)
ffffffff80205854: 0c e6                	sd	a1, 8(a2)
ffffffff80205856: 08 ea                	sd	a0, 16(a2)
ffffffff80205858: 05 45                	addi	a0, zero, 1
ffffffff8020585a: 08 e2                	sd	a0, 0(a2)
ffffffff8020585c: 09 a0                	j	2
;     }
ffffffff8020585e: be 70                	ld	ra, 488(sp)
ffffffff80205860: 7d 61                	addi	sp, sp, 496
ffffffff80205862: 82 80                	ret
ffffffff80205864: 01 45                	mv	a0, zero
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
ffffffff80205866: aa f9                	sd	a0, 240(sp)
ffffffff80205868: ae 76                	ld	a3, 232(sp)
ffffffff8020586a: 8c 09                	addi	a1, sp, 208
ffffffff8020586c: aa f4                	sd	a0, 104(sp)
ffffffff8020586e: 2e 85                	add	a0, zero, a1
ffffffff80205870: e6 75                	ld	a1, 120(sp)
ffffffff80205872: 46 76                	ld	a2, 112(sp)
ffffffff80205874: 26 77                	ld	a4, 104(sp)
ffffffff80205876: 97 10 00 00          	auipc	ra, 1
ffffffff8020587a: e7 80 a0 e3          	jalr	-454(ra)
ffffffff8020587e: 09 a0                	j	2
ffffffff80205880: 28 19                	addi	a0, sp, 184
ffffffff80205882: 8c 09                	addi	a1, sp, 208
ffffffff80205884: 97 20 00 00          	auipc	ra, 2
ffffffff80205888: e7 80 80 9f          	jalr	-1544(ra)
ffffffff8020588c: 09 a0                	j	2
ffffffff8020588e: 6a 75                	ld	a0, 184(sp)
ffffffff80205890: 81 45                	mv	a1, zero
ffffffff80205892: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80205896: 09 a0                	j	2
ffffffff80205898: 1d a0                	j	38
ffffffff8020589a: 0e 65                	ld	a0, 192(sp)
ffffffff8020589c: aa fa                	sd	a0, 368(sp)
ffffffff8020589e: aa fe                	sd	a0, 376(sp)
;         let cap = cmp::max(self.cap * 2, required_cap);
ffffffff802058a0: ca 65                	ld	a1, 144(sp)
ffffffff802058a2: 90 65                	ld	a2, 8(a1)
ffffffff802058a4: 06 06                	slli	a2, a2, 1
ffffffff802058a6: aa f0                	sd	a0, 96(sp)
ffffffff802058a8: 32 85                	add	a0, zero, a2
ffffffff802058aa: 86 75                	ld	a1, 96(sp)
ffffffff802058ac: 97 10 00 00          	auipc	ra, 1
ffffffff802058b0: e7 80 a0 93          	jalr	-1734(ra)
ffffffff802058b4: aa 85                	add	a1, zero, a0
ffffffff802058b6: 2a e3                	sd	a0, 384(sp)
ffffffff802058b8: ae ec                	sd	a1, 88(sp)
ffffffff802058ba: 3d a0                	j	46
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
ffffffff802058bc: 00 00                	unimp	
ffffffff802058be: 0e 65                	ld	a0, 192(sp)
ffffffff802058c0: ae 65                	ld	a1, 200(sp)
ffffffff802058c2: aa f2                	sd	a0, 352(sp)
ffffffff802058c4: ae f6                	sd	a1, 360(sp)
ffffffff802058c6: 97 10 00 00          	auipc	ra, 1
ffffffff802058ca: e7 80 e0 e4          	jalr	-434(ra)
ffffffff802058ce: aa e8                	sd	a0, 80(sp)
ffffffff802058d0: ae e4                	sd	a1, 72(sp)
ffffffff802058d2: 09 a0                	j	2
ffffffff802058d4: 2a 65                	ld	a0, 136(sp)
ffffffff802058d6: c6 65                	ld	a1, 80(sp)
ffffffff802058d8: 26 66                	ld	a2, 72(sp)
ffffffff802058da: 97 20 00 00          	auipc	ra, 2
ffffffff802058de: e7 80 20 96          	jalr	-1694(ra)
ffffffff802058e2: 09 a0                	j	2
ffffffff802058e4: 09 a0                	j	2
ffffffff802058e6: a5 bf                	j	-136
ffffffff802058e8: 41 45                	addi	a0, zero, 16
;     intrinsics::size_of::<T>()
ffffffff802058ea: aa f3                	sd	a0, 480(sp)
;         let elem_size = mem::size_of::<T>();
ffffffff802058ec: 2a e7                	sd	a0, 392(sp)
ffffffff802058ee: aa e0                	sd	a0, 64(sp)
ffffffff802058f0: 09 a0                	j	2
ffffffff802058f2: 05 45                	addi	a0, zero, 1
;         let min_non_zero_cap = if elem_size == 1 {
ffffffff802058f4: 86 65                	ld	a1, 64(sp)
ffffffff802058f6: 63 89 a5 00          	beq	a1, a0, 18
ffffffff802058fa: 09 a0                	j	2
ffffffff802058fc: 13 05 10 40          	addi	a0, zero, 1025
;         } else if elem_size <= 1024 {
ffffffff80205900: 86 65                	ld	a1, 64(sp)
ffffffff80205902: 63 e9 a5 00          	bltu	a1, a0, 18
ffffffff80205906: 21 a0                	j	8
ffffffff80205908: 21 45                	addi	a0, zero, 8
;             8
ffffffff8020590a: aa fd                	sd	a0, 248(sp)
;         let min_non_zero_cap = if elem_size == 1 {
ffffffff8020590c: 01 a8                	j	16
ffffffff8020590e: 05 45                	addi	a0, zero, 1
;             1
ffffffff80205910: aa fd                	sd	a0, 248(sp)
;         } else if elem_size <= 1024 {
ffffffff80205912: 21 a0                	j	8
ffffffff80205914: 11 45                	addi	a0, zero, 4
;             4
ffffffff80205916: aa fd                	sd	a0, 248(sp)
;         } else if elem_size <= 1024 {
ffffffff80205918: 09 a0                	j	2
;         let min_non_zero_cap = if elem_size == 1 {
ffffffff8020591a: 09 a0                	j	2
;         let cap = cmp::max(min_non_zero_cap, cap);
ffffffff8020591c: 6e 75                	ld	a0, 248(sp)
ffffffff8020591e: e6 65                	ld	a1, 88(sp)
ffffffff80205920: 97 10 00 00          	auipc	ra, 1
ffffffff80205924: e7 80 60 8c          	jalr	-1850(ra)
ffffffff80205928: aa 85                	add	a1, zero, a0
ffffffff8020592a: 2a eb                	sd	a0, 400(sp)
ffffffff8020592c: 2e fc                	sd	a1, 56(sp)
ffffffff8020592e: 09 a0                	j	2
;         let new_layout = Layout::array::<T>(cap);
ffffffff80205930: 62 75                	ld	a0, 56(sp)
ffffffff80205932: 97 10 00 00          	auipc	ra, 1
ffffffff80205936: e7 80 00 36          	jalr	864(ra)
ffffffff8020593a: 2a 86                	add	a2, zero, a0
ffffffff8020593c: ae 86                	add	a3, zero, a1
ffffffff8020593e: 2a ef                	sd	a0, 408(sp)
ffffffff80205940: 2e f3                	sd	a1, 416(sp)
ffffffff80205942: 32 f8                	sd	a2, 48(sp)
ffffffff80205944: 36 f4                	sd	a3, 40(sp)
ffffffff80205946: 09 a0                	j	2
ffffffff80205948: 08 1a                	addi	a0, sp, 304
;         let memory = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
ffffffff8020594a: ca 65                	ld	a1, 144(sp)
ffffffff8020594c: 97 00 00 00          	auipc	ra, 0
ffffffff80205950: e7 80 e0 e0          	jalr	-498(ra)
ffffffff80205954: 09 a0                	j	2
ffffffff80205956: 28 0a                	addi	a0, sp, 280
ffffffff80205958: 14 1a                	addi	a3, sp, 304
ffffffff8020595a: c2 75                	ld	a1, 48(sp)
ffffffff8020595c: 22 76                	ld	a2, 40(sp)
ffffffff8020595e: 4a 67                	ld	a4, 144(sp)
ffffffff80205960: 97 00 00 00          	auipc	ra, 0
ffffffff80205964: e7 80 40 b0          	jalr	-1276(ra)
ffffffff80205968: 09 a0                	j	2
ffffffff8020596a: 08 02                	addi	a0, sp, 256
ffffffff8020596c: 2c 0a                	addi	a1, sp, 280
ffffffff8020596e: 97 20 00 00          	auipc	ra, 2
ffffffff80205972: e7 80 c0 91          	jalr	-1764(ra)
ffffffff80205976: 09 a0                	j	2
ffffffff80205978: 12 65                	ld	a0, 256(sp)
ffffffff8020597a: 81 45                	mv	a1, zero
ffffffff8020597c: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80205980: 09 a0                	j	2
ffffffff80205982: 25 a0                	j	40
ffffffff80205984: 32 65                	ld	a0, 264(sp)
ffffffff80205986: d2 65                	ld	a1, 272(sp)
ffffffff80205988: 2a ff                	sd	a0, 440(sp)
ffffffff8020598a: ae e3                	sd	a1, 448(sp)
ffffffff8020598c: aa e7                	sd	a0, 456(sp)
ffffffff8020598e: ae eb                	sd	a1, 464(sp)
;         self.set_memory(memory);
ffffffff80205990: 4a 66                	ld	a2, 144(sp)
ffffffff80205992: 2a f0                	sd	a0, 32(sp)
ffffffff80205994: 32 85                	add	a0, zero, a2
ffffffff80205996: 82 76                	ld	a3, 32(sp)
ffffffff80205998: 2e ec                	sd	a1, 24(sp)
ffffffff8020599a: b6 85                	add	a1, zero, a3
ffffffff8020599c: 62 66                	ld	a2, 24(sp)
ffffffff8020599e: 97 00 00 00          	auipc	ra, 0
ffffffff802059a2: e7 80 a0 cc          	jalr	-822(ra)
ffffffff802059a6: 35 a0                	j	44
;         let memory = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
ffffffff802059a8: 00 00                	unimp	
ffffffff802059aa: 32 65                	ld	a0, 264(sp)
ffffffff802059ac: d2 65                	ld	a1, 272(sp)
ffffffff802059ae: 2a f7                	sd	a0, 424(sp)
ffffffff802059b0: 2e fb                	sd	a1, 432(sp)
ffffffff802059b2: 97 10 00 00          	auipc	ra, 1
ffffffff802059b6: e7 80 20 d6          	jalr	-670(ra)
ffffffff802059ba: 2a e8                	sd	a0, 16(sp)
ffffffff802059bc: 2e e4                	sd	a1, 8(sp)
ffffffff802059be: 09 a0                	j	2
ffffffff802059c0: 2a 65                	ld	a0, 136(sp)
ffffffff802059c2: c2 65                	ld	a1, 16(sp)
ffffffff802059c4: 22 66                	ld	a2, 8(sp)
ffffffff802059c6: 97 20 00 00          	auipc	ra, 2
ffffffff802059ca: e7 80 60 87          	jalr	-1930(ra)
ffffffff802059ce: 09 a0                	j	2
ffffffff802059d0: 19 bf                	j	-234
ffffffff802059d2: 01 45                	mv	a0, zero
;         Ok(())
ffffffff802059d4: aa 65                	ld	a1, 136(sp)
ffffffff802059d6: 88 e1                	sd	a0, 0(a1)
;     }
ffffffff802059d8: 59 b5                	j	-378

ffffffff802059da _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17h92ccefde35e53ba5E:
;     pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, a: A) -> Self {
ffffffff802059da: 39 71                	addi	sp, sp, -64
ffffffff802059dc: 06 fc                	sd	ra, 56(sp)
ffffffff802059de: 2a f0                	sd	a0, 32(sp)
ffffffff802059e0: 2e f4                	sd	a1, 40(sp)
;         Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap: capacity, alloc: a }
ffffffff802059e2: 2e e4                	sd	a1, 8(sp)
ffffffff802059e4: 97 10 00 00          	auipc	ra, 1
ffffffff802059e8: e7 80 00 35          	jalr	848(ra)
ffffffff802059ec: 2a e0                	sd	a0, 0(sp)
ffffffff802059ee: 09 a0                	j	2
ffffffff802059f0: 02 65                	ld	a0, 0(sp)
ffffffff802059f2: 2a e8                	sd	a0, 16(sp)
ffffffff802059f4: a2 65                	ld	a1, 8(sp)
ffffffff802059f6: 2e ec                	sd	a1, 24(sp)
;     }
ffffffff802059f8: e2 70                	ld	ra, 56(sp)
ffffffff802059fa: 21 61                	addi	sp, sp, 64
ffffffff802059fc: 82 80                	ret

ffffffff802059fe _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17h27e5b80a8856bee4E:
;     fn capacity_from_bytes(excess: usize) -> usize {
ffffffff802059fe: 01 11                	addi	sp, sp, -32
ffffffff80205a00: 2a e8                	sd	a0, 16(sp)
ffffffff80205a02: c1 45                	addi	a1, zero, 16
;     intrinsics::size_of::<T>()
ffffffff80205a04: 2e ec                	sd	a1, 24(sp)
;         excess / mem::size_of::<T>()
ffffffff80205a06: 2a e4                	sd	a0, 8(sp)
ffffffff80205a08: 2e e0                	sd	a1, 0(sp)
ffffffff80205a0a: 09 a0                	j	2
ffffffff80205a0c: 01 45                	mv	a0, zero
ffffffff80205a0e: 82 65                	ld	a1, 0(sp)
ffffffff80205a10: 63 89 a5 00          	beq	a1, a0, 18
ffffffff80205a14: 09 a0                	j	2
ffffffff80205a16: 22 65                	ld	a0, 8(sp)
ffffffff80205a18: 82 65                	ld	a1, 0(sp)
ffffffff80205a1a: 33 55 b5 02          	<unknown>
;     }
ffffffff80205a1e: 05 61                	addi	sp, sp, 32
ffffffff80205a20: 82 80                	ret

ffffffff80205a22 .LBB17_4:
;         excess / mem::size_of::<T>()
ffffffff80205a22: 17 95 00 00          	auipc	a0, 9
ffffffff80205a26: 13 05 e5 b9          	addi	a0, a0, -1122

ffffffff80205a2a .LBB17_5:
ffffffff80205a2a: 17 96 00 00          	auipc	a2, 9
ffffffff80205a2e: 13 06 66 b7          	addi	a2, a2, -1162
ffffffff80205a32: e5 45                	addi	a1, zero, 25
ffffffff80205a34: 97 50 00 00          	auipc	ra, 5
ffffffff80205a38: e7 80 40 90          	jalr	-1788(ra)
ffffffff80205a3c: 00 00                	unimp	

ffffffff80205a3e _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17hbb2fc99fc56e2828E:
;     pub fn ptr(&self) -> *mut T {
ffffffff80205a3e: 01 11                	addi	sp, sp, -32
ffffffff80205a40: 06 ec                	sd	ra, 24(sp)
ffffffff80205a42: 2a e8                	sd	a0, 16(sp)
;         self.ptr.as_ptr()
ffffffff80205a44: 08 61                	ld	a0, 0(a0)
ffffffff80205a46: 97 10 00 00          	auipc	ra, 1
ffffffff80205a4a: e7 80 a0 32          	jalr	810(ra)
ffffffff80205a4e: 2a e4                	sd	a0, 8(sp)
ffffffff80205a50: 09 a0                	j	2
;     }
ffffffff80205a52: 22 65                	ld	a0, 8(sp)
ffffffff80205a54: e2 60                	ld	ra, 24(sp)
ffffffff80205a56: 05 61                	addi	sp, sp, 32
ffffffff80205a58: 82 80                	ret

ffffffff80205a5a _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h2224ea380b63f248E:
;     pub fn reserve(&mut self, len: usize, additional: usize) {
ffffffff80205a5a: 1d 71                	addi	sp, sp, -96
ffffffff80205a5c: 86 ec                	sd	ra, 88(sp)
ffffffff80205a5e: 2a f8                	sd	a0, 48(sp)
ffffffff80205a60: 2e fc                	sd	a1, 56(sp)
ffffffff80205a62: b2 e0                	sd	a2, 64(sp)
ffffffff80205a64: 34 08                	addi	a3, sp, 24
;         match self.try_reserve(len, additional) {
ffffffff80205a66: 2a e8                	sd	a0, 16(sp)
ffffffff80205a68: 36 85                	add	a0, zero, a3
ffffffff80205a6a: c2 66                	ld	a3, 16(sp)
ffffffff80205a6c: 2e e4                	sd	a1, 8(sp)
ffffffff80205a6e: b6 85                	add	a1, zero, a3
ffffffff80205a70: 22 67                	ld	a4, 8(sp)
ffffffff80205a72: 32 e0                	sd	a2, 0(sp)
ffffffff80205a74: 3a 86                	add	a2, zero, a4
ffffffff80205a76: 82 66                	ld	a3, 0(sp)
ffffffff80205a78: 97 00 00 00          	auipc	ra, 0
ffffffff80205a7c: e7 80 80 c4          	jalr	-952(ra)
ffffffff80205a80: 09 a0                	j	2
;             Err(CapacityOverflow) => capacity_overflow(),
ffffffff80205a82: 62 65                	ld	a0, 24(sp)
ffffffff80205a84: 81 45                	mv	a1, zero
ffffffff80205a86: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80205a8a: 09 a0                	j	2
ffffffff80205a8c: 21 a0                	j	8
;     }
ffffffff80205a8e: e6 60                	ld	ra, 88(sp)
ffffffff80205a90: 25 61                	addi	sp, sp, 96
ffffffff80205a92: 82 80                	ret
;             Err(CapacityOverflow) => capacity_overflow(),
ffffffff80205a94: 22 75                	ld	a0, 40(sp)
ffffffff80205a96: b3 35 a0 00          	snez	a1, a0
ffffffff80205a9a: 01 46                	mv	a2, zero
ffffffff80205a9c: 63 05 c5 00          	beq	a0, a2, 10
ffffffff80205aa0: 09 a0                	j	2
ffffffff80205aa2: 39 a0                	j	14
;         match self.try_reserve(len, additional) {
ffffffff80205aa4: 00 00                	unimp	
;             Err(CapacityOverflow) => capacity_overflow(),
ffffffff80205aa6: 97 40 00 00          	auipc	ra, 4
ffffffff80205aaa: e7 80 20 76          	jalr	1890(ra)
ffffffff80205aae: 00 00                	unimp	
;             Err(AllocError { layout, .. }) => handle_alloc_error(layout),
ffffffff80205ab0: 02 75                	ld	a0, 32(sp)
ffffffff80205ab2: a2 75                	ld	a1, 40(sp)
ffffffff80205ab4: aa e4                	sd	a0, 72(sp)
ffffffff80205ab6: ae e8                	sd	a1, 80(sp)
ffffffff80205ab8: 97 40 00 00          	auipc	ra, 4
ffffffff80205abc: e7 80 20 74          	jalr	1858(ra)
ffffffff80205ac0: 00 00                	unimp	

ffffffff80205ac2 _ZN4core5alloc6layout6Layout12pad_to_align17hddc77d70075c6958E:
;     pub fn pad_to_align(&self) -> Layout {
ffffffff80205ac2: 59 71                	addi	sp, sp, -112
ffffffff80205ac4: 86 f4                	sd	ra, 104(sp)
ffffffff80205ac6: aa e8                	sd	a0, 80(sp)
;         let pad = self.padding_needed_for(self.align());
ffffffff80205ac8: aa e4                	sd	a0, 72(sp)
ffffffff80205aca: 97 00 00 00          	auipc	ra, 0
ffffffff80205ace: e7 80 00 18          	jalr	384(ra)
ffffffff80205ad2: aa e0                	sd	a0, 64(sp)
ffffffff80205ad4: 09 a0                	j	2
ffffffff80205ad6: 26 65                	ld	a0, 72(sp)
ffffffff80205ad8: 86 65                	ld	a1, 64(sp)
ffffffff80205ada: 97 00 00 00          	auipc	ra, 0
ffffffff80205ade: e7 80 20 0d          	jalr	210(ra)
ffffffff80205ae2: aa 85                	add	a1, zero, a0
ffffffff80205ae4: aa ec                	sd	a0, 88(sp)
ffffffff80205ae6: 2e fc                	sd	a1, 56(sp)
ffffffff80205ae8: 09 a0                	j	2
;         let new_size = self.size() + pad;
ffffffff80205aea: 26 65                	ld	a0, 72(sp)
ffffffff80205aec: 97 00 00 00          	auipc	ra, 0
ffffffff80205af0: e7 80 40 15          	jalr	340(ra)
ffffffff80205af4: 2a f8                	sd	a0, 48(sp)
ffffffff80205af6: 09 a0                	j	2
ffffffff80205af8: 42 75                	ld	a0, 48(sp)
ffffffff80205afa: e2 75                	ld	a1, 56(sp)
ffffffff80205afc: 33 06 b5 00          	add	a2, a0, a1
ffffffff80205b00: b2 f0                	sd	a2, 96(sp)
;         Layout::from_size_align(new_size, self.align()).unwrap()
ffffffff80205b02: 26 65                	ld	a0, 72(sp)
ffffffff80205b04: 32 f4                	sd	a2, 40(sp)
ffffffff80205b06: 97 00 00 00          	auipc	ra, 0
ffffffff80205b0a: e7 80 40 14          	jalr	324(ra)
ffffffff80205b0e: 2a f0                	sd	a0, 32(sp)
ffffffff80205b10: 09 a0                	j	2
ffffffff80205b12: 22 75                	ld	a0, 40(sp)
ffffffff80205b14: 82 75                	ld	a1, 32(sp)
ffffffff80205b16: 97 00 00 00          	auipc	ra, 0
ffffffff80205b1a: e7 80 20 03          	jalr	50(ra)
ffffffff80205b1e: 2a ec                	sd	a0, 24(sp)
ffffffff80205b20: 2e e8                	sd	a1, 16(sp)
ffffffff80205b22: 09 a0                	j	2

ffffffff80205b24 .LBB0_7:
ffffffff80205b24: 17 96 00 00          	auipc	a2, 9
ffffffff80205b28: 13 06 46 b3          	addi	a2, a2, -1228
ffffffff80205b2c: 62 65                	ld	a0, 24(sp)
ffffffff80205b2e: c2 65                	ld	a1, 16(sp)
ffffffff80205b30: 97 10 00 00          	auipc	ra, 1
ffffffff80205b34: e7 80 c0 5a          	jalr	1452(ra)
ffffffff80205b38: 2a e4                	sd	a0, 8(sp)
ffffffff80205b3a: 2e e0                	sd	a1, 0(sp)
ffffffff80205b3c: 09 a0                	j	2
;     }
ffffffff80205b3e: 22 65                	ld	a0, 8(sp)
ffffffff80205b40: 82 65                	ld	a1, 0(sp)
ffffffff80205b42: a6 70                	ld	ra, 104(sp)
ffffffff80205b44: 65 61                	addi	sp, sp, 112
ffffffff80205b46: 82 80                	ret

ffffffff80205b48 _ZN4core5alloc6layout6Layout15from_size_align17h92b2c8103cf0cef1E:
;     pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutErr> {
ffffffff80205b48: 5d 71                	addi	sp, sp, -80
ffffffff80205b4a: 86 e4                	sd	ra, 72(sp)
ffffffff80205b4c: 2a fc                	sd	a0, 56(sp)
ffffffff80205b4e: ae e0                	sd	a1, 64(sp)
;         if !align.is_power_of_two() {
ffffffff80205b50: 2a f0                	sd	a0, 32(sp)
ffffffff80205b52: 2e 85                	add	a0, zero, a1
ffffffff80205b54: 2e ec                	sd	a1, 24(sp)
ffffffff80205b56: 97 10 00 00          	auipc	ra, 1
ffffffff80205b5a: e7 80 60 06          	jalr	102(ra)
ffffffff80205b5e: 2a e8                	sd	a0, 16(sp)
ffffffff80205b60: 09 a0                	j	2
ffffffff80205b62: 01 45                	mv	a0, zero
ffffffff80205b64: c2 65                	ld	a1, 16(sp)
ffffffff80205b66: 63 8a a5 00          	beq	a1, a0, 20
ffffffff80205b6a: 09 a0                	j	2
ffffffff80205b6c: 01 45                	mv	a0, zero
;         if size > usize::MAX - (align - 1) {
ffffffff80205b6e: e2 65                	ld	a1, 24(sp)
ffffffff80205b70: 0d 8d                	sub	a0, a0, a1
ffffffff80205b72: 02 76                	ld	a2, 32(sp)
ffffffff80205b74: 63 64 c5 02          	bltu	a0, a2, 40
ffffffff80205b78: 09 a8                	j	18
ffffffff80205b7a: 01 45                	mv	a0, zero
;             return Err(LayoutErr { private: () });
ffffffff80205b7c: 2a f8                	sd	a0, 48(sp)
ffffffff80205b7e: 09 a0                	j	2
;     }
ffffffff80205b80: 22 75                	ld	a0, 40(sp)
ffffffff80205b82: c2 75                	ld	a1, 48(sp)
ffffffff80205b84: a6 60                	ld	ra, 72(sp)
ffffffff80205b86: 61 61                	addi	sp, sp, 80
ffffffff80205b88: 82 80                	ret
;         unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
ffffffff80205b8a: 02 75                	ld	a0, 32(sp)
ffffffff80205b8c: e2 65                	ld	a1, 24(sp)
ffffffff80205b8e: 97 00 00 00          	auipc	ra, 0
ffffffff80205b92: e7 80 c0 08          	jalr	140(ra)
ffffffff80205b96: 2a e4                	sd	a0, 8(sp)
ffffffff80205b98: 2e e0                	sd	a1, 0(sp)
ffffffff80205b9a: 21 a0                	j	8
ffffffff80205b9c: 01 45                	mv	a0, zero
;             return Err(LayoutErr { private: () });
ffffffff80205b9e: 2a f8                	sd	a0, 48(sp)
ffffffff80205ba0: c5 b7                	j	-32
;         unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
ffffffff80205ba2: 22 65                	ld	a0, 8(sp)
ffffffff80205ba4: 2a f4                	sd	a0, 40(sp)
ffffffff80205ba6: 82 65                	ld	a1, 0(sp)
ffffffff80205ba8: 2e f8                	sd	a1, 48(sp)
;     }
ffffffff80205baa: d9 bf                	j	-42

ffffffff80205bac _ZN4core5alloc6layout6Layout18padding_needed_for17hbe05823f23cd3c2eE:
;     pub const fn padding_needed_for(&self, align: usize) -> usize {
ffffffff80205bac: 1d 71                	addi	sp, sp, -96
ffffffff80205bae: 86 ec                	sd	ra, 88(sp)
ffffffff80205bb0: 2a fc                	sd	a0, 56(sp)
ffffffff80205bb2: ae e0                	sd	a1, 64(sp)
;         let len = self.size();
ffffffff80205bb4: 2e f8                	sd	a1, 48(sp)
ffffffff80205bb6: 97 00 00 00          	auipc	ra, 0
ffffffff80205bba: e7 80 a0 08          	jalr	138(ra)
ffffffff80205bbe: aa 85                	add	a1, zero, a0
ffffffff80205bc0: aa e4                	sd	a0, 72(sp)
ffffffff80205bc2: 2e f4                	sd	a1, 40(sp)
ffffffff80205bc4: 09 a0                	j	2
;         let len_rounded_up = len.wrapping_add(align).wrapping_sub(1) & !align.wrapping_sub(1);
ffffffff80205bc6: 22 75                	ld	a0, 40(sp)
ffffffff80205bc8: c2 75                	ld	a1, 48(sp)
ffffffff80205bca: 97 10 00 00          	auipc	ra, 1
ffffffff80205bce: e7 80 60 fb          	jalr	-74(ra)
ffffffff80205bd2: 2a f0                	sd	a0, 32(sp)
ffffffff80205bd4: 09 a0                	j	2
ffffffff80205bd6: 85 45                	addi	a1, zero, 1
ffffffff80205bd8: 02 75                	ld	a0, 32(sp)
ffffffff80205bda: 97 10 00 00          	auipc	ra, 1
ffffffff80205bde: e7 80 a0 fb          	jalr	-70(ra)
ffffffff80205be2: 2a ec                	sd	a0, 24(sp)
ffffffff80205be4: 09 a0                	j	2
ffffffff80205be6: 85 45                	addi	a1, zero, 1
ffffffff80205be8: 42 75                	ld	a0, 48(sp)
ffffffff80205bea: 97 10 00 00          	auipc	ra, 1
ffffffff80205bee: e7 80 a0 fa          	jalr	-86(ra)
ffffffff80205bf2: 2a e8                	sd	a0, 16(sp)
ffffffff80205bf4: 09 a0                	j	2
ffffffff80205bf6: 42 65                	ld	a0, 16(sp)
ffffffff80205bf8: 93 45 f5 ff          	not	a1, a0
ffffffff80205bfc: 62 66                	ld	a2, 24(sp)
ffffffff80205bfe: f1 8d                	and	a1, a1, a2
ffffffff80205c00: ae e8                	sd	a1, 80(sp)
;         len_rounded_up.wrapping_sub(len)
ffffffff80205c02: 2e 85                	add	a0, zero, a1
ffffffff80205c04: a2 75                	ld	a1, 40(sp)
ffffffff80205c06: 97 10 00 00          	auipc	ra, 1
ffffffff80205c0a: e7 80 e0 f8          	jalr	-114(ra)
ffffffff80205c0e: 2a e4                	sd	a0, 8(sp)
ffffffff80205c10: 09 a0                	j	2
;     }
ffffffff80205c12: 22 65                	ld	a0, 8(sp)
ffffffff80205c14: e6 60                	ld	ra, 88(sp)
ffffffff80205c16: 25 61                	addi	sp, sp, 96
ffffffff80205c18: 82 80                	ret

ffffffff80205c1a _ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3dd202b50c02aaf9E:
;     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
ffffffff80205c1a: 39 71                	addi	sp, sp, -64
ffffffff80205c1c: 06 fc                	sd	ra, 56(sp)
ffffffff80205c1e: 2a f4                	sd	a0, 40(sp)
ffffffff80205c20: 2e f8                	sd	a1, 48(sp)
;         Layout { size_: size, align_: NonZeroUsize::new_unchecked(align) }
ffffffff80205c22: 2a e8                	sd	a0, 16(sp)
ffffffff80205c24: 2e 85                	add	a0, zero, a1
ffffffff80205c26: 97 10 00 00          	auipc	ra, 1
ffffffff80205c2a: e7 80 20 e3          	jalr	-462(ra)
ffffffff80205c2e: 2a e4                	sd	a0, 8(sp)
ffffffff80205c30: 09 a0                	j	2
ffffffff80205c32: 42 65                	ld	a0, 16(sp)
ffffffff80205c34: 2a ec                	sd	a0, 24(sp)
ffffffff80205c36: a2 65                	ld	a1, 8(sp)
ffffffff80205c38: 2e f0                	sd	a1, 32(sp)
;     }
ffffffff80205c3a: e2 70                	ld	ra, 56(sp)
ffffffff80205c3c: 21 61                	addi	sp, sp, 64
ffffffff80205c3e: 82 80                	ret

ffffffff80205c40 _ZN4core5alloc6layout6Layout4size17he44380c12b322a89E:
;     pub const fn size(&self) -> usize {
ffffffff80205c40: 41 11                	addi	sp, sp, -16
ffffffff80205c42: 2a e4                	sd	a0, 8(sp)
;         self.size_
ffffffff80205c44: 08 61                	ld	a0, 0(a0)
;     }
ffffffff80205c46: 41 01                	addi	sp, sp, 16
ffffffff80205c48: 82 80                	ret

ffffffff80205c4a _ZN4core5alloc6layout6Layout5align17h4d525a9f5457d039E:
;     pub const fn align(&self) -> usize {
ffffffff80205c4a: 01 11                	addi	sp, sp, -32
ffffffff80205c4c: 06 ec                	sd	ra, 24(sp)
ffffffff80205c4e: 2a e8                	sd	a0, 16(sp)
;         self.align_.get()
ffffffff80205c50: 08 65                	ld	a0, 8(a0)
ffffffff80205c52: 97 10 00 00          	auipc	ra, 1
ffffffff80205c56: e7 80 00 e1          	jalr	-496(ra)
ffffffff80205c5a: 2a e4                	sd	a0, 8(sp)
ffffffff80205c5c: 09 a0                	j	2
;     }
ffffffff80205c5e: 22 65                	ld	a0, 8(sp)
ffffffff80205c60: e2 60                	ld	ra, 24(sp)
ffffffff80205c62: 05 61                	addi	sp, sp, 32
ffffffff80205c64: 82 80                	ret

ffffffff80205c66 _ZN4core5alloc6layout6Layout6repeat17h4a8bae90e914799cE:
;     pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutErr> {
ffffffff80205c66: 15 71                	addi	sp, sp, -224
ffffffff80205c68: 86 ed                	sd	ra, 216(sp)
ffffffff80205c6a: 2e f5                	sd	a1, 168(sp)
ffffffff80205c6c: 32 f9                	sd	a2, 176(sp)
;         let padded_size = self.size() + self.padding_needed_for(self.align());
ffffffff80205c6e: aa fc                	sd	a0, 120(sp)
ffffffff80205c70: 2e 85                	add	a0, zero, a1
ffffffff80205c72: b2 f8                	sd	a2, 112(sp)
ffffffff80205c74: ae f4                	sd	a1, 104(sp)
ffffffff80205c76: 97 00 00 00          	auipc	ra, 0
ffffffff80205c7a: e7 80 a0 fc          	jalr	-54(ra)
ffffffff80205c7e: aa f0                	sd	a0, 96(sp)
ffffffff80205c80: 09 a0                	j	2
ffffffff80205c82: 26 75                	ld	a0, 104(sp)
ffffffff80205c84: 97 00 00 00          	auipc	ra, 0
ffffffff80205c88: e7 80 60 fc          	jalr	-58(ra)
ffffffff80205c8c: aa ec                	sd	a0, 88(sp)
ffffffff80205c8e: 09 a0                	j	2
ffffffff80205c90: 26 75                	ld	a0, 104(sp)
ffffffff80205c92: e6 65                	ld	a1, 88(sp)
ffffffff80205c94: 97 00 00 00          	auipc	ra, 0
ffffffff80205c98: e7 80 80 f1          	jalr	-232(ra)
ffffffff80205c9c: aa e8                	sd	a0, 80(sp)
ffffffff80205c9e: 09 a0                	j	2
ffffffff80205ca0: 06 75                	ld	a0, 96(sp)
ffffffff80205ca2: c6 65                	ld	a1, 80(sp)
ffffffff80205ca4: 33 06 b5 00          	add	a2, a0, a1
ffffffff80205ca8: b2 e1                	sd	a2, 192(sp)
;         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutErr { private: () })?;
ffffffff80205caa: 32 85                	add	a0, zero, a2
ffffffff80205cac: c6 75                	ld	a1, 112(sp)
ffffffff80205cae: b2 e4                	sd	a2, 72(sp)
ffffffff80205cb0: 97 10 00 00          	auipc	ra, 1
ffffffff80205cb4: e7 80 e0 e8          	jalr	-370(ra)
ffffffff80205cb8: aa e0                	sd	a0, 64(sp)
ffffffff80205cba: 2e fc                	sd	a1, 56(sp)
ffffffff80205cbc: 09 a0                	j	2
ffffffff80205cbe: 06 65                	ld	a0, 64(sp)
ffffffff80205cc0: e2 75                	ld	a1, 56(sp)
ffffffff80205cc2: 97 10 00 00          	auipc	ra, 1
ffffffff80205cc6: e7 80 e0 95          	jalr	-1698(ra)
ffffffff80205cca: 2a f8                	sd	a0, 48(sp)
ffffffff80205ccc: 2e f4                	sd	a1, 40(sp)
ffffffff80205cce: 09 a0                	j	2
ffffffff80205cd0: 42 75                	ld	a0, 48(sp)
ffffffff80205cd2: a2 75                	ld	a1, 40(sp)
ffffffff80205cd4: 97 10 00 00          	auipc	ra, 1
ffffffff80205cd8: e7 80 00 59          	jalr	1424(ra)
ffffffff80205cdc: 2a e1                	sd	a0, 128(sp)
ffffffff80205cde: 2e e5                	sd	a1, 136(sp)
ffffffff80205ce0: 09 a0                	j	2
ffffffff80205ce2: 0a 65                	ld	a0, 128(sp)
ffffffff80205ce4: 81 45                	mv	a1, zero
ffffffff80205ce6: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80205cea: 09 a0                	j	2
ffffffff80205cec: 31 a8                	j	28
ffffffff80205cee: 2a 65                	ld	a0, 136(sp)
ffffffff80205cf0: aa e5                	sd	a0, 200(sp)
ffffffff80205cf2: aa e9                	sd	a0, 208(sp)
;         unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
ffffffff80205cf4: a6 75                	ld	a1, 104(sp)
ffffffff80205cf6: 2a f0                	sd	a0, 32(sp)
ffffffff80205cf8: 2e 85                	add	a0, zero, a1
ffffffff80205cfa: 97 00 00 00          	auipc	ra, 0
ffffffff80205cfe: e7 80 00 f5          	jalr	-176(ra)
ffffffff80205d02: 2a ec                	sd	a0, 24(sp)
ffffffff80205d04: 0d a0                	j	34
;         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutErr { private: () })?;
ffffffff80205d06: 00 00                	unimp	
ffffffff80205d08: 97 10 00 00          	auipc	ra, 1
ffffffff80205d0c: e7 80 60 02          	jalr	38(ra)
ffffffff80205d10: 21 a0                	j	8
;     }
ffffffff80205d12: ee 60                	ld	ra, 216(sp)
ffffffff80205d14: 2d 61                	addi	sp, sp, 224
ffffffff80205d16: 82 80                	ret
;         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutErr { private: () })?;
ffffffff80205d18: 66 75                	ld	a0, 120(sp)
ffffffff80205d1a: 97 10 00 00          	auipc	ra, 1
ffffffff80205d1e: e7 80 80 51          	jalr	1304(ra)
ffffffff80205d22: 09 a0                	j	2
ffffffff80205d24: fd b7                	j	-18
;         unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
ffffffff80205d26: 02 75                	ld	a0, 32(sp)
ffffffff80205d28: e2 65                	ld	a1, 24(sp)
ffffffff80205d2a: 97 00 00 00          	auipc	ra, 0
ffffffff80205d2e: e7 80 00 ef          	jalr	-272(ra)
ffffffff80205d32: 2a e8                	sd	a0, 16(sp)
ffffffff80205d34: 2e e4                	sd	a1, 8(sp)
ffffffff80205d36: 09 a0                	j	2
ffffffff80205d38: 42 65                	ld	a0, 16(sp)
ffffffff80205d3a: 2a e9                	sd	a0, 144(sp)
ffffffff80205d3c: a2 65                	ld	a1, 8(sp)
ffffffff80205d3e: 2e ed                	sd	a1, 152(sp)
ffffffff80205d40: 26 66                	ld	a2, 72(sp)
ffffffff80205d42: 32 f1                	sd	a2, 160(sp)
ffffffff80205d44: e6 76                	ld	a3, 120(sp)
ffffffff80205d46: 90 ea                	sd	a2, 16(a3)
ffffffff80205d48: 8c e6                	sd	a1, 8(a3)
ffffffff80205d4a: 88 e2                	sd	a0, 0(a3)
;     }
ffffffff80205d4c: d9 b7                	j	-58

ffffffff80205d4e _ZN4core5alloc6layout6Layout8dangling17ha282b25bcf311966E:
;     pub const fn dangling(&self) -> NonNull<u8> {
ffffffff80205d4e: 01 11                	addi	sp, sp, -32
ffffffff80205d50: 06 ec                	sd	ra, 24(sp)
ffffffff80205d52: 2a e8                	sd	a0, 16(sp)
;         unsafe { NonNull::new_unchecked(self.align() as *mut u8) }
ffffffff80205d54: 97 00 00 00          	auipc	ra, 0
ffffffff80205d58: e7 80 60 ef          	jalr	-266(ra)
ffffffff80205d5c: 2a e4                	sd	a0, 8(sp)
ffffffff80205d5e: 09 a0                	j	2
ffffffff80205d60: 22 65                	ld	a0, 8(sp)
ffffffff80205d62: 97 00 00 00          	auipc	ra, 0
ffffffff80205d66: e7 80 60 3e          	jalr	998(ra)
ffffffff80205d6a: 2a e0                	sd	a0, 0(sp)
ffffffff80205d6c: 09 a0                	j	2
;     }
ffffffff80205d6e: 02 65                	ld	a0, 0(sp)
ffffffff80205d70: e2 60                	ld	ra, 24(sp)
ffffffff80205d72: 05 61                	addi	sp, sp, 32
ffffffff80205d74: 82 80                	ret

ffffffff80205d76 _ZN5alloc5alloc12alloc_zeroed17h25016cc3681b34b0E:
; pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
ffffffff80205d76: 79 71                	addi	sp, sp, -48
ffffffff80205d78: 06 f4                	sd	ra, 40(sp)
ffffffff80205d7a: 2a ec                	sd	a0, 24(sp)
ffffffff80205d7c: 2e f0                	sd	a1, 32(sp)
ffffffff80205d7e: 28 08                	addi	a0, sp, 24
;     unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
ffffffff80205d80: 97 00 00 00          	auipc	ra, 0
ffffffff80205d84: e7 80 00 ec          	jalr	-320(ra)
ffffffff80205d88: 2a e8                	sd	a0, 16(sp)
ffffffff80205d8a: 09 a0                	j	2
ffffffff80205d8c: 28 08                	addi	a0, sp, 24
ffffffff80205d8e: 97 00 00 00          	auipc	ra, 0
ffffffff80205d92: e7 80 c0 eb          	jalr	-324(ra)
ffffffff80205d96: 2a e4                	sd	a0, 8(sp)
ffffffff80205d98: 09 a0                	j	2
ffffffff80205d9a: 42 65                	ld	a0, 16(sp)
ffffffff80205d9c: a2 65                	ld	a1, 8(sp)
ffffffff80205d9e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80205da2: e7 80 e0 6b          	jalr	1726(ra)
ffffffff80205da6: 2a e0                	sd	a0, 0(sp)
ffffffff80205da8: 09 a0                	j	2
; }
ffffffff80205daa: 02 65                	ld	a0, 0(sp)
ffffffff80205dac: a2 70                	ld	ra, 40(sp)
ffffffff80205dae: 45 61                	addi	sp, sp, 48
ffffffff80205db0: 82 80                	ret

ffffffff80205db2 _ZN5alloc5alloc15exchange_malloc17h517bd3059dbe2609E:
; unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {
ffffffff80205db2: 59 71                	addi	sp, sp, -112
ffffffff80205db4: 86 f4                	sd	ra, 104(sp)
ffffffff80205db6: 2a fc                	sd	a0, 56(sp)
ffffffff80205db8: ae e0                	sd	a1, 64(sp)
;     let layout = unsafe { Layout::from_size_align_unchecked(size, align) };
ffffffff80205dba: 97 00 00 00          	auipc	ra, 0
ffffffff80205dbe: e7 80 00 e6          	jalr	-416(ra)
ffffffff80205dc2: 2a 86                	add	a2, zero, a0
ffffffff80205dc4: ae 86                	add	a3, zero, a1
ffffffff80205dc6: aa e4                	sd	a0, 72(sp)
ffffffff80205dc8: ae e8                	sd	a1, 80(sp)
ffffffff80205dca: 32 ec                	sd	a2, 24(sp)
ffffffff80205dcc: 36 e8                	sd	a3, 16(sp)
ffffffff80205dce: 09 a0                	j	2
ffffffff80205dd0: 08 18                	addi	a0, sp, 48
ffffffff80205dd2: 81 45                	mv	a1, zero
;     match Global.alloc(layout, AllocInit::Uninitialized) {
ffffffff80205dd4: 62 66                	ld	a2, 24(sp)
ffffffff80205dd6: 2e e4                	sd	a1, 8(sp)
ffffffff80205dd8: b2 85                	add	a1, zero, a2
ffffffff80205dda: 42 66                	ld	a2, 16(sp)
ffffffff80205ddc: a2 66                	ld	a3, 8(sp)
ffffffff80205dde: 97 00 00 00          	auipc	ra, 0
ffffffff80205de2: e7 80 40 24          	jalr	580(ra)
ffffffff80205de6: 2a f0                	sd	a0, 32(sp)
ffffffff80205de8: 2e f4                	sd	a1, 40(sp)
ffffffff80205dea: 09 a0                	j	2
;         Ok(memory) => memory.ptr.as_ptr(),
ffffffff80205dec: 02 75                	ld	a0, 32(sp)
ffffffff80205dee: 93 35 15 00          	seqz	a1, a0
ffffffff80205df2: 01 46                	mv	a2, zero
ffffffff80205df4: 63 1b c5 00          	bne	a0, a2, 22
ffffffff80205df8: 09 a0                	j	2
;         Err(_) => handle_alloc_error(layout),
ffffffff80205dfa: 62 65                	ld	a0, 24(sp)
ffffffff80205dfc: c2 65                	ld	a1, 16(sp)
ffffffff80205dfe: 97 40 00 00          	auipc	ra, 4
ffffffff80205e02: e7 80 c0 3f          	jalr	1020(ra)
ffffffff80205e06: 00 00                	unimp	
;     match Global.alloc(layout, AllocInit::Uninitialized) {
ffffffff80205e08: 00 00                	unimp	
;         Ok(memory) => memory.ptr.as_ptr(),
ffffffff80205e0a: 02 75                	ld	a0, 32(sp)
ffffffff80205e0c: a2 75                	ld	a1, 40(sp)
ffffffff80205e0e: aa ec                	sd	a0, 88(sp)
ffffffff80205e10: ae f0                	sd	a1, 96(sp)
ffffffff80205e12: 97 00 00 00          	auipc	ra, 0
ffffffff80205e16: e7 80 00 3b          	jalr	944(ra)
ffffffff80205e1a: 2a e0                	sd	a0, 0(sp)
ffffffff80205e1c: 09 a0                	j	2
; }
ffffffff80205e1e: 02 65                	ld	a0, 0(sp)
ffffffff80205e20: a6 70                	ld	ra, 104(sp)
ffffffff80205e22: 65 61                	addi	sp, sp, 112
ffffffff80205e24: 82 80                	ret

ffffffff80205e26 _ZN5alloc5alloc5alloc17h71839747624cce0eE:
; pub unsafe fn alloc(layout: Layout) -> *mut u8 {
ffffffff80205e26: 79 71                	addi	sp, sp, -48
ffffffff80205e28: 06 f4                	sd	ra, 40(sp)
ffffffff80205e2a: 2a ec                	sd	a0, 24(sp)
ffffffff80205e2c: 2e f0                	sd	a1, 32(sp)
ffffffff80205e2e: 28 08                	addi	a0, sp, 24
;     unsafe { __rust_alloc(layout.size(), layout.align()) }
ffffffff80205e30: 97 00 00 00          	auipc	ra, 0
ffffffff80205e34: e7 80 00 e1          	jalr	-496(ra)
ffffffff80205e38: 2a e8                	sd	a0, 16(sp)
ffffffff80205e3a: 09 a0                	j	2
ffffffff80205e3c: 28 08                	addi	a0, sp, 24
ffffffff80205e3e: 97 00 00 00          	auipc	ra, 0
ffffffff80205e42: e7 80 c0 e0          	jalr	-500(ra)
ffffffff80205e46: 2a e4                	sd	a0, 8(sp)
ffffffff80205e48: 09 a0                	j	2
ffffffff80205e4a: 42 65                	ld	a0, 16(sp)
ffffffff80205e4c: a2 65                	ld	a1, 8(sp)
ffffffff80205e4e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80205e52: e7 80 60 5f          	jalr	1526(ra)
ffffffff80205e56: 2a e0                	sd	a0, 0(sp)
ffffffff80205e58: 09 a0                	j	2
; }
ffffffff80205e5a: 02 65                	ld	a0, 0(sp)
ffffffff80205e5c: a2 70                	ld	ra, 40(sp)
ffffffff80205e5e: 45 61                	addi	sp, sp, 48
ffffffff80205e60: 82 80                	ret

ffffffff80205e62 _ZN5alloc5alloc7realloc17hfcc144664ac55089E:
; pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
ffffffff80205e62: 5d 71                	addi	sp, sp, -80
ffffffff80205e64: 86 e4                	sd	ra, 72(sp)
ffffffff80205e66: 2e f4                	sd	a1, 40(sp)
ffffffff80205e68: 32 f8                	sd	a2, 48(sp)
ffffffff80205e6a: 2a fc                	sd	a0, 56(sp)
ffffffff80205e6c: b6 e0                	sd	a3, 64(sp)
ffffffff80205e6e: 2c 10                	addi	a1, sp, 40
;     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
ffffffff80205e70: 2a f0                	sd	a0, 32(sp)
ffffffff80205e72: 2e 85                	add	a0, zero, a1
ffffffff80205e74: 36 ec                	sd	a3, 24(sp)
ffffffff80205e76: 97 00 00 00          	auipc	ra, 0
ffffffff80205e7a: e7 80 a0 dc          	jalr	-566(ra)
ffffffff80205e7e: 2a e8                	sd	a0, 16(sp)
ffffffff80205e80: 09 a0                	j	2
ffffffff80205e82: 28 10                	addi	a0, sp, 40
ffffffff80205e84: 97 00 00 00          	auipc	ra, 0
ffffffff80205e88: e7 80 60 dc          	jalr	-570(ra)
ffffffff80205e8c: 2a e4                	sd	a0, 8(sp)
ffffffff80205e8e: 09 a0                	j	2
ffffffff80205e90: 02 75                	ld	a0, 32(sp)
ffffffff80205e92: c2 65                	ld	a1, 16(sp)
ffffffff80205e94: 22 66                	ld	a2, 8(sp)
ffffffff80205e96: e2 66                	ld	a3, 24(sp)
ffffffff80205e98: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80205e9c: e7 80 c0 5b          	jalr	1468(ra)
ffffffff80205ea0: 2a e0                	sd	a0, 0(sp)
ffffffff80205ea2: 09 a0                	j	2
; }
ffffffff80205ea4: 02 65                	ld	a0, 0(sp)
ffffffff80205ea6: a6 60                	ld	ra, 72(sp)
ffffffff80205ea8: 61 61                	addi	sp, sp, 80
ffffffff80205eaa: 82 80                	ret

ffffffff80205eac _ZN62_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..AllocRef$GT$4grow17h12d3875dcfe50ae6E:
;     unsafe fn grow(
ffffffff80205eac: 2d 71                	addi	sp, sp, -288
ffffffff80205eae: 06 ee                	sd	ra, 280(sp)
ffffffff80205eb0: c2 88                	add	a7, zero, a6
ffffffff80205eb2: be 82                	add	t0, zero, a5
ffffffff80205eb4: b2 fc                	sd	a2, 120(sp)
ffffffff80205eb6: 36 e1                	sd	a3, 128(sp)
ffffffff80205eb8: a3 07 f1 08          	sb	a5, 143(sp)
ffffffff80205ebc: aa e5                	sd	a0, 200(sp)
ffffffff80205ebe: ae e9                	sd	a1, 208(sp)
ffffffff80205ec0: ba ed                	sd	a4, 216(sp)
ffffffff80205ec2: a3 03 01 0f          	sb	a6, 231(sp)
ffffffff80205ec6: b0 18                	addi	a2, sp, 120
;         let size = layout.size();
ffffffff80205ec8: aa f8                	sd	a0, 112(sp)
ffffffff80205eca: 32 85                	add	a0, zero, a2
ffffffff80205ecc: ba f4                	sd	a4, 104(sp)
ffffffff80205ece: ae f0                	sd	a1, 96(sp)
ffffffff80205ed0: c6 ec                	sd	a7, 88(sp)
ffffffff80205ed2: 96 e8                	sd	t0, 80(sp)
ffffffff80205ed4: 97 00 00 00          	auipc	ra, 0
ffffffff80205ed8: e7 80 c0 d6          	jalr	-660(ra)
ffffffff80205edc: aa 85                	add	a1, zero, a0
ffffffff80205ede: aa f9                	sd	a0, 240(sp)
ffffffff80205ee0: ae e4                	sd	a1, 72(sp)
ffffffff80205ee2: 09 a0                	j	2
;         if size == new_size {
ffffffff80205ee4: 26 65                	ld	a0, 72(sp)
ffffffff80205ee6: a6 75                	ld	a1, 104(sp)
ffffffff80205ee8: 63 0b b5 00          	beq	a0, a1, 22
ffffffff80205eec: 09 a0                	j	2
;             ReallocPlacement::InPlace => Err(AllocErr),
ffffffff80205eee: 03 45 f1 08          	lbu	a0, 143(sp)
ffffffff80205ef2: 05 89                	andi	a0, a0, 1
ffffffff80205ef4: 81 45                	mv	a1, zero
ffffffff80205ef6: 63 05 b5 02          	beq	a0, a1, 42
ffffffff80205efa: 09 a0                	j	2
ffffffff80205efc: 39 a8                	j	30
;             return Ok(MemoryBlock { ptr, size });
ffffffff80205efe: 06 75                	ld	a0, 96(sp)
ffffffff80205f00: 2a f1                	sd	a0, 160(sp)
ffffffff80205f02: a6 65                	ld	a1, 72(sp)
ffffffff80205f04: 2e f5                	sd	a1, 168(sp)
ffffffff80205f06: 2a e9                	sd	a0, 144(sp)
ffffffff80205f08: 2e ed                	sd	a1, 152(sp)
ffffffff80205f0a: 31 a0                	j	12
;     }
ffffffff80205f0c: 4a 65                	ld	a0, 144(sp)
ffffffff80205f0e: ea 65                	ld	a1, 152(sp)
ffffffff80205f10: f2 60                	ld	ra, 280(sp)
ffffffff80205f12: 15 61                	addi	sp, sp, 288
ffffffff80205f14: 82 80                	ret
;             return Ok(MemoryBlock { ptr, size });
ffffffff80205f16: dd bf                	j	-10
;         match placement {
ffffffff80205f18: 00 00                	unimp	
ffffffff80205f1a: 01 45                	mv	a0, zero
;             ReallocPlacement::InPlace => Err(AllocErr),
ffffffff80205f1c: 2a e9                	sd	a0, 144(sp)
;         match placement {
ffffffff80205f1e: 09 a2                	j	258
ffffffff80205f20: a8 18                	addi	a0, sp, 120
;             ReallocPlacement::MayMove if layout.size() == 0 => {
ffffffff80205f22: 97 00 00 00          	auipc	ra, 0
ffffffff80205f26: e7 80 e0 d1          	jalr	-738(ra)
ffffffff80205f2a: aa e0                	sd	a0, 64(sp)
ffffffff80205f2c: 09 a0                	j	2
ffffffff80205f2e: 01 45                	mv	a0, zero
ffffffff80205f30: 86 65                	ld	a1, 64(sp)
ffffffff80205f32: 63 9a a5 00          	bne	a1, a0, 20
ffffffff80205f36: 09 a0                	j	2
ffffffff80205f38: a8 18                	addi	a0, sp, 120
;                     unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };
ffffffff80205f3a: 97 00 00 00          	auipc	ra, 0
ffffffff80205f3e: e7 80 00 d1          	jalr	-752(ra)
ffffffff80205f42: 2a fc                	sd	a0, 56(sp)
ffffffff80205f44: 11 a0                	j	4
;                     intrinsics::assume(new_size > size);
ffffffff80205f46: 15 a8                	j	52
;                     unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };
ffffffff80205f48: 26 75                	ld	a0, 104(sp)
ffffffff80205f4a: e2 75                	ld	a1, 56(sp)
ffffffff80205f4c: 97 00 00 00          	auipc	ra, 0
ffffffff80205f50: e7 80 e0 cc          	jalr	-818(ra)
ffffffff80205f54: 2a 86                	add	a2, zero, a0
ffffffff80205f56: ae 86                	add	a3, zero, a1
ffffffff80205f58: aa fd                	sd	a0, 248(sp)
ffffffff80205f5a: 2e e2                	sd	a1, 256(sp)
ffffffff80205f5c: 32 f8                	sd	a2, 48(sp)
ffffffff80205f5e: 36 f4                	sd	a3, 40(sp)
ffffffff80205f60: 09 a0                	j	2
;                 self.alloc(new_layout, init)
ffffffff80205f62: 46 75                	ld	a0, 112(sp)
ffffffff80205f64: c2 75                	ld	a1, 48(sp)
ffffffff80205f66: 22 76                	ld	a2, 40(sp)
ffffffff80205f68: e6 66                	ld	a3, 88(sp)
ffffffff80205f6a: 97 00 00 00          	auipc	ra, 0
ffffffff80205f6e: e7 80 80 0b          	jalr	184(ra)
ffffffff80205f72: 2a e9                	sd	a0, 144(sp)
ffffffff80205f74: 2e ed                	sd	a1, 152(sp)
ffffffff80205f76: 09 a0                	j	2
;         match placement {
ffffffff80205f78: 65 a0                	j	168
;                     realloc(ptr.as_ptr(), layout, new_size)
ffffffff80205f7a: 06 75                	ld	a0, 96(sp)
ffffffff80205f7c: 97 00 00 00          	auipc	ra, 0
ffffffff80205f80: e7 80 60 24          	jalr	582(ra)
ffffffff80205f84: 2a f0                	sd	a0, 32(sp)
ffffffff80205f86: 09 a0                	j	2
ffffffff80205f88: e6 75                	ld	a1, 120(sp)
ffffffff80205f8a: 0a 66                	ld	a2, 128(sp)
ffffffff80205f8c: 02 75                	ld	a0, 32(sp)
ffffffff80205f8e: a6 76                	ld	a3, 104(sp)
ffffffff80205f90: 97 00 00 00          	auipc	ra, 0
ffffffff80205f94: e7 80 20 ed          	jalr	-302(ra)
ffffffff80205f98: aa 85                	add	a1, zero, a0
ffffffff80205f9a: 2a e6                	sd	a0, 264(sp)
ffffffff80205f9c: 2e ec                	sd	a1, 24(sp)
ffffffff80205f9e: 09 a0                	j	2
;                     MemoryBlock { ptr: NonNull::new(ptr).ok_or(AllocErr)?, size: new_size };
ffffffff80205fa0: 62 65                	ld	a0, 24(sp)
ffffffff80205fa2: 97 00 00 00          	auipc	ra, 0
ffffffff80205fa6: e7 80 00 1b          	jalr	432(ra)
ffffffff80205faa: 2a e8                	sd	a0, 16(sp)
ffffffff80205fac: 09 a0                	j	2
ffffffff80205fae: 42 65                	ld	a0, 16(sp)
ffffffff80205fb0: 97 00 00 00          	auipc	ra, 0
ffffffff80205fb4: e7 80 c0 6b          	jalr	1724(ra)
ffffffff80205fb8: 2a e4                	sd	a0, 8(sp)
ffffffff80205fba: 09 a0                	j	2
ffffffff80205fbc: 22 65                	ld	a0, 8(sp)
ffffffff80205fbe: 97 10 00 00          	auipc	ra, 1
ffffffff80205fc2: e7 80 e0 29          	jalr	670(ra)
ffffffff80205fc6: aa e1                	sd	a0, 192(sp)
ffffffff80205fc8: 09 a0                	j	2
ffffffff80205fca: 0e 65                	ld	a0, 192(sp)
ffffffff80205fcc: 93 35 15 00          	seqz	a1, a0
ffffffff80205fd0: 01 46                	mv	a2, zero
ffffffff80205fd2: 63 14 c5 00          	bne	a0, a2, 8
ffffffff80205fd6: 09 a0                	j	2
ffffffff80205fd8: 15 a0                	j	36
ffffffff80205fda: 0e 65                	ld	a0, 192(sp)
ffffffff80205fdc: 2a ea                	sd	a0, 272(sp)
ffffffff80205fde: 2a f9                	sd	a0, 176(sp)
ffffffff80205fe0: a6 75                	ld	a1, 104(sp)
ffffffff80205fe2: 2e fd                	sd	a1, 184(sp)
;                     init.init_offset(memory, size);
ffffffff80205fe4: 66 66                	ld	a2, 88(sp)
ffffffff80205fe6: 2a e0                	sd	a0, 0(sp)
ffffffff80205fe8: 32 85                	add	a0, zero, a2
ffffffff80205fea: 82 65                	ld	a1, 0(sp)
ffffffff80205fec: 26 76                	ld	a2, 104(sp)
ffffffff80205fee: a6 66                	ld	a3, 72(sp)
ffffffff80205ff0: 97 10 00 00          	auipc	ra, 1
ffffffff80205ff4: e7 80 40 db          	jalr	-588(ra)
ffffffff80205ff8: 39 a8                	j	30
;                     MemoryBlock { ptr: NonNull::new(ptr).ok_or(AllocErr)?, size: new_size };
ffffffff80205ffa: 00 00                	unimp	
ffffffff80205ffc: 97 00 00 00          	auipc	ra, 0
ffffffff80206000: e7 80 20 71          	jalr	1810(ra)
ffffffff80206004: 09 a0                	j	2
ffffffff80206006: 97 10 00 00          	auipc	ra, 1
ffffffff8020600a: e7 80 00 22          	jalr	544(ra)
ffffffff8020600e: 2a e9                	sd	a0, 144(sp)
ffffffff80206010: 2e ed                	sd	a1, 152(sp)
ffffffff80206012: 09 a0                	j	2
ffffffff80206014: 09 b7                	j	-254
;                 Ok(memory)
ffffffff80206016: 4a 75                	ld	a0, 176(sp)
ffffffff80206018: ea 75                	ld	a1, 184(sp)
ffffffff8020601a: 2a e9                	sd	a0, 144(sp)
ffffffff8020601c: 2e ed                	sd	a1, 152(sp)
;         match placement {
ffffffff8020601e: 09 a0                	j	2
;     }
ffffffff80206020: f5 b5                	j	-276

ffffffff80206022 _ZN62_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..AllocRef$GT$5alloc17he5ec0aac2e568bc3E:
;     fn alloc(&mut self, layout: Layout, init: AllocInit) -> Result<MemoryBlock, AllocErr> {
ffffffff80206022: 71 71                	addi	sp, sp, -176
ffffffff80206024: 06 f5                	sd	ra, 168(sp)
ffffffff80206026: 36 87                	add	a4, zero, a3
ffffffff80206028: 2e f4                	sd	a1, 40(sp)
ffffffff8020602a: 32 f8                	sd	a2, 48(sp)
ffffffff8020602c: a3 0f d1 02          	sb	a3, 63(sp)
ffffffff80206030: 2a e1                	sd	a0, 128(sp)
ffffffff80206032: 28 10                	addi	a0, sp, 40
;             let size = layout.size();
ffffffff80206034: 3a f0                	sd	a4, 32(sp)
ffffffff80206036: 97 00 00 00          	auipc	ra, 0
ffffffff8020603a: e7 80 a0 c0          	jalr	-1014(ra)
ffffffff8020603e: aa 85                	add	a1, zero, a0
ffffffff80206040: 2a e9                	sd	a0, 144(sp)
ffffffff80206042: 2e ec                	sd	a1, 24(sp)
ffffffff80206044: 09 a0                	j	2
ffffffff80206046: 01 45                	mv	a0, zero
;             if size == 0 {
ffffffff80206048: e2 65                	ld	a1, 24(sp)
ffffffff8020604a: 63 8b a5 00          	beq	a1, a0, 22
ffffffff8020604e: 09 a0                	j	2
;                     AllocInit::Uninitialized => alloc(layout),
ffffffff80206050: 03 45 f1 03          	lbu	a0, 63(sp)
ffffffff80206054: 05 89                	andi	a0, a0, 1
ffffffff80206056: 81 45                	mv	a1, zero
ffffffff80206058: 63 0b b5 02          	beq	a0, a1, 54
ffffffff8020605c: 09 a0                	j	2
ffffffff8020605e: 39 a8                	j	30
ffffffff80206060: 28 10                	addi	a0, sp, 40
;                 Ok(MemoryBlock { ptr: layout.dangling(), size: 0 })
ffffffff80206062: 97 00 00 00          	auipc	ra, 0
ffffffff80206066: e7 80 c0 ce          	jalr	-788(ra)
ffffffff8020606a: 2a e8                	sd	a0, 16(sp)
ffffffff8020606c: 09 a0                	j	2
ffffffff8020606e: 42 65                	ld	a0, 16(sp)
ffffffff80206070: aa e8                	sd	a0, 80(sp)
ffffffff80206072: 81 45                	mv	a1, zero
ffffffff80206074: ae ec                	sd	a1, 88(sp)
ffffffff80206076: aa e0                	sd	a0, 64(sp)
ffffffff80206078: ae e4                	sd	a1, 72(sp)
;             if size == 0 {
ffffffff8020607a: 69 a8                	j	154
;                     AllocInit::Zeroed => alloc_zeroed(layout),
ffffffff8020607c: 22 75                	ld	a0, 40(sp)
ffffffff8020607e: c2 75                	ld	a1, 48(sp)
ffffffff80206080: 97 00 00 00          	auipc	ra, 0
ffffffff80206084: e7 80 60 cf          	jalr	-778(ra)
ffffffff80206088: aa f0                	sd	a0, 96(sp)
ffffffff8020608a: 19 a8                	j	22
;                 let raw_ptr = match init {
ffffffff8020608c: 00 00                	unimp	
;                     AllocInit::Uninitialized => alloc(layout),
ffffffff8020608e: 22 75                	ld	a0, 40(sp)
ffffffff80206090: c2 75                	ld	a1, 48(sp)
ffffffff80206092: 97 00 00 00          	auipc	ra, 0
ffffffff80206096: e7 80 40 d9          	jalr	-620(ra)
ffffffff8020609a: aa f0                	sd	a0, 96(sp)
ffffffff8020609c: 09 a0                	j	2
;                 let raw_ptr = match init {
ffffffff8020609e: 11 a0                	j	4
ffffffff802060a0: 09 a0                	j	2
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;
ffffffff802060a2: 06 75                	ld	a0, 96(sp)
ffffffff802060a4: 97 00 00 00          	auipc	ra, 0
ffffffff802060a8: e7 80 e0 0a          	jalr	174(ra)
ffffffff802060ac: 2a e4                	sd	a0, 8(sp)
ffffffff802060ae: 09 a0                	j	2
ffffffff802060b0: 22 65                	ld	a0, 8(sp)
ffffffff802060b2: 97 00 00 00          	auipc	ra, 0
ffffffff802060b6: e7 80 a0 5b          	jalr	1466(ra)
ffffffff802060ba: 2a e0                	sd	a0, 0(sp)
ffffffff802060bc: 09 a0                	j	2
ffffffff802060be: 02 65                	ld	a0, 0(sp)
ffffffff802060c0: 97 10 00 00          	auipc	ra, 1
ffffffff802060c4: e7 80 c0 19          	jalr	412(ra)
ffffffff802060c8: aa f4                	sd	a0, 104(sp)
ffffffff802060ca: 09 a0                	j	2
ffffffff802060cc: 26 75                	ld	a0, 104(sp)
ffffffff802060ce: 93 35 15 00          	seqz	a1, a0
ffffffff802060d2: 01 46                	mv	a2, zero
ffffffff802060d4: 63 14 c5 00          	bne	a0, a2, 8
ffffffff802060d8: 09 a0                	j	2
ffffffff802060da: 19 a8                	j	22
ffffffff802060dc: 26 75                	ld	a0, 104(sp)
ffffffff802060de: 2a ed                	sd	a0, 152(sp)
ffffffff802060e0: 2a f1                	sd	a0, 160(sp)
;                 Ok(MemoryBlock { ptr, size })
ffffffff802060e2: aa f8                	sd	a0, 112(sp)
ffffffff802060e4: e2 65                	ld	a1, 24(sp)
ffffffff802060e6: ae fc                	sd	a1, 120(sp)
ffffffff802060e8: aa e0                	sd	a0, 64(sp)
ffffffff802060ea: ae e4                	sd	a1, 72(sp)
;             if size == 0 {
ffffffff802060ec: 25 a0                	j	40
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;
ffffffff802060ee: 00 00                	unimp	
ffffffff802060f0: 97 00 00 00          	auipc	ra, 0
ffffffff802060f4: e7 80 e0 61          	jalr	1566(ra)
ffffffff802060f8: 31 a0                	j	12
;     }
ffffffff802060fa: 06 65                	ld	a0, 64(sp)
ffffffff802060fc: a6 65                	ld	a1, 72(sp)
ffffffff802060fe: aa 70                	ld	ra, 168(sp)
ffffffff80206100: 4d 61                	addi	sp, sp, 176
ffffffff80206102: 82 80                	ret
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;
ffffffff80206104: 97 10 00 00          	auipc	ra, 1
ffffffff80206108: e7 80 20 12          	jalr	290(ra)
ffffffff8020610c: aa e0                	sd	a0, 64(sp)
ffffffff8020610e: ae e4                	sd	a1, 72(sp)
ffffffff80206110: 09 a0                	j	2
ffffffff80206112: e5 b7                	j	-24
;     }
ffffffff80206114: dd b7                	j	-26

ffffffff80206116 _ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h7f48b8d24c3ec8dbE:
;     fn from(unique: Unique<T>) -> Self {
ffffffff80206116: 01 11                	addi	sp, sp, -32
ffffffff80206118: 06 ec                	sd	ra, 24(sp)
ffffffff8020611a: 2a e8                	sd	a0, 16(sp)
;         unsafe { NonNull::new_unchecked(unique.as_ptr()) }
ffffffff8020611c: 97 10 00 00          	auipc	ra, 1
ffffffff80206120: e7 80 60 c6          	jalr	-922(ra)
ffffffff80206124: 2a e4                	sd	a0, 8(sp)
ffffffff80206126: 09 a0                	j	2
ffffffff80206128: 22 65                	ld	a0, 8(sp)
ffffffff8020612a: 97 00 00 00          	auipc	ra, 0
ffffffff8020612e: e7 80 e0 01          	jalr	30(ra)
ffffffff80206132: 2a e0                	sd	a0, 0(sp)
ffffffff80206134: 09 a0                	j	2
;     }
ffffffff80206136: 02 65                	ld	a0, 0(sp)
ffffffff80206138: e2 60                	ld	ra, 24(sp)
ffffffff8020613a: 05 61                	addi	sp, sp, 32
ffffffff8020613c: 82 80                	ret

ffffffff8020613e _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h51407e350749e23cE:
;     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
ffffffff8020613e: 41 11                	addi	sp, sp, -16
ffffffff80206140: 2a e4                	sd	a0, 8(sp)
;         NonNull { pointer: ptr as _ }
ffffffff80206142: 2a e0                	sd	a0, 0(sp)
;     }
ffffffff80206144: 41 01                	addi	sp, sp, 16
ffffffff80206146: 82 80                	ret

ffffffff80206148 _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haa0acb5ab2275c9cE:
;     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
ffffffff80206148: 41 11                	addi	sp, sp, -16
ffffffff8020614a: 2a e4                	sd	a0, 8(sp)
;         NonNull { pointer: ptr as _ }
ffffffff8020614c: 2a e0                	sd	a0, 0(sp)
;     }
ffffffff8020614e: 41 01                	addi	sp, sp, 16
ffffffff80206150: 82 80                	ret

ffffffff80206152 _ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h51e476d755898d92E:
;     pub fn new(ptr: *mut T) -> Option<Self> {
ffffffff80206152: 79 71                	addi	sp, sp, -48
ffffffff80206154: 06 f4                	sd	ra, 40(sp)
ffffffff80206156: 2a f0                	sd	a0, 32(sp)
;         if !ptr.is_null() {
ffffffff80206158: 2a e8                	sd	a0, 16(sp)
ffffffff8020615a: 97 10 00 00          	auipc	ra, 1
ffffffff8020615e: e7 80 c0 8e          	jalr	-1812(ra)
ffffffff80206162: 2a e4                	sd	a0, 8(sp)
ffffffff80206164: 09 a0                	j	2
ffffffff80206166: 01 45                	mv	a0, zero
ffffffff80206168: a2 65                	ld	a1, 8(sp)
ffffffff8020616a: 63 86 a5 00          	beq	a1, a0, 12
ffffffff8020616e: 09 a0                	j	2
ffffffff80206170: 01 45                	mv	a0, zero
;             None
ffffffff80206172: 2a ec                	sd	a0, 24(sp)
;         if !ptr.is_null() {
ffffffff80206174: 19 a8                	j	22
;             Some(unsafe { Self::new_unchecked(ptr) })
ffffffff80206176: 42 65                	ld	a0, 16(sp)
ffffffff80206178: 97 00 00 00          	auipc	ra, 0
ffffffff8020617c: e7 80 00 fd          	jalr	-48(ra)
ffffffff80206180: 2a e0                	sd	a0, 0(sp)
ffffffff80206182: 09 a0                	j	2
ffffffff80206184: 02 65                	ld	a0, 0(sp)
ffffffff80206186: 2a ec                	sd	a0, 24(sp)
;         if !ptr.is_null() {
ffffffff80206188: 09 a0                	j	2
;     }
ffffffff8020618a: 62 65                	ld	a0, 24(sp)
ffffffff8020618c: a2 70                	ld	ra, 40(sp)
ffffffff8020618e: 45 61                	addi	sp, sp, 48
ffffffff80206190: 82 80                	ret

ffffffff80206192 _ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h9654975d841f8463E:
;     pub const fn cast<U>(self) -> NonNull<U> {
ffffffff80206192: 01 11                	addi	sp, sp, -32
ffffffff80206194: 06 ec                	sd	ra, 24(sp)
ffffffff80206196: 2a e8                	sd	a0, 16(sp)
;         unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
ffffffff80206198: 97 00 00 00          	auipc	ra, 0
ffffffff8020619c: e7 80 a0 02          	jalr	42(ra)
ffffffff802061a0: 2a e4                	sd	a0, 8(sp)
ffffffff802061a2: 09 a0                	j	2
ffffffff802061a4: 22 65                	ld	a0, 8(sp)
ffffffff802061a6: 97 00 00 00          	auipc	ra, 0
ffffffff802061aa: e7 80 80 f9          	jalr	-104(ra)
ffffffff802061ae: 2a e0                	sd	a0, 0(sp)
ffffffff802061b0: 09 a0                	j	2
;     }
ffffffff802061b2: 02 65                	ld	a0, 0(sp)
ffffffff802061b4: e2 60                	ld	ra, 24(sp)
ffffffff802061b6: 05 61                	addi	sp, sp, 32
ffffffff802061b8: 82 80                	ret

ffffffff802061ba _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h6c92a0560cbe6dbbE:
;     pub const fn as_ptr(self) -> *mut T {
ffffffff802061ba: 41 11                	addi	sp, sp, -16
ffffffff802061bc: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff802061be: 41 01                	addi	sp, sp, 16
ffffffff802061c0: 82 80                	ret

ffffffff802061c2 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b857d4f93ed5daeE:
;     pub const fn as_ptr(self) -> *mut T {
ffffffff802061c2: 41 11                	addi	sp, sp, -16
ffffffff802061c4: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff802061c6: 41 01                	addi	sp, sp, 16
ffffffff802061c8: 82 80                	ret

ffffffff802061ca _ZN4core3cmp3Ord3max17h5c488c484fd2f6a7E:
;     fn max(self, other: Self) -> Self
ffffffff802061ca: 01 11                	addi	sp, sp, -32
ffffffff802061cc: 06 ec                	sd	ra, 24(sp)
ffffffff802061ce: 2a e4                	sd	a0, 8(sp)
ffffffff802061d0: 2e e8                	sd	a1, 16(sp)
;         max_by(self, other, Ord::cmp)
ffffffff802061d2: 97 00 00 00          	auipc	ra, 0
ffffffff802061d6: e7 80 00 03          	jalr	48(ra)
ffffffff802061da: 2a e0                	sd	a0, 0(sp)
ffffffff802061dc: 09 a0                	j	2
;     }
ffffffff802061de: 02 65                	ld	a0, 0(sp)
ffffffff802061e0: e2 60                	ld	ra, 24(sp)
ffffffff802061e2: 05 61                	addi	sp, sp, 32
ffffffff802061e4: 82 80                	ret

ffffffff802061e6 _ZN4core3cmp3max17h4697dffd9379210aE:
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
ffffffff802061e6: 01 11                	addi	sp, sp, -32
ffffffff802061e8: 06 ec                	sd	ra, 24(sp)
ffffffff802061ea: 2a e4                	sd	a0, 8(sp)
ffffffff802061ec: 2e e8                	sd	a1, 16(sp)
;     v1.max(v2)
ffffffff802061ee: 97 00 00 00          	auipc	ra, 0
ffffffff802061f2: e7 80 c0 fd          	jalr	-36(ra)
ffffffff802061f6: 2a e0                	sd	a0, 0(sp)
ffffffff802061f8: 09 a0                	j	2
; }
ffffffff802061fa: 02 65                	ld	a0, 0(sp)
ffffffff802061fc: e2 60                	ld	ra, 24(sp)
ffffffff802061fe: 05 61                	addi	sp, sp, 32
ffffffff80206200: 82 80                	ret

ffffffff80206202 _ZN4core3cmp6max_by17h4e75846cd3ba2e27E:
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
ffffffff80206202: 5d 71                	addi	sp, sp, -80
ffffffff80206204: 86 e4                	sd	ra, 72(sp)
ffffffff80206206: 2a e4                	sd	a0, 8(sp)
ffffffff80206208: 2e e8                	sd	a1, 16(sp)
ffffffff8020620a: 05 45                	addi	a0, zero, 1
;     match compare(&v1, &v2) {
ffffffff8020620c: a3 0f a1 02          	sb	a0, 63(sp)
ffffffff80206210: 23 0f a1 02          	sb	a0, 62(sp)
ffffffff80206214: 28 00                	addi	a0, sp, 8
ffffffff80206216: 2a f4                	sd	a0, 40(sp)
ffffffff80206218: 0c 08                	addi	a1, sp, 16
ffffffff8020621a: 2e f8                	sd	a1, 48(sp)
ffffffff8020621c: 97 00 00 00          	auipc	ra, 0
ffffffff80206220: e7 80 20 06          	jalr	98(ra)
ffffffff80206224: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff80206228: 09 a0                	j	2
;         Ordering::Less | Ordering::Equal => v2,
ffffffff8020622a: 03 05 71 02          	lb	a0, 39(sp)
ffffffff8020622e: 05 05                	addi	a0, a0, 1
ffffffff80206230: 89 45                	addi	a1, zero, 2
ffffffff80206232: 63 6a b5 00          	bltu	a0, a1, 20
ffffffff80206236: 09 a0                	j	2
ffffffff80206238: 01 45                	mv	a0, zero
;         Ordering::Greater => v1,
ffffffff8020623a: a3 0f a1 02          	sb	a0, 63(sp)
ffffffff8020623e: 22 65                	ld	a0, 8(sp)
ffffffff80206240: 2a ec                	sd	a0, 24(sp)
;     match compare(&v1, &v2) {
ffffffff80206242: 01 a8                	j	16
ffffffff80206244: 00 00                	unimp	
ffffffff80206246: 01 45                	mv	a0, zero
;         Ordering::Less | Ordering::Equal => v2,
ffffffff80206248: 23 0f a1 02          	sb	a0, 62(sp)
ffffffff8020624c: 42 65                	ld	a0, 16(sp)
ffffffff8020624e: 2a ec                	sd	a0, 24(sp)
;     match compare(&v1, &v2) {
ffffffff80206250: 09 a0                	j	2
; }
ffffffff80206252: 03 45 e1 03          	lbu	a0, 62(sp)
ffffffff80206256: 05 89                	andi	a0, a0, 1
ffffffff80206258: 19 e9                	bnez	a0, 22
ffffffff8020625a: 09 a0                	j	2
ffffffff8020625c: 03 45 f1 03          	lbu	a0, 63(sp)
ffffffff80206260: 05 89                	andi	a0, a0, 1
ffffffff80206262: 11 e9                	bnez	a0, 20
ffffffff80206264: 09 a0                	j	2
ffffffff80206266: 62 65                	ld	a0, 24(sp)
ffffffff80206268: a6 60                	ld	ra, 72(sp)
ffffffff8020626a: 61 61                	addi	sp, sp, 80
ffffffff8020626c: 82 80                	ret
ffffffff8020626e: 01 45                	mv	a0, zero
ffffffff80206270: 23 0f a1 02          	sb	a0, 62(sp)
ffffffff80206274: e5 b7                	j	-24
ffffffff80206276: 01 45                	mv	a0, zero
ffffffff80206278: a3 0f a1 02          	sb	a0, 63(sp)
ffffffff8020627c: ed b7                	j	-22

ffffffff8020627e _ZN4core3ops8function6FnOnce9call_once17h688c8ec33f683532E:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
ffffffff8020627e: 79 71                	addi	sp, sp, -48
ffffffff80206280: 06 f4                	sd	ra, 40(sp)
ffffffff80206282: 2a e8                	sd	a0, 16(sp)
ffffffff80206284: 2e ec                	sd	a1, 24(sp)
ffffffff80206286: 97 00 00 00          	auipc	ra, 0
ffffffff8020628a: e7 80 c0 01          	jalr	28(ra)
ffffffff8020628e: 2a e4                	sd	a0, 8(sp)
ffffffff80206290: 09 a0                	j	2
ffffffff80206292: 22 65                	ld	a0, 8(sp)
ffffffff80206294: a2 70                	ld	ra, 40(sp)
ffffffff80206296: 45 61                	addi	sp, sp, 48
ffffffff80206298: 82 80                	ret

ffffffff8020629a _ZN4core3ptr13drop_in_place17h84faeb3c36e826baE:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
ffffffff8020629a: 41 11                	addi	sp, sp, -16
ffffffff8020629c: 2a e4                	sd	a0, 8(sp)
ffffffff8020629e: 41 01                	addi	sp, sp, 16
ffffffff802062a0: 82 80                	ret

ffffffff802062a2 _ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h32480f659590db4eE:
;                 fn cmp(&self, other: &$t) -> Ordering {
ffffffff802062a2: 79 71                	addi	sp, sp, -48
ffffffff802062a4: 2a f0                	sd	a0, 32(sp)
ffffffff802062a6: 2e f4                	sd	a1, 40(sp)
;                     if *self < *other { Less }
ffffffff802062a8: 10 61                	ld	a2, 0(a0)
ffffffff802062aa: 94 61                	ld	a3, 0(a1)
ffffffff802062ac: 2e e8                	sd	a1, 16(sp)
ffffffff802062ae: 2a e4                	sd	a0, 8(sp)
ffffffff802062b0: 63 6a d6 00          	bltu	a2, a3, 20
ffffffff802062b4: 09 a0                	j	2
;                     else if *self == *other { Equal }
ffffffff802062b6: 22 65                	ld	a0, 8(sp)
ffffffff802062b8: 0c 61                	ld	a1, 0(a0)
ffffffff802062ba: 42 66                	ld	a2, 16(sp)
ffffffff802062bc: 14 62                	ld	a3, 0(a2)
ffffffff802062be: 63 8c d5 00          	beq	a1, a3, 24
ffffffff802062c2: 31 a0                	j	12
ffffffff802062c4: 13 05 f0 0f          	addi	a0, zero, 255
;                     if *self < *other { Less }
ffffffff802062c8: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff802062cc: 11 a8                	j	20
ffffffff802062ce: 05 45                	addi	a0, zero, 1
;                     else { Greater }
ffffffff802062d0: a3 0f a1 00          	sb	a0, 31(sp)
;                     else if *self == *other { Equal }
ffffffff802062d4: 29 a0                	j	10
ffffffff802062d6: 01 45                	mv	a0, zero
ffffffff802062d8: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff802062dc: 09 a0                	j	2
;                     if *self < *other { Less }
ffffffff802062de: 09 a0                	j	2
;                 }
ffffffff802062e0: 03 05 f1 01          	lb	a0, 31(sp)
ffffffff802062e4: 45 61                	addi	sp, sp, 48
ffffffff802062e6: 82 80                	ret

ffffffff802062e8 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h5b3ea06a4956d8d9E:
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
ffffffff802062e8: 41 11                	addi	sp, sp, -16
ffffffff802062ea: 2a e0                	sd	a0, 0(sp)
ffffffff802062ec: 2e e4                	sd	a1, 8(sp)
ffffffff802062ee: 08 61                	ld	a0, 0(a0)
ffffffff802062f0: 8c 61                	ld	a1, 0(a1)
ffffffff802062f2: 33 35 b5 00          	sltu	a0, a0, a1
ffffffff802062f6: 41 01                	addi	sp, sp, 16
ffffffff802062f8: 82 80                	ret

ffffffff802062fa _ZN5alloc3vec12Vec$LT$T$GT$10as_mut_ptr17h085b0ec9190cd7caE:
;     pub fn as_mut_ptr(&mut self) -> *mut T {
ffffffff802062fa: 01 11                	addi	sp, sp, -32
ffffffff802062fc: 06 ec                	sd	ra, 24(sp)
ffffffff802062fe: 2a e4                	sd	a0, 8(sp)
;         let ptr = self.buf.ptr();
ffffffff80206300: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80206304: e7 80 e0 73          	jalr	1854(ra)
ffffffff80206308: aa 85                	add	a1, zero, a0
ffffffff8020630a: 2a e8                	sd	a0, 16(sp)
ffffffff8020630c: 2e e0                	sd	a1, 0(sp)
ffffffff8020630e: 09 a0                	j	2
;             assume(!ptr.is_null());
ffffffff80206310: 02 65                	ld	a0, 0(sp)
ffffffff80206312: 97 00 00 00          	auipc	ra, 0
ffffffff80206316: e7 80 20 72          	jalr	1826(ra)
ffffffff8020631a: 09 a0                	j	2
ffffffff8020631c: 09 a0                	j	2
;     }
ffffffff8020631e: 02 65                	ld	a0, 0(sp)
ffffffff80206320: e2 60                	ld	ra, 24(sp)
ffffffff80206322: 05 61                	addi	sp, sp, 32
ffffffff80206324: 82 80                	ret

ffffffff80206326 _ZN5alloc3vec12Vec$LT$T$GT$14from_raw_parts17h1a6d514935df383aE:
;     pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Vec<T> {
ffffffff80206326: 39 71                	addi	sp, sp, -64
ffffffff80206328: 06 fc                	sd	ra, 56(sp)
ffffffff8020632a: 2e f0                	sd	a1, 32(sp)
ffffffff8020632c: 32 f4                	sd	a2, 40(sp)
ffffffff8020632e: 36 f8                	sd	a3, 48(sp)
;         unsafe { Vec { buf: RawVec::from_raw_parts(ptr, capacity), len: length } }
ffffffff80206330: 2a ec                	sd	a0, 24(sp)
ffffffff80206332: 2e 85                	add	a0, zero, a1
ffffffff80206334: b6 85                	add	a1, zero, a3
ffffffff80206336: 32 e8                	sd	a2, 16(sp)
ffffffff80206338: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020633c: e7 80 00 31          	jalr	784(ra)
ffffffff80206340: 2a e4                	sd	a0, 8(sp)
ffffffff80206342: 2e e0                	sd	a1, 0(sp)
ffffffff80206344: 09 a0                	j	2
ffffffff80206346: 22 65                	ld	a0, 8(sp)
ffffffff80206348: e2 65                	ld	a1, 24(sp)
ffffffff8020634a: 88 e1                	sd	a0, 0(a1)
ffffffff8020634c: 02 66                	ld	a2, 0(sp)
ffffffff8020634e: 90 e5                	sd	a2, 8(a1)
ffffffff80206350: c2 66                	ld	a3, 16(sp)
ffffffff80206352: 94 e9                	sd	a3, 16(a1)
;     }
ffffffff80206354: e2 70                	ld	ra, 56(sp)
ffffffff80206356: 21 61                	addi	sp, sp, 64
ffffffff80206358: 82 80                	ret

ffffffff8020635a _ZN5alloc3vec12Vec$LT$T$GT$3len17h29f7ea76012d8118E:
;     pub fn len(&self) -> usize {
ffffffff8020635a: 41 11                	addi	sp, sp, -16
ffffffff8020635c: 2a e4                	sd	a0, 8(sp)
;         self.len
ffffffff8020635e: 08 69                	ld	a0, 16(a0)
;     }
ffffffff80206360: 41 01                	addi	sp, sp, 16
ffffffff80206362: 82 80                	ret

ffffffff80206364 _ZN5alloc3vec12Vec$LT$T$GT$3pop17hf08bab5567b387d7E:
;     pub fn pop(&mut self) -> Option<T> {
ffffffff80206364: 5d 71                	addi	sp, sp, -80
ffffffff80206366: 86 e4                	sd	ra, 72(sp)
ffffffff80206368: ae e0                	sd	a1, 64(sp)
;         if self.len == 0 {
ffffffff8020636a: 90 69                	ld	a2, 16(a1)
ffffffff8020636c: 81 46                	mv	a3, zero
ffffffff8020636e: 2e fc                	sd	a1, 56(sp)
ffffffff80206370: 2a f8                	sd	a0, 48(sp)
ffffffff80206372: 63 0d d6 00          	beq	a2, a3, 26
ffffffff80206376: 09 a0                	j	2
;                 self.len -= 1;
ffffffff80206378: 62 75                	ld	a0, 56(sp)
ffffffff8020637a: 0c 69                	ld	a1, 16(a0)
ffffffff8020637c: fd 15                	addi	a1, a1, -1
ffffffff8020637e: 0c e9                	sd	a1, 16(a0)
;                 Some(ptr::read(self.as_ptr().add(self.len())))
ffffffff80206380: 97 00 00 00          	auipc	ra, 0
ffffffff80206384: e7 80 e0 0e          	jalr	238(ra)
ffffffff80206388: 2a f4                	sd	a0, 40(sp)
ffffffff8020638a: 29 a0                	j	10
ffffffff8020638c: 01 45                	mv	a0, zero
;             None
ffffffff8020638e: c2 75                	ld	a1, 48(sp)
ffffffff80206390: 88 e1                	sd	a0, 0(a1)
;         if self.len == 0 {
ffffffff80206392: 81 a0                	j	64
;                 Some(ptr::read(self.as_ptr().add(self.len())))
ffffffff80206394: 62 75                	ld	a0, 56(sp)
ffffffff80206396: 97 00 00 00          	auipc	ra, 0
ffffffff8020639a: e7 80 40 fc          	jalr	-60(ra)
ffffffff8020639e: 2a f0                	sd	a0, 32(sp)
ffffffff802063a0: 09 a0                	j	2
ffffffff802063a2: 22 75                	ld	a0, 40(sp)
ffffffff802063a4: 82 75                	ld	a1, 32(sp)
ffffffff802063a6: 97 10 00 00          	auipc	ra, 1
ffffffff802063aa: e7 80 40 cd          	jalr	-812(ra)
ffffffff802063ae: 2a ec                	sd	a0, 24(sp)
ffffffff802063b0: 09 a0                	j	2
ffffffff802063b2: 62 65                	ld	a0, 24(sp)
ffffffff802063b4: 97 00 00 00          	auipc	ra, 0
ffffffff802063b8: e7 80 c0 45          	jalr	1116(ra)
ffffffff802063bc: 2a e8                	sd	a0, 16(sp)
ffffffff802063be: 2e e4                	sd	a1, 8(sp)
ffffffff802063c0: 09 a0                	j	2
ffffffff802063c2: 42 65                	ld	a0, 16(sp)
ffffffff802063c4: c2 75                	ld	a1, 48(sp)
ffffffff802063c6: 88 e5                	sd	a0, 8(a1)
ffffffff802063c8: 22 66                	ld	a2, 8(sp)
ffffffff802063ca: 90 e9                	sd	a2, 16(a1)
ffffffff802063cc: 85 46                	addi	a3, zero, 1
ffffffff802063ce: 94 e1                	sd	a3, 0(a1)
;         if self.len == 0 {
ffffffff802063d0: 09 a0                	j	2
;     }
ffffffff802063d2: a6 60                	ld	ra, 72(sp)
ffffffff802063d4: 61 61                	addi	sp, sp, 80
ffffffff802063d6: 82 80                	ret

ffffffff802063d8 _ZN5alloc3vec12Vec$LT$T$GT$4push17h6692a0bbaa362a36E:
;     pub fn push(&mut self, value: T) {
ffffffff802063d8: 19 71                	addi	sp, sp, -128
ffffffff802063da: 86 fc                	sd	ra, 120(sp)
ffffffff802063dc: aa e0                	sd	a0, 64(sp)
ffffffff802063de: ae e4                	sd	a1, 72(sp)
ffffffff802063e0: b2 e8                	sd	a2, 80(sp)
;         if self.len == self.buf.capacity() {
ffffffff802063e2: 14 69                	ld	a3, 16(a0)
ffffffff802063e4: 2a 87                	add	a4, zero, a0
ffffffff802063e6: aa f4                	sd	a0, 104(sp)
ffffffff802063e8: c1 47                	addi	a5, zero, 16
;     intrinsics::size_of::<T>()
ffffffff802063ea: be f8                	sd	a5, 112(sp)
ffffffff802063ec: 81 47                	mv	a5, zero
;         if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
ffffffff802063ee: 32 fc                	sd	a2, 56(sp)
ffffffff802063f0: 2e f8                	sd	a1, 48(sp)
ffffffff802063f2: 2a f4                	sd	a0, 40(sp)
ffffffff802063f4: 36 f0                	sd	a3, 32(sp)
ffffffff802063f6: 3a ec                	sd	a4, 24(sp)
ffffffff802063f8: 91 e7                	bnez	a5, 12
ffffffff802063fa: 09 a0                	j	2
ffffffff802063fc: 62 65                	ld	a0, 24(sp)
ffffffff802063fe: 0c 65                	ld	a1, 8(a0)
ffffffff80206400: ae f0                	sd	a1, 96(sp)
ffffffff80206402: 21 a0                	j	8
ffffffff80206404: 7d 55                	addi	a0, zero, -1
ffffffff80206406: aa f0                	sd	a0, 96(sp)
ffffffff80206408: 09 a0                	j	2
;     }
ffffffff8020640a: 06 75                	ld	a0, 96(sp)
;         if self.len == self.buf.capacity() {
ffffffff8020640c: 2a e8                	sd	a0, 16(sp)
ffffffff8020640e: 09 a0                	j	2
ffffffff80206410: 02 75                	ld	a0, 32(sp)
ffffffff80206412: c2 65                	ld	a1, 16(sp)
ffffffff80206414: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80206418: 09 a0                	j	2
ffffffff8020641a: 09 a8                	j	18
ffffffff8020641c: 85 45                	addi	a1, zero, 1
;             self.reserve(1);
ffffffff8020641e: 22 75                	ld	a0, 40(sp)
ffffffff80206420: 97 00 00 00          	auipc	ra, 0
ffffffff80206424: e7 80 a0 07          	jalr	122(ra)
ffffffff80206428: 09 a0                	j	2
;         if self.len == self.buf.capacity() {
ffffffff8020642a: 09 a0                	j	2
;             let end = self.as_mut_ptr().add(self.len);
ffffffff8020642c: 22 75                	ld	a0, 40(sp)
ffffffff8020642e: 97 00 00 00          	auipc	ra, 0
ffffffff80206432: e7 80 c0 ec          	jalr	-308(ra)
ffffffff80206436: 2a e4                	sd	a0, 8(sp)
ffffffff80206438: 09 a0                	j	2
ffffffff8020643a: 22 75                	ld	a0, 40(sp)
ffffffff8020643c: 0c 69                	ld	a1, 16(a0)
ffffffff8020643e: 22 65                	ld	a0, 8(sp)
ffffffff80206440: 97 00 00 00          	auipc	ra, 0
ffffffff80206444: e7 80 e0 5a          	jalr	1454(ra)
ffffffff80206448: aa 85                	add	a1, zero, a0
ffffffff8020644a: aa ec                	sd	a0, 88(sp)
ffffffff8020644c: 2e e0                	sd	a1, 0(sp)
ffffffff8020644e: 09 a0                	j	2
;             ptr::write(end, value);
ffffffff80206450: 02 65                	ld	a0, 0(sp)
ffffffff80206452: c2 75                	ld	a1, 48(sp)
ffffffff80206454: 62 76                	ld	a2, 56(sp)
ffffffff80206456: 97 00 00 00          	auipc	ra, 0
ffffffff8020645a: e7 80 00 40          	jalr	1024(ra)
ffffffff8020645e: 09 a0                	j	2
;             self.len += 1;
ffffffff80206460: 22 75                	ld	a0, 40(sp)
ffffffff80206462: 0c 69                	ld	a1, 16(a0)
ffffffff80206464: 85 05                	addi	a1, a1, 1
ffffffff80206466: 0c e9                	sd	a1, 16(a0)
;     }
ffffffff80206468: e6 70                	ld	ra, 120(sp)
ffffffff8020646a: 09 61                	addi	sp, sp, 128
ffffffff8020646c: 82 80                	ret

ffffffff8020646e _ZN5alloc3vec12Vec$LT$T$GT$6as_ptr17h775293d65370a744E:
;     pub fn as_ptr(&self) -> *const T {
ffffffff8020646e: 01 11                	addi	sp, sp, -32
ffffffff80206470: 06 ec                	sd	ra, 24(sp)
ffffffff80206472: 2a e4                	sd	a0, 8(sp)
;         let ptr = self.buf.ptr();
ffffffff80206474: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80206478: e7 80 a0 5c          	jalr	1482(ra)
ffffffff8020647c: aa 85                	add	a1, zero, a0
ffffffff8020647e: 2a e8                	sd	a0, 16(sp)
ffffffff80206480: 2e e0                	sd	a1, 0(sp)
ffffffff80206482: 09 a0                	j	2
;             assume(!ptr.is_null());
ffffffff80206484: 02 65                	ld	a0, 0(sp)
ffffffff80206486: 97 00 00 00          	auipc	ra, 0
ffffffff8020648a: e7 80 e0 5a          	jalr	1454(ra)
ffffffff8020648e: 09 a0                	j	2
ffffffff80206490: 09 a0                	j	2
;     }
ffffffff80206492: 02 65                	ld	a0, 0(sp)
ffffffff80206494: e2 60                	ld	ra, 24(sp)
ffffffff80206496: 05 61                	addi	sp, sp, 32
ffffffff80206498: 82 80                	ret

ffffffff8020649a _ZN5alloc3vec12Vec$LT$T$GT$7reserve17hb65e2011253ca645E:
;     pub fn reserve(&mut self, additional: usize) {
ffffffff8020649a: 01 11                	addi	sp, sp, -32
ffffffff8020649c: 06 ec                	sd	ra, 24(sp)
ffffffff8020649e: 2a e4                	sd	a0, 8(sp)
ffffffff802064a0: 2e e8                	sd	a1, 16(sp)
;         self.buf.reserve(self.len, additional);
ffffffff802064a2: 10 69                	ld	a2, 16(a0)
ffffffff802064a4: 2e e0                	sd	a1, 0(sp)
ffffffff802064a6: b2 85                	add	a1, zero, a2
ffffffff802064a8: 02 66                	ld	a2, 0(sp)
ffffffff802064aa: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802064ae: e7 80 00 5b          	jalr	1456(ra)
ffffffff802064b2: 09 a0                	j	2
;     }
ffffffff802064b4: e2 60                	ld	ra, 24(sp)
ffffffff802064b6: 05 61                	addi	sp, sp, 32
ffffffff802064b8: 82 80                	ret

ffffffff802064ba _ZN109_$LT$algorithm..allocator..stacked_allocator..StackedAllocator$u20$as$u20$algorithm..allocator..Allocator$GT$3new17hf73a475353c88b5fE:
;     fn new(capacity: usize) -> Self {
ffffffff802064ba: 5d 71                	addi	sp, sp, -80
ffffffff802064bc: 86 e4                	sd	ra, 72(sp)
ffffffff802064be: ae e0                	sd	a1, 64(sp)
ffffffff802064c0: 41 46                	addi	a2, zero, 16
ffffffff802064c2: a1 46                	addi	a3, zero, 8
;             list: vec![(0, capacity)],
ffffffff802064c4: 2a e8                	sd	a0, 16(sp)
ffffffff802064c6: 32 85                	add	a0, zero, a2
ffffffff802064c8: 2e e4                	sd	a1, 8(sp)
ffffffff802064ca: b6 85                	add	a1, zero, a3
ffffffff802064cc: 97 00 00 00          	auipc	ra, 0
ffffffff802064d0: e7 80 60 8e          	jalr	-1818(ra)
ffffffff802064d4: 81 45                	mv	a1, zero
ffffffff802064d6: 2e f8                	sd	a1, 48(sp)
ffffffff802064d8: 22 66                	ld	a2, 8(sp)
ffffffff802064da: 32 fc                	sd	a2, 56(sp)
ffffffff802064dc: 0c e1                	sd	a1, 0(a0)
ffffffff802064de: 10 e5                	sd	a2, 8(a0)
ffffffff802064e0: 2c 08                	addi	a1, sp, 24
ffffffff802064e2: 05 46                	addi	a2, zero, 1
ffffffff802064e4: 2a e0                	sd	a0, 0(sp)
ffffffff802064e6: 2e 85                	add	a0, zero, a1
ffffffff802064e8: 82 65                	ld	a1, 0(sp)
ffffffff802064ea: 97 10 00 00          	auipc	ra, 1
ffffffff802064ee: e7 80 c0 9f          	jalr	-1540(ra)
ffffffff802064f2: 09 a0                	j	2
;         Self {
ffffffff802064f4: 22 75                	ld	a0, 40(sp)
ffffffff802064f6: c2 65                	ld	a1, 16(sp)
ffffffff802064f8: 88 e9                	sd	a0, 16(a1)
ffffffff802064fa: 02 75                	ld	a0, 32(sp)
ffffffff802064fc: 88 e5                	sd	a0, 8(a1)
ffffffff802064fe: 62 65                	ld	a0, 24(sp)
ffffffff80206500: 88 e1                	sd	a0, 0(a1)
;     }
ffffffff80206502: a6 60                	ld	ra, 72(sp)
ffffffff80206504: 61 61                	addi	sp, sp, 80
ffffffff80206506: 82 80                	ret

ffffffff80206508 _ZN109_$LT$algorithm..allocator..stacked_allocator..StackedAllocator$u20$as$u20$algorithm..allocator..Allocator$GT$5alloc17h492ca12cd8024812E:
;     fn alloc(&mut self) -> Option<usize> {
ffffffff80206508: 75 71                	addi	sp, sp, -144
ffffffff8020650a: 06 e5                	sd	ra, 136(sp)
ffffffff8020650c: aa f8                	sd	a0, 112(sp)
ffffffff8020650e: ac 00                	addi	a1, sp, 72
;         if let Some((start, end)) = self.list.pop() {
ffffffff80206510: 2a f8                	sd	a0, 48(sp)
ffffffff80206512: 2e 85                	add	a0, zero, a1
ffffffff80206514: c2 75                	ld	a1, 48(sp)
ffffffff80206516: 97 00 00 00          	auipc	ra, 0
ffffffff8020651a: e7 80 e0 e4          	jalr	-434(ra)
ffffffff8020651e: 09 a0                	j	2
ffffffff80206520: 26 65                	ld	a0, 72(sp)
ffffffff80206522: 85 45                	addi	a1, zero, 1
ffffffff80206524: 63 06 b5 00          	beq	a0, a1, 12
ffffffff80206528: 09 a0                	j	2
ffffffff8020652a: 01 45                	mv	a0, zero
;             None
ffffffff8020652c: 2a fc                	sd	a0, 56(sp)
;         if let Some((start, end)) = self.list.pop() {
ffffffff8020652e: b1 a8                	j	92
ffffffff80206530: 46 65                	ld	a0, 80(sp)
ffffffff80206532: aa fc                	sd	a0, 120(sp)
ffffffff80206534: e6 65                	ld	a1, 88(sp)
ffffffff80206536: 2e e1                	sd	a1, 128(sp)
;             if end - start > 1 {
ffffffff80206538: 33 86 a5 40          	sub	a2, a1, a0
ffffffff8020653c: 2a f4                	sd	a0, 40(sp)
ffffffff8020653e: 2e f0                	sd	a1, 32(sp)
ffffffff80206540: 32 ec                	sd	a2, 24(sp)
ffffffff80206542: 63 e9 c5 04          	bltu	a1, a2, 82
ffffffff80206546: 09 a0                	j	2
ffffffff80206548: 05 45                	addi	a0, zero, 1
ffffffff8020654a: e2 65                	ld	a1, 24(sp)
ffffffff8020654c: 63 64 b5 00          	bltu	a0, a1, 8
ffffffff80206550: 09 a0                	j	2
ffffffff80206552: 3d a0                	j	46
;                 self.list.push((start + 1, end));
ffffffff80206554: 42 75                	ld	a0, 48(sp)
ffffffff80206556: a2 75                	ld	a1, 40(sp)
ffffffff80206558: 13 86 15 00          	addi	a2, a1, 1
ffffffff8020655c: 2a e8                	sd	a0, 16(sp)
ffffffff8020655e: 32 e4                	sd	a2, 8(sp)
ffffffff80206560: 63 69 b6 04          	bltu	a2, a1, 82
ffffffff80206564: 09 a0                	j	2
ffffffff80206566: 22 65                	ld	a0, 8(sp)
ffffffff80206568: aa f0                	sd	a0, 96(sp)
ffffffff8020656a: 82 75                	ld	a1, 32(sp)
ffffffff8020656c: ae f4                	sd	a1, 104(sp)
ffffffff8020656e: 42 65                	ld	a0, 16(sp)
ffffffff80206570: a2 65                	ld	a1, 8(sp)
ffffffff80206572: 02 76                	ld	a2, 32(sp)
ffffffff80206574: 97 00 00 00          	auipc	ra, 0
ffffffff80206578: e7 80 40 e6          	jalr	-412(ra)
ffffffff8020657c: 09 a0                	j	2
;             if end - start > 1 {
ffffffff8020657e: 09 a0                	j	2
;             Some(start)
ffffffff80206580: 22 75                	ld	a0, 40(sp)
ffffffff80206582: aa e0                	sd	a0, 64(sp)
ffffffff80206584: 85 45                	addi	a1, zero, 1
ffffffff80206586: 2e fc                	sd	a1, 56(sp)
;         if let Some((start, end)) = self.list.pop() {
ffffffff80206588: 09 a0                	j	2
;     }
ffffffff8020658a: 62 75                	ld	a0, 56(sp)
ffffffff8020658c: 86 65                	ld	a1, 64(sp)
ffffffff8020658e: aa 60                	ld	ra, 136(sp)
ffffffff80206590: 49 61                	addi	sp, sp, 144
ffffffff80206592: 82 80                	ret

ffffffff80206594 .LBB1_13:
;             if end - start > 1 {
ffffffff80206594: 17 85 00 00          	auipc	a0, 8
ffffffff80206598: 13 05 c5 12          	addi	a0, a0, 300

ffffffff8020659c .LBB1_14:
ffffffff8020659c: 17 86 00 00          	auipc	a2, 8
ffffffff802065a0: 13 06 46 10          	addi	a2, a2, 260
ffffffff802065a4: 93 05 10 02          	addi	a1, zero, 33
ffffffff802065a8: 97 40 00 00          	auipc	ra, 4
ffffffff802065ac: e7 80 00 d9          	jalr	-624(ra)
ffffffff802065b0: 00 00                	unimp	

ffffffff802065b2 .LBB1_15:
;                 self.list.push((start + 1, end));
ffffffff802065b2: 17 85 00 00          	auipc	a0, 8
ffffffff802065b6: 13 05 e5 14          	addi	a0, a0, 334

ffffffff802065ba .LBB1_16:
ffffffff802065ba: 17 86 00 00          	auipc	a2, 8
ffffffff802065be: 13 06 e6 12          	addi	a2, a2, 302
ffffffff802065c2: f1 45                	addi	a1, zero, 28
ffffffff802065c4: 97 40 00 00          	auipc	ra, 4
ffffffff802065c8: e7 80 40 d7          	jalr	-652(ra)
ffffffff802065cc: 00 00                	unimp	

ffffffff802065ce _ZN109_$LT$algorithm..allocator..stacked_allocator..StackedAllocator$u20$as$u20$algorithm..allocator..Allocator$GT$7dealloc17h4ddcea0d4b327fefE:
;     fn dealloc(&mut self, index: usize) {
ffffffff802065ce: 39 71                	addi	sp, sp, -64
ffffffff802065d0: 06 fc                	sd	ra, 56(sp)
ffffffff802065d2: 2a f4                	sd	a0, 40(sp)
ffffffff802065d4: 2e f8                	sd	a1, 48(sp)
;         self.list.push((index, index + 1));
ffffffff802065d6: 13 86 15 00          	addi	a2, a1, 1
ffffffff802065da: 2e e8                	sd	a1, 16(sp)
ffffffff802065dc: 2a e4                	sd	a0, 8(sp)
ffffffff802065de: 32 e0                	sd	a2, 0(sp)
ffffffff802065e0: 63 62 b6 02          	bltu	a2, a1, 36
ffffffff802065e4: 09 a0                	j	2
ffffffff802065e6: 42 65                	ld	a0, 16(sp)
ffffffff802065e8: 2a ec                	sd	a0, 24(sp)
ffffffff802065ea: 82 65                	ld	a1, 0(sp)
ffffffff802065ec: 2e f0                	sd	a1, 32(sp)
ffffffff802065ee: 22 65                	ld	a0, 8(sp)
ffffffff802065f0: c2 65                	ld	a1, 16(sp)
ffffffff802065f2: 02 66                	ld	a2, 0(sp)
ffffffff802065f4: 97 00 00 00          	auipc	ra, 0
ffffffff802065f8: e7 80 40 de          	jalr	-540(ra)
ffffffff802065fc: 09 a0                	j	2
;     }
ffffffff802065fe: e2 70                	ld	ra, 56(sp)
ffffffff80206600: 21 61                	addi	sp, sp, 64
ffffffff80206602: 82 80                	ret

ffffffff80206604 .LBB2_4:
;         self.list.push((index, index + 1));
ffffffff80206604: 17 85 00 00          	auipc	a0, 8
ffffffff80206608: 13 05 c5 0f          	addi	a0, a0, 252

ffffffff8020660c .LBB2_5:
ffffffff8020660c: 17 86 00 00          	auipc	a2, 8
ffffffff80206610: 13 06 46 11          	addi	a2, a2, 276
ffffffff80206614: f1 45                	addi	a1, zero, 28
ffffffff80206616: 97 40 00 00          	auipc	ra, 4
ffffffff8020661a: e7 80 20 d2          	jalr	-734(ra)
ffffffff8020661e: 00 00                	unimp	

ffffffff80206620 _ZN4core6option15Option$LT$T$GT$5ok_or17h24e2caa0c9b2309fE:
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
ffffffff80206620: 39 71                	addi	sp, sp, -64
ffffffff80206622: 2a e4                	sd	a0, 8(sp)
ffffffff80206624: 2e e8                	sd	a1, 16(sp)
ffffffff80206626: 85 45                	addi	a1, zero, 1
;             Some(v) => Ok(v),
ffffffff80206628: a3 07 b1 02          	sb	a1, 47(sp)
ffffffff8020662c: aa 85                	add	a1, zero, a0
ffffffff8020662e: 01 46                	mv	a2, zero
ffffffff80206630: 63 04 c5 00          	beq	a0, a2, 8
ffffffff80206634: 09 a0                	j	2
ffffffff80206636: 01 a8                	j	16
ffffffff80206638: 01 45                	mv	a0, zero
;             None => Err(err),
ffffffff8020663a: a3 07 a1 02          	sb	a0, 47(sp)
ffffffff8020663e: 05 45                	addi	a0, zero, 1
ffffffff80206640: 2a ec                	sd	a0, 24(sp)
;         match self {
ffffffff80206642: 01 a8                	j	16
ffffffff80206644: 00 00                	unimp	
;             Some(v) => Ok(v),
ffffffff80206646: 42 65                	ld	a0, 16(sp)
ffffffff80206648: 2a fc                	sd	a0, 56(sp)
ffffffff8020664a: 2a f0                	sd	a0, 32(sp)
ffffffff8020664c: 01 45                	mv	a0, zero
ffffffff8020664e: 2a ec                	sd	a0, 24(sp)
;         match self {
ffffffff80206650: 09 a0                	j	2
;     }
ffffffff80206652: 03 45 f1 02          	lbu	a0, 47(sp)
ffffffff80206656: 05 89                	andi	a0, a0, 1
ffffffff80206658: 11 e5                	bnez	a0, 12
ffffffff8020665a: 09 a0                	j	2
ffffffff8020665c: 62 65                	ld	a0, 24(sp)
ffffffff8020665e: 82 75                	ld	a1, 32(sp)
ffffffff80206660: 21 61                	addi	sp, sp, 64
ffffffff80206662: 82 80                	ret
ffffffff80206664: 01 45                	mv	a0, zero
ffffffff80206666: a3 07 a1 02          	sb	a0, 47(sp)
ffffffff8020666a: cd bf                	j	-14

ffffffff8020666c _ZN4core6option15Option$LT$T$GT$5ok_or17h5b0fa6e75ba2f59bE:
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
ffffffff8020666c: 79 71                	addi	sp, sp, -48
ffffffff8020666e: 2a e4                	sd	a0, 8(sp)
ffffffff80206670: 85 45                	addi	a1, zero, 1
;             Some(v) => Ok(v),
ffffffff80206672: a3 0f b1 00          	sb	a1, 31(sp)
ffffffff80206676: b3 35 a0 00          	snez	a1, a0
ffffffff8020667a: 01 46                	mv	a2, zero
ffffffff8020667c: 63 04 c5 00          	beq	a0, a2, 8
ffffffff80206680: 09 a0                	j	2
ffffffff80206682: 39 a0                	j	14
ffffffff80206684: 01 45                	mv	a0, zero
;             None => Err(err),
ffffffff80206686: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff8020668a: 2a e8                	sd	a0, 16(sp)
;         match self {
ffffffff8020668c: 31 a0                	j	12
ffffffff8020668e: 00 00                	unimp	
;             Some(v) => Ok(v),
ffffffff80206690: 22 65                	ld	a0, 8(sp)
ffffffff80206692: 2a f4                	sd	a0, 40(sp)
ffffffff80206694: 2a e8                	sd	a0, 16(sp)
;         match self {
ffffffff80206696: 09 a0                	j	2
;     }
ffffffff80206698: 03 45 f1 01          	lbu	a0, 31(sp)
ffffffff8020669c: 05 89                	andi	a0, a0, 1
ffffffff8020669e: 09 e5                	bnez	a0, 10
ffffffff802066a0: 09 a0                	j	2
ffffffff802066a2: 42 65                	ld	a0, 16(sp)
ffffffff802066a4: 45 61                	addi	sp, sp, 48
ffffffff802066a6: 82 80                	ret
ffffffff802066a8: 01 45                	mv	a0, zero
ffffffff802066aa: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff802066ae: d5 bf                	j	-12

ffffffff802066b0 _ZN4core6option15Option$LT$T$GT$5ok_or17hd04e1b369726ca54E:
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
ffffffff802066b0: 5d 71                	addi	sp, sp, -80
ffffffff802066b2: 2e f0                	sd	a1, 32(sp)
ffffffff802066b4: 32 f4                	sd	a2, 40(sp)
ffffffff802066b6: 36 fc                	sd	a3, 56(sp)
ffffffff802066b8: ba e0                	sd	a4, 64(sp)
ffffffff802066ba: 05 46                	addi	a2, zero, 1
;             Some(v) => Ok(v),
ffffffff802066bc: a3 0b c1 02          	sb	a2, 55(sp)
ffffffff802066c0: 2e 86                	add	a2, zero, a1
ffffffff802066c2: 81 47                	mv	a5, zero
ffffffff802066c4: 3a ec                	sd	a4, 24(sp)
ffffffff802066c6: 36 e8                	sd	a3, 16(sp)
ffffffff802066c8: 2a e4                	sd	a0, 8(sp)
ffffffff802066ca: 63 84 f5 00          	beq	a1, a5, 8
ffffffff802066ce: 09 a0                	j	2
ffffffff802066d0: 29 a8                	j	26
ffffffff802066d2: 01 45                	mv	a0, zero
;             None => Err(err),
ffffffff802066d4: a3 0b a1 02          	sb	a0, 55(sp)
ffffffff802066d8: 42 65                	ld	a0, 16(sp)
ffffffff802066da: a2 65                	ld	a1, 8(sp)
ffffffff802066dc: 88 e5                	sd	a0, 8(a1)
ffffffff802066de: 62 66                	ld	a2, 24(sp)
ffffffff802066e0: 90 e9                	sd	a2, 16(a1)
ffffffff802066e2: 85 46                	addi	a3, zero, 1
ffffffff802066e4: 94 e1                	sd	a3, 0(a1)
;         match self {
ffffffff802066e6: 09 a8                	j	18
ffffffff802066e8: 00 00                	unimp	
;             Some(v) => Ok(v),
ffffffff802066ea: 22 75                	ld	a0, 40(sp)
ffffffff802066ec: aa e4                	sd	a0, 72(sp)
ffffffff802066ee: a2 65                	ld	a1, 8(sp)
ffffffff802066f0: 88 e5                	sd	a0, 8(a1)
ffffffff802066f2: 01 45                	mv	a0, zero
ffffffff802066f4: 88 e1                	sd	a0, 0(a1)
;         match self {
ffffffff802066f6: 09 a0                	j	2
;     }
ffffffff802066f8: 03 45 71 03          	lbu	a0, 55(sp)
ffffffff802066fc: 05 89                	andi	a0, a0, 1
ffffffff802066fe: 01 e5                	bnez	a0, 8
ffffffff80206700: 09 a0                	j	2
ffffffff80206702: 61 61                	addi	sp, sp, 80
ffffffff80206704: 82 80                	ret
ffffffff80206706: 01 45                	mv	a0, zero
ffffffff80206708: a3 0b a1 02          	sb	a0, 55(sp)
ffffffff8020670c: dd bf                	j	-10

ffffffff8020670e _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h534ba324c222a792E:
;     fn from(t: T) -> T {
ffffffff8020670e: 41 11                	addi	sp, sp, -16
;     }
ffffffff80206710: 41 01                	addi	sp, sp, 16
ffffffff80206712: 82 80                	ret

ffffffff80206714 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he86c6e044cae15a2E:
;     fn from(t: T) -> T {
ffffffff80206714: 41 11                	addi	sp, sp, -16
ffffffff80206716: 2a e0                	sd	a0, 0(sp)
ffffffff80206718: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff8020671a: 41 01                	addi	sp, sp, 16
ffffffff8020671c: 82 80                	ret

ffffffff8020671e _ZN4core3ptr19swap_nonoverlapping17hf670cf912299559bE:
; pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {
ffffffff8020671e: 1d 71                	addi	sp, sp, -96
ffffffff80206720: 86 ec                	sd	ra, 88(sp)
ffffffff80206722: 2a f0                	sd	a0, 32(sp)
ffffffff80206724: 2e f4                	sd	a1, 40(sp)
ffffffff80206726: 32 f8                	sd	a2, 48(sp)
;     let x = x as *mut u8;
ffffffff80206728: aa 86                	add	a3, zero, a0
ffffffff8020672a: 2a fc                	sd	a0, 56(sp)
;     let y = y as *mut u8;
ffffffff8020672c: 2e 85                	add	a0, zero, a1
ffffffff8020672e: ae e0                	sd	a1, 64(sp)
ffffffff80206730: a1 45                	addi	a1, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80206732: ae e8                	sd	a1, 80(sp)
;     let len = mem::size_of::<T>() * count;
ffffffff80206734: 32 ec                	sd	a2, 24(sp)
ffffffff80206736: 36 e8                	sd	a3, 16(sp)
ffffffff80206738: 2a e4                	sd	a0, 8(sp)
ffffffff8020673a: 2e e0                	sd	a1, 0(sp)
ffffffff8020673c: 09 a0                	j	2
ffffffff8020673e: 02 65                	ld	a0, 0(sp)
ffffffff80206740: e2 65                	ld	a1, 24(sp)
ffffffff80206742: 33 06 b5 02          	<unknown>
ffffffff80206746: b2 e4                	sd	a2, 72(sp)
;     swap_nonoverlapping_bytes(x, y, len)
ffffffff80206748: 42 65                	ld	a0, 16(sp)
ffffffff8020674a: a2 65                	ld	a1, 8(sp)
ffffffff8020674c: 97 00 00 00          	auipc	ra, 0
ffffffff80206750: e7 80 60 12          	jalr	294(ra)
ffffffff80206754: 09 a0                	j	2
; }
ffffffff80206756: e6 60                	ld	ra, 88(sp)
ffffffff80206758: 25 61                	addi	sp, sp, 96
ffffffff8020675a: 82 80                	ret

ffffffff8020675c _ZN4core3ptr23swap_nonoverlapping_one17he7bc95d0f97e35e9E:
; pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {
ffffffff8020675c: 5d 71                	addi	sp, sp, -80
ffffffff8020675e: 86 e4                	sd	ra, 72(sp)
ffffffff80206760: 2a f4                	sd	a0, 40(sp)
ffffffff80206762: 2e f8                	sd	a1, 48(sp)
ffffffff80206764: 21 46                	addi	a2, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80206766: b2 e0                	sd	a2, 64(sp)
;     if mem::size_of::<T>() < 32 {
ffffffff80206768: 2e ec                	sd	a1, 24(sp)
ffffffff8020676a: 2a e8                	sd	a0, 16(sp)
ffffffff8020676c: 32 e4                	sd	a2, 8(sp)
ffffffff8020676e: 09 a0                	j	2
ffffffff80206770: 13 05 00 02          	addi	a0, zero, 32
ffffffff80206774: a2 65                	ld	a1, 8(sp)
ffffffff80206776: 63 eb a5 00          	bltu	a1, a0, 22
ffffffff8020677a: 09 a0                	j	2
ffffffff8020677c: 05 46                	addi	a2, zero, 1
;         swap_nonoverlapping(x, y, 1);
ffffffff8020677e: 42 65                	ld	a0, 16(sp)
ffffffff80206780: e2 65                	ld	a1, 24(sp)
ffffffff80206782: 97 00 00 00          	auipc	ra, 0
ffffffff80206786: e7 80 c0 f9          	jalr	-100(ra)
ffffffff8020678a: 15 a8                	j	52
;         let z = read(x);
ffffffff8020678c: 42 65                	ld	a0, 16(sp)
ffffffff8020678e: 97 00 00 00          	auipc	ra, 0
ffffffff80206792: e7 80 a0 04          	jalr	74(ra)
ffffffff80206796: aa 85                	add	a1, zero, a0
ffffffff80206798: 2a fc                	sd	a0, 56(sp)
ffffffff8020679a: 2e e0                	sd	a1, 0(sp)
ffffffff8020679c: 09 a0                	j	2
ffffffff8020679e: 05 46                	addi	a2, zero, 1
;         copy_nonoverlapping(y, x, 1);
ffffffff802067a0: 62 65                	ld	a0, 24(sp)
ffffffff802067a2: c2 65                	ld	a1, 16(sp)
ffffffff802067a4: 97 00 00 00          	auipc	ra, 0
ffffffff802067a8: e7 80 40 6a          	jalr	1700(ra)
ffffffff802067ac: 09 a0                	j	2
;         write(y, z);
ffffffff802067ae: 62 65                	ld	a0, 24(sp)
ffffffff802067b0: 82 65                	ld	a1, 0(sp)
ffffffff802067b2: 97 00 00 00          	auipc	ra, 0
ffffffff802067b6: e7 80 40 0b          	jalr	180(ra)
ffffffff802067ba: 09 a0                	j	2
;     if mem::size_of::<T>() < 32 {
ffffffff802067bc: 11 a0                	j	4
ffffffff802067be: 09 a0                	j	2
; }
ffffffff802067c0: a6 60                	ld	ra, 72(sp)
ffffffff802067c2: 61 61                	addi	sp, sp, 80
ffffffff802067c4: 82 80                	ret

ffffffff802067c6 _ZN4core3ptr24slice_from_raw_parts_mut17h324ef145a4372a58E:
; pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
ffffffff802067c6: 79 71                	addi	sp, sp, -48
ffffffff802067c8: 2a f0                	sd	a0, 32(sp)
ffffffff802067ca: 2e f4                	sd	a1, 40(sp)
;     unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }
ffffffff802067cc: 2a e8                	sd	a0, 16(sp)
ffffffff802067ce: 2e ec                	sd	a1, 24(sp)
ffffffff802067d0: 2a e0                	sd	a0, 0(sp)
ffffffff802067d2: 2e e4                	sd	a1, 8(sp)
; }
ffffffff802067d4: 45 61                	addi	sp, sp, 48
ffffffff802067d6: 82 80                	ret

ffffffff802067d8 _ZN4core3ptr4read17h510b0f0ce9589301E:
; pub unsafe fn read<T>(src: *const T) -> T {
ffffffff802067d8: 5d 71                	addi	sp, sp, -80
ffffffff802067da: 86 e4                	sd	ra, 72(sp)
ffffffff802067dc: 2a ec                	sd	a0, 24(sp)
;     }
ffffffff802067de: 82 75                	ld	a1, 32(sp)
;     let mut tmp = MaybeUninit::<T>::uninit();
ffffffff802067e0: 2e e8                	sd	a1, 16(sp)
ffffffff802067e2: 2a e4                	sd	a0, 8(sp)
ffffffff802067e4: 09 a0                	j	2
ffffffff802067e6: 08 08                	addi	a0, sp, 16
ffffffff802067e8: 2a fc                	sd	a0, 56(sp)
ffffffff802067ea: aa e0                	sd	a0, 64(sp)
;     copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
ffffffff802067ec: 09 a0                	j	2
ffffffff802067ee: 0c 08                	addi	a1, sp, 16
ffffffff802067f0: 05 46                	addi	a2, zero, 1
ffffffff802067f2: 22 65                	ld	a0, 8(sp)
ffffffff802067f4: 97 00 00 00          	auipc	ra, 0
ffffffff802067f8: e7 80 40 65          	jalr	1620(ra)
ffffffff802067fc: 09 a0                	j	2
;     tmp.assume_init()
ffffffff802067fe: 42 65                	ld	a0, 16(sp)
ffffffff80206800: 2a f4                	sd	a0, 40(sp)
ffffffff80206802: 2a f8                	sd	a0, 48(sp)
ffffffff80206804: 2a e0                	sd	a0, 0(sp)
ffffffff80206806: 09 a0                	j	2
; }
ffffffff80206808: 02 65                	ld	a0, 0(sp)
ffffffff8020680a: a6 60                	ld	ra, 72(sp)
ffffffff8020680c: 61 61                	addi	sp, sp, 80
ffffffff8020680e: 82 80                	ret

ffffffff80206810 _ZN4core3ptr4read17h5f2a95a9f30fa6b7E:
; pub unsafe fn read<T>(src: *const T) -> T {
ffffffff80206810: 19 71                	addi	sp, sp, -128
ffffffff80206812: 86 fc                	sd	ra, 120(sp)
ffffffff80206814: 2a f8                	sd	a0, 48(sp)
;     }
ffffffff80206816: e2 75                	ld	a1, 56(sp)
ffffffff80206818: 06 66                	ld	a2, 64(sp)
;     let mut tmp = MaybeUninit::<T>::uninit();
ffffffff8020681a: 2e f0                	sd	a1, 32(sp)
ffffffff8020681c: 32 f4                	sd	a2, 40(sp)
ffffffff8020681e: 2a ec                	sd	a0, 24(sp)
ffffffff80206820: 09 a0                	j	2
ffffffff80206822: 08 10                	addi	a0, sp, 32
ffffffff80206824: aa f4                	sd	a0, 104(sp)
ffffffff80206826: aa f8                	sd	a0, 112(sp)
;     copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
ffffffff80206828: 09 a0                	j	2
ffffffff8020682a: 0c 10                	addi	a1, sp, 32
ffffffff8020682c: 05 46                	addi	a2, zero, 1
ffffffff8020682e: 62 65                	ld	a0, 24(sp)
ffffffff80206830: 97 00 00 00          	auipc	ra, 0
ffffffff80206834: e7 80 60 5f          	jalr	1526(ra)
ffffffff80206838: 09 a0                	j	2
;     tmp.assume_init()
ffffffff8020683a: 02 75                	ld	a0, 32(sp)
ffffffff8020683c: a2 75                	ld	a1, 40(sp)
ffffffff8020683e: aa e4                	sd	a0, 72(sp)
ffffffff80206840: ae e8                	sd	a1, 80(sp)
ffffffff80206842: aa ec                	sd	a0, 88(sp)
ffffffff80206844: ae f0                	sd	a1, 96(sp)
ffffffff80206846: 2a e8                	sd	a0, 16(sp)
ffffffff80206848: 2e e4                	sd	a1, 8(sp)
ffffffff8020684a: 09 a0                	j	2
; }
ffffffff8020684c: 42 65                	ld	a0, 16(sp)
ffffffff8020684e: a2 65                	ld	a1, 8(sp)
ffffffff80206850: e6 70                	ld	ra, 120(sp)
ffffffff80206852: 09 61                	addi	sp, sp, 128
ffffffff80206854: 82 80                	ret

ffffffff80206856 _ZN4core3ptr5write17h407b5f581f1fd848E:
; pub unsafe fn write<T>(dst: *mut T, src: T) {
ffffffff80206856: 01 11                	addi	sp, sp, -32
ffffffff80206858: 2a e4                	sd	a0, 8(sp)
ffffffff8020685a: 2e e8                	sd	a1, 16(sp)
ffffffff8020685c: 32 ec                	sd	a2, 24(sp)
;     intrinsics::move_val_init(&mut *dst, src)
ffffffff8020685e: 0c e1                	sd	a1, 0(a0)
ffffffff80206860: 10 e5                	sd	a2, 8(a0)
; }
ffffffff80206862: 05 61                	addi	sp, sp, 32
ffffffff80206864: 82 80                	ret

ffffffff80206866 _ZN4core3ptr5write17h5c02ee0dfc130263E:
; pub unsafe fn write<T>(dst: *mut T, src: T) {
ffffffff80206866: 01 11                	addi	sp, sp, -32
ffffffff80206868: 2a e8                	sd	a0, 16(sp)
ffffffff8020686a: 2e ec                	sd	a1, 24(sp)
;     intrinsics::move_val_init(&mut *dst, src)
ffffffff8020686c: 0c e1                	sd	a1, 0(a0)
; }
ffffffff8020686e: 05 61                	addi	sp, sp, 32
ffffffff80206870: 82 80                	ret

ffffffff80206872 _ZN4core3ptr25swap_nonoverlapping_bytes17hcff90883dea4a28bE:
; unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
ffffffff80206872: 09 71                	addi	sp, sp, -384
ffffffff80206874: 86 fe                	sd	ra, 376(sp)
ffffffff80206876: a2 fa                	sd	s0, 368(sp)
ffffffff80206878: 00 03                	addi	s0, sp, 384
ffffffff8020687a: 13 71 01 fe          	andi	sp, sp, -32
ffffffff8020687e: aa f9                	sd	a0, 240(sp)
ffffffff80206880: ae fd                	sd	a1, 248(sp)
ffffffff80206882: 32 e2                	sd	a2, 256(sp)
ffffffff80206884: 93 06 00 02          	addi	a3, zero, 32
;     intrinsics::size_of::<T>()
ffffffff80206888: b6 e6                	sd	a3, 328(sp)
;     let block_size = mem::size_of::<Block>();
ffffffff8020688a: 36 e6                	sd	a3, 264(sp)
ffffffff8020688c: 32 e5                	sd	a2, 136(sp)
ffffffff8020688e: 2e e1                	sd	a1, 128(sp)
ffffffff80206890: aa fc                	sd	a0, 120(sp)
ffffffff80206892: b6 f8                	sd	a3, 112(sp)
ffffffff80206894: 09 a0                	j	2
ffffffff80206896: 01 45                	mv	a0, zero
;     let mut i = 0;
ffffffff80206898: 2a ed                	sd	a0, 152(sp)
;     while i + block_size <= len {
ffffffff8020689a: 09 a0                	j	2
ffffffff8020689c: 6a 65                	ld	a0, 152(sp)
ffffffff8020689e: c6 75                	ld	a1, 112(sp)
ffffffff802068a0: 2e 95                	add	a0, a0, a1
ffffffff802068a2: 2a 66                	ld	a2, 136(sp)
ffffffff802068a4: 63 78 a6 00          	bgeu	a2, a0, 16
ffffffff802068a8: 09 a0                	j	2
;     if i < len {
ffffffff802068aa: 6a 65                	ld	a0, 152(sp)
ffffffff802068ac: aa 65                	ld	a1, 136(sp)
ffffffff802068ae: 63 6e b5 06          	bltu	a0, a1, 124
ffffffff802068b2: 9d a8                	j	118
;         let mut t = mem::MaybeUninit::<Block>::uninit();
ffffffff802068b4: 09 a0                	j	2
ffffffff802068b6: 08 11                	addi	a0, sp, 160
ffffffff802068b8: aa f2                	sd	a0, 352(sp)
ffffffff802068ba: aa f6                	sd	a0, 360(sp)
;         let t = t.as_mut_ptr() as *mut u8;
ffffffff802068bc: 09 a0                	j	2
ffffffff802068be: 08 11                	addi	a0, sp, 160
ffffffff802068c0: 2a ea                	sd	a0, 272(sp)
;         let x = x.add(i);
ffffffff802068c2: ea 65                	ld	a1, 152(sp)
ffffffff802068c4: 66 76                	ld	a2, 120(sp)
ffffffff802068c6: aa f4                	sd	a0, 104(sp)
ffffffff802068c8: 32 85                	add	a0, zero, a2
ffffffff802068ca: 97 00 00 00          	auipc	ra, 0
ffffffff802068ce: e7 80 80 10          	jalr	264(ra)
ffffffff802068d2: aa 85                	add	a1, zero, a0
ffffffff802068d4: 2a ee                	sd	a0, 280(sp)
ffffffff802068d6: ae f0                	sd	a1, 96(sp)
ffffffff802068d8: 09 a0                	j	2
;         let y = y.add(i);
ffffffff802068da: ea 65                	ld	a1, 152(sp)
ffffffff802068dc: 0a 65                	ld	a0, 128(sp)
ffffffff802068de: 97 00 00 00          	auipc	ra, 0
ffffffff802068e2: e7 80 40 0f          	jalr	244(ra)
ffffffff802068e6: aa 85                	add	a1, zero, a0
ffffffff802068e8: 2a f2                	sd	a0, 288(sp)
ffffffff802068ea: ae ec                	sd	a1, 88(sp)
ffffffff802068ec: 09 a0                	j	2
;         copy_nonoverlapping(x, t, block_size);
ffffffff802068ee: 06 75                	ld	a0, 96(sp)
ffffffff802068f0: a6 75                	ld	a1, 104(sp)
ffffffff802068f2: 46 76                	ld	a2, 112(sp)
ffffffff802068f4: 97 00 00 00          	auipc	ra, 0
ffffffff802068f8: e7 80 60 57          	jalr	1398(ra)
ffffffff802068fc: 09 a0                	j	2
;         copy_nonoverlapping(y, x, block_size);
ffffffff802068fe: 66 65                	ld	a0, 88(sp)
ffffffff80206900: 86 75                	ld	a1, 96(sp)
ffffffff80206902: 46 76                	ld	a2, 112(sp)
ffffffff80206904: 97 00 00 00          	auipc	ra, 0
ffffffff80206908: e7 80 60 56          	jalr	1382(ra)
ffffffff8020690c: 09 a0                	j	2
;         copy_nonoverlapping(t, y, block_size);
ffffffff8020690e: 26 75                	ld	a0, 104(sp)
ffffffff80206910: e6 65                	ld	a1, 88(sp)
ffffffff80206912: 46 76                	ld	a2, 112(sp)
ffffffff80206914: 97 00 00 00          	auipc	ra, 0
ffffffff80206918: e7 80 60 55          	jalr	1366(ra)
ffffffff8020691c: 09 a0                	j	2
;         i += block_size;
ffffffff8020691e: 6a 65                	ld	a0, 152(sp)
ffffffff80206920: c6 75                	ld	a1, 112(sp)
ffffffff80206922: 2e 95                	add	a0, a0, a1
ffffffff80206924: 2a ed                	sd	a0, 152(sp)
;     while i + block_size <= len {
ffffffff80206926: 9d bf                	j	-138
;     if i < len {
ffffffff80206928: bd a8                	j	126
;         let mut t = mem::MaybeUninit::<UnalignedBlock>::uninit();
ffffffff8020692a: 09 a0                	j	2
;         let rem = len - i;
ffffffff8020692c: 6a 65                	ld	a0, 152(sp)
ffffffff8020692e: aa 65                	ld	a1, 136(sp)
ffffffff80206930: 33 85 a5 40          	sub	a0, a1, a0
ffffffff80206934: 2a f6                	sd	a0, 296(sp)
ffffffff80206936: 90 09                	addi	a2, sp, 208
ffffffff80206938: b2 ea                	sd	a2, 336(sp)
ffffffff8020693a: b2 ee                	sd	a2, 344(sp)
;         let t = t.as_mut_ptr() as *mut u8;
ffffffff8020693c: aa e8                	sd	a0, 80(sp)
ffffffff8020693e: b2 e4                	sd	a2, 72(sp)
ffffffff80206940: 09 a0                	j	2
ffffffff80206942: 26 65                	ld	a0, 72(sp)
ffffffff80206944: a6 65                	ld	a1, 72(sp)
ffffffff80206946: 2e fa                	sd	a1, 304(sp)
;         let x = x.add(i);
ffffffff80206948: ea 65                	ld	a1, 152(sp)
ffffffff8020694a: 66 76                	ld	a2, 120(sp)
ffffffff8020694c: aa e0                	sd	a0, 64(sp)
ffffffff8020694e: 32 85                	add	a0, zero, a2
ffffffff80206950: 97 00 00 00          	auipc	ra, 0
ffffffff80206954: e7 80 20 08          	jalr	130(ra)
ffffffff80206958: aa 85                	add	a1, zero, a0
ffffffff8020695a: 2a fe                	sd	a0, 312(sp)
ffffffff8020695c: 2e fc                	sd	a1, 56(sp)
ffffffff8020695e: 09 a0                	j	2
;         let y = y.add(i);
ffffffff80206960: ea 65                	ld	a1, 152(sp)
ffffffff80206962: 0a 65                	ld	a0, 128(sp)
ffffffff80206964: 97 00 00 00          	auipc	ra, 0
ffffffff80206968: e7 80 e0 06          	jalr	110(ra)
ffffffff8020696c: aa 85                	add	a1, zero, a0
ffffffff8020696e: aa e2                	sd	a0, 320(sp)
ffffffff80206970: 2e f8                	sd	a1, 48(sp)
ffffffff80206972: 09 a0                	j	2
;         copy_nonoverlapping(x, t, rem);
ffffffff80206974: 62 75                	ld	a0, 56(sp)
ffffffff80206976: 86 65                	ld	a1, 64(sp)
ffffffff80206978: 46 66                	ld	a2, 80(sp)
ffffffff8020697a: 97 00 00 00          	auipc	ra, 0
ffffffff8020697e: e7 80 00 4f          	jalr	1264(ra)
ffffffff80206982: 09 a0                	j	2
;         copy_nonoverlapping(y, x, rem);
ffffffff80206984: 42 75                	ld	a0, 48(sp)
ffffffff80206986: e2 75                	ld	a1, 56(sp)
ffffffff80206988: 46 66                	ld	a2, 80(sp)
ffffffff8020698a: 97 00 00 00          	auipc	ra, 0
ffffffff8020698e: e7 80 00 4e          	jalr	1248(ra)
ffffffff80206992: 09 a0                	j	2
;         copy_nonoverlapping(t, y, rem);
ffffffff80206994: 06 65                	ld	a0, 64(sp)
ffffffff80206996: c2 75                	ld	a1, 48(sp)
ffffffff80206998: 46 66                	ld	a2, 80(sp)
ffffffff8020699a: 97 00 00 00          	auipc	ra, 0
ffffffff8020699e: e7 80 00 4d          	jalr	1232(ra)
ffffffff802069a2: 09 a0                	j	2
;     if i < len {
ffffffff802069a4: 09 a0                	j	2
; }
ffffffff802069a6: 13 01 04 e8          	addi	sp, s0, -384
ffffffff802069aa: 56 74                	ld	s0, 368(sp)
ffffffff802069ac: f6 70                	ld	ra, 376(sp)
ffffffff802069ae: 19 61                	addi	sp, sp, 384
ffffffff802069b0: 82 80                	ret

ffffffff802069b2 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$11write_bytes17h8b07b844930f587aE:
;     pub unsafe fn write_bytes(self, val: u8, count: usize)
ffffffff802069b2: 79 71                	addi	sp, sp, -48
ffffffff802069b4: 06 f4                	sd	ra, 40(sp)
ffffffff802069b6: ae 86                	add	a3, zero, a1
ffffffff802069b8: 2a e8                	sd	a0, 16(sp)
ffffffff802069ba: a3 0f b1 00          	sb	a1, 31(sp)
ffffffff802069be: 32 f0                	sd	a2, 32(sp)
;         write_bytes(self, val, count)
ffffffff802069c0: 36 e4                	sd	a3, 8(sp)
ffffffff802069c2: 97 00 00 00          	auipc	ra, 0
ffffffff802069c6: e7 80 40 44          	jalr	1092(ra)
ffffffff802069ca: 09 a0                	j	2
;     }
ffffffff802069cc: a2 70                	ld	ra, 40(sp)
ffffffff802069ce: 45 61                	addi	sp, sp, 48
ffffffff802069d0: 82 80                	ret

ffffffff802069d2 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h21bc59e31a797d20E:
;     pub const unsafe fn add(self, count: usize) -> Self
ffffffff802069d2: 01 11                	addi	sp, sp, -32
ffffffff802069d4: 06 ec                	sd	ra, 24(sp)
ffffffff802069d6: 2a e4                	sd	a0, 8(sp)
ffffffff802069d8: 2e e8                	sd	a1, 16(sp)
;         self.offset(count as isize)
ffffffff802069da: 97 00 00 00          	auipc	ra, 0
ffffffff802069de: e7 80 00 03          	jalr	48(ra)
ffffffff802069e2: 2a e0                	sd	a0, 0(sp)
ffffffff802069e4: 09 a0                	j	2
;     }
ffffffff802069e6: 02 65                	ld	a0, 0(sp)
ffffffff802069e8: e2 60                	ld	ra, 24(sp)
ffffffff802069ea: 05 61                	addi	sp, sp, 32
ffffffff802069ec: 82 80                	ret

ffffffff802069ee _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hee9606225ef8cd4bE:
;     pub const unsafe fn add(self, count: usize) -> Self
ffffffff802069ee: 01 11                	addi	sp, sp, -32
ffffffff802069f0: 06 ec                	sd	ra, 24(sp)
ffffffff802069f2: 2a e4                	sd	a0, 8(sp)
ffffffff802069f4: 2e e8                	sd	a1, 16(sp)
;         self.offset(count as isize)
ffffffff802069f6: 97 00 00 00          	auipc	ra, 0
ffffffff802069fa: e7 80 80 02          	jalr	40(ra)
ffffffff802069fe: 2a e0                	sd	a0, 0(sp)
ffffffff80206a00: 09 a0                	j	2
;     }
ffffffff80206a02: 02 65                	ld	a0, 0(sp)
ffffffff80206a04: e2 60                	ld	ra, 24(sp)
ffffffff80206a06: 05 61                	addi	sp, sp, 32
ffffffff80206a08: 82 80                	ret

ffffffff80206a0a _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h380020971492dfa0E:
;     pub const unsafe fn offset(self, count: isize) -> *mut T
ffffffff80206a0a: 01 11                	addi	sp, sp, -32
ffffffff80206a0c: 2a e4                	sd	a0, 8(sp)
ffffffff80206a0e: 2e e8                	sd	a1, 16(sp)
;         intrinsics::offset(self, count) as *mut T
ffffffff80206a10: 2e 95                	add	a0, a0, a1
ffffffff80206a12: 2a ec                	sd	a0, 24(sp)
ffffffff80206a14: 2a e0                	sd	a0, 0(sp)
ffffffff80206a16: 09 a0                	j	2
;     }
ffffffff80206a18: 02 65                	ld	a0, 0(sp)
ffffffff80206a1a: 05 61                	addi	sp, sp, 32
ffffffff80206a1c: 82 80                	ret

ffffffff80206a1e _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h82e65086746d02a1E:
;     pub const unsafe fn offset(self, count: isize) -> *mut T
ffffffff80206a1e: 01 11                	addi	sp, sp, -32
ffffffff80206a20: 2a e4                	sd	a0, 8(sp)
ffffffff80206a22: 2e e8                	sd	a1, 16(sp)
;         intrinsics::offset(self, count) as *mut T
ffffffff80206a24: 92 05                	slli	a1, a1, 4
ffffffff80206a26: 2e 95                	add	a0, a0, a1
ffffffff80206a28: 2a ec                	sd	a0, 24(sp)
ffffffff80206a2a: 2a e0                	sd	a0, 0(sp)
ffffffff80206a2c: 09 a0                	j	2
;     }
ffffffff80206a2e: 02 65                	ld	a0, 0(sp)
ffffffff80206a30: 05 61                	addi	sp, sp, 32
ffffffff80206a32: 82 80                	ret

ffffffff80206a34 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h38ecf7ec301ad6fcE:
;     pub fn is_null(self) -> bool {
ffffffff80206a34: 41 11                	addi	sp, sp, -16
ffffffff80206a36: 2a e4                	sd	a0, 8(sp)
;         (self as *mut u8) == null_mut()
ffffffff80206a38: 2a e0                	sd	a0, 0(sp)
ffffffff80206a3a: 09 a0                	j	2
ffffffff80206a3c: 02 65                	ld	a0, 0(sp)
ffffffff80206a3e: 13 35 15 00          	seqz	a0, a0
;     }
ffffffff80206a42: 41 01                	addi	sp, sp, 16
ffffffff80206a44: 82 80                	ret

ffffffff80206a46 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h5f703552ddc38912E:
;     pub fn is_null(self) -> bool {
ffffffff80206a46: 41 11                	addi	sp, sp, -16
ffffffff80206a48: 2a e4                	sd	a0, 8(sp)
;         (self as *mut u8) == null_mut()
ffffffff80206a4a: 2a e0                	sd	a0, 0(sp)
ffffffff80206a4c: 09 a0                	j	2
ffffffff80206a4e: 02 65                	ld	a0, 0(sp)
ffffffff80206a50: 13 35 15 00          	seqz	a0, a0
;     }
ffffffff80206a54: 41 01                	addi	sp, sp, 16
ffffffff80206a56: 82 80                	ret

ffffffff80206a58 _ZN4core3num12NonZeroUsize13new_unchecked17h86134af32ea825b7E:
;                 pub const unsafe fn new_unchecked(n: $Int) -> Self {
ffffffff80206a58: 41 11                	addi	sp, sp, -16
ffffffff80206a5a: 2a e4                	sd	a0, 8(sp)
;                     Self(n)
ffffffff80206a5c: 2a e0                	sd	a0, 0(sp)
;                 }
ffffffff80206a5e: 41 01                	addi	sp, sp, 16
ffffffff80206a60: 82 80                	ret

ffffffff80206a62 _ZN4core3num12NonZeroUsize3get17h2d5dc223bf37a97eE:
;                 pub const fn get(self) -> $Int {
ffffffff80206a62: 41 11                	addi	sp, sp, -16
ffffffff80206a64: 2a e4                	sd	a0, 8(sp)
;                 }
ffffffff80206a66: 41 01                	addi	sp, sp, 16
ffffffff80206a68: 82 80                	ret

ffffffff80206a6a _ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17h377f965d55650bedE:
;             pub const fn count_ones(self) -> u32 {
ffffffff80206a6a: 01 11                	addi	sp, sp, -32
ffffffff80206a6c: 2a e8                	sd	a0, 16(sp)
;                 intrinsics::ctpop(self as $ActualT) as u32
ffffffff80206a6e: 93 55 15 00          	srli	a1, a0, 1
ffffffff80206a72: 37 56 55 05          	lui	a2, 21845
ffffffff80206a76: 1b 06 56 55          	addiw	a2, a2, 1365
ffffffff80206a7a: 32 06                	slli	a2, a2, 12
ffffffff80206a7c: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80206a80: 32 06                	slli	a2, a2, 12
ffffffff80206a82: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80206a86: 32 06                	slli	a2, a2, 12
ffffffff80206a88: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80206a8c: f1 8d                	and	a1, a1, a2
ffffffff80206a8e: 0d 8d                	sub	a0, a0, a1
ffffffff80206a90: b7 35 33 03          	lui	a1, 13107
ffffffff80206a94: 9b 85 35 33          	addiw	a1, a1, 819
ffffffff80206a98: b2 05                	slli	a1, a1, 12
ffffffff80206a9a: 93 85 35 33          	addi	a1, a1, 819
ffffffff80206a9e: b2 05                	slli	a1, a1, 12
ffffffff80206aa0: 93 85 35 33          	addi	a1, a1, 819
ffffffff80206aa4: b2 05                	slli	a1, a1, 12
ffffffff80206aa6: 93 85 35 33          	addi	a1, a1, 819
ffffffff80206aaa: 33 76 b5 00          	and	a2, a0, a1
ffffffff80206aae: 09 81                	srli	a0, a0, 2
ffffffff80206ab0: 6d 8d                	and	a0, a0, a1
ffffffff80206ab2: 32 95                	add	a0, a0, a2
ffffffff80206ab4: 93 55 45 00          	srli	a1, a0, 4
ffffffff80206ab8: 2e 95                	add	a0, a0, a1
ffffffff80206aba: b7 f5 f0 00          	lui	a1, 3855
ffffffff80206abe: 9b 85 15 0f          	addiw	a1, a1, 241
ffffffff80206ac2: b2 05                	slli	a1, a1, 12
ffffffff80206ac4: 93 85 f5 f0          	addi	a1, a1, -241
ffffffff80206ac8: b2 05                	slli	a1, a1, 12
ffffffff80206aca: 93 85 15 0f          	addi	a1, a1, 241
ffffffff80206ace: b2 05                	slli	a1, a1, 12
ffffffff80206ad0: 93 85 f5 f0          	addi	a1, a1, -241
ffffffff80206ad4: 6d 8d                	and	a0, a0, a1
ffffffff80206ad6: b7 05 01 01          	lui	a1, 4112
ffffffff80206ada: 9b 85 15 10          	addiw	a1, a1, 257
ffffffff80206ade: c2 05                	slli	a1, a1, 16
ffffffff80206ae0: 93 85 15 10          	addi	a1, a1, 257
ffffffff80206ae4: c2 05                	slli	a1, a1, 16
ffffffff80206ae6: 93 85 15 10          	addi	a1, a1, 257
ffffffff80206aea: 33 05 b5 02          	<unknown>
ffffffff80206aee: 61 91                	srli	a0, a0, 56
ffffffff80206af0: 2a ec                	sd	a0, 24(sp)
ffffffff80206af2: 2a e4                	sd	a0, 8(sp)
ffffffff80206af4: 09 a0                	j	2
;             }
ffffffff80206af6: 22 65                	ld	a0, 8(sp)
ffffffff80206af8: 05 61                	addi	sp, sp, 32
ffffffff80206afa: 82 80                	ret

ffffffff80206afc _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h00d4e4521365eef4E:
;             pub const fn checked_add(self, rhs: Self) -> Option<Self> {
ffffffff80206afc: 5d 71                	addi	sp, sp, -80
ffffffff80206afe: 86 e4                	sd	ra, 72(sp)
ffffffff80206b00: 2a f4                	sd	a0, 40(sp)
ffffffff80206b02: 2e f8                	sd	a1, 48(sp)
;                 let (a, b) = self.overflowing_add(rhs);
ffffffff80206b04: 97 00 00 00          	auipc	ra, 0
ffffffff80206b08: e7 80 00 0e          	jalr	224(ra)
ffffffff80206b0c: 2a e8                	sd	a0, 16(sp)
ffffffff80206b0e: 2e e4                	sd	a1, 8(sp)
ffffffff80206b10: 09 a0                	j	2
ffffffff80206b12: 42 65                	ld	a0, 16(sp)
ffffffff80206b14: 2a fc                	sd	a0, 56(sp)
ffffffff80206b16: a2 65                	ld	a1, 8(sp)
ffffffff80206b18: 13 f6 15 00          	andi	a2, a1, 1
ffffffff80206b1c: a3 03 c1 04          	sb	a2, 71(sp)
;                 if b {None} else {Some(a)}
ffffffff80206b20: 19 e6                	bnez	a2, 14
ffffffff80206b22: 09 a0                	j	2
ffffffff80206b24: 42 65                	ld	a0, 16(sp)
ffffffff80206b26: 2a f0                	sd	a0, 32(sp)
ffffffff80206b28: 85 45                	addi	a1, zero, 1
ffffffff80206b2a: 2e ec                	sd	a1, 24(sp)
ffffffff80206b2c: 21 a0                	j	8
ffffffff80206b2e: 01 45                	mv	a0, zero
ffffffff80206b30: 2a ec                	sd	a0, 24(sp)
ffffffff80206b32: 09 a0                	j	2
;             }
ffffffff80206b34: 62 65                	ld	a0, 24(sp)
ffffffff80206b36: 82 75                	ld	a1, 32(sp)
ffffffff80206b38: a6 60                	ld	ra, 72(sp)
ffffffff80206b3a: 61 61                	addi	sp, sp, 80
ffffffff80206b3c: 82 80                	ret

ffffffff80206b3e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h6b049066b15c843eE:
;             pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
ffffffff80206b3e: 5d 71                	addi	sp, sp, -80
ffffffff80206b40: 86 e4                	sd	ra, 72(sp)
ffffffff80206b42: 2a f4                	sd	a0, 40(sp)
ffffffff80206b44: 2e f8                	sd	a1, 48(sp)
;                 let (a, b) = self.overflowing_mul(rhs);
ffffffff80206b46: 97 00 00 00          	auipc	ra, 0
ffffffff80206b4a: e7 80 a0 0c          	jalr	202(ra)
ffffffff80206b4e: 2a e8                	sd	a0, 16(sp)
ffffffff80206b50: 2e e4                	sd	a1, 8(sp)
ffffffff80206b52: 09 a0                	j	2
ffffffff80206b54: 42 65                	ld	a0, 16(sp)
ffffffff80206b56: 2a fc                	sd	a0, 56(sp)
ffffffff80206b58: a2 65                	ld	a1, 8(sp)
ffffffff80206b5a: 13 f6 15 00          	andi	a2, a1, 1
ffffffff80206b5e: a3 03 c1 04          	sb	a2, 71(sp)
;                 if b {None} else {Some(a)}
ffffffff80206b62: 19 e6                	bnez	a2, 14
ffffffff80206b64: 09 a0                	j	2
ffffffff80206b66: 42 65                	ld	a0, 16(sp)
ffffffff80206b68: 2a f0                	sd	a0, 32(sp)
ffffffff80206b6a: 85 45                	addi	a1, zero, 1
ffffffff80206b6c: 2e ec                	sd	a1, 24(sp)
ffffffff80206b6e: 21 a0                	j	8
ffffffff80206b70: 01 45                	mv	a0, zero
ffffffff80206b72: 2a ec                	sd	a0, 24(sp)
ffffffff80206b74: 09 a0                	j	2
;             }
ffffffff80206b76: 62 65                	ld	a0, 24(sp)
ffffffff80206b78: 82 75                	ld	a1, 32(sp)
ffffffff80206b7a: a6 60                	ld	ra, 72(sp)
ffffffff80206b7c: 61 61                	addi	sp, sp, 80
ffffffff80206b7e: 82 80                	ret

ffffffff80206b80 _ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_add17h3fb0671d42c58a2bE:
;             pub const fn wrapping_add(self, rhs: Self) -> Self {
ffffffff80206b80: 01 11                	addi	sp, sp, -32
ffffffff80206b82: 2a e4                	sd	a0, 8(sp)
ffffffff80206b84: 2e e8                	sd	a1, 16(sp)
;                 intrinsics::wrapping_add(self, rhs)
ffffffff80206b86: 2e 95                	add	a0, a0, a1
ffffffff80206b88: 2a ec                	sd	a0, 24(sp)
ffffffff80206b8a: 2a e0                	sd	a0, 0(sp)
ffffffff80206b8c: 09 a0                	j	2
;             }
ffffffff80206b8e: 02 65                	ld	a0, 0(sp)
ffffffff80206b90: 05 61                	addi	sp, sp, 32
ffffffff80206b92: 82 80                	ret

ffffffff80206b94 _ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h06411422a189df03E:
;             pub const fn wrapping_sub(self, rhs: Self) -> Self {
ffffffff80206b94: 01 11                	addi	sp, sp, -32
ffffffff80206b96: 2a e4                	sd	a0, 8(sp)
ffffffff80206b98: 2e e8                	sd	a1, 16(sp)
;                 intrinsics::wrapping_sub(self, rhs)
ffffffff80206b9a: 0d 8d                	sub	a0, a0, a1
ffffffff80206b9c: 2a ec                	sd	a0, 24(sp)
ffffffff80206b9e: 2a e0                	sd	a0, 0(sp)
ffffffff80206ba0: 09 a0                	j	2
;             }
ffffffff80206ba2: 02 65                	ld	a0, 0(sp)
ffffffff80206ba4: 05 61                	addi	sp, sp, 32
ffffffff80206ba6: 82 80                	ret

ffffffff80206ba8 _ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17h861d11cd716d1ec3E:
;             pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
ffffffff80206ba8: 01 11                	addi	sp, sp, -32
ffffffff80206baa: 2a e4                	sd	a0, 8(sp)
ffffffff80206bac: 2e e8                	sd	a1, 16(sp)
;                 intrinsics::unchecked_add(self, rhs)
ffffffff80206bae: 2e 95                	add	a0, a0, a1
ffffffff80206bb0: 2a ec                	sd	a0, 24(sp)
ffffffff80206bb2: 2a e0                	sd	a0, 0(sp)
ffffffff80206bb4: 09 a0                	j	2
;             }
ffffffff80206bb6: 02 65                	ld	a0, 0(sp)
ffffffff80206bb8: 05 61                	addi	sp, sp, 32
ffffffff80206bba: 82 80                	ret

ffffffff80206bbc _ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17hd3d5f030b66ee184E:
;             pub const fn is_power_of_two(self) -> bool {
ffffffff80206bbc: 01 11                	addi	sp, sp, -32
ffffffff80206bbe: 06 ec                	sd	ra, 24(sp)
ffffffff80206bc0: 2a e8                	sd	a0, 16(sp)
;                 self.count_ones() == 1
ffffffff80206bc2: 97 00 00 00          	auipc	ra, 0
ffffffff80206bc6: e7 80 80 ea          	jalr	-344(ra)
ffffffff80206bca: 2a e4                	sd	a0, 8(sp)
ffffffff80206bcc: 09 a0                	j	2
ffffffff80206bce: 22 65                	ld	a0, 8(sp)
ffffffff80206bd0: 93 15 05 02          	slli	a1, a0, 32
ffffffff80206bd4: 81 91                	srli	a1, a1, 32
ffffffff80206bd6: 93 c5 15 00          	xori	a1, a1, 1
ffffffff80206bda: 13 b5 15 00          	seqz	a0, a1
;             }
ffffffff80206bde: e2 60                	ld	ra, 24(sp)
ffffffff80206be0: 05 61                	addi	sp, sp, 32
ffffffff80206be2: 82 80                	ret

ffffffff80206be4 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h6fae7a768f58f970E:
;             pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
ffffffff80206be4: 5d 71                	addi	sp, sp, -80
ffffffff80206be6: 2a f0                	sd	a0, 32(sp)
ffffffff80206be8: 2e f4                	sd	a1, 40(sp)
;                 let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
ffffffff80206bea: aa 95                	add	a1, a1, a0
ffffffff80206bec: 33 b5 a5 00          	sltu	a0, a1, a0
ffffffff80206bf0: 2e f8                	sd	a1, 48(sp)
ffffffff80206bf2: 23 0c a1 02          	sb	a0, 56(sp)
ffffffff80206bf6: 2e e4                	sd	a1, 8(sp)
ffffffff80206bf8: 2a e0                	sd	a0, 0(sp)
ffffffff80206bfa: 09 a0                	j	2
ffffffff80206bfc: 22 65                	ld	a0, 8(sp)
ffffffff80206bfe: aa e0                	sd	a0, 64(sp)
ffffffff80206c00: 82 65                	ld	a1, 0(sp)
ffffffff80206c02: a3 07 b1 04          	sb	a1, 79(sp)
;                 (a as Self, b)
ffffffff80206c06: 2a e8                	sd	a0, 16(sp)
ffffffff80206c08: 23 0c b1 00          	sb	a1, 24(sp)
;             }
ffffffff80206c0c: 61 61                	addi	sp, sp, 80
ffffffff80206c0e: 82 80                	ret

ffffffff80206c10 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h79c0907cbd19ea09E:
;         pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
ffffffff80206c10: 5d 71                	addi	sp, sp, -80
ffffffff80206c12: 2a f0                	sd	a0, 32(sp)
ffffffff80206c14: 2e f4                	sd	a1, 40(sp)
;             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
ffffffff80206c16: 33 36 b5 02          	<unknown>
ffffffff80206c1a: 33 36 c0 00          	snez	a2, a2
ffffffff80206c1e: 33 05 b5 02          	<unknown>
ffffffff80206c22: 2a f8                	sd	a0, 48(sp)
ffffffff80206c24: 23 0c c1 02          	sb	a2, 56(sp)
ffffffff80206c28: 32 e4                	sd	a2, 8(sp)
ffffffff80206c2a: 2a e0                	sd	a0, 0(sp)
ffffffff80206c2c: 09 a0                	j	2
ffffffff80206c2e: 02 65                	ld	a0, 0(sp)
ffffffff80206c30: aa e0                	sd	a0, 64(sp)
ffffffff80206c32: a2 65                	ld	a1, 8(sp)
ffffffff80206c34: a3 07 b1 04          	sb	a1, 79(sp)
;             (a as Self, b)
ffffffff80206c38: 2a e8                	sd	a0, 16(sp)
ffffffff80206c3a: 23 0c b1 00          	sb	a1, 24(sp)
;         }
ffffffff80206c3e: 61 61                	addi	sp, sp, 80
ffffffff80206c40: 82 80                	ret

ffffffff80206c42 _ZN4core5alloc6layout10size_align17he7a65e2497c8fea1E:
; const fn size_align<T>() -> (usize, usize) {
ffffffff80206c42: 79 71                	addi	sp, sp, -48
ffffffff80206c44: 41 45                	addi	a0, zero, 16
;     intrinsics::size_of::<T>()
ffffffff80206c46: 2a f0                	sd	a0, 32(sp)
;     (mem::size_of::<T>(), mem::align_of::<T>())
ffffffff80206c48: 2a e4                	sd	a0, 8(sp)
ffffffff80206c4a: 09 a0                	j	2
ffffffff80206c4c: 21 45                	addi	a0, zero, 8
;     intrinsics::min_align_of::<T>()
ffffffff80206c4e: 2a f4                	sd	a0, 40(sp)
;     (mem::size_of::<T>(), mem::align_of::<T>())
ffffffff80206c50: 2a e0                	sd	a0, 0(sp)
ffffffff80206c52: 09 a0                	j	2
ffffffff80206c54: 22 65                	ld	a0, 8(sp)
ffffffff80206c56: 2a e8                	sd	a0, 16(sp)
ffffffff80206c58: 82 65                	ld	a1, 0(sp)
ffffffff80206c5a: 2e ec                	sd	a1, 24(sp)
; }
ffffffff80206c5c: 45 61                	addi	sp, sp, 48
ffffffff80206c5e: 82 80                	ret

ffffffff80206c60 _ZN4core5alloc6layout6Layout3new17hd71ecd3c71b53a5aE:
;     pub const fn new<T>() -> Self {
ffffffff80206c60: 39 71                	addi	sp, sp, -64
;         let (size, align) = size_align::<T>();
ffffffff80206c62: 06 fc                	sd	ra, 56(sp)
ffffffff80206c64: 97 00 00 00          	auipc	ra, 0
ffffffff80206c68: e7 80 e0 fd          	jalr	-34(ra)
ffffffff80206c6c: 2a f0                	sd	a0, 32(sp)
ffffffff80206c6e: 2e ec                	sd	a1, 24(sp)
ffffffff80206c70: 09 a0                	j	2
ffffffff80206c72: 02 75                	ld	a0, 32(sp)
ffffffff80206c74: 2a f4                	sd	a0, 40(sp)
ffffffff80206c76: e2 65                	ld	a1, 24(sp)
ffffffff80206c78: 2e f8                	sd	a1, 48(sp)
;         unsafe { Layout::from_size_align_unchecked(size, align) }
ffffffff80206c7a: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80206c7e: e7 80 00 fa          	jalr	-96(ra)
ffffffff80206c82: 2a e8                	sd	a0, 16(sp)
ffffffff80206c84: 2e e4                	sd	a1, 8(sp)
ffffffff80206c86: 09 a0                	j	2
;     }
ffffffff80206c88: 42 65                	ld	a0, 16(sp)
ffffffff80206c8a: a2 65                	ld	a1, 8(sp)
ffffffff80206c8c: e2 70                	ld	ra, 56(sp)
ffffffff80206c8e: 21 61                	addi	sp, sp, 64
ffffffff80206c90: 82 80                	ret

ffffffff80206c92 _ZN4core5alloc6layout6Layout5array17hb32f6b58dad44d9cE:
;     pub fn array<T>(n: usize) -> Result<Self, LayoutErr> {
ffffffff80206c92: 55 71                	addi	sp, sp, -208
ffffffff80206c94: 86 e5                	sd	ra, 200(sp)
ffffffff80206c96: 2a f9                	sd	a0, 176(sp)
;         let (layout, offset) = Layout::new::<T>().repeat(n)?;
ffffffff80206c98: 2a ec                	sd	a0, 24(sp)
ffffffff80206c9a: 97 00 00 00          	auipc	ra, 0
ffffffff80206c9e: e7 80 60 fc          	jalr	-58(ra)
ffffffff80206ca2: 2a e5                	sd	a0, 136(sp)
ffffffff80206ca4: 2e e9                	sd	a1, 144(sp)
ffffffff80206ca6: 09 a0                	j	2
ffffffff80206ca8: 88 18                	addi	a0, sp, 112
ffffffff80206caa: 2c 01                	addi	a1, sp, 136
ffffffff80206cac: 62 66                	ld	a2, 24(sp)
ffffffff80206cae: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80206cb2: e7 80 80 fb          	jalr	-72(ra)
ffffffff80206cb6: 09 a0                	j	2
ffffffff80206cb8: a8 08                	addi	a0, sp, 88
ffffffff80206cba: 8c 18                	addi	a1, sp, 112
ffffffff80206cbc: 97 00 00 00          	auipc	ra, 0
ffffffff80206cc0: e7 80 c0 5d          	jalr	1500(ra)
ffffffff80206cc4: 09 a0                	j	2
ffffffff80206cc6: 06 75                	ld	a0, 96(sp)
ffffffff80206cc8: 93 35 15 00          	seqz	a1, a0
ffffffff80206ccc: 01 46                	mv	a2, zero
ffffffff80206cce: 63 14 c5 00          	bne	a0, a2, 8
ffffffff80206cd2: 09 a0                	j	2
ffffffff80206cd4: 35 a0                	j	44
ffffffff80206cd6: 26 75                	ld	a0, 104(sp)
ffffffff80206cd8: 2a f5                	sd	a0, 168(sp)
ffffffff80206cda: 86 75                	ld	a1, 96(sp)
ffffffff80206cdc: 2e f1                	sd	a1, 160(sp)
ffffffff80206cde: 66 66                	ld	a2, 88(sp)
ffffffff80206ce0: 32 ed                	sd	a2, 152(sp)
ffffffff80206ce2: b2 e0                	sd	a2, 64(sp)
ffffffff80206ce4: ae e4                	sd	a1, 72(sp)
ffffffff80206ce6: aa e8                	sd	a0, 80(sp)
ffffffff80206ce8: 32 f8                	sd	a2, 48(sp)
ffffffff80206cea: 2e fc                	sd	a1, 56(sp)
ffffffff80206cec: aa e1                	sd	a0, 192(sp)
ffffffff80206cee: 08 18                	addi	a0, sp, 48
;         Ok(layout.pad_to_align())
ffffffff80206cf0: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80206cf4: e7 80 20 dd          	jalr	-558(ra)
ffffffff80206cf8: 2a e8                	sd	a0, 16(sp)
ffffffff80206cfa: 2e e4                	sd	a1, 8(sp)
ffffffff80206cfc: 25 a0                	j	40
;         let (layout, offset) = Layout::new::<T>().repeat(n)?;
ffffffff80206cfe: 00 00                	unimp	
ffffffff80206d00: 97 00 00 00          	auipc	ra, 0
ffffffff80206d04: e7 80 e0 02          	jalr	46(ra)
ffffffff80206d08: 31 a0                	j	12
;     }
ffffffff80206d0a: 02 75                	ld	a0, 32(sp)
ffffffff80206d0c: a2 75                	ld	a1, 40(sp)
ffffffff80206d0e: ae 60                	ld	ra, 200(sp)
ffffffff80206d10: 69 61                	addi	sp, sp, 208
ffffffff80206d12: 82 80                	ret
;         let (layout, offset) = Layout::new::<T>().repeat(n)?;
ffffffff80206d14: 97 00 00 00          	auipc	ra, 0
ffffffff80206d18: e7 80 00 50          	jalr	1280(ra)
ffffffff80206d1c: 2a f0                	sd	a0, 32(sp)
ffffffff80206d1e: 2e f4                	sd	a1, 40(sp)
ffffffff80206d20: 09 a0                	j	2
ffffffff80206d22: e5 b7                	j	-24
;         Ok(layout.pad_to_align())
ffffffff80206d24: 42 65                	ld	a0, 16(sp)
ffffffff80206d26: 2a f0                	sd	a0, 32(sp)
ffffffff80206d28: a2 65                	ld	a1, 8(sp)
ffffffff80206d2a: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff80206d2c: f9 bf                	j	-34

ffffffff80206d2e _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h3cba0b4195fc4cfeE:
;     fn from(t: T) -> T {
ffffffff80206d2e: 41 11                	addi	sp, sp, -16
;     }
ffffffff80206d30: 41 01                	addi	sp, sp, 16
ffffffff80206d32: 82 80                	ret

ffffffff80206d34 _ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17ha6f1702130e74776E:
;     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
ffffffff80206d34: 01 11                	addi	sp, sp, -32
ffffffff80206d36: 2a ec                	sd	a0, 24(sp)
;         Unique { pointer: ptr as _, _marker: PhantomData }
ffffffff80206d38: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80206d3a: 05 61                	addi	sp, sp, 32
ffffffff80206d3c: 82 80                	ret

ffffffff80206d3e _ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hb59ad3b713e37f21E:
;     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
ffffffff80206d3e: 01 11                	addi	sp, sp, -32
ffffffff80206d40: 2a ec                	sd	a0, 24(sp)
;         Unique { pointer: ptr as _, _marker: PhantomData }
ffffffff80206d42: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80206d44: 05 61                	addi	sp, sp, 32
ffffffff80206d46: 82 80                	ret

ffffffff80206d48 _ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h515e34a05271947aE:
;     pub const fn cast<U>(self) -> Unique<U> {
ffffffff80206d48: 01 11                	addi	sp, sp, -32
ffffffff80206d4a: 06 ec                	sd	ra, 24(sp)
ffffffff80206d4c: 2a e8                	sd	a0, 16(sp)
;         unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
ffffffff80206d4e: 97 00 00 00          	auipc	ra, 0
ffffffff80206d52: e7 80 20 02          	jalr	34(ra)
ffffffff80206d56: 2a e4                	sd	a0, 8(sp)
ffffffff80206d58: 09 a0                	j	2
ffffffff80206d5a: 22 65                	ld	a0, 8(sp)
ffffffff80206d5c: 97 00 00 00          	auipc	ra, 0
ffffffff80206d60: e7 80 20 fe          	jalr	-30(ra)
ffffffff80206d64: 2a e0                	sd	a0, 0(sp)
ffffffff80206d66: 09 a0                	j	2
;     }
ffffffff80206d68: 02 65                	ld	a0, 0(sp)
ffffffff80206d6a: e2 60                	ld	ra, 24(sp)
ffffffff80206d6c: 05 61                	addi	sp, sp, 32
ffffffff80206d6e: 82 80                	ret

ffffffff80206d70 _ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h887f2c0477df7f46E:
;     pub const fn as_ptr(self) -> *mut T {
ffffffff80206d70: 41 11                	addi	sp, sp, -16
ffffffff80206d72: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80206d74: 41 01                	addi	sp, sp, 16
ffffffff80206d76: 82 80                	ret

ffffffff80206d78 _ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17ha7d25afd2b89a8c8E:
;     pub const fn as_ptr(self) -> *mut T {
ffffffff80206d78: 41 11                	addi	sp, sp, -16
ffffffff80206d7a: 2a e0                	sd	a0, 0(sp)
ffffffff80206d7c: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff80206d7e: 41 01                	addi	sp, sp, 16
ffffffff80206d80: 82 80                	ret

ffffffff80206d82 _ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hfeaee6b478659d86E:
;     pub const fn as_ptr(self) -> *mut T {
ffffffff80206d82: 41 11                	addi	sp, sp, -16
ffffffff80206d84: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80206d86: 41 01                	addi	sp, sp, 16
ffffffff80206d88: 82 80                	ret

ffffffff80206d8a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h66aaad71d974bafeE:
;     fn into(self) -> U {
ffffffff80206d8a: 01 11                	addi	sp, sp, -32
ffffffff80206d8c: 06 ec                	sd	ra, 24(sp)
ffffffff80206d8e: 2a e8                	sd	a0, 16(sp)
;         U::from(self)
ffffffff80206d90: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80206d94: e7 80 60 38          	jalr	902(ra)
ffffffff80206d98: 2a e4                	sd	a0, 8(sp)
ffffffff80206d9a: 09 a0                	j	2
;     }
ffffffff80206d9c: 22 65                	ld	a0, 8(sp)
ffffffff80206d9e: e2 60                	ld	ra, 24(sp)
ffffffff80206da0: 05 61                	addi	sp, sp, 32
ffffffff80206da2: 82 80                	ret

ffffffff80206da4 _ZN4core5alloc9AllocInit11init_offset17h4eaadb3fc6e7adf8E:
;     pub unsafe fn init_offset(self, memory: MemoryBlock, offset: usize) {
ffffffff80206da4: 1d 71                	addi	sp, sp, -96
ffffffff80206da6: 86 ec                	sd	ra, 88(sp)
ffffffff80206da8: 2a 87                	add	a4, zero, a0
ffffffff80206daa: a3 0b a1 02          	sb	a0, 55(sp)
ffffffff80206dae: ae e0                	sd	a1, 64(sp)
ffffffff80206db0: b2 e4                	sd	a2, 72(sp)
ffffffff80206db2: b6 e8                	sd	a3, 80(sp)
;             AllocInit::Uninitialized => (),
ffffffff80206db4: aa 87                	add	a5, zero, a0
ffffffff80206db6: 01 48                	mv	a6, zero
ffffffff80206db8: 36 f4                	sd	a3, 40(sp)
ffffffff80206dba: 32 f0                	sd	a2, 32(sp)
ffffffff80206dbc: 2e ec                	sd	a1, 24(sp)
ffffffff80206dbe: 63 0b 05 01          	beq	a0, a6, 22
ffffffff80206dc2: 09 a0                	j	2
;                 memory.ptr.as_ptr().add(offset).write_bytes(0, memory.size - offset)
ffffffff80206dc4: 62 65                	ld	a0, 24(sp)
ffffffff80206dc6: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80206dca: e7 80 c0 3f          	jalr	1020(ra)
ffffffff80206dce: 2a e8                	sd	a0, 16(sp)
ffffffff80206dd0: 19 a0                	j	6
;         match self {
ffffffff80206dd2: 00 00                	unimp	
ffffffff80206dd4: 35 a0                	j	44
;                 memory.ptr.as_ptr().add(offset).write_bytes(0, memory.size - offset)
ffffffff80206dd6: 42 65                	ld	a0, 16(sp)
ffffffff80206dd8: a2 75                	ld	a1, 40(sp)
ffffffff80206dda: 97 00 00 00          	auipc	ra, 0
ffffffff80206dde: e7 80 80 bf          	jalr	-1032(ra)
ffffffff80206de2: 2a e4                	sd	a0, 8(sp)
ffffffff80206de4: 09 a0                	j	2
ffffffff80206de6: 02 75                	ld	a0, 32(sp)
ffffffff80206de8: a2 75                	ld	a1, 40(sp)
ffffffff80206dea: 33 06 b5 40          	sub	a2, a0, a1
ffffffff80206dee: 81 46                	mv	a3, zero
ffffffff80206df0: 22 65                	ld	a0, 8(sp)
ffffffff80206df2: b6 85                	add	a1, zero, a3
ffffffff80206df4: 97 00 00 00          	auipc	ra, 0
ffffffff80206df8: e7 80 e0 bb          	jalr	-1090(ra)
ffffffff80206dfc: 09 a0                	j	2
;         match self {
ffffffff80206dfe: 09 a0                	j	2
;     }
ffffffff80206e00: e6 60                	ld	ra, 88(sp)
ffffffff80206e02: 25 61                	addi	sp, sp, 96
ffffffff80206e04: 82 80                	ret

ffffffff80206e06 _ZN4core10intrinsics11write_bytes17h1a8678fe242857baE:
; pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
ffffffff80206e06: 79 71                	addi	sp, sp, -48
ffffffff80206e08: 06 f4                	sd	ra, 40(sp)
ffffffff80206e0a: ae 86                	add	a3, zero, a1
ffffffff80206e0c: 2a e8                	sd	a0, 16(sp)
ffffffff80206e0e: a3 0f b1 00          	sb	a1, 31(sp)
ffffffff80206e12: 32 f0                	sd	a2, 32(sp)
;     write_bytes(dst, val, count)
ffffffff80206e14: 36 e4                	sd	a3, 8(sp)
ffffffff80206e16: 97 50 00 00          	auipc	ra, 5
ffffffff80206e1a: e7 80 00 53          	jalr	1328(ra)
ffffffff80206e1e: 09 a0                	j	2
; }
ffffffff80206e20: a2 70                	ld	ra, 40(sp)
ffffffff80206e22: 45 61                	addi	sp, sp, 48
ffffffff80206e24: 82 80                	ret

ffffffff80206e26 _ZN4core10intrinsics19copy_nonoverlapping17h3f356564c2185a60E:
; pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
ffffffff80206e26: 79 71                	addi	sp, sp, -48
ffffffff80206e28: 06 f4                	sd	ra, 40(sp)
ffffffff80206e2a: 2a e8                	sd	a0, 16(sp)
ffffffff80206e2c: 2e ec                	sd	a1, 24(sp)
ffffffff80206e2e: 32 f0                	sd	a2, 32(sp)
;     copy_nonoverlapping(src, dst, count)
ffffffff80206e30: 12 06                	slli	a2, a2, 4
ffffffff80206e32: 2a e4                	sd	a0, 8(sp)
ffffffff80206e34: 2e 85                	add	a0, zero, a1
ffffffff80206e36: a2 65                	ld	a1, 8(sp)
ffffffff80206e38: 97 50 00 00          	auipc	ra, 5
ffffffff80206e3c: e7 80 80 4f          	jalr	1272(ra)
ffffffff80206e40: 09 a0                	j	2
; }
ffffffff80206e42: a2 70                	ld	ra, 40(sp)
ffffffff80206e44: 45 61                	addi	sp, sp, 48
ffffffff80206e46: 82 80                	ret

ffffffff80206e48 _ZN4core10intrinsics19copy_nonoverlapping17h409a6588d7934f7dE:
; pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
ffffffff80206e48: 79 71                	addi	sp, sp, -48
ffffffff80206e4a: 06 f4                	sd	ra, 40(sp)
ffffffff80206e4c: 2a e8                	sd	a0, 16(sp)
ffffffff80206e4e: 2e ec                	sd	a1, 24(sp)
ffffffff80206e50: 32 f0                	sd	a2, 32(sp)
;     copy_nonoverlapping(src, dst, count)
ffffffff80206e52: 0e 06                	slli	a2, a2, 3
ffffffff80206e54: 2a e4                	sd	a0, 8(sp)
ffffffff80206e56: 2e 85                	add	a0, zero, a1
ffffffff80206e58: a2 65                	ld	a1, 8(sp)
ffffffff80206e5a: 97 50 00 00          	auipc	ra, 5
ffffffff80206e5e: e7 80 60 4d          	jalr	1238(ra)
ffffffff80206e62: 09 a0                	j	2
; }
ffffffff80206e64: a2 70                	ld	ra, 40(sp)
ffffffff80206e66: 45 61                	addi	sp, sp, 48
ffffffff80206e68: 82 80                	ret

ffffffff80206e6a _ZN4core10intrinsics19copy_nonoverlapping17h8b7b1f889ae9d35aE:
; pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
ffffffff80206e6a: 79 71                	addi	sp, sp, -48
ffffffff80206e6c: 06 f4                	sd	ra, 40(sp)
ffffffff80206e6e: 2a e8                	sd	a0, 16(sp)
ffffffff80206e70: 2e ec                	sd	a1, 24(sp)
ffffffff80206e72: 32 f0                	sd	a2, 32(sp)
;     copy_nonoverlapping(src, dst, count)
ffffffff80206e74: 2a e4                	sd	a0, 8(sp)
ffffffff80206e76: 2e 85                	add	a0, zero, a1
ffffffff80206e78: a2 65                	ld	a1, 8(sp)
ffffffff80206e7a: 97 50 00 00          	auipc	ra, 5
ffffffff80206e7e: e7 80 60 4b          	jalr	1206(ra)
ffffffff80206e82: 09 a0                	j	2
; }
ffffffff80206e84: a2 70                	ld	ra, 40(sp)
ffffffff80206e86: 45 61                	addi	sp, sp, 48
ffffffff80206e88: 82 80                	ret

ffffffff80206e8a _ZN5alloc7raw_vec11alloc_guard17hc133907a3df61fb9E:
; fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
ffffffff80206e8a: 39 71                	addi	sp, sp, -64
ffffffff80206e8c: 2e f8                	sd	a1, 48(sp)
ffffffff80206e8e: 21 46                	addi	a2, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80206e90: 32 fc                	sd	a2, 56(sp)
;     if mem::size_of::<usize>() < 8 && alloc_size > isize::MAX as usize {
ffffffff80206e92: 2e e8                	sd	a1, 16(sp)
ffffffff80206e94: 2a e4                	sd	a0, 8(sp)
ffffffff80206e96: 32 e0                	sd	a2, 0(sp)
ffffffff80206e98: 1d a0                	j	38
ffffffff80206e9a: 05 45                	addi	a0, zero, 1
ffffffff80206e9c: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80206ea0: 11 a8                	j	20
ffffffff80206ea2: 01 45                	mv	a0, zero
ffffffff80206ea4: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80206ea8: 31 a0                	j	12
ffffffff80206eaa: 01 45                	mv	a0, zero
ffffffff80206eac: c2 65                	ld	a1, 16(sp)
ffffffff80206eae: e3 c6 a5 fe          	blt	a1, a0, -20
ffffffff80206eb2: c5 bf                	j	-16
ffffffff80206eb4: 03 45 f1 01          	lbu	a0, 31(sp)
ffffffff80206eb8: 05 89                	andi	a0, a0, 1
ffffffff80206eba: 19 e9                	bnez	a0, 22
ffffffff80206ebc: 31 a0                	j	12
ffffffff80206ebe: 21 45                	addi	a0, zero, 8
ffffffff80206ec0: 82 65                	ld	a1, 0(sp)
ffffffff80206ec2: e3 e4 a5 fe          	bltu	a1, a0, -24
ffffffff80206ec6: f1 bf                	j	-36
ffffffff80206ec8: 01 45                	mv	a0, zero
;         Ok(())
ffffffff80206eca: a2 65                	ld	a1, 8(sp)
ffffffff80206ecc: 88 e1                	sd	a0, 0(a1)
;     if mem::size_of::<usize>() < 8 && alloc_size > isize::MAX as usize {
ffffffff80206ece: 11 a8                	j	20
ffffffff80206ed0: 01 45                	mv	a0, zero
;         Err(CapacityOverflow)
ffffffff80206ed2: 2a f4                	sd	a0, 40(sp)
ffffffff80206ed4: 82 75                	ld	a1, 32(sp)
ffffffff80206ed6: 22 66                	ld	a2, 8(sp)
ffffffff80206ed8: 0c e6                	sd	a1, 8(a2)
ffffffff80206eda: 08 ea                	sd	a0, 16(a2)
ffffffff80206edc: 05 45                	addi	a0, zero, 1
ffffffff80206ede: 08 e2                	sd	a0, 0(a2)
;     if mem::size_of::<usize>() < 8 && alloc_size > isize::MAX as usize {
ffffffff80206ee0: 09 a0                	j	2
; }
ffffffff80206ee2: 21 61                	addi	sp, sp, 64
ffffffff80206ee4: 82 80                	ret

ffffffff80206ee6 _ZN5alloc5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8into_vec17h436d8353f88410fbE:
;     pub fn into_vec(self: Box<Self>) -> Vec<T> {
ffffffff80206ee6: 01 11                	addi	sp, sp, -32
ffffffff80206ee8: 06 ec                	sd	ra, 24(sp)
ffffffff80206eea: 2e e4                	sd	a1, 8(sp)
ffffffff80206eec: 32 e8                	sd	a2, 16(sp)
;         hack::into_vec(self)
ffffffff80206eee: 97 00 00 00          	auipc	ra, 0
ffffffff80206ef2: e7 80 00 01          	jalr	16(ra)
ffffffff80206ef6: 09 a0                	j	2
;     }
ffffffff80206ef8: e2 60                	ld	ra, 24(sp)
ffffffff80206efa: 05 61                	addi	sp, sp, 32
ffffffff80206efc: 82 80                	ret

ffffffff80206efe _ZN5alloc5slice4hack8into_vec17hf81d18c9e2fad357E:
;     pub fn into_vec<T>(b: Box<[T]>) -> Vec<T> {
ffffffff80206efe: 1d 71                	addi	sp, sp, -96
ffffffff80206f00: 86 ec                	sd	ra, 88(sp)
ffffffff80206f02: 2e f8                	sd	a1, 48(sp)
ffffffff80206f04: 32 fc                	sd	a2, 56(sp)
;             let len = b.len();
ffffffff80206f06: 2a f4                	sd	a0, 40(sp)
ffffffff80206f08: 2e 85                	add	a0, zero, a1
ffffffff80206f0a: 2e f0                	sd	a1, 32(sp)
ffffffff80206f0c: b2 85                	add	a1, zero, a2
ffffffff80206f0e: 32 ec                	sd	a2, 24(sp)
ffffffff80206f10: 97 00 00 00          	auipc	ra, 0
ffffffff80206f14: e7 80 c0 1b          	jalr	444(ra)
ffffffff80206f18: aa 85                	add	a1, zero, a0
ffffffff80206f1a: aa e0                	sd	a0, 64(sp)
ffffffff80206f1c: 2e e8                	sd	a1, 16(sp)
ffffffff80206f1e: 09 a0                	j	2
;             let b = Box::into_raw(b);
ffffffff80206f20: 02 75                	ld	a0, 32(sp)
ffffffff80206f22: e2 65                	ld	a1, 24(sp)
ffffffff80206f24: 97 00 00 00          	auipc	ra, 0
ffffffff80206f28: e7 80 80 06          	jalr	104(ra)
ffffffff80206f2c: 2a 86                	add	a2, zero, a0
ffffffff80206f2e: aa e4                	sd	a0, 72(sp)
ffffffff80206f30: ae e8                	sd	a1, 80(sp)
ffffffff80206f32: 32 e4                	sd	a2, 8(sp)
ffffffff80206f34: 09 a0                	j	2
;             Vec::from_raw_parts(b as *mut T, len, len)
ffffffff80206f36: 22 75                	ld	a0, 40(sp)
ffffffff80206f38: a2 65                	ld	a1, 8(sp)
ffffffff80206f3a: 42 66                	ld	a2, 16(sp)
ffffffff80206f3c: c2 66                	ld	a3, 16(sp)
ffffffff80206f3e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80206f42: e7 80 80 3e          	jalr	1000(ra)
ffffffff80206f46: 09 a0                	j	2
;     }
ffffffff80206f48: e6 60                	ld	ra, 88(sp)
ffffffff80206f4a: 25 61                	addi	sp, sp, 96
ffffffff80206f4c: 82 80                	ret

ffffffff80206f4e _ZN5alloc5boxed12Box$LT$T$GT$4leak17h882cad91e02e3a72E:
;     pub fn leak<'a>(b: Box<T>) -> &'a mut T
ffffffff80206f4e: 59 71                	addi	sp, sp, -112
ffffffff80206f50: 86 f4                	sd	ra, 104(sp)
ffffffff80206f52: 2a f8                	sd	a0, 48(sp)
ffffffff80206f54: 2e fc                	sd	a1, 56(sp)
ffffffff80206f56: aa e8                	sd	a0, 80(sp)
ffffffff80206f58: ae ec                	sd	a1, 88(sp)
;         ManuallyDrop { value }
ffffffff80206f5a: aa e0                	sd	a0, 64(sp)
ffffffff80206f5c: ae e4                	sd	a1, 72(sp)
;         unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
ffffffff80206f5e: 2a f0                	sd	a0, 32(sp)
ffffffff80206f60: 2e f4                	sd	a1, 40(sp)
ffffffff80206f62: 09 a0                	j	2
ffffffff80206f64: 08 10                	addi	a0, sp, 32
ffffffff80206f66: aa f0                	sd	a0, 96(sp)
ffffffff80206f68: 2a ec                	sd	a0, 24(sp)
ffffffff80206f6a: 09 a0                	j	2
ffffffff80206f6c: 62 65                	ld	a0, 24(sp)
ffffffff80206f6e: 08 61                	ld	a0, 0(a0)
ffffffff80206f70: e2 65                	ld	a1, 24(sp)
ffffffff80206f72: 8c 65                	ld	a1, 8(a1)
ffffffff80206f74: 97 00 00 00          	auipc	ra, 0
ffffffff80206f78: e7 80 40 e0          	jalr	-508(ra)
ffffffff80206f7c: 2a e8                	sd	a0, 16(sp)
ffffffff80206f7e: 2e e4                	sd	a1, 8(sp)
ffffffff80206f80: 09 a0                	j	2
;     }
ffffffff80206f82: 42 65                	ld	a0, 16(sp)
ffffffff80206f84: a2 65                	ld	a1, 8(sp)
ffffffff80206f86: a6 70                	ld	ra, 104(sp)
ffffffff80206f88: 65 61                	addi	sp, sp, 112
ffffffff80206f8a: 82 80                	ret

ffffffff80206f8c _ZN5alloc5boxed12Box$LT$T$GT$8into_raw17h42d8dd9ea61d8da7E:
;     pub fn into_raw(b: Box<T>) -> *mut T {
ffffffff80206f8c: 79 71                	addi	sp, sp, -48
ffffffff80206f8e: 06 f4                	sd	ra, 40(sp)
ffffffff80206f90: 2a ec                	sd	a0, 24(sp)
ffffffff80206f92: 2e f0                	sd	a1, 32(sp)
;         Box::leak(b) as *mut T
ffffffff80206f94: 97 00 00 00          	auipc	ra, 0
ffffffff80206f98: e7 80 a0 fb          	jalr	-70(ra)
ffffffff80206f9c: 2a e8                	sd	a0, 16(sp)
ffffffff80206f9e: 2e e4                	sd	a1, 8(sp)
ffffffff80206fa0: 09 a0                	j	2
;     }
ffffffff80206fa2: 42 65                	ld	a0, 16(sp)
ffffffff80206fa4: a2 65                	ld	a1, 8(sp)
ffffffff80206fa6: a2 70                	ld	ra, 40(sp)
ffffffff80206fa8: 45 61                	addi	sp, sp, 48
ffffffff80206faa: 82 80                	ret

ffffffff80206fac _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hfd32339b4e7bb109E:
;     fn next(&mut self) -> Option<A> {
ffffffff80206fac: 5d 71                	addi	sp, sp, -80
ffffffff80206fae: 86 e4                	sd	ra, 72(sp)
ffffffff80206fb0: 2a fc                	sd	a0, 56(sp)
;         if self.start < self.end {
ffffffff80206fb2: 93 05 85 00          	addi	a1, a0, 8
ffffffff80206fb6: 2a f0                	sd	a0, 32(sp)
ffffffff80206fb8: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80206fbc: e7 80 00 33          	jalr	816(ra)
ffffffff80206fc0: 2a ec                	sd	a0, 24(sp)
ffffffff80206fc2: 09 a0                	j	2
ffffffff80206fc4: 62 65                	ld	a0, 24(sp)
ffffffff80206fc6: 09 e5                	bnez	a0, 10
ffffffff80206fc8: 09 a0                	j	2
ffffffff80206fca: 01 45                	mv	a0, zero
;             None
ffffffff80206fcc: 2a f4                	sd	a0, 40(sp)
;         if self.start < self.end {
ffffffff80206fce: 3d a8                	j	62
;             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
ffffffff80206fd0: 02 75                	ld	a0, 32(sp)
ffffffff80206fd2: 97 00 00 00          	auipc	ra, 0
ffffffff80206fd6: e7 80 e0 09          	jalr	158(ra)
ffffffff80206fda: 2a e8                	sd	a0, 16(sp)
ffffffff80206fdc: 09 a0                	j	2
ffffffff80206fde: 85 45                	addi	a1, zero, 1
ffffffff80206fe0: 42 65                	ld	a0, 16(sp)
ffffffff80206fe2: 97 00 00 00          	auipc	ra, 0
ffffffff80206fe6: e7 80 e0 03          	jalr	62(ra)
ffffffff80206fea: aa 85                	add	a1, zero, a0
ffffffff80206fec: aa e0                	sd	a0, 64(sp)
ffffffff80206fee: 2e e4                	sd	a1, 8(sp)
ffffffff80206ff0: 09 a0                	j	2
;             Some(mem::replace(&mut self.start, n))
ffffffff80206ff2: 02 75                	ld	a0, 32(sp)
ffffffff80206ff4: a2 65                	ld	a1, 8(sp)
ffffffff80206ff6: 97 00 00 00          	auipc	ra, 0
ffffffff80206ffa: e7 80 e0 05          	jalr	94(ra)
ffffffff80206ffe: 2a e0                	sd	a0, 0(sp)
ffffffff80207000: 09 a0                	j	2
ffffffff80207002: 02 65                	ld	a0, 0(sp)
ffffffff80207004: 2a f8                	sd	a0, 48(sp)
ffffffff80207006: 85 45                	addi	a1, zero, 1
ffffffff80207008: 2e f4                	sd	a1, 40(sp)
;         if self.start < self.end {
ffffffff8020700a: 09 a0                	j	2
;     }
ffffffff8020700c: 22 75                	ld	a0, 40(sp)
ffffffff8020700e: c2 75                	ld	a1, 48(sp)
ffffffff80207010: a6 60                	ld	ra, 72(sp)
ffffffff80207012: 61 61                	addi	sp, sp, 80
ffffffff80207014: 82 80                	ret

ffffffff80207016 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h68c4d35f4bd6054eE:
;     fn into_iter(self) -> I {
ffffffff80207016: 41 11                	addi	sp, sp, -16
ffffffff80207018: 2a e0                	sd	a0, 0(sp)
ffffffff8020701a: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff8020701c: 41 01                	addi	sp, sp, 16
ffffffff8020701e: 82 80                	ret

ffffffff80207020 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h52693215a26da52fE:
;         unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
ffffffff80207020: 01 11                	addi	sp, sp, -32
ffffffff80207022: 06 ec                	sd	ra, 24(sp)
ffffffff80207024: 2a e4                	sd	a0, 8(sp)
ffffffff80207026: 2e e8                	sd	a1, 16(sp)
;             start.unchecked_add(n as Self)
ffffffff80207028: 97 00 00 00          	auipc	ra, 0
ffffffff8020702c: e7 80 00 b8          	jalr	-1152(ra)
ffffffff80207030: 2a e0                	sd	a0, 0(sp)
ffffffff80207032: 09 a0                	j	2
;         }
ffffffff80207034: 02 65                	ld	a0, 0(sp)
ffffffff80207036: e2 60                	ld	ra, 24(sp)
ffffffff80207038: 05 61                	addi	sp, sp, 32
ffffffff8020703a: 82 80                	ret

ffffffff8020703c _ZN4core3mem4swap17h3f4ccc7577cd659bE:
; pub fn swap<T>(x: &mut T, y: &mut T) {
ffffffff8020703c: 01 11                	addi	sp, sp, -32
ffffffff8020703e: 06 ec                	sd	ra, 24(sp)
ffffffff80207040: 2a e4                	sd	a0, 8(sp)
ffffffff80207042: 2e e8                	sd	a1, 16(sp)
;         ptr::swap_nonoverlapping_one(x, y);
ffffffff80207044: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80207048: e7 80 80 71          	jalr	1816(ra)
ffffffff8020704c: 09 a0                	j	2
; }
ffffffff8020704e: e2 60                	ld	ra, 24(sp)
ffffffff80207050: 05 61                	addi	sp, sp, 32
ffffffff80207052: 82 80                	ret

ffffffff80207054 _ZN4core3mem7replace17h19b2b3a26a483f82E:
; pub fn replace<T>(dest: &mut T, mut src: T) -> T {
ffffffff80207054: 01 11                	addi	sp, sp, -32
ffffffff80207056: 06 ec                	sd	ra, 24(sp)
ffffffff80207058: 2e e4                	sd	a1, 8(sp)
ffffffff8020705a: 2a e8                	sd	a0, 16(sp)
ffffffff8020705c: 2c 00                	addi	a1, sp, 8
;     swap(dest, &mut src);
ffffffff8020705e: 97 00 00 00          	auipc	ra, 0
ffffffff80207062: e7 80 e0 fd          	jalr	-34(ra)
ffffffff80207066: 09 a0                	j	2
;     src
ffffffff80207068: 22 65                	ld	a0, 8(sp)
; }
ffffffff8020706a: e2 60                	ld	ra, 24(sp)
ffffffff8020706c: 05 61                	addi	sp, sp, 32
ffffffff8020706e: 82 80                	ret

ffffffff80207070 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h426ed175d447d11bE:
;                     fn clone(&self) -> Self {
ffffffff80207070: 41 11                	addi	sp, sp, -16
ffffffff80207072: 2a e4                	sd	a0, 8(sp)
;                         *self
ffffffff80207074: 08 61                	ld	a0, 0(a0)
;                     }
ffffffff80207076: 41 01                	addi	sp, sp, 16
ffffffff80207078: 82 80                	ret

ffffffff8020707a _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hd47d499abe5db760E:
;     pub const unsafe fn add(self, count: usize) -> Self
ffffffff8020707a: 01 11                	addi	sp, sp, -32
ffffffff8020707c: 06 ec                	sd	ra, 24(sp)
ffffffff8020707e: 2a e4                	sd	a0, 8(sp)
ffffffff80207080: 2e e8                	sd	a1, 16(sp)
;         self.offset(count as isize)
ffffffff80207082: 97 00 00 00          	auipc	ra, 0
ffffffff80207086: e7 80 40 01          	jalr	20(ra)
ffffffff8020708a: 2a e0                	sd	a0, 0(sp)
ffffffff8020708c: 09 a0                	j	2
;     }
ffffffff8020708e: 02 65                	ld	a0, 0(sp)
ffffffff80207090: e2 60                	ld	ra, 24(sp)
ffffffff80207092: 05 61                	addi	sp, sp, 32
ffffffff80207094: 82 80                	ret

ffffffff80207096 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hb0b0ffa65b936527E:
;     pub const unsafe fn offset(self, count: isize) -> *const T
ffffffff80207096: 01 11                	addi	sp, sp, -32
ffffffff80207098: 2a e4                	sd	a0, 8(sp)
ffffffff8020709a: 2e e8                	sd	a1, 16(sp)
;         intrinsics::offset(self, count)
ffffffff8020709c: 92 05                	slli	a1, a1, 4
ffffffff8020709e: 2e 95                	add	a0, a0, a1
ffffffff802070a0: 2a ec                	sd	a0, 24(sp)
ffffffff802070a2: 2a e0                	sd	a0, 0(sp)
ffffffff802070a4: 09 a0                	j	2
;     }
ffffffff802070a6: 02 65                	ld	a0, 0(sp)
ffffffff802070a8: 05 61                	addi	sp, sp, 32
ffffffff802070aa: 82 80                	ret

ffffffff802070ac _ZN4core5slice18from_raw_parts_mut17h21b3c63e9ce5aa48E:
; pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
ffffffff802070ac: 79 71                	addi	sp, sp, -48
ffffffff802070ae: 06 f4                	sd	ra, 40(sp)
ffffffff802070b0: 2a ec                	sd	a0, 24(sp)
ffffffff802070b2: 2e f0                	sd	a1, 32(sp)
;     &mut *ptr::slice_from_raw_parts_mut(data, len)
ffffffff802070b4: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802070b8: e7 80 20 71          	jalr	1810(ra)
ffffffff802070bc: 2a e8                	sd	a0, 16(sp)
ffffffff802070be: 2e e4                	sd	a1, 8(sp)
ffffffff802070c0: 09 a0                	j	2
; }
ffffffff802070c2: 42 65                	ld	a0, 16(sp)
ffffffff802070c4: a2 65                	ld	a1, 8(sp)
ffffffff802070c6: a2 70                	ld	ra, 40(sp)
ffffffff802070c8: 45 61                	addi	sp, sp, 48
ffffffff802070ca: 82 80                	ret

ffffffff802070cc _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h651d247da6434e3bE:
;     pub const fn len(&self) -> usize {
ffffffff802070cc: 01 11                	addi	sp, sp, -32
ffffffff802070ce: 2a e8                	sd	a0, 16(sp)
ffffffff802070d0: 2e ec                	sd	a1, 24(sp)
;         unsafe { crate::ptr::Repr { rust: self }.raw.len }
ffffffff802070d2: 2a e0                	sd	a0, 0(sp)
ffffffff802070d4: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff802070d6: 2e 85                	add	a0, zero, a1
ffffffff802070d8: 05 61                	addi	sp, sp, 32
ffffffff802070da: 82 80                	ret

ffffffff802070dc _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h72ad661356e1cd06E:
;     pub fn unwrap(self) -> T {
ffffffff802070dc: 79 71                	addi	sp, sp, -48
ffffffff802070de: 2a e4                	sd	a0, 8(sp)
ffffffff802070e0: 2e e8                	sd	a1, 16(sp)
;             Ok(t) => t,
ffffffff802070e2: 13 b5 15 00          	seqz	a0, a1
ffffffff802070e6: 81 46                	mv	a3, zero
ffffffff802070e8: 32 e0                	sd	a2, 0(sp)
ffffffff802070ea: 63 95 d5 02          	bne	a1, a3, 42
ffffffff802070ee: 09 a0                	j	2

ffffffff802070f0 .LBB3_5:
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
ffffffff802070f0: 17 75 00 00          	auipc	a0, 7
ffffffff802070f4: 13 05 85 64          	addi	a0, a0, 1608

ffffffff802070f8 .LBB3_6:
ffffffff802070f8: 97 76 00 00          	auipc	a3, 7
ffffffff802070fc: 93 86 06 67          	addi	a3, a3, 1648
ffffffff80207100: 93 05 b0 02          	addi	a1, zero, 43
ffffffff80207104: 30 08                	addi	a2, sp, 24
ffffffff80207106: 02 67                	ld	a4, 0(sp)
ffffffff80207108: 97 30 00 00          	auipc	ra, 3
ffffffff8020710c: e7 80 00 1e          	jalr	480(ra)
ffffffff80207110: 00 00                	unimp	
;         match self {
ffffffff80207112: 00 00                	unimp	
;             Ok(t) => t,
ffffffff80207114: 22 65                	ld	a0, 8(sp)
ffffffff80207116: c2 65                	ld	a1, 16(sp)
ffffffff80207118: 2a f0                	sd	a0, 32(sp)
ffffffff8020711a: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff8020711c: 45 61                	addi	sp, sp, 48
ffffffff8020711e: 82 80                	ret

ffffffff80207120 _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h1fa957c7999399eeE:
;     pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
ffffffff80207120: 1d 71                	addi	sp, sp, -96
ffffffff80207122: 86 ec                	sd	ra, 88(sp)
ffffffff80207124: 2e f0                	sd	a1, 32(sp)
ffffffff80207126: 32 f4                	sd	a2, 40(sp)
ffffffff80207128: 36 fc                	sd	a3, 56(sp)
ffffffff8020712a: 05 46                	addi	a2, zero, 1
;             Ok(t) => Ok(t),
ffffffff8020712c: a3 0b c1 02          	sb	a2, 55(sp)
ffffffff80207130: 13 b6 15 00          	seqz	a2, a1
ffffffff80207134: 01 47                	mv	a4, zero
ffffffff80207136: 36 ec                	sd	a3, 24(sp)
ffffffff80207138: 2a e8                	sd	a0, 16(sp)
ffffffff8020713a: 63 9f e5 00          	bne	a1, a4, 30
ffffffff8020713e: 09 a0                	j	2
ffffffff80207140: 01 45                	mv	a0, zero
;             Err(e) => Err(op(e)),
ffffffff80207142: a3 0b a1 02          	sb	a0, 55(sp)
ffffffff80207146: 62 65                	ld	a0, 24(sp)
ffffffff80207148: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff8020714c: e7 80 a0 4e          	jalr	1258(ra)
ffffffff80207150: 2a e4                	sd	a0, 8(sp)
ffffffff80207152: 2e e0                	sd	a1, 0(sp)
ffffffff80207154: 21 a8                	j	24
;         match self {
ffffffff80207156: 00 00                	unimp	
;             Ok(t) => Ok(t),
ffffffff80207158: 02 75                	ld	a0, 32(sp)
ffffffff8020715a: a2 75                	ld	a1, 40(sp)
ffffffff8020715c: aa e4                	sd	a0, 72(sp)
ffffffff8020715e: ae e8                	sd	a1, 80(sp)
ffffffff80207160: 42 66                	ld	a2, 16(sp)
ffffffff80207162: 08 e6                	sd	a0, 8(a2)
ffffffff80207164: 0c ea                	sd	a1, 16(a2)
ffffffff80207166: 01 45                	mv	a0, zero
ffffffff80207168: 08 e2                	sd	a0, 0(a2)
;         match self {
ffffffff8020716a: 09 a8                	j	18
;             Err(e) => Err(op(e)),
ffffffff8020716c: 22 65                	ld	a0, 8(sp)
ffffffff8020716e: c2 65                	ld	a1, 16(sp)
ffffffff80207170: 88 e5                	sd	a0, 8(a1)
ffffffff80207172: 02 66                	ld	a2, 0(sp)
ffffffff80207174: 90 e9                	sd	a2, 16(a1)
ffffffff80207176: 85 46                	addi	a3, zero, 1
ffffffff80207178: 94 e1                	sd	a3, 0(a1)
;         match self {
ffffffff8020717a: 09 a0                	j	2
;     }
ffffffff8020717c: 03 45 71 03          	lbu	a0, 55(sp)
ffffffff80207180: 05 89                	andi	a0, a0, 1
ffffffff80207182: 09 e5                	bnez	a0, 10
ffffffff80207184: 09 a0                	j	2
ffffffff80207186: e6 60                	ld	ra, 88(sp)
ffffffff80207188: 25 61                	addi	sp, sp, 96
ffffffff8020718a: 82 80                	ret
ffffffff8020718c: 01 45                	mv	a0, zero
ffffffff8020718e: a3 0b a1 02          	sb	a0, 55(sp)
ffffffff80207192: d5 bf                	j	-12

ffffffff80207194 _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h2217b2280fe02961E:
;     pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
ffffffff80207194: 1d 71                	addi	sp, sp, -96
ffffffff80207196: 86 ec                	sd	ra, 88(sp)
ffffffff80207198: 2e f0                	sd	a1, 32(sp)
ffffffff8020719a: 32 f4                	sd	a2, 40(sp)
ffffffff8020719c: 85 45                	addi	a1, zero, 1
;             Ok(t) => Ok(t),
ffffffff8020719e: a3 0b b1 02          	sb	a1, 55(sp)
ffffffff802071a2: 93 35 16 00          	seqz	a1, a2
ffffffff802071a6: 81 46                	mv	a3, zero
ffffffff802071a8: 2a ec                	sd	a0, 24(sp)
ffffffff802071aa: 63 1e d6 00          	bne	a2, a3, 28
ffffffff802071ae: 09 a0                	j	2
ffffffff802071b0: 01 45                	mv	a0, zero
;             Err(e) => Err(op(e)),
ffffffff802071b2: a3 0b a1 02          	sb	a0, 55(sp)
ffffffff802071b6: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff802071ba: e7 80 a0 46          	jalr	1130(ra)
ffffffff802071be: 2a e8                	sd	a0, 16(sp)
ffffffff802071c0: 2e e4                	sd	a1, 8(sp)
ffffffff802071c2: 21 a8                	j	24
;         match self {
ffffffff802071c4: 00 00                	unimp	
;             Ok(t) => Ok(t),
ffffffff802071c6: 02 75                	ld	a0, 32(sp)
ffffffff802071c8: a2 75                	ld	a1, 40(sp)
ffffffff802071ca: aa e4                	sd	a0, 72(sp)
ffffffff802071cc: ae e8                	sd	a1, 80(sp)
ffffffff802071ce: 62 66                	ld	a2, 24(sp)
ffffffff802071d0: 08 e6                	sd	a0, 8(a2)
ffffffff802071d2: 0c ea                	sd	a1, 16(a2)
ffffffff802071d4: 01 45                	mv	a0, zero
ffffffff802071d6: 08 e2                	sd	a0, 0(a2)
;         match self {
ffffffff802071d8: 09 a8                	j	18
;             Err(e) => Err(op(e)),
ffffffff802071da: 42 65                	ld	a0, 16(sp)
ffffffff802071dc: e2 65                	ld	a1, 24(sp)
ffffffff802071de: 88 e5                	sd	a0, 8(a1)
ffffffff802071e0: 22 66                	ld	a2, 8(sp)
ffffffff802071e2: 90 e9                	sd	a2, 16(a1)
ffffffff802071e4: 85 46                	addi	a3, zero, 1
ffffffff802071e6: 94 e1                	sd	a3, 0(a1)
;         match self {
ffffffff802071e8: 09 a0                	j	2
;     }
ffffffff802071ea: 03 45 71 03          	lbu	a0, 55(sp)
ffffffff802071ee: 05 89                	andi	a0, a0, 1
ffffffff802071f0: 09 e5                	bnez	a0, 10
ffffffff802071f2: 09 a0                	j	2
ffffffff802071f4: e6 60                	ld	ra, 88(sp)
ffffffff802071f6: 25 61                	addi	sp, sp, 96
ffffffff802071f8: 82 80                	ret
ffffffff802071fa: 01 45                	mv	a0, zero
ffffffff802071fc: a3 0b a1 02          	sb	a0, 55(sp)
ffffffff80207200: d5 bf                	j	-12

ffffffff80207202 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h0318c854877b4c3cE:
;     fn from_error(v: E) -> Self {
ffffffff80207202: 41 11                	addi	sp, sp, -16
ffffffff80207204: 2e e0                	sd	a1, 0(sp)
ffffffff80207206: 32 e4                	sd	a2, 8(sp)
;         Err(v)
ffffffff80207208: 0c e5                	sd	a1, 8(a0)
ffffffff8020720a: 10 e9                	sd	a2, 16(a0)
ffffffff8020720c: 85 45                	addi	a1, zero, 1
ffffffff8020720e: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff80207210: 41 01                	addi	sp, sp, 16
ffffffff80207212: 82 80                	ret

ffffffff80207214 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h46afb80edbcd9d5dE:
;     fn from_error(v: E) -> Self {
ffffffff80207214: 01 11                	addi	sp, sp, -32
ffffffff80207216: 01 45                	mv	a0, zero
;         Err(v)
ffffffff80207218: 2a e8                	sd	a0, 16(sp)
;     }
ffffffff8020721a: a2 65                	ld	a1, 8(sp)
ffffffff8020721c: 2a e0                	sd	a0, 0(sp)
ffffffff8020721e: 2e 85                	add	a0, zero, a1
ffffffff80207220: 82 65                	ld	a1, 0(sp)
ffffffff80207222: 05 61                	addi	sp, sp, 32
ffffffff80207224: 82 80                	ret

ffffffff80207226 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h6178bf808203103cE:
;     fn from_error(v: E) -> Self {
ffffffff80207226: 01 11                	addi	sp, sp, -32
ffffffff80207228: 01 45                	mv	a0, zero
;         Err(v)
ffffffff8020722a: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff8020722c: c2 65                	ld	a1, 16(sp)
ffffffff8020722e: 05 61                	addi	sp, sp, 32
ffffffff80207230: 82 80                	ret

ffffffff80207232 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9290c32ee85f83b7E:
;     fn from_error(v: E) -> Self {
ffffffff80207232: 41 11                	addi	sp, sp, -16
ffffffff80207234: 81 45                	mv	a1, zero
;         Err(v)
ffffffff80207236: 0c e5                	sd	a1, 8(a0)
;     }
ffffffff80207238: 41 01                	addi	sp, sp, 16
ffffffff8020723a: 82 80                	ret

ffffffff8020723c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha6a9be13a56250c0E:
;     fn from_error(v: E) -> Self {
ffffffff8020723c: 41 11                	addi	sp, sp, -16
ffffffff8020723e: 2e e0                	sd	a1, 0(sp)
ffffffff80207240: 32 e4                	sd	a2, 8(sp)
;         Err(v)
ffffffff80207242: 0c e5                	sd	a1, 8(a0)
ffffffff80207244: 10 e9                	sd	a2, 16(a0)
ffffffff80207246: 85 45                	addi	a1, zero, 1
ffffffff80207248: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff8020724a: 41 01                	addi	sp, sp, 16
ffffffff8020724c: 82 80                	ret

ffffffff8020724e _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h70af39534d8d5b2dE:
;         self
ffffffff8020724e: 90 69                	ld	a2, 16(a1)
ffffffff80207250: 10 e9                	sd	a2, 16(a0)
ffffffff80207252: 90 65                	ld	a2, 8(a1)
ffffffff80207254: 10 e5                	sd	a2, 8(a0)
ffffffff80207256: 8c 61                	ld	a1, 0(a1)
ffffffff80207258: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff8020725a: 82 80                	ret

ffffffff8020725c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7587d7cb68d7d597E:
;     fn into_result(self) -> Self {
ffffffff8020725c: 41 11                	addi	sp, sp, -16
ffffffff8020725e: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80207260: 41 01                	addi	sp, sp, 16
ffffffff80207262: 82 80                	ret

ffffffff80207264 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h8cc314ee2f8ebaa9E:
;     fn into_result(self) -> Self {
ffffffff80207264: 41 11                	addi	sp, sp, -16
ffffffff80207266: 2a e0                	sd	a0, 0(sp)
ffffffff80207268: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff8020726a: 41 01                	addi	sp, sp, 16
ffffffff8020726c: 82 80                	ret

ffffffff8020726e _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h996d3ecb94c7ef03E:
;         self
ffffffff8020726e: 90 69                	ld	a2, 16(a1)
ffffffff80207270: 10 e9                	sd	a2, 16(a0)
ffffffff80207272: 90 65                	ld	a2, 8(a1)
ffffffff80207274: 10 e5                	sd	a2, 8(a0)
ffffffff80207276: 8c 61                	ld	a1, 0(a1)
ffffffff80207278: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff8020727a: 82 80                	ret

ffffffff8020727c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb9477ae96c17cebcE:
;         self
ffffffff8020727c: 90 69                	ld	a2, 16(a1)
ffffffff8020727e: 10 e9                	sd	a2, 16(a0)
ffffffff80207280: 90 65                	ld	a2, 8(a1)
ffffffff80207282: 10 e5                	sd	a2, 8(a0)
ffffffff80207284: 8c 61                	ld	a1, 0(a1)
ffffffff80207286: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff80207288: 82 80                	ret

ffffffff8020728a _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd11067212accf69eE:
;         self
ffffffff8020728a: 90 69                	ld	a2, 16(a1)
ffffffff8020728c: 10 e9                	sd	a2, 16(a0)
ffffffff8020728e: 90 65                	ld	a2, 8(a1)
ffffffff80207290: 10 e5                	sd	a2, 8(a0)
ffffffff80207292: 8c 61                	ld	a1, 0(a1)
ffffffff80207294: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff80207296: 82 80                	ret

ffffffff80207298 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdd9f3e77308b3bc9E:
;         self
ffffffff80207298: 90 69                	ld	a2, 16(a1)
ffffffff8020729a: 10 e9                	sd	a2, 16(a0)
ffffffff8020729c: 90 65                	ld	a2, 8(a1)
ffffffff8020729e: 10 e5                	sd	a2, 8(a0)
ffffffff802072a0: 8c 61                	ld	a1, 0(a1)
ffffffff802072a2: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff802072a4: 82 80                	ret

ffffffff802072a6 _ZN22buddy_system_allocator4Heap11add_to_heap17hfef502c12d0ceaf6E:
;     pub unsafe fn add_to_heap(&mut self, mut start: usize, mut end: usize) {
ffffffff802072a6: 2d 71                	addi	sp, sp, -288
ffffffff802072a8: 06 ee                	sd	ra, 280(sp)
ffffffff802072aa: ae e1                	sd	a1, 192(sp)
ffffffff802072ac: b2 e5                	sd	a2, 200(sp)
ffffffff802072ae: aa f1                	sd	a0, 224(sp)
ffffffff802072b0: 21 46                	addi	a2, zero, 8
;     intrinsics::size_of::<T>()
ffffffff802072b2: b2 fd                	sd	a2, 248(sp)
;         start = (start + size_of::<usize>() - 1) & (!size_of::<usize>() + 1);
ffffffff802072b4: 2a fd                	sd	a0, 184(sp)
ffffffff802072b6: 2e f9                	sd	a1, 176(sp)
ffffffff802072b8: 32 f5                	sd	a2, 168(sp)
ffffffff802072ba: 09 a0                	j	2
ffffffff802072bc: 4a 75                	ld	a0, 176(sp)
ffffffff802072be: aa 75                	ld	a1, 168(sp)
ffffffff802072c0: 33 06 b5 00          	add	a2, a0, a1
ffffffff802072c4: 32 f1                	sd	a2, 160(sp)
ffffffff802072c6: 63 63 a6 18          	bltu	a2, a0, 390
ffffffff802072ca: 09 a0                	j	2
ffffffff802072cc: 0a 75                	ld	a0, 160(sp)
ffffffff802072ce: 93 05 f5 ff          	addi	a1, a0, -1
ffffffff802072d2: 2e ed                	sd	a1, 152(sp)
ffffffff802072d4: 63 6a b5 18          	bltu	a0, a1, 404
ffffffff802072d8: 09 a0                	j	2
ffffffff802072da: 21 45                	addi	a0, zero, 8
;     intrinsics::size_of::<T>()
ffffffff802072dc: 2a e2                	sd	a0, 256(sp)
;         start = (start + size_of::<usize>() - 1) & (!size_of::<usize>() + 1);
ffffffff802072de: 2a e9                	sd	a0, 144(sp)
ffffffff802072e0: 09 a0                	j	2
ffffffff802072e2: 01 45                	mv	a0, zero
ffffffff802072e4: ca 65                	ld	a1, 144(sp)
ffffffff802072e6: 33 06 b5 40          	sub	a2, a0, a1
ffffffff802072ea: 32 e5                	sd	a2, 136(sp)
ffffffff802072ec: 63 0d a6 18          	beq	a2, a0, 410
ffffffff802072f0: 09 a0                	j	2
ffffffff802072f2: 6a 65                	ld	a0, 152(sp)
ffffffff802072f4: aa 65                	ld	a1, 136(sp)
ffffffff802072f6: 33 76 b5 00          	and	a2, a0, a1
ffffffff802072fa: b2 e1                	sd	a2, 192(sp)
;         end = end & (!size_of::<usize>() + 1);
ffffffff802072fc: 2e 66                	ld	a2, 200(sp)
ffffffff802072fe: a1 46                	addi	a3, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80207300: 36 ea                	sd	a3, 272(sp)
;         end = end & (!size_of::<usize>() + 1);
ffffffff80207302: 32 e1                	sd	a2, 128(sp)
ffffffff80207304: b6 fc                	sd	a3, 120(sp)
ffffffff80207306: 09 a0                	j	2
ffffffff80207308: 01 45                	mv	a0, zero
ffffffff8020730a: e6 75                	ld	a1, 120(sp)
ffffffff8020730c: 33 06 b5 40          	sub	a2, a0, a1
ffffffff80207310: b2 f8                	sd	a2, 112(sp)
ffffffff80207312: 63 08 a6 18          	beq	a2, a0, 400
ffffffff80207316: 09 a0                	j	2
ffffffff80207318: 0a 65                	ld	a0, 128(sp)
ffffffff8020731a: c6 75                	ld	a1, 112(sp)
ffffffff8020731c: 33 76 b5 00          	and	a2, a0, a1
ffffffff80207320: b2 e5                	sd	a2, 200(sp)
;         assert!(start <= end);
ffffffff80207322: 8e 66                	ld	a3, 192(sp)
ffffffff80207324: 63 68 d6 00          	bltu	a2, a3, 16
ffffffff80207328: 09 a0                	j	2
ffffffff8020732a: 01 45                	mv	a0, zero
;         let mut total = 0;
ffffffff8020732c: aa e9                	sd	a0, 208(sp)
;         let mut current_start = start;
ffffffff8020732e: 0e 65                	ld	a0, 192(sp)
ffffffff80207330: aa ed                	sd	a0, 216(sp)
;         while current_start + size_of::<usize>() <= end {
ffffffff80207332: 39 a8                	j	30

ffffffff80207334 .LBB2_36:
;         assert!(start <= end);
ffffffff80207334: 17 75 00 00          	auipc	a0, 7
ffffffff80207338: 13 05 45 57          	addi	a0, a0, 1396

ffffffff8020733c .LBB2_37:
ffffffff8020733c: 17 76 00 00          	auipc	a2, 7
ffffffff80207340: 13 06 c6 58          	addi	a2, a2, 1420
ffffffff80207344: f9 45                	addi	a1, zero, 30
ffffffff80207346: 97 30 00 00          	auipc	ra, 3
ffffffff8020734a: e7 80 20 ff          	jalr	-14(ra)
ffffffff8020734e: 00 00                	unimp	
;         while current_start + size_of::<usize>() <= end {
ffffffff80207350: 6e 65                	ld	a0, 216(sp)
ffffffff80207352: a1 45                	addi	a1, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80207354: 2e e6                	sd	a1, 264(sp)
;         while current_start + size_of::<usize>() <= end {
ffffffff80207356: aa f4                	sd	a0, 104(sp)
ffffffff80207358: ae f0                	sd	a1, 96(sp)
ffffffff8020735a: 09 a0                	j	2
ffffffff8020735c: 26 75                	ld	a0, 104(sp)
ffffffff8020735e: 86 75                	ld	a1, 96(sp)
ffffffff80207360: 33 06 b5 00          	add	a2, a0, a1
ffffffff80207364: b2 ec                	sd	a2, 88(sp)
ffffffff80207366: 63 6c a6 14          	bltu	a2, a0, 344
ffffffff8020736a: 09 a0                	j	2
ffffffff8020736c: 2e 65                	ld	a0, 200(sp)
ffffffff8020736e: e6 65                	ld	a1, 88(sp)
ffffffff80207370: 63 7c b5 00          	bgeu	a0, a1, 24
ffffffff80207374: 09 a0                	j	2
;         self.total += total;
ffffffff80207376: 4e 65                	ld	a0, 208(sp)
ffffffff80207378: ea 75                	ld	a1, 184(sp)
ffffffff8020737a: 03 b6 05 11          	ld	a2, 272(a1)
ffffffff8020737e: 32 95                	add	a0, a0, a2
ffffffff80207380: aa e8                	sd	a0, 80(sp)
ffffffff80207382: 63 61 c5 1e          	bltu	a0, a2, 482
ffffffff80207386: 65 a8                	j	184
;             let lowbit = current_start & (!current_start + 1);
ffffffff80207388: 6e 65                	ld	a0, 216(sp)
ffffffff8020738a: 81 45                	mv	a1, zero
ffffffff8020738c: 33 86 a5 40          	sub	a2, a1, a0
ffffffff80207390: aa e4                	sd	a0, 72(sp)
ffffffff80207392: b2 e0                	sd	a2, 64(sp)
ffffffff80207394: 63 03 b6 14          	beq	a2, a1, 326
ffffffff80207398: 09 a0                	j	2
ffffffff8020739a: 26 65                	ld	a0, 72(sp)
ffffffff8020739c: 86 65                	ld	a1, 64(sp)
ffffffff8020739e: 33 76 b5 00          	and	a2, a0, a1
ffffffff802073a2: b2 f5                	sd	a2, 232(sp)
;             let size = min(lowbit, prev_power_of_two(end - current_start));
ffffffff802073a4: ae 66                	ld	a3, 200(sp)
ffffffff802073a6: 6e 67                	ld	a4, 216(sp)
ffffffff802073a8: 33 87 e6 40          	sub	a4, a3, a4
ffffffff802073ac: 32 fc                	sd	a2, 56(sp)
ffffffff802073ae: 3a f8                	sd	a4, 48(sp)
ffffffff802073b0: 63 e3 e6 14          	bltu	a3, a4, 326
ffffffff802073b4: 09 a0                	j	2
ffffffff802073b6: 42 75                	ld	a0, 48(sp)
ffffffff802073b8: 97 10 00 00          	auipc	ra, 1
ffffffff802073bc: e7 80 a0 b0          	jalr	-1270(ra)
ffffffff802073c0: 2a f4                	sd	a0, 40(sp)
ffffffff802073c2: 09 a0                	j	2
ffffffff802073c4: 62 75                	ld	a0, 56(sp)
ffffffff802073c6: a2 75                	ld	a1, 40(sp)
ffffffff802073c8: 97 20 00 00          	auipc	ra, 2
ffffffff802073cc: e7 80 00 fb          	jalr	-80(ra)
ffffffff802073d0: aa 85                	add	a1, zero, a0
ffffffff802073d2: aa f9                	sd	a0, 240(sp)
ffffffff802073d4: 2e f0                	sd	a1, 32(sp)
ffffffff802073d6: 09 a0                	j	2
;             total += size;
ffffffff802073d8: 4e 65                	ld	a0, 208(sp)
ffffffff802073da: 82 75                	ld	a1, 32(sp)
ffffffff802073dc: 33 06 b5 00          	add	a2, a0, a1
ffffffff802073e0: 32 ec                	sd	a2, 24(sp)
ffffffff802073e2: 63 69 a6 12          	bltu	a2, a0, 306
ffffffff802073e6: 09 a0                	j	2
ffffffff802073e8: 62 65                	ld	a0, 24(sp)
ffffffff802073ea: aa e9                	sd	a0, 208(sp)
;             self.free_list[size.trailing_zeros() as usize].push(current_start as *mut usize);
ffffffff802073ec: 02 75                	ld	a0, 32(sp)
ffffffff802073ee: 97 10 00 00          	auipc	ra, 1
ffffffff802073f2: e7 80 20 61          	jalr	1554(ra)
ffffffff802073f6: 2a e8                	sd	a0, 16(sp)
ffffffff802073f8: 09 a0                	j	2
ffffffff802073fa: 42 65                	ld	a0, 16(sp)
ffffffff802073fc: 93 15 05 02          	slli	a1, a0, 32
ffffffff80207400: 81 91                	srli	a1, a1, 32
ffffffff80207402: 1b 06 05 00          	sext.w	a2, a0
ffffffff80207406: fd 46                	addi	a3, zero, 31
ffffffff80207408: 2e e4                	sd	a1, 8(sp)
ffffffff8020740a: 63 e3 c6 12          	bltu	a3, a2, 294
ffffffff8020740e: 09 a0                	j	2
ffffffff80207410: 22 65                	ld	a0, 8(sp)
ffffffff80207412: 93 15 35 00          	slli	a1, a0, 3
ffffffff80207416: 6a 76                	ld	a2, 184(sp)
ffffffff80207418: 33 05 b6 00          	add	a0, a2, a1
ffffffff8020741c: ee 65                	ld	a1, 216(sp)
ffffffff8020741e: 97 20 00 00          	auipc	ra, 2
ffffffff80207422: e7 80 e0 3e          	jalr	1006(ra)
ffffffff80207426: 09 a0                	j	2
;             current_start += size;
ffffffff80207428: 6e 65                	ld	a0, 216(sp)
ffffffff8020742a: 82 75                	ld	a1, 32(sp)
ffffffff8020742c: 33 06 b5 00          	add	a2, a0, a1
ffffffff80207430: 32 e0                	sd	a2, 0(sp)
ffffffff80207432: 63 6b a6 10          	bltu	a2, a0, 278
ffffffff80207436: 09 a0                	j	2
ffffffff80207438: 02 65                	ld	a0, 0(sp)
ffffffff8020743a: aa ed                	sd	a0, 216(sp)
;         while current_start + size_of::<usize>() <= end {
ffffffff8020743c: 11 bf                	j	-236
;         self.total += total;
ffffffff8020743e: 46 65                	ld	a0, 80(sp)
ffffffff80207440: ea 75                	ld	a1, 184(sp)
ffffffff80207442: 23 b8 a5 10          	sd	a0, 272(a1)
;     }
ffffffff80207446: f2 60                	ld	ra, 280(sp)
ffffffff80207448: 15 61                	addi	sp, sp, 288
ffffffff8020744a: 82 80                	ret

ffffffff8020744c .LBB2_38:
;         start = (start + size_of::<usize>() - 1) & (!size_of::<usize>() + 1);
ffffffff8020744c: 17 75 00 00          	auipc	a0, 7
ffffffff80207450: 13 05 45 3c          	addi	a0, a0, 964

ffffffff80207454 .LBB2_39:
ffffffff80207454: 17 76 00 00          	auipc	a2, 7
ffffffff80207458: 13 06 46 3a          	addi	a2, a2, 932
ffffffff8020745c: f1 45                	addi	a1, zero, 28
ffffffff8020745e: 97 30 00 00          	auipc	ra, 3
ffffffff80207462: e7 80 a0 ed          	jalr	-294(ra)
ffffffff80207466: 00 00                	unimp	

ffffffff80207468 .LBB2_40:
ffffffff80207468: 17 75 00 00          	auipc	a0, 7
ffffffff8020746c: 13 05 85 3e          	addi	a0, a0, 1000

ffffffff80207470 .LBB2_41:
ffffffff80207470: 17 76 00 00          	auipc	a2, 7
ffffffff80207474: 13 06 06 3c          	addi	a2, a2, 960
ffffffff80207478: 93 05 10 02          	addi	a1, zero, 33
ffffffff8020747c: 97 30 00 00          	auipc	ra, 3
ffffffff80207480: e7 80 c0 eb          	jalr	-324(ra)
ffffffff80207484: 00 00                	unimp	

ffffffff80207486 .LBB2_42:
ffffffff80207486: 17 75 00 00          	auipc	a0, 7
ffffffff8020748a: 13 05 a5 38          	addi	a0, a0, 906

ffffffff8020748e .LBB2_43:
ffffffff8020748e: 17 76 00 00          	auipc	a2, 7
ffffffff80207492: 13 06 a6 3e          	addi	a2, a2, 1002
ffffffff80207496: f1 45                	addi	a1, zero, 28
ffffffff80207498: 97 30 00 00          	auipc	ra, 3
ffffffff8020749c: e7 80 00 ea          	jalr	-352(ra)
ffffffff802074a0: 00 00                	unimp	

ffffffff802074a2 .LBB2_44:
;         end = end & (!size_of::<usize>() + 1);
ffffffff802074a2: 17 75 00 00          	auipc	a0, 7
ffffffff802074a6: 13 05 e5 36          	addi	a0, a0, 878

ffffffff802074aa .LBB2_45:
ffffffff802074aa: 17 76 00 00          	auipc	a2, 7
ffffffff802074ae: 13 06 66 3e          	addi	a2, a2, 998
ffffffff802074b2: f1 45                	addi	a1, zero, 28
ffffffff802074b4: 97 30 00 00          	auipc	ra, 3
ffffffff802074b8: e7 80 40 e8          	jalr	-380(ra)
ffffffff802074bc: 00 00                	unimp	

ffffffff802074be .LBB2_46:
;         while current_start + size_of::<usize>() <= end {
ffffffff802074be: 17 75 00 00          	auipc	a0, 7
ffffffff802074c2: 13 05 25 35          	addi	a0, a0, 850

ffffffff802074c6 .LBB2_47:
ffffffff802074c6: 17 76 00 00          	auipc	a2, 7
ffffffff802074ca: 13 06 a6 41          	addi	a2, a2, 1050
ffffffff802074ce: f1 45                	addi	a1, zero, 28
ffffffff802074d0: 97 30 00 00          	auipc	ra, 3
ffffffff802074d4: e7 80 80 e6          	jalr	-408(ra)
ffffffff802074d8: 00 00                	unimp	

ffffffff802074da .LBB2_48:
;             let lowbit = current_start & (!current_start + 1);
ffffffff802074da: 17 75 00 00          	auipc	a0, 7
ffffffff802074de: 13 05 65 33          	addi	a0, a0, 822

ffffffff802074e2 .LBB2_49:
ffffffff802074e2: 17 76 00 00          	auipc	a2, 7
ffffffff802074e6: 13 06 66 41          	addi	a2, a2, 1046
ffffffff802074ea: f1 45                	addi	a1, zero, 28
ffffffff802074ec: 97 30 00 00          	auipc	ra, 3
ffffffff802074f0: e7 80 c0 e4          	jalr	-436(ra)
ffffffff802074f4: 00 00                	unimp	

ffffffff802074f6 .LBB2_50:
;             let size = min(lowbit, prev_power_of_two(end - current_start));
ffffffff802074f6: 17 75 00 00          	auipc	a0, 7
ffffffff802074fa: 13 05 a5 35          	addi	a0, a0, 858

ffffffff802074fe .LBB2_51:
ffffffff802074fe: 17 76 00 00          	auipc	a2, 7
ffffffff80207502: 13 06 26 41          	addi	a2, a2, 1042
ffffffff80207506: 93 05 10 02          	addi	a1, zero, 33
ffffffff8020750a: 97 30 00 00          	auipc	ra, 3
ffffffff8020750e: e7 80 e0 e2          	jalr	-466(ra)
ffffffff80207512: 00 00                	unimp	

ffffffff80207514 .LBB2_52:
;             total += size;
ffffffff80207514: 17 75 00 00          	auipc	a0, 7
ffffffff80207518: 13 05 c5 2f          	addi	a0, a0, 764

ffffffff8020751c .LBB2_53:
ffffffff8020751c: 17 76 00 00          	auipc	a2, 7
ffffffff80207520: 13 06 c6 40          	addi	a2, a2, 1036
ffffffff80207524: f1 45                	addi	a1, zero, 28
ffffffff80207526: 97 30 00 00          	auipc	ra, 3
ffffffff8020752a: e7 80 20 e1          	jalr	-494(ra)
ffffffff8020752e: 00 00                	unimp	

ffffffff80207530 .LBB2_54:
;             self.free_list[size.trailing_zeros() as usize].push(current_start as *mut usize);
ffffffff80207530: 17 76 00 00          	auipc	a2, 7
ffffffff80207534: 13 06 06 41          	addi	a2, a2, 1040
ffffffff80207538: 93 05 00 02          	addi	a1, zero, 32
ffffffff8020753c: 22 65                	ld	a0, 8(sp)
ffffffff8020753e: 97 30 00 00          	auipc	ra, 3
ffffffff80207542: e7 80 60 e2          	jalr	-474(ra)
ffffffff80207546: 00 00                	unimp	

ffffffff80207548 .LBB2_55:
;             current_start += size;
ffffffff80207548: 17 75 00 00          	auipc	a0, 7
ffffffff8020754c: 13 05 85 2c          	addi	a0, a0, 712

ffffffff80207550 .LBB2_56:
ffffffff80207550: 17 76 00 00          	auipc	a2, 7
ffffffff80207554: 13 06 86 40          	addi	a2, a2, 1032
ffffffff80207558: f1 45                	addi	a1, zero, 28
ffffffff8020755a: 97 30 00 00          	auipc	ra, 3
ffffffff8020755e: e7 80 e0 dd          	jalr	-546(ra)
ffffffff80207562: 00 00                	unimp	

ffffffff80207564 .LBB2_57:
;         self.total += total;
ffffffff80207564: 17 75 00 00          	auipc	a0, 7
ffffffff80207568: 13 05 c5 2a          	addi	a0, a0, 684

ffffffff8020756c .LBB2_58:
ffffffff8020756c: 17 76 00 00          	auipc	a2, 7
ffffffff80207570: 13 06 46 40          	addi	a2, a2, 1028
ffffffff80207574: f1 45                	addi	a1, zero, 28
ffffffff80207576: 97 30 00 00          	auipc	ra, 3
ffffffff8020757a: e7 80 20 dc          	jalr	-574(ra)
ffffffff8020757e: 00 00                	unimp	

ffffffff80207580 _ZN22buddy_system_allocator4Heap4init17h621628efb74f579fE:
;     pub unsafe fn init(&mut self, start: usize, size: usize) {
ffffffff80207580: 39 71                	addi	sp, sp, -64
ffffffff80207582: 06 fc                	sd	ra, 56(sp)
ffffffff80207584: 2a f0                	sd	a0, 32(sp)
ffffffff80207586: 2e f4                	sd	a1, 40(sp)
ffffffff80207588: 32 f8                	sd	a2, 48(sp)
;         self.add_to_heap(start, start + size);
ffffffff8020758a: 2e 96                	add	a2, a2, a1
ffffffff8020758c: 2e ec                	sd	a1, 24(sp)
ffffffff8020758e: 2a e8                	sd	a0, 16(sp)
ffffffff80207590: 32 e4                	sd	a2, 8(sp)
ffffffff80207592: 63 6e b6 00          	bltu	a2, a1, 28
ffffffff80207596: 09 a0                	j	2
ffffffff80207598: 42 65                	ld	a0, 16(sp)
ffffffff8020759a: e2 65                	ld	a1, 24(sp)
ffffffff8020759c: 22 66                	ld	a2, 8(sp)
ffffffff8020759e: 97 00 00 00          	auipc	ra, 0
ffffffff802075a2: e7 80 80 d0          	jalr	-760(ra)
ffffffff802075a6: 09 a0                	j	2
;     }
ffffffff802075a8: e2 70                	ld	ra, 56(sp)
ffffffff802075aa: 21 61                	addi	sp, sp, 64
ffffffff802075ac: 82 80                	ret

ffffffff802075ae .LBB3_4:
;         self.add_to_heap(start, start + size);
ffffffff802075ae: 17 75 00 00          	auipc	a0, 7
ffffffff802075b2: 13 05 25 26          	addi	a0, a0, 610

ffffffff802075b6 .LBB3_5:
ffffffff802075b6: 17 76 00 00          	auipc	a2, 7
ffffffff802075ba: 13 06 26 3d          	addi	a2, a2, 978
ffffffff802075be: f1 45                	addi	a1, zero, 28
ffffffff802075c0: 97 30 00 00          	auipc	ra, 3
ffffffff802075c4: e7 80 80 d7          	jalr	-648(ra)
ffffffff802075c8: 00 00                	unimp	

ffffffff802075ca _ZN22buddy_system_allocator4Heap5alloc17he301c27259987539E:
;     pub fn alloc(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr> {
ffffffff802075ca: 13 01 01 de          	addi	sp, sp, -544
ffffffff802075ce: 23 3c 11 20          	sd	ra, 536(sp)
ffffffff802075d2: 2e f6                	sd	a1, 296(sp)
ffffffff802075d4: 32 fa                	sd	a2, 304(sp)
ffffffff802075d6: 2a ff                	sd	a0, 440(sp)
ffffffff802075d8: 2c 12                	addi	a1, sp, 296
;             layout.size().next_power_of_two(),
ffffffff802075da: 2a f2                	sd	a0, 288(sp)
ffffffff802075dc: 2e 85                	add	a0, zero, a1
ffffffff802075de: 97 10 00 00          	auipc	ra, 1
ffffffff802075e2: e7 80 20 28          	jalr	642(ra)
ffffffff802075e6: 2a ee                	sd	a0, 280(sp)
ffffffff802075e8: 09 a0                	j	2
ffffffff802075ea: 72 65                	ld	a0, 280(sp)
ffffffff802075ec: 97 10 00 00          	auipc	ra, 1
ffffffff802075f0: e7 80 e0 4d          	jalr	1246(ra)
ffffffff802075f4: 2a ea                	sd	a0, 272(sp)
ffffffff802075f6: 09 a0                	j	2
ffffffff802075f8: 28 12                	addi	a0, sp, 296
;             max(layout.align(), size_of::<usize>()),
ffffffff802075fa: 97 10 00 00          	auipc	ra, 1
ffffffff802075fe: e7 80 00 27          	jalr	624(ra)
ffffffff80207602: 2a e6                	sd	a0, 264(sp)
ffffffff80207604: 09 a0                	j	2
ffffffff80207606: 21 45                	addi	a0, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80207608: 23 38 a1 20          	sd	a0, 528(sp)
;             max(layout.align(), size_of::<usize>()),
ffffffff8020760c: 2a e2                	sd	a0, 256(sp)
ffffffff8020760e: 09 a0                	j	2
ffffffff80207610: 32 65                	ld	a0, 264(sp)
ffffffff80207612: 92 65                	ld	a1, 256(sp)
ffffffff80207614: 97 20 00 00          	auipc	ra, 2
ffffffff80207618: e7 80 80 d4          	jalr	-696(ra)
ffffffff8020761c: aa fd                	sd	a0, 248(sp)
ffffffff8020761e: 09 a0                	j	2
;         let size = max(
ffffffff80207620: 52 65                	ld	a0, 272(sp)
ffffffff80207622: ee 75                	ld	a1, 248(sp)
ffffffff80207624: 97 20 00 00          	auipc	ra, 2
ffffffff80207628: e7 80 80 d3          	jalr	-712(ra)
ffffffff8020762c: aa 85                	add	a1, zero, a0
ffffffff8020762e: aa e3                	sd	a0, 448(sp)
ffffffff80207630: ae f9                	sd	a1, 240(sp)
ffffffff80207632: 09 a0                	j	2
;         let class = size.trailing_zeros() as usize;
ffffffff80207634: 4e 75                	ld	a0, 240(sp)
ffffffff80207636: 97 10 00 00          	auipc	ra, 1
ffffffff8020763a: e7 80 a0 3c          	jalr	970(ra)
ffffffff8020763e: aa f5                	sd	a0, 232(sp)
ffffffff80207640: 09 a0                	j	2
ffffffff80207642: 2e 75                	ld	a0, 232(sp)
ffffffff80207644: 93 15 05 02          	slli	a1, a0, 32
ffffffff80207648: 81 91                	srli	a1, a1, 32
ffffffff8020764a: ae e7                	sd	a1, 456(sp)
ffffffff8020764c: 13 06 00 02          	addi	a2, zero, 32
;         for i in class..self.free_list.len() {
ffffffff80207650: 12 75                	ld	a0, 288(sp)
ffffffff80207652: ae f1                	sd	a1, 224(sp)
ffffffff80207654: b2 85                	add	a1, zero, a2
ffffffff80207656: 97 20 00 00          	auipc	ra, 2
ffffffff8020765a: e7 80 a0 14          	jalr	330(ra)
ffffffff8020765e: aa ed                	sd	a0, 216(sp)
ffffffff80207660: 09 a0                	j	2
ffffffff80207662: 0e 75                	ld	a0, 224(sp)
ffffffff80207664: aa e2                	sd	a0, 320(sp)
ffffffff80207666: ee 65                	ld	a1, 216(sp)
ffffffff80207668: ae e6                	sd	a1, 328(sp)
ffffffff8020766a: 97 10 00 00          	auipc	ra, 1
ffffffff8020766e: e7 80 60 69          	jalr	1686(ra)
ffffffff80207672: aa e9                	sd	a0, 208(sp)
ffffffff80207674: ae e5                	sd	a1, 200(sp)
ffffffff80207676: 09 a0                	j	2
ffffffff80207678: 4e 65                	ld	a0, 208(sp)
ffffffff8020767a: aa ea                	sd	a0, 336(sp)
ffffffff8020767c: ae 65                	ld	a1, 200(sp)
ffffffff8020767e: ae ee                	sd	a1, 344(sp)
ffffffff80207680: 09 a0                	j	2
ffffffff80207682: 88 0a                	addi	a0, sp, 336
ffffffff80207684: 97 10 00 00          	auipc	ra, 1
ffffffff80207688: e7 80 a0 56          	jalr	1386(ra)
ffffffff8020768c: aa f2                	sd	a0, 352(sp)
ffffffff8020768e: ae f6                	sd	a1, 360(sp)
ffffffff80207690: 09 a0                	j	2
ffffffff80207692: 16 75                	ld	a0, 352(sp)
ffffffff80207694: 81 45                	mv	a1, zero
ffffffff80207696: 63 04 b5 00          	beq	a0, a1, 8
ffffffff8020769a: 09 a0                	j	2
ffffffff8020769c: 29 a0                	j	10
ffffffff8020769e: 01 45                	mv	a0, zero
;         Err(AllocErr {})
ffffffff802076a0: 2a fe                	sd	a0, 312(sp)
;     }
ffffffff802076a2: 59 aa                	j	406
;         for i in class..self.free_list.len() {
ffffffff802076a4: 00 00                	unimp	
ffffffff802076a6: 36 75                	ld	a0, 360(sp)
ffffffff802076a8: aa eb                	sd	a0, 464(sp)
ffffffff802076aa: aa ef                	sd	a0, 472(sp)
ffffffff802076ac: aa f3                	sd	a0, 480(sp)
ffffffff802076ae: fd 45                	addi	a1, zero, 31
;             if !self.free_list[i].is_empty() {
ffffffff802076b0: aa e1                	sd	a0, 192(sp)
ffffffff802076b2: 63 e3 a5 24          	bltu	a1, a0, 582
ffffffff802076b6: 09 a0                	j	2
ffffffff802076b8: 0e 65                	ld	a0, 192(sp)
ffffffff802076ba: 93 15 35 00          	slli	a1, a0, 3
ffffffff802076be: 12 76                	ld	a2, 288(sp)
ffffffff802076c0: 33 05 b6 00          	add	a0, a2, a1
ffffffff802076c4: 97 20 00 00          	auipc	ra, 2
ffffffff802076c8: e7 80 c0 12          	jalr	300(ra)
ffffffff802076cc: 2a fd                	sd	a0, 184(sp)
ffffffff802076ce: 09 a0                	j	2
ffffffff802076d0: 01 45                	mv	a0, zero
ffffffff802076d2: ea 75                	ld	a1, 184(sp)
ffffffff802076d4: 63 84 a5 00          	beq	a1, a0, 8
ffffffff802076d8: 09 a0                	j	2
;         for i in class..self.free_list.len() {
ffffffff802076da: 65 b7                	j	-88
;                 for j in (class + 1..i + 1).rev() {
ffffffff802076dc: 0e 75                	ld	a0, 224(sp)
ffffffff802076de: 93 05 15 00          	addi	a1, a0, 1
ffffffff802076e2: 01 46                	mv	a2, zero
ffffffff802076e4: 2e f9                	sd	a1, 176(sp)
ffffffff802076e6: 63 15 06 22          	bnez	a2, 554
ffffffff802076ea: 09 a0                	j	2
ffffffff802076ec: 0e 65                	ld	a0, 192(sp)
ffffffff802076ee: 93 05 15 00          	addi	a1, a0, 1
ffffffff802076f2: 2e f5                	sd	a1, 168(sp)
ffffffff802076f4: 63 ec a5 22          	bltu	a1, a0, 568
ffffffff802076f8: 09 a0                	j	2
ffffffff802076fa: 4a 75                	ld	a0, 176(sp)
ffffffff802076fc: aa fa                	sd	a0, 368(sp)
ffffffff802076fe: aa 75                	ld	a1, 168(sp)
ffffffff80207700: ae fe                	sd	a1, 376(sp)
ffffffff80207702: 97 10 00 00          	auipc	ra, 1
ffffffff80207706: e7 80 60 5c          	jalr	1478(ra)
ffffffff8020770a: 2a f1                	sd	a0, 160(sp)
ffffffff8020770c: 2e ed                	sd	a1, 152(sp)
ffffffff8020770e: 09 a0                	j	2
ffffffff80207710: 0a 75                	ld	a0, 160(sp)
ffffffff80207712: ea 65                	ld	a1, 152(sp)
ffffffff80207714: 97 10 00 00          	auipc	ra, 1
ffffffff80207718: e7 80 20 5e          	jalr	1506(ra)
ffffffff8020771c: 2a e9                	sd	a0, 144(sp)
ffffffff8020771e: 2e e5                	sd	a1, 136(sp)
ffffffff80207720: 09 a0                	j	2
ffffffff80207722: 4a 65                	ld	a0, 144(sp)
ffffffff80207724: 2a e3                	sd	a0, 384(sp)
ffffffff80207726: aa 65                	ld	a1, 136(sp)
ffffffff80207728: 2e e7                	sd	a1, 392(sp)
ffffffff8020772a: 09 a0                	j	2
ffffffff8020772c: 08 03                	addi	a0, sp, 384
ffffffff8020772e: 97 10 00 00          	auipc	ra, 1
ffffffff80207732: e7 80 c0 5d          	jalr	1500(ra)
ffffffff80207736: 2a eb                	sd	a0, 400(sp)
ffffffff80207738: 2e ef                	sd	a1, 408(sp)
ffffffff8020773a: 09 a0                	j	2
ffffffff8020773c: 5a 65                	ld	a0, 400(sp)
ffffffff8020773e: 81 45                	mv	a1, zero
ffffffff80207740: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80207744: 09 a0                	j	2
ffffffff80207746: 01 a8                	j	16
ffffffff80207748: 13 05 00 02          	addi	a0, zero, 32
;                     self.free_list[class]
ffffffff8020774c: 8e 75                	ld	a1, 224(sp)
ffffffff8020774e: 63 ec a5 0e          	bltu	a1, a0, 248
ffffffff80207752: c9 ac                	j	722
;                 for j in (class + 1..i + 1).rev() {
ffffffff80207754: 00 00                	unimp	
ffffffff80207756: 7a 65                	ld	a0, 408(sp)
ffffffff80207758: aa f7                	sd	a0, 488(sp)
ffffffff8020775a: aa fb                	sd	a0, 496(sp)
ffffffff8020775c: aa ff                	sd	a0, 504(sp)
ffffffff8020775e: fd 45                	addi	a1, zero, 31
;                     if let Some(block) = self.free_list[j].pop() {
ffffffff80207760: 2a e1                	sd	a0, 128(sp)
ffffffff80207762: 63 e3 a5 1e          	bltu	a1, a0, 486
ffffffff80207766: 09 a0                	j	2
ffffffff80207768: 0a 65                	ld	a0, 128(sp)
ffffffff8020776a: 93 15 35 00          	slli	a1, a0, 3
ffffffff8020776e: 12 76                	ld	a2, 288(sp)
ffffffff80207770: 33 05 b6 00          	add	a0, a2, a1
ffffffff80207774: 97 20 00 00          	auipc	ra, 2
ffffffff80207778: e7 80 80 0a          	jalr	168(ra)
ffffffff8020777c: 2a f3                	sd	a0, 416(sp)
ffffffff8020777e: 2e f7                	sd	a1, 424(sp)
ffffffff80207780: 09 a0                	j	2
ffffffff80207782: 1a 75                	ld	a0, 416(sp)
ffffffff80207784: 85 45                	addi	a1, zero, 1
ffffffff80207786: 63 06 b5 00          	beq	a0, a1, 12
ffffffff8020778a: 09 a0                	j	2
ffffffff8020778c: 01 45                	mv	a0, zero
;                         return Err(AllocErr {});
ffffffff8020778e: 2a fe                	sd	a0, 312(sp)
ffffffff80207790: 55 a8                	j	180
;                     if let Some(block) = self.free_list[j].pop() {
ffffffff80207792: 3a 75                	ld	a0, 424(sp)
ffffffff80207794: 23 30 a1 20          	sd	a0, 512(sp)
;                             self.free_list[j - 1]
ffffffff80207798: 8a 65                	ld	a1, 128(sp)
ffffffff8020779a: 13 86 f5 ff          	addi	a2, a1, -1
ffffffff8020779e: aa fc                	sd	a0, 120(sp)
ffffffff802077a0: b2 f8                	sd	a2, 112(sp)
ffffffff802077a2: 63 ef c5 1a          	bltu	a1, a2, 446
ffffffff802077a6: 09 a0                	j	2
ffffffff802077a8: 7d 45                	addi	a0, zero, 31
ffffffff802077aa: c6 75                	ld	a1, 112(sp)
ffffffff802077ac: 63 69 b5 1c          	bltu	a0, a1, 466
ffffffff802077b0: 09 a0                	j	2
ffffffff802077b2: 46 75                	ld	a0, 112(sp)
ffffffff802077b4: 93 15 35 00          	slli	a1, a0, 3
ffffffff802077b8: 12 76                	ld	a2, 288(sp)
ffffffff802077ba: 33 05 b6 00          	add	a0, a2, a1
;                                 .push((block as usize + (1 << (j - 1))) as *mut usize);
ffffffff802077be: e6 75                	ld	a1, 120(sp)
ffffffff802077c0: 8a 66                	ld	a3, 128(sp)
ffffffff802077c2: 13 87 f6 ff          	addi	a4, a3, -1
ffffffff802077c6: aa f4                	sd	a0, 104(sp)
ffffffff802077c8: ae f0                	sd	a1, 96(sp)
ffffffff802077ca: ba ec                	sd	a4, 88(sp)
ffffffff802077cc: 63 e5 e6 1c          	bltu	a3, a4, 458
ffffffff802077d0: 09 a0                	j	2
ffffffff802077d2: 66 65                	ld	a0, 88(sp)
ffffffff802077d4: 93 75 05 fc          	andi	a1, a0, -64
ffffffff802077d8: 05 46                	addi	a2, zero, 1
ffffffff802077da: 33 16 a6 00          	sll	a2, a2, a0
ffffffff802077de: 81 46                	mv	a3, zero
ffffffff802077e0: b2 e8                	sd	a2, 80(sp)
ffffffff802077e2: 63 99 d5 1c          	bne	a1, a3, 466
ffffffff802077e6: 09 a0                	j	2
ffffffff802077e8: 06 75                	ld	a0, 96(sp)
ffffffff802077ea: c6 65                	ld	a1, 80(sp)
ffffffff802077ec: 33 06 b5 00          	add	a2, a0, a1
ffffffff802077f0: b2 e4                	sd	a2, 72(sp)
ffffffff802077f2: 63 60 a6 1e          	bltu	a2, a0, 480
ffffffff802077f6: 09 a0                	j	2
;                             self.free_list[j - 1]
ffffffff802077f8: 26 75                	ld	a0, 104(sp)
ffffffff802077fa: a6 65                	ld	a1, 72(sp)
ffffffff802077fc: 97 20 00 00          	auipc	ra, 2
ffffffff80207800: e7 80 00 01          	jalr	16(ra)
ffffffff80207804: 09 a0                	j	2
;                             self.free_list[j - 1].push(block);
ffffffff80207806: 0a 65                	ld	a0, 128(sp)
ffffffff80207808: 93 05 f5 ff          	addi	a1, a0, -1
ffffffff8020780c: ae e0                	sd	a1, 64(sp)
ffffffff8020780e: 63 60 b5 1e          	bltu	a0, a1, 480
ffffffff80207812: 09 a0                	j	2
ffffffff80207814: 7d 45                	addi	a0, zero, 31
ffffffff80207816: 86 65                	ld	a1, 64(sp)
ffffffff80207818: 63 6a b5 1e          	bltu	a0, a1, 500
ffffffff8020781c: 09 a0                	j	2
ffffffff8020781e: 06 65                	ld	a0, 64(sp)
ffffffff80207820: 93 15 35 00          	slli	a1, a0, 3
ffffffff80207824: 12 76                	ld	a2, 288(sp)
ffffffff80207826: 33 05 b6 00          	add	a0, a2, a1
ffffffff8020782a: e6 75                	ld	a1, 120(sp)
ffffffff8020782c: 97 20 00 00          	auipc	ra, 2
ffffffff80207830: e7 80 00 fe          	jalr	-32(ra)
ffffffff80207834: 09 a0                	j	2
;                 for j in (class + 1..i + 1).rev() {
ffffffff80207836: dd bd                	j	-266
;     }
ffffffff80207838: 72 75                	ld	a0, 312(sp)
ffffffff8020783a: 83 30 81 21          	ld	ra, 536(sp)
ffffffff8020783e: 13 01 01 22          	addi	sp, sp, 544
ffffffff80207842: 82 80                	ret
;                         return Err(AllocErr {});
ffffffff80207844: d5 bf                	j	-12
;                     self.free_list[class]
ffffffff80207846: 0e 75                	ld	a0, 224(sp)
ffffffff80207848: 93 15 35 00          	slli	a1, a0, 3
ffffffff8020784c: 12 76                	ld	a2, 288(sp)
ffffffff8020784e: 33 05 b6 00          	add	a0, a2, a1
ffffffff80207852: 97 20 00 00          	auipc	ra, 2
ffffffff80207856: e7 80 a0 fc          	jalr	-54(ra)
ffffffff8020785a: 2a fc                	sd	a0, 56(sp)
ffffffff8020785c: 2e f8                	sd	a1, 48(sp)
ffffffff8020785e: 09 a0                	j	2

ffffffff80207860 .LBB4_69:
ffffffff80207860: 17 76 00 00          	auipc	a2, 7
ffffffff80207864: 13 06 86 28          	addi	a2, a2, 648

ffffffff80207868 .LBB4_70:
ffffffff80207868: 17 77 00 00          	auipc	a4, 7
ffffffff8020786c: 13 07 87 2a          	addi	a4, a4, 680
ffffffff80207870: 93 06 80 02          	addi	a3, zero, 40
ffffffff80207874: 62 75                	ld	a0, 56(sp)
ffffffff80207876: c2 75                	ld	a1, 48(sp)
ffffffff80207878: 97 20 00 00          	auipc	ra, 2
ffffffff8020787c: e7 80 00 cd          	jalr	-816(ra)
ffffffff80207880: 2a f4                	sd	a0, 40(sp)
ffffffff80207882: 09 a0                	j	2
;                 let result = NonNull::new(
ffffffff80207884: 22 75                	ld	a0, 40(sp)
ffffffff80207886: 97 10 00 00          	auipc	ra, 1
ffffffff8020788a: e7 80 c0 63          	jalr	1596(ra)
ffffffff8020788e: 2a fb                	sd	a0, 432(sp)
ffffffff80207890: 09 a0                	j	2
;                 if let Some(result) = result {
ffffffff80207892: 5a 75                	ld	a0, 432(sp)
ffffffff80207894: 81 45                	mv	a1, zero
ffffffff80207896: 63 16 b5 00          	bne	a0, a1, 12
ffffffff8020789a: 09 a0                	j	2
ffffffff8020789c: 01 45                	mv	a0, zero
;                     return Err(AllocErr {});
ffffffff8020789e: 2a fe                	sd	a0, 312(sp)
ffffffff802078a0: 99 a8                	j	86
;                 if let Some(result) = result {
ffffffff802078a2: 5a 75                	ld	a0, 432(sp)
ffffffff802078a4: 23 34 a1 20          	sd	a0, 520(sp)
ffffffff802078a8: 2c 12                	addi	a1, sp, 296
;                     self.user += layout.size();
ffffffff802078aa: 2a f0                	sd	a0, 32(sp)
ffffffff802078ac: 2e 85                	add	a0, zero, a1
ffffffff802078ae: 97 10 00 00          	auipc	ra, 1
ffffffff802078b2: e7 80 20 fb          	jalr	-78(ra)
ffffffff802078b6: 2a ec                	sd	a0, 24(sp)
ffffffff802078b8: 09 a0                	j	2
ffffffff802078ba: 12 75                	ld	a0, 288(sp)
ffffffff802078bc: 83 35 05 10          	ld	a1, 256(a0)
ffffffff802078c0: 62 66                	ld	a2, 24(sp)
ffffffff802078c2: b3 86 c5 00          	add	a3, a1, a2
ffffffff802078c6: 36 e8                	sd	a3, 16(sp)
ffffffff802078c8: 63 ea b6 16          	bltu	a3, a1, 372
ffffffff802078cc: 09 a0                	j	2
ffffffff802078ce: 42 65                	ld	a0, 16(sp)
ffffffff802078d0: 92 75                	ld	a1, 288(sp)
ffffffff802078d2: 23 b0 a5 10          	sd	a0, 256(a1)
;                     self.allocated += size;
ffffffff802078d6: 03 b6 85 10          	ld	a2, 264(a1)
ffffffff802078da: ce 76                	ld	a3, 240(sp)
ffffffff802078dc: 33 07 d6 00          	add	a4, a2, a3
ffffffff802078e0: 3a e4                	sd	a4, 8(sp)
ffffffff802078e2: 63 6b c7 16          	bltu	a4, a2, 374
ffffffff802078e6: 09 a0                	j	2
ffffffff802078e8: 22 65                	ld	a0, 8(sp)
ffffffff802078ea: 92 75                	ld	a1, 288(sp)
ffffffff802078ec: 23 b4 a5 10          	sd	a0, 264(a1)
;                     return Ok(result);
ffffffff802078f0: 02 76                	ld	a2, 32(sp)
ffffffff802078f2: 32 fe                	sd	a2, 312(sp)
ffffffff802078f4: 09 a0                	j	2
ffffffff802078f6: b9 b7                	j	-178

ffffffff802078f8 .LBB4_71:
;             if !self.free_list[i].is_empty() {
ffffffff802078f8: 17 76 00 00          	auipc	a2, 7
ffffffff802078fc: 13 06 86 0a          	addi	a2, a2, 168
ffffffff80207900: 93 05 00 02          	addi	a1, zero, 32
ffffffff80207904: 0e 65                	ld	a0, 192(sp)
ffffffff80207906: 97 30 00 00          	auipc	ra, 3
ffffffff8020790a: e7 80 e0 a5          	jalr	-1442(ra)
ffffffff8020790e: 00 00                	unimp	

ffffffff80207910 .LBB4_72:
;                 for j in (class + 1..i + 1).rev() {
ffffffff80207910: 17 75 00 00          	auipc	a0, 7
ffffffff80207914: 13 05 05 f0          	addi	a0, a0, -256

ffffffff80207918 .LBB4_73:
ffffffff80207918: 17 76 00 00          	auipc	a2, 7
ffffffff8020791c: 13 06 06 0a          	addi	a2, a2, 160
ffffffff80207920: f1 45                	addi	a1, zero, 28
ffffffff80207922: 97 30 00 00          	auipc	ra, 3
ffffffff80207926: e7 80 60 a1          	jalr	-1514(ra)
ffffffff8020792a: 00 00                	unimp	

ffffffff8020792c .LBB4_74:
ffffffff8020792c: 17 75 00 00          	auipc	a0, 7
ffffffff80207930: 13 05 45 ee          	addi	a0, a0, -284

ffffffff80207934 .LBB4_75:
ffffffff80207934: 17 76 00 00          	auipc	a2, 7
ffffffff80207938: 13 06 c6 09          	addi	a2, a2, 156
ffffffff8020793c: f1 45                	addi	a1, zero, 28
ffffffff8020793e: 97 30 00 00          	auipc	ra, 3
ffffffff80207942: e7 80 a0 9f          	jalr	-1542(ra)
ffffffff80207946: 00 00                	unimp	

ffffffff80207948 .LBB4_76:
;                     if let Some(block) = self.free_list[j].pop() {
ffffffff80207948: 17 76 00 00          	auipc	a2, 7
ffffffff8020794c: 13 06 06 0a          	addi	a2, a2, 160
ffffffff80207950: 93 05 00 02          	addi	a1, zero, 32
ffffffff80207954: 0a 65                	ld	a0, 128(sp)
ffffffff80207956: 97 30 00 00          	auipc	ra, 3
ffffffff8020795a: e7 80 e0 a0          	jalr	-1522(ra)
ffffffff8020795e: 00 00                	unimp	

ffffffff80207960 .LBB4_77:
;                             self.free_list[j - 1]
ffffffff80207960: 17 75 00 00          	auipc	a0, 7
ffffffff80207964: 13 05 05 ef          	addi	a0, a0, -272

ffffffff80207968 .LBB4_78:
ffffffff80207968: 17 76 00 00          	auipc	a2, 7
ffffffff8020796c: 13 06 86 09          	addi	a2, a2, 152
ffffffff80207970: 93 05 10 02          	addi	a1, zero, 33
ffffffff80207974: 97 30 00 00          	auipc	ra, 3
ffffffff80207978: e7 80 40 9c          	jalr	-1596(ra)
ffffffff8020797c: 00 00                	unimp	

ffffffff8020797e .LBB4_79:
ffffffff8020797e: 17 76 00 00          	auipc	a2, 7
ffffffff80207982: 13 06 a6 09          	addi	a2, a2, 154
ffffffff80207986: 93 05 00 02          	addi	a1, zero, 32
ffffffff8020798a: 46 75                	ld	a0, 112(sp)
ffffffff8020798c: 97 30 00 00          	auipc	ra, 3
ffffffff80207990: e7 80 80 9d          	jalr	-1576(ra)
ffffffff80207994: 00 00                	unimp	

ffffffff80207996 .LBB4_80:
;                                 .push((block as usize + (1 << (j - 1))) as *mut usize);
ffffffff80207996: 17 75 00 00          	auipc	a0, 7
ffffffff8020799a: 13 05 a5 eb          	addi	a0, a0, -326

ffffffff8020799e .LBB4_81:
ffffffff8020799e: 17 76 00 00          	auipc	a2, 7
ffffffff802079a2: 13 06 26 09          	addi	a2, a2, 146
ffffffff802079a6: 93 05 10 02          	addi	a1, zero, 33
ffffffff802079aa: 97 30 00 00          	auipc	ra, 3
ffffffff802079ae: e7 80 e0 98          	jalr	-1650(ra)
ffffffff802079b2: 00 00                	unimp	

ffffffff802079b4 .LBB4_82:
ffffffff802079b4: 17 75 00 00          	auipc	a0, 7
ffffffff802079b8: 13 05 c5 0a          	addi	a0, a0, 172

ffffffff802079bc .LBB4_83:
ffffffff802079bc: 17 76 00 00          	auipc	a2, 7
ffffffff802079c0: 13 06 c6 08          	addi	a2, a2, 140
ffffffff802079c4: 93 05 30 02          	addi	a1, zero, 35
ffffffff802079c8: 97 30 00 00          	auipc	ra, 3
ffffffff802079cc: e7 80 00 97          	jalr	-1680(ra)
ffffffff802079d0: 00 00                	unimp	

ffffffff802079d2 .LBB4_84:
ffffffff802079d2: 17 75 00 00          	auipc	a0, 7
ffffffff802079d6: 13 05 e5 e3          	addi	a0, a0, -450

ffffffff802079da .LBB4_85:
ffffffff802079da: 17 76 00 00          	auipc	a2, 7
ffffffff802079de: 13 06 e6 0a          	addi	a2, a2, 174
ffffffff802079e2: f1 45                	addi	a1, zero, 28
ffffffff802079e4: 97 30 00 00          	auipc	ra, 3
ffffffff802079e8: e7 80 40 95          	jalr	-1708(ra)
ffffffff802079ec: 00 00                	unimp	

ffffffff802079ee .LBB4_86:
;                             self.free_list[j - 1].push(block);
ffffffff802079ee: 17 75 00 00          	auipc	a0, 7
ffffffff802079f2: 13 05 25 e6          	addi	a0, a0, -414

ffffffff802079f6 .LBB4_87:
ffffffff802079f6: 17 76 00 00          	auipc	a2, 7
ffffffff802079fa: 13 06 a6 0a          	addi	a2, a2, 170
ffffffff802079fe: 93 05 10 02          	addi	a1, zero, 33
ffffffff80207a02: 97 30 00 00          	auipc	ra, 3
ffffffff80207a06: e7 80 60 93          	jalr	-1738(ra)
ffffffff80207a0a: 00 00                	unimp	

ffffffff80207a0c .LBB4_88:
ffffffff80207a0c: 17 76 00 00          	auipc	a2, 7
ffffffff80207a10: 13 06 c6 0a          	addi	a2, a2, 172
ffffffff80207a14: 93 05 00 02          	addi	a1, zero, 32
ffffffff80207a18: 06 65                	ld	a0, 64(sp)
ffffffff80207a1a: 97 30 00 00          	auipc	ra, 3
ffffffff80207a1e: e7 80 a0 94          	jalr	-1718(ra)
ffffffff80207a22: 00 00                	unimp	

ffffffff80207a24 .LBB4_89:
;                     self.free_list[class]
ffffffff80207a24: 17 76 00 00          	auipc	a2, 7
ffffffff80207a28: 13 06 c6 0a          	addi	a2, a2, 172
ffffffff80207a2c: 93 05 00 02          	addi	a1, zero, 32
ffffffff80207a30: 0e 75                	ld	a0, 224(sp)
ffffffff80207a32: 97 30 00 00          	auipc	ra, 3
ffffffff80207a36: e7 80 20 93          	jalr	-1742(ra)
ffffffff80207a3a: 00 00                	unimp	

ffffffff80207a3c .LBB4_90:
;                     self.user += layout.size();
ffffffff80207a3c: 17 75 00 00          	auipc	a0, 7
ffffffff80207a40: 13 05 45 dd          	addi	a0, a0, -556

ffffffff80207a44 .LBB4_91:
ffffffff80207a44: 17 76 00 00          	auipc	a2, 7
ffffffff80207a48: 13 06 46 0e          	addi	a2, a2, 228
ffffffff80207a4c: f1 45                	addi	a1, zero, 28
ffffffff80207a4e: 97 30 00 00          	auipc	ra, 3
ffffffff80207a52: e7 80 a0 8e          	jalr	-1814(ra)
ffffffff80207a56: 00 00                	unimp	

ffffffff80207a58 .LBB4_92:
;                     self.allocated += size;
ffffffff80207a58: 17 75 00 00          	auipc	a0, 7
ffffffff80207a5c: 13 05 85 db          	addi	a0, a0, -584

ffffffff80207a60 .LBB4_93:
ffffffff80207a60: 17 76 00 00          	auipc	a2, 7
ffffffff80207a64: 13 06 06 0e          	addi	a2, a2, 224
ffffffff80207a68: f1 45                	addi	a1, zero, 28
ffffffff80207a6a: 97 30 00 00          	auipc	ra, 3
ffffffff80207a6e: e7 80 e0 8c          	jalr	-1842(ra)
ffffffff80207a72: 00 00                	unimp	

ffffffff80207a74 _ZN22buddy_system_allocator4Heap7dealloc17hdb8aebd26b2ce3bcE:
;     pub fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {
ffffffff80207a74: 45 71                	addi	sp, sp, -464
ffffffff80207a76: 86 e7                	sd	ra, 456(sp)
ffffffff80207a78: b2 f1                	sd	a2, 224(sp)
ffffffff80207a7a: b6 f5                	sd	a3, 232(sp)
ffffffff80207a7c: aa fe                	sd	a0, 376(sp)
ffffffff80207a7e: 2e e3                	sd	a1, 384(sp)
ffffffff80207a80: 90 11                	addi	a2, sp, 224
;             layout.size().next_power_of_two(),
ffffffff80207a82: aa ed                	sd	a0, 216(sp)
ffffffff80207a84: 32 85                	add	a0, zero, a2
ffffffff80207a86: ae e9                	sd	a1, 208(sp)
ffffffff80207a88: 97 10 00 00          	auipc	ra, 1
ffffffff80207a8c: e7 80 80 dd          	jalr	-552(ra)
ffffffff80207a90: aa e5                	sd	a0, 200(sp)
ffffffff80207a92: 09 a0                	j	2
ffffffff80207a94: 2e 65                	ld	a0, 200(sp)
ffffffff80207a96: 97 10 00 00          	auipc	ra, 1
ffffffff80207a9a: e7 80 40 03          	jalr	52(ra)
ffffffff80207a9e: aa e1                	sd	a0, 192(sp)
ffffffff80207aa0: 09 a0                	j	2
ffffffff80207aa2: 88 11                	addi	a0, sp, 224
;             max(layout.align(), size_of::<usize>()),
ffffffff80207aa4: 97 10 00 00          	auipc	ra, 1
ffffffff80207aa8: e7 80 60 dc          	jalr	-570(ra)
ffffffff80207aac: 2a fd                	sd	a0, 184(sp)
ffffffff80207aae: 09 a0                	j	2
ffffffff80207ab0: 21 45                	addi	a0, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80207ab2: aa e3                	sd	a0, 448(sp)
;             max(layout.align(), size_of::<usize>()),
ffffffff80207ab4: 2a f9                	sd	a0, 176(sp)
ffffffff80207ab6: 09 a0                	j	2
ffffffff80207ab8: 6a 75                	ld	a0, 184(sp)
ffffffff80207aba: ca 75                	ld	a1, 176(sp)
ffffffff80207abc: 97 20 00 00          	auipc	ra, 2
ffffffff80207ac0: e7 80 00 8a          	jalr	-1888(ra)
ffffffff80207ac4: 2a f5                	sd	a0, 168(sp)
ffffffff80207ac6: 09 a0                	j	2
;         let size = max(
ffffffff80207ac8: 0e 65                	ld	a0, 192(sp)
ffffffff80207aca: aa 75                	ld	a1, 168(sp)
ffffffff80207acc: 97 20 00 00          	auipc	ra, 2
ffffffff80207ad0: e7 80 00 89          	jalr	-1904(ra)
ffffffff80207ad4: aa 85                	add	a1, zero, a0
ffffffff80207ad6: 2a e7                	sd	a0, 392(sp)
ffffffff80207ad8: 2e f1                	sd	a1, 160(sp)
ffffffff80207ada: 09 a0                	j	2
;         let class = size.trailing_zeros() as usize;
ffffffff80207adc: 0a 75                	ld	a0, 160(sp)
ffffffff80207ade: 97 10 00 00          	auipc	ra, 1
ffffffff80207ae2: e7 80 20 f2          	jalr	-222(ra)
ffffffff80207ae6: 2a ed                	sd	a0, 152(sp)
ffffffff80207ae8: 09 a0                	j	2
ffffffff80207aea: 6a 65                	ld	a0, 152(sp)
ffffffff80207aec: 9b 05 05 00          	sext.w	a1, a0
ffffffff80207af0: 13 16 05 02          	slli	a2, a0, 32
ffffffff80207af4: 01 92                	srli	a2, a2, 32
ffffffff80207af6: 32 eb                	sd	a2, 400(sp)
ffffffff80207af8: fd 46                	addi	a3, zero, 31
;             self.free_list[class].push(ptr.as_ptr() as *mut usize);
ffffffff80207afa: 32 e9                	sd	a2, 144(sp)
ffffffff80207afc: 63 ed b6 1e          	bltu	a3, a1, 506
ffffffff80207b00: 09 a0                	j	2
ffffffff80207b02: 4a 65                	ld	a0, 144(sp)
ffffffff80207b04: 93 15 35 00          	slli	a1, a0, 3
ffffffff80207b08: 6e 66                	ld	a2, 216(sp)
ffffffff80207b0a: 33 05 b6 00          	add	a0, a2, a1
ffffffff80207b0e: ce 65                	ld	a1, 208(sp)
ffffffff80207b10: 2a e5                	sd	a0, 136(sp)
ffffffff80207b12: 2e 85                	add	a0, zero, a1
ffffffff80207b14: 97 10 00 00          	auipc	ra, 1
ffffffff80207b18: e7 80 60 3f          	jalr	1014(ra)
ffffffff80207b1c: 2a e1                	sd	a0, 128(sp)
ffffffff80207b1e: 09 a0                	j	2
ffffffff80207b20: 2a 65                	ld	a0, 136(sp)
ffffffff80207b22: 8a 65                	ld	a1, 128(sp)
ffffffff80207b24: 97 20 00 00          	auipc	ra, 2
ffffffff80207b28: e7 80 80 ce          	jalr	-792(ra)
ffffffff80207b2c: 09 a0                	j	2
;             let mut current_ptr = ptr.as_ptr() as usize;
ffffffff80207b2e: 4e 65                	ld	a0, 208(sp)
ffffffff80207b30: 97 10 00 00          	auipc	ra, 1
ffffffff80207b34: e7 80 a0 3d          	jalr	986(ra)
ffffffff80207b38: aa fc                	sd	a0, 120(sp)
ffffffff80207b3a: 09 a0                	j	2
ffffffff80207b3c: 66 75                	ld	a0, 120(sp)
ffffffff80207b3e: aa f9                	sd	a0, 240(sp)
;             let mut current_class = class;
ffffffff80207b40: ca 65                	ld	a1, 144(sp)
ffffffff80207b42: ae fd                	sd	a1, 248(sp)
;             while current_class < self.free_list.len() {
ffffffff80207b44: 09 a0                	j	2
ffffffff80207b46: 6e 75                	ld	a0, 248(sp)
ffffffff80207b48: 93 05 00 02          	addi	a1, zero, 32
ffffffff80207b4c: 6e 66                	ld	a2, 216(sp)
ffffffff80207b4e: aa f8                	sd	a0, 112(sp)
ffffffff80207b50: 32 85                	add	a0, zero, a2
ffffffff80207b52: 97 20 00 00          	auipc	ra, 2
ffffffff80207b56: e7 80 e0 c4          	jalr	-946(ra)
ffffffff80207b5a: aa f4                	sd	a0, 104(sp)
ffffffff80207b5c: 09 a0                	j	2
ffffffff80207b5e: 46 75                	ld	a0, 112(sp)
ffffffff80207b60: a6 75                	ld	a1, 104(sp)
ffffffff80207b62: 63 64 b5 00          	bltu	a0, a1, 8
ffffffff80207b66: 09 a0                	j	2
ffffffff80207b68: 91 a2                	j	324
;                 let buddy = current_ptr ^ (1 << current_class);
ffffffff80207b6a: 4e 75                	ld	a0, 240(sp)
ffffffff80207b6c: ee 75                	ld	a1, 248(sp)
ffffffff80207b6e: 13 f6 05 fc          	andi	a2, a1, -64
ffffffff80207b72: 85 46                	addi	a3, zero, 1
ffffffff80207b74: b3 95 b6 00          	sll	a1, a3, a1
ffffffff80207b78: 81 46                	mv	a3, zero
ffffffff80207b7a: aa f0                	sd	a0, 96(sp)
ffffffff80207b7c: ae ec                	sd	a1, 88(sp)
ffffffff80207b7e: 63 18 d6 18          	bne	a2, a3, 400
ffffffff80207b82: 09 a0                	j	2
ffffffff80207b84: 06 75                	ld	a0, 96(sp)
ffffffff80207b86: e6 65                	ld	a1, 88(sp)
ffffffff80207b88: 33 46 b5 00          	xor	a2, a0, a1
ffffffff80207b8c: 32 ef                	sd	a2, 408(sp)
ffffffff80207b8e: 81 46                	mv	a3, zero
;                 let mut flag = false;
ffffffff80207b90: a3 03 d1 10          	sb	a3, 263(sp)
;                 for block in self.free_list[current_class].iter_mut() {
ffffffff80207b94: ee 76                	ld	a3, 248(sp)
ffffffff80207b96: 7d 47                	addi	a4, zero, 31
ffffffff80207b98: b2 e8                	sd	a2, 80(sp)
ffffffff80207b9a: b6 e4                	sd	a3, 72(sp)
ffffffff80207b9c: 63 68 d7 18          	bltu	a4, a3, 400
ffffffff80207ba0: 09 a0                	j	2
ffffffff80207ba2: 26 65                	ld	a0, 72(sp)
ffffffff80207ba4: 93 15 35 00          	slli	a1, a0, 3
ffffffff80207ba8: 6e 66                	ld	a2, 216(sp)
ffffffff80207baa: b2 95                	add	a1, a1, a2
ffffffff80207bac: 08 12                	addi	a0, sp, 288
ffffffff80207bae: 97 20 00 00          	auipc	ra, 2
ffffffff80207bb2: e7 80 a0 ca          	jalr	-854(ra)
ffffffff80207bb6: 09 a0                	j	2
ffffffff80207bb8: 28 02                	addi	a0, sp, 264
ffffffff80207bba: 0c 12                	addi	a1, sp, 288
ffffffff80207bbc: 97 20 00 00          	auipc	ra, 2
ffffffff80207bc0: e7 80 60 c2          	jalr	-986(ra)
ffffffff80207bc4: 09 a0                	j	2
ffffffff80207bc6: 72 65                	ld	a0, 280(sp)
ffffffff80207bc8: aa e6                	sd	a0, 328(sp)
ffffffff80207bca: 52 65                	ld	a0, 272(sp)
ffffffff80207bcc: aa e2                	sd	a0, 320(sp)
ffffffff80207bce: 32 65                	ld	a0, 264(sp)
ffffffff80207bd0: 2a fe                	sd	a0, 312(sp)
ffffffff80207bd2: 09 a0                	j	2
ffffffff80207bd4: 88 0a                	addi	a0, sp, 336
ffffffff80207bd6: 2c 1a                	addi	a1, sp, 312
ffffffff80207bd8: 97 20 00 00          	auipc	ra, 2
ffffffff80207bdc: e7 80 a0 ca          	jalr	-854(ra)
ffffffff80207be0: 09 a0                	j	2
ffffffff80207be2: 56 65                	ld	a0, 336(sp)
ffffffff80207be4: 81 45                	mv	a1, zero
ffffffff80207be6: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80207bea: 09 a0                	j	2
ffffffff80207bec: 19 a0                	j	6
ffffffff80207bee: 0d a0                	j	34
ffffffff80207bf0: 00 00                	unimp	
ffffffff80207bf2: 76 65                	ld	a0, 344(sp)
ffffffff80207bf4: 96 75                	ld	a1, 352(sp)
ffffffff80207bf6: 2a f3                	sd	a0, 416(sp)
ffffffff80207bf8: 2e f7                	sd	a1, 424(sp)
ffffffff80207bfa: 2a fb                	sd	a0, 432(sp)
ffffffff80207bfc: 2e ff                	sd	a1, 440(sp)
ffffffff80207bfe: aa f6                	sd	a0, 360(sp)
ffffffff80207c00: ae fa                	sd	a1, 368(sp)
ffffffff80207c02: a8 12                	addi	a0, sp, 360
;                     if block.value() as usize == buddy {
ffffffff80207c04: 97 20 00 00          	auipc	ra, 2
ffffffff80207c08: e7 80 40 c7          	jalr	-908(ra)
ffffffff80207c0c: aa e0                	sd	a0, 64(sp)
ffffffff80207c0e: 31 a0                	j	12
;                 if flag {
ffffffff80207c10: 03 45 71 10          	lbu	a0, 263(sp)
ffffffff80207c14: 05 89                	andi	a0, a0, 1
ffffffff80207c16: 05 e5                	bnez	a0, 40
ffffffff80207c18: 15 a0                	j	36
;                     if block.value() as usize == buddy {
ffffffff80207c1a: 06 65                	ld	a0, 64(sp)
ffffffff80207c1c: c6 65                	ld	a1, 80(sp)
ffffffff80207c1e: 63 04 b5 00          	beq	a0, a1, 8
ffffffff80207c22: 09 a0                	j	2
;                 for block in self.free_list[current_class].iter_mut() {
ffffffff80207c24: 45 bf                	j	-80
;                         block.pop();
ffffffff80207c26: 36 75                	ld	a0, 360(sp)
ffffffff80207c28: d6 75                	ld	a1, 368(sp)
ffffffff80207c2a: 97 20 00 00          	auipc	ra, 2
ffffffff80207c2e: e7 80 e0 c3          	jalr	-962(ra)
ffffffff80207c32: 09 a0                	j	2
ffffffff80207c34: 05 45                	addi	a0, zero, 1
;                         flag = true;
ffffffff80207c36: a3 03 a1 10          	sb	a0, 263(sp)
;                         break;
ffffffff80207c3a: d9 bf                	j	-42
;                     break;
ffffffff80207c3c: 85 a8                	j	112
;                     self.free_list[current_class].pop();
ffffffff80207c3e: 6e 75                	ld	a0, 248(sp)
ffffffff80207c40: fd 45                	addi	a1, zero, 31
ffffffff80207c42: 2a fc                	sd	a0, 56(sp)
ffffffff80207c44: 63 e0 a5 10          	bltu	a1, a0, 256
ffffffff80207c48: 09 a0                	j	2
ffffffff80207c4a: 62 75                	ld	a0, 56(sp)
ffffffff80207c4c: 93 15 35 00          	slli	a1, a0, 3
ffffffff80207c50: 6e 66                	ld	a2, 216(sp)
ffffffff80207c52: 33 05 b6 00          	add	a0, a2, a1
ffffffff80207c56: 97 20 00 00          	auipc	ra, 2
ffffffff80207c5a: e7 80 60 bc          	jalr	-1082(ra)
ffffffff80207c5e: 09 a0                	j	2
;                     current_ptr = min(current_ptr, buddy);
ffffffff80207c60: 4e 75                	ld	a0, 240(sp)
ffffffff80207c62: c6 65                	ld	a1, 80(sp)
ffffffff80207c64: 97 10 00 00          	auipc	ra, 1
ffffffff80207c68: e7 80 40 71          	jalr	1812(ra)
ffffffff80207c6c: 2a f8                	sd	a0, 48(sp)
ffffffff80207c6e: 09 a0                	j	2
ffffffff80207c70: 42 75                	ld	a0, 48(sp)
ffffffff80207c72: aa f9                	sd	a0, 240(sp)
;                     current_class += 1;
ffffffff80207c74: ee 75                	ld	a1, 248(sp)
ffffffff80207c76: 13 86 15 00          	addi	a2, a1, 1
ffffffff80207c7a: 32 f4                	sd	a2, 40(sp)
ffffffff80207c7c: 63 60 b6 0e          	bltu	a2, a1, 224
ffffffff80207c80: 09 a0                	j	2
ffffffff80207c82: 22 75                	ld	a0, 40(sp)
ffffffff80207c84: aa fd                	sd	a0, 248(sp)
ffffffff80207c86: fd 45                	addi	a1, zero, 31
;                     self.free_list[current_class].push(current_ptr as *mut usize);
ffffffff80207c88: 22 76                	ld	a2, 40(sp)
ffffffff80207c8a: 2a f0                	sd	a0, 32(sp)
ffffffff80207c8c: 63 e6 c5 0e          	bltu	a1, a2, 236
ffffffff80207c90: 09 a0                	j	2
ffffffff80207c92: 02 75                	ld	a0, 32(sp)
ffffffff80207c94: 93 15 35 00          	slli	a1, a0, 3
ffffffff80207c98: 6e 66                	ld	a2, 216(sp)
ffffffff80207c9a: 33 05 b6 00          	add	a0, a2, a1
ffffffff80207c9e: ce 75                	ld	a1, 240(sp)
ffffffff80207ca0: 97 20 00 00          	auipc	ra, 2
ffffffff80207ca4: e7 80 c0 b6          	jalr	-1172(ra)
ffffffff80207ca8: 09 a0                	j	2
;             while current_class < self.free_list.len() {
ffffffff80207caa: 71 bd                	j	-356
ffffffff80207cac: 88 11                	addi	a0, sp, 224
;         self.user -= layout.size();
ffffffff80207cae: 97 10 00 00          	auipc	ra, 1
ffffffff80207cb2: e7 80 20 bb          	jalr	-1102(ra)
ffffffff80207cb6: 2a ec                	sd	a0, 24(sp)
ffffffff80207cb8: 09 a0                	j	2
ffffffff80207cba: 6e 65                	ld	a0, 216(sp)
ffffffff80207cbc: 83 35 05 10          	ld	a1, 256(a0)
ffffffff80207cc0: 62 66                	ld	a2, 24(sp)
ffffffff80207cc2: b3 86 c5 40          	sub	a3, a1, a2
ffffffff80207cc6: 36 e8                	sd	a3, 16(sp)
ffffffff80207cc8: 63 e4 d5 0c          	bltu	a1, a3, 200
ffffffff80207ccc: 09 a0                	j	2
ffffffff80207cce: 42 65                	ld	a0, 16(sp)
ffffffff80207cd0: ee 65                	ld	a1, 216(sp)
ffffffff80207cd2: 23 b0 a5 10          	sd	a0, 256(a1)
;         self.allocated -= size;
ffffffff80207cd6: 03 b6 85 10          	ld	a2, 264(a1)
ffffffff80207cda: 8a 76                	ld	a3, 160(sp)
ffffffff80207cdc: 33 07 d6 40          	sub	a4, a2, a3
ffffffff80207ce0: 3a e4                	sd	a4, 8(sp)
ffffffff80207ce2: 63 66 e6 0c          	bltu	a2, a4, 204
ffffffff80207ce6: 09 a0                	j	2
ffffffff80207ce8: 22 65                	ld	a0, 8(sp)
ffffffff80207cea: ee 65                	ld	a1, 216(sp)
ffffffff80207cec: 23 b4 a5 10          	sd	a0, 264(a1)
;     }
ffffffff80207cf0: be 60                	ld	ra, 456(sp)
ffffffff80207cf2: 79 61                	addi	sp, sp, 464
ffffffff80207cf4: 82 80                	ret

ffffffff80207cf6 .LBB5_51:
;             self.free_list[class].push(ptr.as_ptr() as *mut usize);
ffffffff80207cf6: 17 76 00 00          	auipc	a2, 7
ffffffff80207cfa: 13 06 26 e6          	addi	a2, a2, -414
ffffffff80207cfe: 93 05 00 02          	addi	a1, zero, 32
ffffffff80207d02: 4a 65                	ld	a0, 144(sp)
ffffffff80207d04: 97 20 00 00          	auipc	ra, 2
ffffffff80207d08: e7 80 00 66          	jalr	1632(ra)
ffffffff80207d0c: 00 00                	unimp	

ffffffff80207d0e .LBB5_52:
;                 let buddy = current_ptr ^ (1 << current_class);
ffffffff80207d0e: 17 75 00 00          	auipc	a0, 7
ffffffff80207d12: 13 05 25 d5          	addi	a0, a0, -686

ffffffff80207d16 .LBB5_53:
ffffffff80207d16: 17 76 00 00          	auipc	a2, 7
ffffffff80207d1a: 13 06 a6 e5          	addi	a2, a2, -422
ffffffff80207d1e: 93 05 30 02          	addi	a1, zero, 35
ffffffff80207d22: 97 20 00 00          	auipc	ra, 2
ffffffff80207d26: e7 80 60 61          	jalr	1558(ra)
ffffffff80207d2a: 00 00                	unimp	

ffffffff80207d2c .LBB5_54:
;                 for block in self.free_list[current_class].iter_mut() {
ffffffff80207d2c: 17 76 00 00          	auipc	a2, 7
ffffffff80207d30: 13 06 c6 e5          	addi	a2, a2, -420
ffffffff80207d34: 93 05 00 02          	addi	a1, zero, 32
ffffffff80207d38: 26 65                	ld	a0, 72(sp)
ffffffff80207d3a: 97 20 00 00          	auipc	ra, 2
ffffffff80207d3e: e7 80 a0 62          	jalr	1578(ra)
ffffffff80207d42: 00 00                	unimp	

ffffffff80207d44 .LBB5_55:
;                     self.free_list[current_class].pop();
ffffffff80207d44: 17 76 00 00          	auipc	a2, 7
ffffffff80207d48: 13 06 c6 e5          	addi	a2, a2, -420
ffffffff80207d4c: 93 05 00 02          	addi	a1, zero, 32
ffffffff80207d50: 62 75                	ld	a0, 56(sp)
ffffffff80207d52: 97 20 00 00          	auipc	ra, 2
ffffffff80207d56: e7 80 20 61          	jalr	1554(ra)
ffffffff80207d5a: 00 00                	unimp	

ffffffff80207d5c .LBB5_56:
;                     current_class += 1;
ffffffff80207d5c: 17 75 00 00          	auipc	a0, 7
ffffffff80207d60: 13 05 45 ab          	addi	a0, a0, -1356

ffffffff80207d64 .LBB5_57:
ffffffff80207d64: 17 76 00 00          	auipc	a2, 7
ffffffff80207d68: 13 06 46 e5          	addi	a2, a2, -428
ffffffff80207d6c: f1 45                	addi	a1, zero, 28
ffffffff80207d6e: 97 20 00 00          	auipc	ra, 2
ffffffff80207d72: e7 80 a0 5c          	jalr	1482(ra)
ffffffff80207d76: 00 00                	unimp	

ffffffff80207d78 .LBB5_58:
;                     self.free_list[current_class].push(current_ptr as *mut usize);
ffffffff80207d78: 17 76 00 00          	auipc	a2, 7
ffffffff80207d7c: 13 06 86 e5          	addi	a2, a2, -424
ffffffff80207d80: 93 05 00 02          	addi	a1, zero, 32
ffffffff80207d84: 02 75                	ld	a0, 32(sp)
ffffffff80207d86: 97 20 00 00          	auipc	ra, 2
ffffffff80207d8a: e7 80 e0 5d          	jalr	1502(ra)
ffffffff80207d8e: 00 00                	unimp	

ffffffff80207d90 .LBB5_59:
;         self.user -= layout.size();
ffffffff80207d90: 17 75 00 00          	auipc	a0, 7
ffffffff80207d94: 13 05 05 ac          	addi	a0, a0, -1344

ffffffff80207d98 .LBB5_60:
ffffffff80207d98: 17 76 00 00          	auipc	a2, 7
ffffffff80207d9c: 13 06 06 e5          	addi	a2, a2, -432
ffffffff80207da0: 93 05 10 02          	addi	a1, zero, 33
ffffffff80207da4: 97 20 00 00          	auipc	ra, 2
ffffffff80207da8: e7 80 40 59          	jalr	1428(ra)
ffffffff80207dac: 00 00                	unimp	

ffffffff80207dae .LBB5_61:
;         self.allocated -= size;
ffffffff80207dae: 17 75 00 00          	auipc	a0, 7
ffffffff80207db2: 13 05 25 aa          	addi	a0, a0, -1374

ffffffff80207db6 .LBB5_62:
ffffffff80207db6: 17 76 00 00          	auipc	a2, 7
ffffffff80207dba: 13 06 a6 e4          	addi	a2, a2, -438
ffffffff80207dbe: 93 05 10 02          	addi	a1, zero, 33
ffffffff80207dc2: 97 20 00 00          	auipc	ra, 2
ffffffff80207dc6: e7 80 60 57          	jalr	1398(ra)
ffffffff80207dca: 00 00                	unimp	

ffffffff80207dcc _ZN78_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2189a706d99e7f00E:
;     fn deref(&self) -> &Mutex<Heap> {
ffffffff80207dcc: 41 11                	addi	sp, sp, -16
ffffffff80207dce: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80207dd0: 41 01                	addi	sp, sp, 16
ffffffff80207dd2: 82 80                	ret

ffffffff80207dd4 _ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h3725aae55e4e514eE:
;     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
ffffffff80207dd4: 59 71                	addi	sp, sp, -112
ffffffff80207dd6: 86 f4                	sd	ra, 104(sp)
ffffffff80207dd8: aa e8                	sd	a0, 80(sp)
ffffffff80207dda: ae ec                	sd	a1, 88(sp)
ffffffff80207ddc: b2 f0                	sd	a2, 96(sp)
;         self.0
ffffffff80207dde: 32 fc                	sd	a2, 56(sp)
ffffffff80207de0: 2e f8                	sd	a1, 48(sp)
ffffffff80207de2: 97 10 00 00          	auipc	ra, 1
ffffffff80207de6: e7 80 80 70          	jalr	1800(ra)
ffffffff80207dea: aa e0                	sd	a0, 64(sp)
ffffffff80207dec: ae e4                	sd	a1, 72(sp)
ffffffff80207dee: 09 a0                	j	2
ffffffff80207df0: 88 00                	addi	a0, sp, 64
ffffffff80207df2: 97 10 00 00          	auipc	ra, 1
ffffffff80207df6: e7 80 c0 74          	jalr	1868(ra)
ffffffff80207dfa: 2a f4                	sd	a0, 40(sp)
ffffffff80207dfc: 09 a0                	j	2
ffffffff80207dfe: 22 75                	ld	a0, 40(sp)
ffffffff80207e00: c2 75                	ld	a1, 48(sp)
ffffffff80207e02: 62 76                	ld	a2, 56(sp)
ffffffff80207e04: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80207e08: e7 80 60 7c          	jalr	1990(ra)
ffffffff80207e0c: 2a f0                	sd	a0, 32(sp)
ffffffff80207e0e: 09 a0                	j	2
ffffffff80207e10: 02 75                	ld	a0, 32(sp)
ffffffff80207e12: 97 20 00 00          	auipc	ra, 2
ffffffff80207e16: e7 80 e0 99          	jalr	-1634(ra)
ffffffff80207e1a: 2a ec                	sd	a0, 24(sp)
ffffffff80207e1c: 09 a0                	j	2
ffffffff80207e1e: 01 45                	mv	a0, zero
ffffffff80207e20: e2 65                	ld	a1, 24(sp)
ffffffff80207e22: 2a e8                	sd	a0, 16(sp)
ffffffff80207e24: 2e 85                	add	a0, zero, a1
ffffffff80207e26: c2 65                	ld	a1, 16(sp)
ffffffff80207e28: 97 10 00 00          	auipc	ra, 1
ffffffff80207e2c: e7 80 60 75          	jalr	1878(ra)
ffffffff80207e30: 2a e4                	sd	a0, 8(sp)
ffffffff80207e32: 09 a0                	j	2
ffffffff80207e34: 88 00                	addi	a0, sp, 64
;     }
ffffffff80207e36: 97 20 00 00          	auipc	ra, 2
ffffffff80207e3a: e7 80 a0 90          	jalr	-1782(ra)
ffffffff80207e3e: 09 a0                	j	2
ffffffff80207e40: 22 65                	ld	a0, 8(sp)
ffffffff80207e42: a6 70                	ld	ra, 104(sp)
ffffffff80207e44: 65 61                	addi	sp, sp, 112
ffffffff80207e46: 82 80                	ret

ffffffff80207e48 _ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h72161d0d50598f9dE:
;             .map_or(0 as *mut u8, |allocation| allocation.as_ptr())
ffffffff80207e48: 01 11                	addi	sp, sp, -32
ffffffff80207e4a: 06 ec                	sd	ra, 24(sp)
ffffffff80207e4c: 2a e8                	sd	a0, 16(sp)
ffffffff80207e4e: 97 10 00 00          	auipc	ra, 1
ffffffff80207e52: e7 80 c0 0b          	jalr	188(ra)
ffffffff80207e56: 2a e0                	sd	a0, 0(sp)
ffffffff80207e58: 09 a0                	j	2
ffffffff80207e5a: 02 65                	ld	a0, 0(sp)
ffffffff80207e5c: e2 60                	ld	ra, 24(sp)
ffffffff80207e5e: 05 61                	addi	sp, sp, 32
ffffffff80207e60: 82 80                	ret

ffffffff80207e62 _ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h9d0cd91b4c800f30E:
;     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {
ffffffff80207e62: 1d 71                	addi	sp, sp, -96
ffffffff80207e64: 86 ec                	sd	ra, 88(sp)
ffffffff80207e66: 2a fc                	sd	a0, 56(sp)
ffffffff80207e68: ae e0                	sd	a1, 64(sp)
ffffffff80207e6a: b2 e4                	sd	a2, 72(sp)
ffffffff80207e6c: b6 e8                	sd	a3, 80(sp)
;         self.0.lock().dealloc(NonNull::new_unchecked(ptr), layout)
ffffffff80207e6e: 36 f0                	sd	a3, 32(sp)
ffffffff80207e70: 32 ec                	sd	a2, 24(sp)
ffffffff80207e72: 2e e8                	sd	a1, 16(sp)
ffffffff80207e74: 97 10 00 00          	auipc	ra, 1
ffffffff80207e78: e7 80 60 67          	jalr	1654(ra)
ffffffff80207e7c: 2a f4                	sd	a0, 40(sp)
ffffffff80207e7e: 2e f8                	sd	a1, 48(sp)
ffffffff80207e80: 09 a0                	j	2
ffffffff80207e82: 28 10                	addi	a0, sp, 40
ffffffff80207e84: 97 10 00 00          	auipc	ra, 1
ffffffff80207e88: e7 80 a0 6b          	jalr	1722(ra)
ffffffff80207e8c: 2a e4                	sd	a0, 8(sp)
ffffffff80207e8e: 09 a0                	j	2
ffffffff80207e90: 42 65                	ld	a0, 16(sp)
ffffffff80207e92: 97 10 00 00          	auipc	ra, 1
ffffffff80207e96: e7 80 c0 01          	jalr	28(ra)
ffffffff80207e9a: 2a e0                	sd	a0, 0(sp)
ffffffff80207e9c: 09 a0                	j	2
ffffffff80207e9e: 22 65                	ld	a0, 8(sp)
ffffffff80207ea0: 82 65                	ld	a1, 0(sp)
ffffffff80207ea2: 62 66                	ld	a2, 24(sp)
ffffffff80207ea4: 82 76                	ld	a3, 32(sp)
ffffffff80207ea6: 97 00 00 00          	auipc	ra, 0
ffffffff80207eaa: e7 80 e0 bc          	jalr	-1074(ra)
ffffffff80207eae: 09 a0                	j	2
ffffffff80207eb0: 28 10                	addi	a0, sp, 40
;     }
ffffffff80207eb2: 97 20 00 00          	auipc	ra, 2
ffffffff80207eb6: e7 80 e0 88          	jalr	-1906(ra)
ffffffff80207eba: 09 a0                	j	2
ffffffff80207ebc: e6 60                	ld	ra, 88(sp)
ffffffff80207ebe: 25 61                	addi	sp, sp, 96
ffffffff80207ec0: 82 80                	ret

ffffffff80207ec2 _ZN22buddy_system_allocator17prev_power_of_two17h2f0b450b9875c280E:
; pub(crate) fn prev_power_of_two(num: usize) -> usize {
ffffffff80207ec2: 5d 71                	addi	sp, sp, -80
ffffffff80207ec4: 86 e4                	sd	ra, 72(sp)
ffffffff80207ec6: 2a fc                	sd	a0, 56(sp)
ffffffff80207ec8: a1 45                	addi	a1, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80207eca: ae e0                	sd	a1, 64(sp)
;     1 << (8 * (size_of::<usize>()) - num.leading_zeros() as usize - 1)
ffffffff80207ecc: 2a f8                	sd	a0, 48(sp)
ffffffff80207ece: 2e f4                	sd	a1, 40(sp)
ffffffff80207ed0: 09 a0                	j	2
ffffffff80207ed2: 22 75                	ld	a0, 40(sp)
ffffffff80207ed4: 93 15 35 00          	slli	a1, a0, 3
ffffffff80207ed8: 01 46                	mv	a2, zero
ffffffff80207eda: 2e f0                	sd	a1, 32(sp)
ffffffff80207edc: 31 ea                	bnez	a2, 84
ffffffff80207ede: 09 a0                	j	2
ffffffff80207ee0: 42 75                	ld	a0, 48(sp)
ffffffff80207ee2: 97 10 00 00          	auipc	ra, 1
ffffffff80207ee6: e7 80 00 a5          	jalr	-1456(ra)
ffffffff80207eea: 2a ec                	sd	a0, 24(sp)
ffffffff80207eec: 09 a0                	j	2
ffffffff80207eee: 62 65                	ld	a0, 24(sp)
ffffffff80207ef0: 93 15 05 02          	slli	a1, a0, 32
ffffffff80207ef4: 81 91                	srli	a1, a1, 32
ffffffff80207ef6: 02 76                	ld	a2, 32(sp)
ffffffff80207ef8: b3 05 b6 40          	sub	a1, a2, a1
ffffffff80207efc: 2e e8                	sd	a1, 16(sp)
ffffffff80207efe: 63 68 b6 04          	bltu	a2, a1, 80
ffffffff80207f02: 09 a0                	j	2
ffffffff80207f04: 42 65                	ld	a0, 16(sp)
ffffffff80207f06: 93 05 f5 ff          	addi	a1, a0, -1
ffffffff80207f0a: 2e e4                	sd	a1, 8(sp)
ffffffff80207f0c: 63 60 b5 06          	bltu	a0, a1, 96
ffffffff80207f10: 09 a0                	j	2
ffffffff80207f12: 22 65                	ld	a0, 8(sp)
ffffffff80207f14: 93 75 05 fc          	andi	a1, a0, -64
ffffffff80207f18: 05 46                	addi	a2, zero, 1
ffffffff80207f1a: 33 15 a6 00          	sll	a0, a2, a0
ffffffff80207f1e: 01 46                	mv	a2, zero
ffffffff80207f20: 2a e0                	sd	a0, 0(sp)
ffffffff80207f22: 63 94 c5 06          	bne	a1, a2, 104
ffffffff80207f26: 09 a0                	j	2
; }
ffffffff80207f28: 02 65                	ld	a0, 0(sp)
ffffffff80207f2a: a6 60                	ld	ra, 72(sp)
ffffffff80207f2c: 61 61                	addi	sp, sp, 80
ffffffff80207f2e: 82 80                	ret

ffffffff80207f30 .LBB18_11:
;     1 << (8 * (size_of::<usize>()) - num.leading_zeros() as usize - 1)
ffffffff80207f30: 17 75 00 00          	auipc	a0, 7
ffffffff80207f34: 13 05 05 d0          	addi	a0, a0, -768

ffffffff80207f38 .LBB18_12:
ffffffff80207f38: 17 76 00 00          	auipc	a2, 7
ffffffff80207f3c: 13 06 06 ce          	addi	a2, a2, -800
ffffffff80207f40: 93 05 10 02          	addi	a1, zero, 33
ffffffff80207f44: 97 20 00 00          	auipc	ra, 2
ffffffff80207f48: e7 80 40 3f          	jalr	1012(ra)
ffffffff80207f4c: 00 00                	unimp	

ffffffff80207f4e .LBB18_13:
ffffffff80207f4e: 17 75 00 00          	auipc	a0, 7
ffffffff80207f52: 13 05 25 90          	addi	a0, a0, -1790

ffffffff80207f56 .LBB18_14:
ffffffff80207f56: 17 76 00 00          	auipc	a2, 7
ffffffff80207f5a: 13 06 26 cc          	addi	a2, a2, -830
ffffffff80207f5e: 93 05 10 02          	addi	a1, zero, 33
ffffffff80207f62: 97 20 00 00          	auipc	ra, 2
ffffffff80207f66: e7 80 60 3d          	jalr	982(ra)
ffffffff80207f6a: 00 00                	unimp	

ffffffff80207f6c .LBB18_15:
ffffffff80207f6c: 17 75 00 00          	auipc	a0, 7
ffffffff80207f70: 13 05 45 8e          	addi	a0, a0, -1820

ffffffff80207f74 .LBB18_16:
ffffffff80207f74: 17 76 00 00          	auipc	a2, 7
ffffffff80207f78: 13 06 46 ce          	addi	a2, a2, -796
ffffffff80207f7c: 93 05 10 02          	addi	a1, zero, 33
ffffffff80207f80: 97 20 00 00          	auipc	ra, 2
ffffffff80207f84: e7 80 80 3b          	jalr	952(ra)
ffffffff80207f88: 00 00                	unimp	

ffffffff80207f8a .LBB18_17:
ffffffff80207f8a: 17 75 00 00          	auipc	a0, 7
ffffffff80207f8e: 13 05 65 ad          	addi	a0, a0, -1322

ffffffff80207f92 .LBB18_18:
ffffffff80207f92: 17 76 00 00          	auipc	a2, 7
ffffffff80207f96: 13 06 e6 cd          	addi	a2, a2, -802
ffffffff80207f9a: 93 05 30 02          	addi	a1, zero, 35
ffffffff80207f9e: 97 20 00 00          	auipc	ra, 2
ffffffff80207fa2: e7 80 a0 39          	jalr	922(ra)
ffffffff80207fa6: 00 00                	unimp	

ffffffff80207fa8 _ZN4core4sync6atomic10AtomicBool16compare_and_swap17h0c0af98437e357b0E:
;     pub fn compare_and_swap(&self, current: bool, new: bool, order: Ordering) -> bool {
ffffffff80207fa8: 5d 71                	addi	sp, sp, -80
ffffffff80207faa: 86 e4                	sd	ra, 72(sp)
ffffffff80207fac: 36 87                	add	a4, zero, a3
ffffffff80207fae: b2 87                	add	a5, zero, a2
ffffffff80207fb0: 2e 88                	add	a6, zero, a1
ffffffff80207fb2: 2a fc                	sd	a0, 56(sp)
ffffffff80207fb4: a3 01 b1 04          	sb	a1, 67(sp)
ffffffff80207fb8: 23 02 c1 04          	sb	a2, 68(sp)
ffffffff80207fbc: a3 02 d1 04          	sb	a3, 69(sp)
;         match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {
ffffffff80207fc0: 2a f0                	sd	a0, 32(sp)
ffffffff80207fc2: 36 85                	add	a0, zero, a3
ffffffff80207fc4: 3a ec                	sd	a4, 24(sp)
ffffffff80207fc6: 3e e8                	sd	a5, 16(sp)
ffffffff80207fc8: 42 e4                	sd	a6, 8(sp)
ffffffff80207fca: 97 00 00 00          	auipc	ra, 0
ffffffff80207fce: e7 80 c0 7e          	jalr	2028(ra)
ffffffff80207fd2: 13 77 f5 0f          	andi	a4, a0, 255
ffffffff80207fd6: 3a e0                	sd	a4, 0(sp)
ffffffff80207fd8: 09 a0                	j	2
ffffffff80207fda: 02 75                	ld	a0, 32(sp)
ffffffff80207fdc: a2 65                	ld	a1, 8(sp)
ffffffff80207fde: 42 66                	ld	a2, 16(sp)
ffffffff80207fe0: e2 66                	ld	a3, 24(sp)
ffffffff80207fe2: 02 67                	ld	a4, 0(sp)
ffffffff80207fe4: 97 00 00 00          	auipc	ra, 0
ffffffff80207fe8: e7 80 80 04          	jalr	72(ra)
ffffffff80207fec: 23 08 a1 02          	sb	a0, 48(sp)
ffffffff80207ff0: a3 08 b1 02          	sb	a1, 49(sp)
ffffffff80207ff4: 09 a0                	j	2
;             Ok(x) => x,
ffffffff80207ff6: 03 45 01 03          	lbu	a0, 48(sp)
ffffffff80207ffa: 05 89                	andi	a0, a0, 1
ffffffff80207ffc: 81 45                	mv	a1, zero
ffffffff80207ffe: 63 0b b5 00          	beq	a0, a1, 22
ffffffff80208002: 09 a0                	j	2
;             Err(x) => x,
ffffffff80208004: 03 05 11 03          	lb	a0, 49(sp)
ffffffff80208008: 23 03 a1 04          	sb	a0, 70(sp)
ffffffff8020800c: a3 07 a1 02          	sb	a0, 47(sp)
;         match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {
ffffffff80208010: 09 a8                	j	18
ffffffff80208012: 00 00                	unimp	
;             Ok(x) => x,
ffffffff80208014: 03 05 11 03          	lb	a0, 49(sp)
ffffffff80208018: a3 03 a1 04          	sb	a0, 71(sp)
ffffffff8020801c: a3 07 a1 02          	sb	a0, 47(sp)
;         match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {
ffffffff80208020: 09 a0                	j	2
;     }
ffffffff80208022: 03 45 f1 02          	lbu	a0, 47(sp)
ffffffff80208026: a6 60                	ld	ra, 72(sp)
ffffffff80208028: 61 61                	addi	sp, sp, 80
ffffffff8020802a: 82 80                	ret

ffffffff8020802c _ZN4core4sync6atomic10AtomicBool16compare_exchange17h65c03ee060f3164fE:
;     pub fn compare_exchange(
ffffffff8020802c: 5d 71                	addi	sp, sp, -80
ffffffff8020802e: 86 e4                	sd	ra, 72(sp)
ffffffff80208030: ba 87                	add	a5, zero, a4
ffffffff80208032: 36 88                	add	a6, zero, a3
ffffffff80208034: b2 88                	add	a7, zero, a2
ffffffff80208036: ae 82                	add	t0, zero, a1
ffffffff80208038: 2a fc                	sd	a0, 56(sp)
ffffffff8020803a: 23 01 b1 04          	sb	a1, 66(sp)
ffffffff8020803e: a3 01 c1 04          	sb	a2, 67(sp)
ffffffff80208042: 23 02 d1 04          	sb	a3, 68(sp)
ffffffff80208046: a3 02 e1 04          	sb	a4, 69(sp)
;             atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)
ffffffff8020804a: 3e f0                	sd	a5, 32(sp)
ffffffff8020804c: 42 ec                	sd	a6, 24(sp)
ffffffff8020804e: 46 e8                	sd	a7, 16(sp)
ffffffff80208050: 16 e4                	sd	t0, 8(sp)
ffffffff80208052: 97 10 00 00          	auipc	ra, 1
ffffffff80208056: e7 80 80 ec          	jalr	-312(ra)
ffffffff8020805a: 2a e0                	sd	a0, 0(sp)
ffffffff8020805c: 09 a0                	j	2
ffffffff8020805e: 02 65                	ld	a0, 0(sp)
ffffffff80208060: a2 65                	ld	a1, 8(sp)
ffffffff80208062: 42 66                	ld	a2, 16(sp)
ffffffff80208064: e2 66                	ld	a3, 24(sp)
ffffffff80208066: 02 77                	ld	a4, 32(sp)
ffffffff80208068: 97 00 00 00          	auipc	ra, 0
ffffffff8020806c: e7 80 c0 24          	jalr	588(ra)
ffffffff80208070: 23 08 a1 02          	sb	a0, 48(sp)
ffffffff80208074: a3 08 b1 02          	sb	a1, 49(sp)
ffffffff80208078: 09 a0                	j	2
;             Ok(x) => Ok(x != 0),
ffffffff8020807a: 03 45 01 03          	lbu	a0, 48(sp)
ffffffff8020807e: 05 89                	andi	a0, a0, 1
ffffffff80208080: 81 45                	mv	a1, zero
ffffffff80208082: 63 00 b5 02          	beq	a0, a1, 32
ffffffff80208086: 09 a0                	j	2
;             Err(x) => Err(x != 0),
ffffffff80208088: 03 45 11 03          	lbu	a0, 49(sp)
ffffffff8020808c: 23 03 a1 04          	sb	a0, 70(sp)
ffffffff80208090: 33 35 a0 00          	snez	a0, a0
ffffffff80208094: a3 04 a1 02          	sb	a0, 41(sp)
ffffffff80208098: 05 45                	addi	a0, zero, 1
ffffffff8020809a: 23 04 a1 02          	sb	a0, 40(sp)
;         match unsafe {
ffffffff8020809e: 31 a8                	j	28
ffffffff802080a0: 00 00                	unimp	
;             Ok(x) => Ok(x != 0),
ffffffff802080a2: 03 45 11 03          	lbu	a0, 49(sp)
ffffffff802080a6: a3 03 a1 04          	sb	a0, 71(sp)
ffffffff802080aa: 33 35 a0 00          	snez	a0, a0
ffffffff802080ae: a3 04 a1 02          	sb	a0, 41(sp)
ffffffff802080b2: 01 45                	mv	a0, zero
ffffffff802080b4: 23 04 a1 02          	sb	a0, 40(sp)
;         match unsafe {
ffffffff802080b8: 09 a0                	j	2
;     }
ffffffff802080ba: 03 45 81 02          	lbu	a0, 40(sp)
ffffffff802080be: 83 05 91 02          	lb	a1, 41(sp)
ffffffff802080c2: a6 60                	ld	ra, 72(sp)
ffffffff802080c4: 61 61                	addi	sp, sp, 80
ffffffff802080c6: 82 80                	ret

ffffffff802080c8 _ZN4core4sync6atomic10AtomicBool4load17h94934dc10d8c7094E:
;     pub fn load(&self, order: Ordering) -> bool {
ffffffff802080c8: 79 71                	addi	sp, sp, -48
ffffffff802080ca: 06 f4                	sd	ra, 40(sp)
ffffffff802080cc: 2e 86                	add	a2, zero, a1
ffffffff802080ce: 2a ec                	sd	a0, 24(sp)
ffffffff802080d0: a3 03 b1 02          	sb	a1, 39(sp)
;         unsafe { atomic_load(self.v.get(), order) != 0 }
ffffffff802080d4: 32 e8                	sd	a2, 16(sp)
ffffffff802080d6: 97 10 00 00          	auipc	ra, 1
ffffffff802080da: e7 80 40 e4          	jalr	-444(ra)
ffffffff802080de: 2a e4                	sd	a0, 8(sp)
ffffffff802080e0: 09 a0                	j	2
ffffffff802080e2: 22 65                	ld	a0, 8(sp)
ffffffff802080e4: c2 65                	ld	a1, 16(sp)
ffffffff802080e6: 97 00 00 00          	auipc	ra, 0
ffffffff802080ea: e7 80 40 05          	jalr	84(ra)
ffffffff802080ee: 2a e0                	sd	a0, 0(sp)
ffffffff802080f0: 09 a0                	j	2
ffffffff802080f2: 02 65                	ld	a0, 0(sp)
ffffffff802080f4: 93 75 f5 0f          	andi	a1, a0, 255
ffffffff802080f8: 33 35 b0 00          	snez	a0, a1
;     }
ffffffff802080fc: a2 70                	ld	ra, 40(sp)
ffffffff802080fe: 45 61                	addi	sp, sp, 48
ffffffff80208100: 82 80                	ret

ffffffff80208102 _ZN4core4sync6atomic10AtomicBool5store17h79f65269e379dbcfE:
;     pub fn store(&self, val: bool, order: Ordering) {
ffffffff80208102: 79 71                	addi	sp, sp, -48
ffffffff80208104: 06 f4                	sd	ra, 40(sp)
ffffffff80208106: b2 86                	add	a3, zero, a2
ffffffff80208108: 2e 87                	add	a4, zero, a1
ffffffff8020810a: 2a ec                	sd	a0, 24(sp)
ffffffff8020810c: 23 03 b1 02          	sb	a1, 38(sp)
ffffffff80208110: a3 03 c1 02          	sb	a2, 39(sp)
;             atomic_store(self.v.get(), val as u8, order);
ffffffff80208114: 36 e8                	sd	a3, 16(sp)
ffffffff80208116: 3a e4                	sd	a4, 8(sp)
ffffffff80208118: 97 10 00 00          	auipc	ra, 1
ffffffff8020811c: e7 80 20 e0          	jalr	-510(ra)
ffffffff80208120: 2a e0                	sd	a0, 0(sp)
ffffffff80208122: 09 a0                	j	2
ffffffff80208124: 02 65                	ld	a0, 0(sp)
ffffffff80208126: a2 65                	ld	a1, 8(sp)
ffffffff80208128: 42 66                	ld	a2, 16(sp)
ffffffff8020812a: 97 00 00 00          	auipc	ra, 0
ffffffff8020812e: e7 80 60 0c          	jalr	198(ra)
ffffffff80208132: 09 a0                	j	2
;     }
ffffffff80208134: a2 70                	ld	ra, 40(sp)
ffffffff80208136: 45 61                	addi	sp, sp, 48
ffffffff80208138: 82 80                	ret

ffffffff8020813a _ZN4core4sync6atomic11atomic_load17ha26d58bae5a5f5bfE:
; unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
ffffffff8020813a: 01 11                	addi	sp, sp, -32
ffffffff8020813c: 2e 86                	add	a2, zero, a1
ffffffff8020813e: 23 0b b1 00          	sb	a1, 22(sp)
ffffffff80208142: 2a ec                	sd	a0, 24(sp)
;         Acquire => intrinsics::atomic_load_acq(dst),
ffffffff80208144: 93 f5 f5 0f          	andi	a1, a1, 255
ffffffff80208148: 81 46                	mv	a3, zero
ffffffff8020814a: 2a e4                	sd	a0, 8(sp)
ffffffff8020814c: 2e e0                	sd	a1, 0(sp)
ffffffff8020814e: 63 8c d5 04          	beq	a1, a3, 88
ffffffff80208152: 09 a0                	j	2
ffffffff80208154: 05 45                	addi	a0, zero, 1
ffffffff80208156: 82 65                	ld	a1, 0(sp)
ffffffff80208158: 63 89 a5 06          	beq	a1, a0, 114
ffffffff8020815c: 09 a0                	j	2
ffffffff8020815e: 09 45                	addi	a0, zero, 2
ffffffff80208160: 82 65                	ld	a1, 0(sp)
ffffffff80208162: 63 89 a5 02          	beq	a1, a0, 50
ffffffff80208166: 09 a0                	j	2
ffffffff80208168: 0d 45                	addi	a0, zero, 3
ffffffff8020816a: 82 65                	ld	a1, 0(sp)
ffffffff8020816c: 63 84 a5 00          	beq	a1, a0, 8
ffffffff80208170: 09 a0                	j	2
ffffffff80208172: 89 a0                	j	66

ffffffff80208174 .LBB5_15:
;         $crate::panicking::panic($msg)
ffffffff80208174: 17 75 00 00          	auipc	a0, 7
ffffffff80208178: 13 05 45 b1          	addi	a0, a0, -1260

ffffffff8020817c .LBB5_16:
ffffffff8020817c: 17 76 00 00          	auipc	a2, 7
ffffffff80208180: 13 06 46 bb          	addi	a2, a2, -1100
ffffffff80208184: 93 05 10 03          	addi	a1, zero, 49
ffffffff80208188: 97 20 00 00          	auipc	ra, 2
ffffffff8020818c: e7 80 00 1b          	jalr	432(ra)
ffffffff80208190: 00 00                	unimp	
;     match order {
ffffffff80208192: 00 00                	unimp	
;         Acquire => intrinsics::atomic_load_acq(dst),
ffffffff80208194: 22 65                	ld	a0, 8(sp)
ffffffff80208196: 83 05 05 00          	lb	a1, 0(a0)
ffffffff8020819a: 0f 00 30 02          	fence	r, rw
ffffffff8020819e: a3 0b b1 00          	sb	a1, 23(sp)
ffffffff802081a2: 09 a0                	j	2
;     match order {
ffffffff802081a4: 91 a0                	j	68
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
ffffffff802081a6: 22 65                	ld	a0, 8(sp)
ffffffff802081a8: 83 05 05 00          	lb	a1, 0(a0)
ffffffff802081ac: a3 0b b1 00          	sb	a1, 23(sp)
ffffffff802081b0: 09 a0                	j	2
;     match order {
ffffffff802081b2: 1d a8                	j	54
;         SeqCst => intrinsics::atomic_load(dst),
ffffffff802081b4: 0f 00 30 03          	fence	rw, rw
ffffffff802081b8: 22 65                	ld	a0, 8(sp)
ffffffff802081ba: 83 05 05 00          	lb	a1, 0(a0)
ffffffff802081be: 0f 00 30 02          	fence	r, rw
ffffffff802081c2: a3 0b b1 00          	sb	a1, 23(sp)
ffffffff802081c6: 09 a0                	j	2
;     match order {
ffffffff802081c8: 05 a0                	j	32

ffffffff802081ca .LBB5_17:
;         $crate::panicking::panic($msg)
ffffffff802081ca: 17 75 00 00          	auipc	a0, 7
ffffffff802081ce: 13 05 e5 b7          	addi	a0, a0, -1154

ffffffff802081d2 .LBB5_18:
ffffffff802081d2: 17 76 00 00          	auipc	a2, 7
ffffffff802081d6: 13 06 e6 b5          	addi	a2, a2, -1186
ffffffff802081da: 93 05 80 02          	addi	a1, zero, 40
ffffffff802081de: 97 20 00 00          	auipc	ra, 2
ffffffff802081e2: e7 80 a0 15          	jalr	346(ra)
ffffffff802081e6: 00 00                	unimp	
; }
ffffffff802081e8: 03 05 71 01          	lb	a0, 23(sp)
ffffffff802081ec: 05 61                	addi	sp, sp, 32
ffffffff802081ee: 82 80                	ret

ffffffff802081f0 _ZN4core4sync6atomic12atomic_store17h022ef2a85323928fE:
; unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
ffffffff802081f0: 39 71                	addi	sp, sp, -64
ffffffff802081f2: b2 86                	add	a3, zero, a2
ffffffff802081f4: 2e 87                	add	a4, zero, a1
ffffffff802081f6: a3 03 c1 02          	sb	a2, 39(sp)
ffffffff802081fa: 2a f8                	sd	a0, 48(sp)
ffffffff802081fc: a3 0f b1 02          	sb	a1, 63(sp)
;         Release => intrinsics::atomic_store_rel(dst, val),
ffffffff80208200: 93 75 f6 0f          	andi	a1, a2, 255
ffffffff80208204: 01 46                	mv	a2, zero
ffffffff80208206: 2a ec                	sd	a0, 24(sp)
ffffffff80208208: 3a e8                	sd	a4, 16(sp)
ffffffff8020820a: 2e e4                	sd	a1, 8(sp)
ffffffff8020820c: 63 8b c5 04          	beq	a1, a2, 86
ffffffff80208210: 09 a0                	j	2
ffffffff80208212: 05 45                	addi	a0, zero, 1
ffffffff80208214: a2 65                	ld	a1, 8(sp)
ffffffff80208216: 63 8e a5 02          	beq	a1, a0, 60
ffffffff8020821a: 09 a0                	j	2
ffffffff8020821c: 09 45                	addi	a0, zero, 2
ffffffff8020821e: a2 65                	ld	a1, 8(sp)
ffffffff80208220: 63 8f a5 04          	beq	a1, a0, 94
ffffffff80208224: 09 a0                	j	2
ffffffff80208226: 0d 45                	addi	a0, zero, 3
ffffffff80208228: a2 65                	ld	a1, 8(sp)
ffffffff8020822a: 63 84 a5 00          	beq	a1, a0, 8
ffffffff8020822e: 09 a0                	j	2
ffffffff80208230: 3d a8                	j	62

ffffffff80208232 .LBB6_15:
;         $crate::panicking::panic($msg)
ffffffff80208232: 17 75 00 00          	auipc	a0, 7
ffffffff80208236: 13 05 e5 b3          	addi	a0, a0, -1218

ffffffff8020823a .LBB6_16:
ffffffff8020823a: 17 76 00 00          	auipc	a2, 7
ffffffff8020823e: 13 06 66 af          	addi	a2, a2, -1290
ffffffff80208242: 93 05 20 03          	addi	a1, zero, 50
ffffffff80208246: 97 20 00 00          	auipc	ra, 2
ffffffff8020824a: e7 80 20 0f          	jalr	242(ra)
ffffffff8020824e: 00 00                	unimp	
;     match order {
ffffffff80208250: 00 00                	unimp	
;         Release => intrinsics::atomic_store_rel(dst, val),
ffffffff80208252: 0f 00 10 03          	fence	rw, w
ffffffff80208256: 42 65                	ld	a0, 16(sp)
ffffffff80208258: e2 65                	ld	a1, 24(sp)
ffffffff8020825a: 23 80 a5 00          	sb	a0, 0(a1)
ffffffff8020825e: 09 a0                	j	2
;     match order {
ffffffff80208260: 35 a8                	j	60
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
ffffffff80208262: 42 65                	ld	a0, 16(sp)
ffffffff80208264: e2 65                	ld	a1, 24(sp)
ffffffff80208266: 23 80 a5 00          	sb	a0, 0(a1)
ffffffff8020826a: 09 a0                	j	2
;     match order {
ffffffff8020826c: 05 a8                	j	48
;         SeqCst => intrinsics::atomic_store(dst, val),
ffffffff8020826e: 0f 00 10 03          	fence	rw, w
ffffffff80208272: 42 65                	ld	a0, 16(sp)
ffffffff80208274: e2 65                	ld	a1, 24(sp)
ffffffff80208276: 23 80 a5 00          	sb	a0, 0(a1)
ffffffff8020827a: 09 a0                	j	2
;     match order {
ffffffff8020827c: 05 a0                	j	32

ffffffff8020827e .LBB6_17:
;         $crate::panicking::panic($msg)
ffffffff8020827e: 17 75 00 00          	auipc	a0, 7
ffffffff80208282: 13 05 45 b2          	addi	a0, a0, -1244

ffffffff80208286 .LBB6_18:
ffffffff80208286: 17 76 00 00          	auipc	a2, 7
ffffffff8020828a: 13 06 a6 aa          	addi	a2, a2, -1366
ffffffff8020828e: 93 05 a0 02          	addi	a1, zero, 42
ffffffff80208292: 97 20 00 00          	auipc	ra, 2
ffffffff80208296: e7 80 60 0a          	jalr	166(ra)
ffffffff8020829a: 00 00                	unimp	
; }
ffffffff8020829c: 21 61                	addi	sp, sp, 64
ffffffff8020829e: 82 80                	ret

ffffffff802082a0 _ZN4core4sync6atomic14spin_loop_hint17h5c5f28ba36f685f5E:
; pub fn spin_loop_hint() {
ffffffff802082a0: 41 11                	addi	sp, sp, -16
;     spin_loop()
ffffffff802082a2: 06 e4                	sd	ra, 8(sp)
ffffffff802082a4: 97 10 00 00          	auipc	ra, 1
ffffffff802082a8: e7 80 20 4b          	jalr	1202(ra)
ffffffff802082ac: 09 a0                	j	2
; }
ffffffff802082ae: a2 60                	ld	ra, 8(sp)
ffffffff802082b0: 41 01                	addi	sp, sp, 16
ffffffff802082b2: 82 80                	ret

ffffffff802082b4 _ZN4core4sync6atomic23atomic_compare_exchange17hd9153a7fdc6ac5a5E:
; unsafe fn atomic_compare_exchange<T: Copy>(
ffffffff802082b4: 59 71                	addi	sp, sp, -112
ffffffff802082b6: ba 87                	add	a5, zero, a4
ffffffff802082b8: 36 88                	add	a6, zero, a3
ffffffff802082ba: b2 88                	add	a7, zero, a2
ffffffff802082bc: ae 82                	add	t0, zero, a1
ffffffff802082be: aa f0                	sd	a0, 96(sp)
ffffffff802082c0: 23 05 b1 06          	sb	a1, 106(sp)
ffffffff802082c4: a3 05 c1 06          	sb	a2, 107(sp)
ffffffff802082c8: 23 06 d1 06          	sb	a3, 108(sp)
ffffffff802082cc: a3 06 e1 06          	sb	a4, 109(sp)
;     let (val, ok) = match (success, failure) {
ffffffff802082d0: 23 0c d1 04          	sb	a3, 88(sp)
ffffffff802082d4: a3 0c e1 04          	sb	a4, 89(sp)
;         (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
ffffffff802082d8: 93 f5 f6 0f          	andi	a1, a3, 255
ffffffff802082dc: 01 46                	mv	a2, zero
ffffffff802082de: aa e0                	sd	a0, 64(sp)
ffffffff802082e0: 46 fc                	sd	a7, 56(sp)
ffffffff802082e2: 16 f8                	sd	t0, 48(sp)
ffffffff802082e4: 2e f4                	sd	a1, 40(sp)
ffffffff802082e6: 63 87 c5 02          	beq	a1, a2, 46
ffffffff802082ea: 09 a0                	j	2
ffffffff802082ec: 05 45                	addi	a0, zero, 1
ffffffff802082ee: a2 75                	ld	a1, 40(sp)
ffffffff802082f0: 63 84 a5 04          	beq	a1, a0, 72
ffffffff802082f4: 09 a0                	j	2
ffffffff802082f6: 09 45                	addi	a0, zero, 2
ffffffff802082f8: a2 75                	ld	a1, 40(sp)
ffffffff802082fa: 63 85 a5 04          	beq	a1, a0, 74
ffffffff802082fe: 09 a0                	j	2
ffffffff80208300: 0d 45                	addi	a0, zero, 3
ffffffff80208302: a2 75                	ld	a1, 40(sp)
ffffffff80208304: 63 8c a5 04          	beq	a1, a0, 88
ffffffff80208308: 09 a0                	j	2
ffffffff8020830a: 11 45                	addi	a0, zero, 4
ffffffff8020830c: a2 75                	ld	a1, 40(sp)
ffffffff8020830e: 63 83 a5 06          	beq	a1, a0, 102
ffffffff80208312: 39 a0                	j	14
;         (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
ffffffff80208314: 03 45 91 05          	lbu	a0, 89(sp)
ffffffff80208318: 81 45                	mv	a1, zero
ffffffff8020831a: 63 03 b5 1c          	beq	a0, a1, 454
ffffffff8020831e: 09 a0                	j	2
;         (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
ffffffff80208320: 03 45 91 05          	lbu	a0, 89(sp)
ffffffff80208324: 85 45                	addi	a1, zero, 1
ffffffff80208326: 2a f0                	sd	a0, 32(sp)
ffffffff80208328: 63 07 b5 42          	beq	a0, a1, 1070
ffffffff8020832c: 09 a0                	j	2
ffffffff8020832e: 0d 45                	addi	a0, zero, 3
ffffffff80208330: 82 75                	ld	a1, 32(sp)
ffffffff80208332: 63 83 a5 40          	beq	a1, a0, 1030
ffffffff80208336: 85 a0                	j	96
;         (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
ffffffff80208338: 03 45 91 05          	lbu	a0, 89(sp)
ffffffff8020833c: 81 45                	mv	a1, zero
ffffffff8020833e: 63 0d b5 0c          	beq	a0, a1, 218
ffffffff80208342: f9 bf                	j	-34
;         (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
ffffffff80208344: 03 45 91 05          	lbu	a0, 89(sp)
ffffffff80208348: 81 45                	mv	a1, zero
ffffffff8020834a: 2a ec                	sd	a0, 24(sp)
ffffffff8020834c: 63 0e b5 24          	beq	a0, a1, 604
ffffffff80208350: 09 a0                	j	2
ffffffff80208352: 09 45                	addi	a0, zero, 2
ffffffff80208354: e2 65                	ld	a1, 24(sp)
ffffffff80208356: 63 8f a5 04          	beq	a1, a0, 94
ffffffff8020835a: d9 b7                	j	-58
;         (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
ffffffff8020835c: 03 45 91 05          	lbu	a0, 89(sp)
ffffffff80208360: 81 45                	mv	a1, zero
ffffffff80208362: 2a e8                	sd	a0, 16(sp)
ffffffff80208364: 63 04 b5 2a          	beq	a0, a1, 680
ffffffff80208368: 09 a0                	j	2
ffffffff8020836a: 09 45                	addi	a0, zero, 2
ffffffff8020836c: c2 65                	ld	a1, 16(sp)
ffffffff8020836e: 63 87 a5 10          	beq	a1, a0, 270
ffffffff80208372: 7d b7                	j	-82
;         (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
ffffffff80208374: 03 45 91 05          	lbu	a0, 89(sp)
ffffffff80208378: 81 45                	mv	a1, zero
ffffffff8020837a: 2a e4                	sd	a0, 8(sp)
ffffffff8020837c: 63 0a b5 2e          	beq	a0, a1, 756
ffffffff80208380: 09 a0                	j	2
ffffffff80208382: 09 45                	addi	a0, zero, 2
ffffffff80208384: a2 65                	ld	a1, 8(sp)
ffffffff80208386: 63 87 a5 34          	beq	a1, a0, 846
ffffffff8020838a: 09 a0                	j	2
ffffffff8020838c: 11 45                	addi	a0, zero, 4
ffffffff8020838e: a2 65                	ld	a1, 8(sp)
ffffffff80208390: 63 8a a5 1a          	beq	a1, a0, 436
ffffffff80208394: 71 b7                	j	-116

ffffffff80208396 .LBB8_41:
;         $crate::panicking::panic($msg)
ffffffff80208396: 17 75 00 00          	auipc	a0, 7
ffffffff8020839a: 13 05 65 a3          	addi	a0, a0, -1482

ffffffff8020839e .LBB8_42:
ffffffff8020839e: 17 76 00 00          	auipc	a2, 7
ffffffff802083a2: 13 06 26 99          	addi	a2, a2, -1646
ffffffff802083a6: 93 05 c0 03          	addi	a1, zero, 60
ffffffff802083aa: 97 20 00 00          	auipc	ra, 2
ffffffff802083ae: e7 80 e0 f8          	jalr	-114(ra)
ffffffff802083b2: 00 00                	unimp	
;         (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
ffffffff802083b4: 06 65                	ld	a0, 64(sp)
ffffffff802083b6: 93 75 c5 ff          	andi	a1, a0, -4
ffffffff802083ba: 13 16 35 00          	slli	a2, a0, 3
ffffffff802083be: 61 8a                	andi	a2, a2, 24
ffffffff802083c0: 93 06 f0 0f          	addi	a3, zero, 255
ffffffff802083c4: bb 96 c6 00          	sllw	a3, a3, a2
ffffffff802083c8: 42 77                	ld	a4, 48(sp)
ffffffff802083ca: 93 77 f7 0f          	andi	a5, a4, 255
ffffffff802083ce: bb 97 c7 00          	sllw	a5, a5, a2
ffffffff802083d2: 62 78                	ld	a6, 56(sp)
ffffffff802083d4: 93 78 f8 0f          	andi	a7, a6, 255
ffffffff802083d8: bb 98 c8 00          	sllw	a7, a7, a2
ffffffff802083dc: af a2 05 14          	<unknown>
ffffffff802083e0: 33 f3 d2 00          	and	t1, t0, a3
ffffffff802083e4: 63 1c f3 00          	bne	t1, a5, 24
ffffffff802083e8: 33 c3 12 01          	xor	t1, t0, a7
ffffffff802083ec: 33 73 d3 00          	and	t1, t1, a3
ffffffff802083f0: 33 c3 62 00          	xor	t1, t0, t1
ffffffff802083f4: 2f a3 65 18          	<unknown>
ffffffff802083f8: e3 12 03 fe          	bnez	t1, -28
ffffffff802083fc: bb d5 c2 00          	srlw	a1, t0, a2
ffffffff80208400: 33 f6 d2 00          	and	a2, t0, a3
ffffffff80208404: 01 26                	sext.w	a2, a2
ffffffff80208406: 3d 8e                	xor	a2, a2, a5
ffffffff80208408: 13 36 16 00          	seqz	a2, a2
ffffffff8020840c: 23 08 b1 04          	sb	a1, 80(sp)
ffffffff80208410: a3 08 c1 04          	sb	a2, 81(sp)
ffffffff80208414: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff80208416: b9 ae                	j	862
;         (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
ffffffff80208418: 06 65                	ld	a0, 64(sp)
ffffffff8020841a: 93 75 c5 ff          	andi	a1, a0, -4
ffffffff8020841e: 13 16 35 00          	slli	a2, a0, 3
ffffffff80208422: 61 8a                	andi	a2, a2, 24
ffffffff80208424: 93 06 f0 0f          	addi	a3, zero, 255
ffffffff80208428: bb 96 c6 00          	sllw	a3, a3, a2
ffffffff8020842c: 42 77                	ld	a4, 48(sp)
ffffffff8020842e: 93 77 f7 0f          	andi	a5, a4, 255
ffffffff80208432: bb 97 c7 00          	sllw	a5, a5, a2
ffffffff80208436: 62 78                	ld	a6, 56(sp)
ffffffff80208438: 93 78 f8 0f          	andi	a7, a6, 255
ffffffff8020843c: bb 98 c8 00          	sllw	a7, a7, a2
ffffffff80208440: af a2 05 10          	<unknown>
ffffffff80208444: 33 f3 d2 00          	and	t1, t0, a3
ffffffff80208448: 63 1c f3 00          	bne	t1, a5, 24
ffffffff8020844c: 33 c3 12 01          	xor	t1, t0, a7
ffffffff80208450: 33 73 d3 00          	and	t1, t1, a3
ffffffff80208454: 33 c3 62 00          	xor	t1, t0, t1
ffffffff80208458: 2f a3 65 1a          	<unknown>
ffffffff8020845c: e3 12 03 fe          	bnez	t1, -28
ffffffff80208460: bb d5 c2 00          	srlw	a1, t0, a2
ffffffff80208464: 33 f6 d2 00          	and	a2, t0, a3
ffffffff80208468: 01 26                	sext.w	a2, a2
ffffffff8020846a: 3d 8e                	xor	a2, a2, a5
ffffffff8020846c: 13 36 16 00          	seqz	a2, a2
ffffffff80208470: 23 08 b1 04          	sb	a1, 80(sp)
ffffffff80208474: a3 08 c1 04          	sb	a2, 81(sp)
ffffffff80208478: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff8020847a: ed ac                	j	762
;         (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
ffffffff8020847c: 06 65                	ld	a0, 64(sp)
ffffffff8020847e: 93 75 c5 ff          	andi	a1, a0, -4
ffffffff80208482: 13 16 35 00          	slli	a2, a0, 3
ffffffff80208486: 61 8a                	andi	a2, a2, 24
ffffffff80208488: 93 06 f0 0f          	addi	a3, zero, 255
ffffffff8020848c: bb 96 c6 00          	sllw	a3, a3, a2
ffffffff80208490: 42 77                	ld	a4, 48(sp)
ffffffff80208492: 93 77 f7 0f          	andi	a5, a4, 255
ffffffff80208496: bb 97 c7 00          	sllw	a5, a5, a2
ffffffff8020849a: 62 78                	ld	a6, 56(sp)
ffffffff8020849c: 93 78 f8 0f          	andi	a7, a6, 255
ffffffff802084a0: bb 98 c8 00          	sllw	a7, a7, a2
ffffffff802084a4: af a2 05 14          	<unknown>
ffffffff802084a8: 33 f3 d2 00          	and	t1, t0, a3
ffffffff802084ac: 63 1c f3 00          	bne	t1, a5, 24
ffffffff802084b0: 33 c3 12 01          	xor	t1, t0, a7
ffffffff802084b4: 33 73 d3 00          	and	t1, t1, a3
ffffffff802084b8: 33 c3 62 00          	xor	t1, t0, t1
ffffffff802084bc: 2f a3 65 1a          	<unknown>
ffffffff802084c0: e3 12 03 fe          	bnez	t1, -28
ffffffff802084c4: bb d5 c2 00          	srlw	a1, t0, a2
ffffffff802084c8: 33 f6 d2 00          	and	a2, t0, a3
ffffffff802084cc: 01 26                	sext.w	a2, a2
ffffffff802084ce: 3d 8e                	xor	a2, a2, a5
ffffffff802084d0: 13 36 16 00          	seqz	a2, a2
ffffffff802084d4: 23 08 b1 04          	sb	a1, 80(sp)
ffffffff802084d8: a3 08 c1 04          	sb	a2, 81(sp)
ffffffff802084dc: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff802084de: 59 ac                	j	662
;         (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
ffffffff802084e0: 06 65                	ld	a0, 64(sp)
ffffffff802084e2: 93 75 c5 ff          	andi	a1, a0, -4
ffffffff802084e6: 13 16 35 00          	slli	a2, a0, 3
ffffffff802084ea: 61 8a                	andi	a2, a2, 24
ffffffff802084ec: 93 06 f0 0f          	addi	a3, zero, 255
ffffffff802084f0: bb 96 c6 00          	sllw	a3, a3, a2
ffffffff802084f4: 42 77                	ld	a4, 48(sp)
ffffffff802084f6: 93 77 f7 0f          	andi	a5, a4, 255
ffffffff802084fa: bb 97 c7 00          	sllw	a5, a5, a2
ffffffff802084fe: 62 78                	ld	a6, 56(sp)
ffffffff80208500: 93 78 f8 0f          	andi	a7, a6, 255
ffffffff80208504: bb 98 c8 00          	sllw	a7, a7, a2
ffffffff80208508: af a2 05 10          	<unknown>
ffffffff8020850c: 33 f3 d2 00          	and	t1, t0, a3
ffffffff80208510: 63 1c f3 00          	bne	t1, a5, 24
ffffffff80208514: 33 c3 12 01          	xor	t1, t0, a7
ffffffff80208518: 33 73 d3 00          	and	t1, t1, a3
ffffffff8020851c: 33 c3 62 00          	xor	t1, t0, t1
ffffffff80208520: 2f a3 65 18          	<unknown>
ffffffff80208524: e3 12 03 fe          	bnez	t1, -28
ffffffff80208528: bb d5 c2 00          	srlw	a1, t0, a2
ffffffff8020852c: 33 f6 d2 00          	and	a2, t0, a3
ffffffff80208530: 01 26                	sext.w	a2, a2
ffffffff80208532: 3d 8e                	xor	a2, a2, a5
ffffffff80208534: 13 36 16 00          	seqz	a2, a2
ffffffff80208538: 23 08 b1 04          	sb	a1, 80(sp)
ffffffff8020853c: a3 08 c1 04          	sb	a2, 81(sp)
ffffffff80208540: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff80208542: 0d ac                	j	562
;         (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
ffffffff80208544: 06 65                	ld	a0, 64(sp)
ffffffff80208546: 93 75 c5 ff          	andi	a1, a0, -4
ffffffff8020854a: 13 16 35 00          	slli	a2, a0, 3
ffffffff8020854e: 61 8a                	andi	a2, a2, 24
ffffffff80208550: 93 06 f0 0f          	addi	a3, zero, 255
ffffffff80208554: bb 96 c6 00          	sllw	a3, a3, a2
ffffffff80208558: 42 77                	ld	a4, 48(sp)
ffffffff8020855a: 93 77 f7 0f          	andi	a5, a4, 255
ffffffff8020855e: bb 97 c7 00          	sllw	a5, a5, a2
ffffffff80208562: 62 78                	ld	a6, 56(sp)
ffffffff80208564: 93 78 f8 0f          	andi	a7, a6, 255
ffffffff80208568: bb 98 c8 00          	sllw	a7, a7, a2
ffffffff8020856c: af a2 05 16          	<unknown>
ffffffff80208570: 33 f3 d2 00          	and	t1, t0, a3
ffffffff80208574: 63 1c f3 00          	bne	t1, a5, 24
ffffffff80208578: 33 c3 12 01          	xor	t1, t0, a7
ffffffff8020857c: 33 73 d3 00          	and	t1, t1, a3
ffffffff80208580: 33 c3 62 00          	xor	t1, t0, t1
ffffffff80208584: 2f a3 65 1e          	<unknown>
ffffffff80208588: e3 12 03 fe          	bnez	t1, -28
ffffffff8020858c: bb d5 c2 00          	srlw	a1, t0, a2
ffffffff80208590: 33 f6 d2 00          	and	a2, t0, a3
ffffffff80208594: 01 26                	sext.w	a2, a2
ffffffff80208596: 3d 8e                	xor	a2, a2, a5
ffffffff80208598: 13 36 16 00          	seqz	a2, a2
ffffffff8020859c: 23 08 b1 04          	sb	a1, 80(sp)
ffffffff802085a0: a3 08 c1 04          	sb	a2, 81(sp)
ffffffff802085a4: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff802085a6: f9 a2                	j	462
;         (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
ffffffff802085a8: 06 65                	ld	a0, 64(sp)
ffffffff802085aa: 93 75 c5 ff          	andi	a1, a0, -4
ffffffff802085ae: 13 16 35 00          	slli	a2, a0, 3
ffffffff802085b2: 61 8a                	andi	a2, a2, 24
ffffffff802085b4: 93 06 f0 0f          	addi	a3, zero, 255
ffffffff802085b8: bb 96 c6 00          	sllw	a3, a3, a2
ffffffff802085bc: 42 77                	ld	a4, 48(sp)
ffffffff802085be: 93 77 f7 0f          	andi	a5, a4, 255
ffffffff802085c2: bb 97 c7 00          	sllw	a5, a5, a2
ffffffff802085c6: 62 78                	ld	a6, 56(sp)
ffffffff802085c8: 93 78 f8 0f          	andi	a7, a6, 255
ffffffff802085cc: bb 98 c8 00          	sllw	a7, a7, a2
ffffffff802085d0: af a2 05 14          	<unknown>
ffffffff802085d4: 33 f3 d2 00          	and	t1, t0, a3
ffffffff802085d8: 63 1c f3 00          	bne	t1, a5, 24
ffffffff802085dc: 33 c3 12 01          	xor	t1, t0, a7
ffffffff802085e0: 33 73 d3 00          	and	t1, t1, a3
ffffffff802085e4: 33 c3 62 00          	xor	t1, t0, t1
ffffffff802085e8: 2f a3 65 18          	<unknown>
ffffffff802085ec: e3 12 03 fe          	bnez	t1, -28
ffffffff802085f0: bb d5 c2 00          	srlw	a1, t0, a2
ffffffff802085f4: 33 f6 d2 00          	and	a2, t0, a3
ffffffff802085f8: 01 26                	sext.w	a2, a2
ffffffff802085fa: 3d 8e                	xor	a2, a2, a5
ffffffff802085fc: 13 36 16 00          	seqz	a2, a2
ffffffff80208600: 23 08 b1 04          	sb	a1, 80(sp)
ffffffff80208604: a3 08 c1 04          	sb	a2, 81(sp)
ffffffff80208608: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff8020860a: ad a2                	j	362
;         (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
ffffffff8020860c: 06 65                	ld	a0, 64(sp)
ffffffff8020860e: 93 75 c5 ff          	andi	a1, a0, -4
ffffffff80208612: 13 16 35 00          	slli	a2, a0, 3
ffffffff80208616: 61 8a                	andi	a2, a2, 24
ffffffff80208618: 93 06 f0 0f          	addi	a3, zero, 255
ffffffff8020861c: bb 96 c6 00          	sllw	a3, a3, a2
ffffffff80208620: 42 77                	ld	a4, 48(sp)
ffffffff80208622: 93 77 f7 0f          	andi	a5, a4, 255
ffffffff80208626: bb 97 c7 00          	sllw	a5, a5, a2
ffffffff8020862a: 62 78                	ld	a6, 56(sp)
ffffffff8020862c: 93 78 f8 0f          	andi	a7, a6, 255
ffffffff80208630: bb 98 c8 00          	sllw	a7, a7, a2
ffffffff80208634: af a2 05 14          	<unknown>
ffffffff80208638: 33 f3 d2 00          	and	t1, t0, a3
ffffffff8020863c: 63 1c f3 00          	bne	t1, a5, 24
ffffffff80208640: 33 c3 12 01          	xor	t1, t0, a7
ffffffff80208644: 33 73 d3 00          	and	t1, t1, a3
ffffffff80208648: 33 c3 62 00          	xor	t1, t0, t1
ffffffff8020864c: 2f a3 65 1a          	<unknown>
ffffffff80208650: e3 12 03 fe          	bnez	t1, -28
ffffffff80208654: bb d5 c2 00          	srlw	a1, t0, a2
ffffffff80208658: 33 f6 d2 00          	and	a2, t0, a3
ffffffff8020865c: 01 26                	sext.w	a2, a2
ffffffff8020865e: 3d 8e                	xor	a2, a2, a5
ffffffff80208660: 13 36 16 00          	seqz	a2, a2
ffffffff80208664: 23 08 b1 04          	sb	a1, 80(sp)
ffffffff80208668: a3 08 c1 04          	sb	a2, 81(sp)
ffffffff8020866c: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff8020866e: 19 a2                	j	262
;         (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
ffffffff80208670: 06 65                	ld	a0, 64(sp)
ffffffff80208672: 93 75 c5 ff          	andi	a1, a0, -4
ffffffff80208676: 13 16 35 00          	slli	a2, a0, 3
ffffffff8020867a: 61 8a                	andi	a2, a2, 24
ffffffff8020867c: 93 06 f0 0f          	addi	a3, zero, 255
ffffffff80208680: bb 96 c6 00          	sllw	a3, a3, a2
ffffffff80208684: 42 77                	ld	a4, 48(sp)
ffffffff80208686: 93 77 f7 0f          	andi	a5, a4, 255
ffffffff8020868a: bb 97 c7 00          	sllw	a5, a5, a2
ffffffff8020868e: 62 78                	ld	a6, 56(sp)
ffffffff80208690: 93 78 f8 0f          	andi	a7, a6, 255
ffffffff80208694: bb 98 c8 00          	sllw	a7, a7, a2
ffffffff80208698: af a2 05 16          	<unknown>
ffffffff8020869c: 33 f3 d2 00          	and	t1, t0, a3
ffffffff802086a0: 63 1c f3 00          	bne	t1, a5, 24
ffffffff802086a4: 33 c3 12 01          	xor	t1, t0, a7
ffffffff802086a8: 33 73 d3 00          	and	t1, t1, a3
ffffffff802086ac: 33 c3 62 00          	xor	t1, t0, t1
ffffffff802086b0: 2f a3 65 1e          	<unknown>
ffffffff802086b4: e3 12 03 fe          	bnez	t1, -28
ffffffff802086b8: bb d5 c2 00          	srlw	a1, t0, a2
ffffffff802086bc: 33 f6 d2 00          	and	a2, t0, a3
ffffffff802086c0: 01 26                	sext.w	a2, a2
ffffffff802086c2: 3d 8e                	xor	a2, a2, a5
ffffffff802086c4: 13 36 16 00          	seqz	a2, a2
ffffffff802086c8: 23 08 b1 04          	sb	a1, 80(sp)
ffffffff802086cc: a3 08 c1 04          	sb	a2, 81(sp)
ffffffff802086d0: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff802086d2: 4d a0                	j	162
;         (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
ffffffff802086d4: 06 65                	ld	a0, 64(sp)
ffffffff802086d6: 93 75 c5 ff          	andi	a1, a0, -4
ffffffff802086da: 13 16 35 00          	slli	a2, a0, 3
ffffffff802086de: 61 8a                	andi	a2, a2, 24
ffffffff802086e0: 93 06 f0 0f          	addi	a3, zero, 255
ffffffff802086e4: bb 96 c6 00          	sllw	a3, a3, a2
ffffffff802086e8: 42 77                	ld	a4, 48(sp)
ffffffff802086ea: 93 77 f7 0f          	andi	a5, a4, 255
ffffffff802086ee: bb 97 c7 00          	sllw	a5, a5, a2
ffffffff802086f2: 62 78                	ld	a6, 56(sp)
ffffffff802086f4: 93 78 f8 0f          	andi	a7, a6, 255
ffffffff802086f8: bb 98 c8 00          	sllw	a7, a7, a2
ffffffff802086fc: af a2 05 16          	<unknown>
ffffffff80208700: 33 f3 d2 00          	and	t1, t0, a3
ffffffff80208704: 63 1c f3 00          	bne	t1, a5, 24
ffffffff80208708: 33 c3 12 01          	xor	t1, t0, a7
ffffffff8020870c: 33 73 d3 00          	and	t1, t1, a3
ffffffff80208710: 33 c3 62 00          	xor	t1, t0, t1
ffffffff80208714: 2f a3 65 1e          	<unknown>
ffffffff80208718: e3 12 03 fe          	bnez	t1, -28
ffffffff8020871c: bb d5 c2 00          	srlw	a1, t0, a2
ffffffff80208720: 33 f6 d2 00          	and	a2, t0, a3
ffffffff80208724: 01 26                	sext.w	a2, a2
ffffffff80208726: 3d 8e                	xor	a2, a2, a5
ffffffff80208728: 13 36 16 00          	seqz	a2, a2
ffffffff8020872c: 23 08 b1 04          	sb	a1, 80(sp)
ffffffff80208730: a3 08 c1 04          	sb	a2, 81(sp)
ffffffff80208734: 09 a0                	j	2
;     let (val, ok) = match (success, failure) {
ffffffff80208736: 3d a8                	j	62

ffffffff80208738 .LBB8_70:
;         $crate::panicking::panic($msg)
ffffffff80208738: 17 65 00 00          	auipc	a0, 6
ffffffff8020873c: 13 05 05 6d          	addi	a0, a0, 1744

ffffffff80208740 .LBB8_71:
ffffffff80208740: 17 66 00 00          	auipc	a2, 6
ffffffff80208744: 13 06 06 5f          	addi	a2, a2, 1520
ffffffff80208748: 93 05 d0 03          	addi	a1, zero, 61
ffffffff8020874c: 97 20 00 00          	auipc	ra, 2
ffffffff80208750: e7 80 c0 be          	jalr	-1044(ra)
ffffffff80208754: 00 00                	unimp	

ffffffff80208756 .LBB8_72:
ffffffff80208756: 17 65 00 00          	auipc	a0, 6
ffffffff8020875a: 13 05 f5 6e          	addi	a0, a0, 1775

ffffffff8020875e .LBB8_73:
ffffffff8020875e: 17 66 00 00          	auipc	a2, 6
ffffffff80208762: 13 06 26 5d          	addi	a2, a2, 1490
ffffffff80208766: 93 05 40 03          	addi	a1, zero, 52
ffffffff8020876a: 97 20 00 00          	auipc	ra, 2
ffffffff8020876e: e7 80 e0 bc          	jalr	-1074(ra)
ffffffff80208772: 00 00                	unimp	
;     let (val, ok) = match (success, failure) {
ffffffff80208774: 03 45 01 05          	lbu	a0, 80(sp)
ffffffff80208778: 23 07 a1 06          	sb	a0, 110(sp)
ffffffff8020877c: 83 45 11 05          	lbu	a1, 81(sp)
ffffffff80208780: 13 f6 15 00          	andi	a2, a1, 1
ffffffff80208784: a3 07 b1 06          	sb	a1, 111(sp)
;     if ok { Ok(val) } else { Err(val) }
ffffffff80208788: 2a e0                	sd	a0, 0(sp)
ffffffff8020878a: 09 ea                	bnez	a2, 18
ffffffff8020878c: 09 a0                	j	2
ffffffff8020878e: 02 65                	ld	a0, 0(sp)
ffffffff80208790: a3 04 a1 04          	sb	a0, 73(sp)
ffffffff80208794: 85 45                	addi	a1, zero, 1
ffffffff80208796: 23 04 b1 04          	sb	a1, 72(sp)
ffffffff8020879a: 01 a8                	j	16
ffffffff8020879c: 02 65                	ld	a0, 0(sp)
ffffffff8020879e: a3 04 a1 04          	sb	a0, 73(sp)
ffffffff802087a2: 81 45                	mv	a1, zero
ffffffff802087a4: 23 04 b1 04          	sb	a1, 72(sp)
ffffffff802087a8: 09 a0                	j	2
; }
ffffffff802087aa: 03 45 81 04          	lbu	a0, 72(sp)
ffffffff802087ae: 83 05 91 04          	lb	a1, 73(sp)
ffffffff802087b2: 65 61                	addi	sp, sp, 112
ffffffff802087b4: 82 80                	ret

ffffffff802087b6 _ZN4core4sync6atomic26strongest_failure_ordering17hf00d1b9dba0086edE:
; fn strongest_failure_ordering(order: Ordering) -> Ordering {
ffffffff802087b6: 41 11                	addi	sp, sp, -16
ffffffff802087b8: aa 85                	add	a1, zero, a0
ffffffff802087ba: 23 07 a1 00          	sb	a0, 14(sp)
;         Release => Relaxed,
ffffffff802087be: 13 75 f5 0f          	andi	a0, a0, 255
ffffffff802087c2: 01 46                	mv	a2, zero
ffffffff802087c4: 2a e0                	sd	a0, 0(sp)
ffffffff802087c6: 63 0c c5 02          	beq	a0, a2, 56
ffffffff802087ca: 09 a0                	j	2
ffffffff802087cc: 05 45                	addi	a0, zero, 1
ffffffff802087ce: 82 65                	ld	a1, 0(sp)
ffffffff802087d0: 63 83 a5 02          	beq	a1, a0, 38
ffffffff802087d4: 09 a0                	j	2
ffffffff802087d6: 09 45                	addi	a0, zero, 2
ffffffff802087d8: 82 65                	ld	a1, 0(sp)
ffffffff802087da: 63 8a a5 02          	beq	a1, a0, 52
ffffffff802087de: 09 a0                	j	2
ffffffff802087e0: 0d 45                	addi	a0, zero, 3
ffffffff802087e2: 82 65                	ld	a1, 0(sp)
ffffffff802087e4: 63 84 a5 00          	beq	a1, a0, 8
ffffffff802087e8: 09 a0                	j	2
ffffffff802087ea: 31 a8                	j	28
ffffffff802087ec: 09 45                	addi	a0, zero, 2
;         AcqRel => Acquire,
ffffffff802087ee: a3 07 a1 00          	sb	a0, 15(sp)
;     match order {
ffffffff802087f2: 15 a0                	j	36
ffffffff802087f4: 00 00                	unimp	
ffffffff802087f6: 01 45                	mv	a0, zero
;         Release => Relaxed,
ffffffff802087f8: a3 07 a1 00          	sb	a0, 15(sp)
;     match order {
ffffffff802087fc: 29 a8                	j	26
ffffffff802087fe: 01 45                	mv	a0, zero
;         Relaxed => Relaxed,
ffffffff80208800: a3 07 a1 00          	sb	a0, 15(sp)
;     match order {
ffffffff80208804: 09 a8                	j	18
ffffffff80208806: 11 45                	addi	a0, zero, 4
;         SeqCst => SeqCst,
ffffffff80208808: a3 07 a1 00          	sb	a0, 15(sp)
;     match order {
ffffffff8020880c: 29 a0                	j	10
ffffffff8020880e: 09 45                	addi	a0, zero, 2
;         Acquire => Acquire,
ffffffff80208810: a3 07 a1 00          	sb	a0, 15(sp)
;     match order {
ffffffff80208814: 09 a0                	j	2
; }
ffffffff80208816: 03 05 f1 00          	lb	a0, 15(sp)
ffffffff8020881a: 41 01                	addi	sp, sp, 16
ffffffff8020881c: 82 80                	ret

ffffffff8020881e _ZN4core10intrinsics19copy_nonoverlapping17h0bccf05abc4f106cE:
; pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
ffffffff8020881e: 79 71                	addi	sp, sp, -48
ffffffff80208820: 06 f4                	sd	ra, 40(sp)
ffffffff80208822: 2a e8                	sd	a0, 16(sp)
ffffffff80208824: 2e ec                	sd	a1, 24(sp)
ffffffff80208826: 32 f0                	sd	a2, 32(sp)
;     copy_nonoverlapping(src, dst, count)
ffffffff80208828: 0e 06                	slli	a2, a2, 3
ffffffff8020882a: 2a e4                	sd	a0, 8(sp)
ffffffff8020882c: 2e 85                	add	a0, zero, a1
ffffffff8020882e: a2 65                	ld	a1, 8(sp)
ffffffff80208830: 97 40 00 00          	auipc	ra, 4
ffffffff80208834: e7 80 00 b0          	jalr	-1280(ra)
ffffffff80208838: 09 a0                	j	2
; }
ffffffff8020883a: a2 70                	ld	ra, 40(sp)
ffffffff8020883c: 45 61                	addi	sp, sp, 48
ffffffff8020883e: 82 80                	ret

ffffffff80208840 _ZN4core10intrinsics19copy_nonoverlapping17hacad7f6107638338E:
; pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
ffffffff80208840: 79 71                	addi	sp, sp, -48
ffffffff80208842: 06 f4                	sd	ra, 40(sp)
ffffffff80208844: 2a e8                	sd	a0, 16(sp)
ffffffff80208846: 2e ec                	sd	a1, 24(sp)
ffffffff80208848: 32 f0                	sd	a2, 32(sp)
;     copy_nonoverlapping(src, dst, count)
ffffffff8020884a: 2a e4                	sd	a0, 8(sp)
ffffffff8020884c: 2e 85                	add	a0, zero, a1
ffffffff8020884e: a2 65                	ld	a1, 8(sp)
ffffffff80208850: 97 40 00 00          	auipc	ra, 4
ffffffff80208854: e7 80 00 ae          	jalr	-1312(ra)
ffffffff80208858: 09 a0                	j	2
; }
ffffffff8020885a: a2 70                	ld	ra, 40(sp)
ffffffff8020885c: 45 61                	addi	sp, sp, 48
ffffffff8020885e: 82 80                	ret

ffffffff80208860 _ZN4core5alloc6layout6Layout4size17h2cd3d52c6abbfd19E:
;     pub const fn size(&self) -> usize {
ffffffff80208860: 41 11                	addi	sp, sp, -16
ffffffff80208862: 2a e4                	sd	a0, 8(sp)
;         self.size_
ffffffff80208864: 08 61                	ld	a0, 0(a0)
;     }
ffffffff80208866: 41 01                	addi	sp, sp, 16
ffffffff80208868: 82 80                	ret

ffffffff8020886a _ZN4core5alloc6layout6Layout5align17h5d81eb82db258e46E:
;     pub const fn align(&self) -> usize {
ffffffff8020886a: 01 11                	addi	sp, sp, -32
ffffffff8020886c: 06 ec                	sd	ra, 24(sp)
ffffffff8020886e: 2a e8                	sd	a0, 16(sp)
;         self.align_.get()
ffffffff80208870: 08 65                	ld	a0, 8(a0)
ffffffff80208872: 97 00 00 00          	auipc	ra, 0
ffffffff80208876: e7 80 20 06          	jalr	98(ra)
ffffffff8020887a: 2a e4                	sd	a0, 8(sp)
ffffffff8020887c: 09 a0                	j	2
;     }
ffffffff8020887e: 22 65                	ld	a0, 8(sp)
ffffffff80208880: e2 60                	ld	ra, 24(sp)
ffffffff80208882: 05 61                	addi	sp, sp, 32
ffffffff80208884: 82 80                	ret

ffffffff80208886 _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h534080c18a7e38e0E:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
ffffffff80208886: 79 71                	addi	sp, sp, -48
ffffffff80208888: 06 f4                	sd	ra, 40(sp)
ffffffff8020888a: 2a ec                	sd	a0, 24(sp)
ffffffff8020888c: 2e f0                	sd	a1, 32(sp)
ffffffff8020888e: 10 61                	ld	a2, 0(a0)
ffffffff80208890: 08 65                	ld	a0, 8(a0)
ffffffff80208892: 2a e8                	sd	a0, 16(sp)
ffffffff80208894: 32 85                	add	a0, zero, a2
ffffffff80208896: 42 66                	ld	a2, 16(sp)
ffffffff80208898: 2e e4                	sd	a1, 8(sp)
ffffffff8020889a: b2 85                	add	a1, zero, a2
ffffffff8020889c: 22 66                	ld	a2, 8(sp)
ffffffff8020889e: 97 30 00 00          	auipc	ra, 3
ffffffff802088a2: e7 80 c0 b0          	jalr	-1268(ra)
ffffffff802088a6: 2a e0                	sd	a0, 0(sp)
ffffffff802088a8: 09 a0                	j	2
ffffffff802088aa: 02 65                	ld	a0, 0(sp)
ffffffff802088ac: a2 70                	ld	ra, 40(sp)
ffffffff802088ae: 45 61                	addi	sp, sp, 48
ffffffff802088b0: 82 80                	ret

ffffffff802088b2 _ZN4core3fmt10ArgumentV13new17hb2cb8d722e073e31E:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
ffffffff802088b2: 5d 71                	addi	sp, sp, -80
ffffffff802088b4: 2a f8                	sd	a0, 48(sp)
ffffffff802088b6: 2e fc                	sd	a1, 56(sp)
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
ffffffff802088b8: ae e0                	sd	a1, 64(sp)
ffffffff802088ba: 2a ec                	sd	a0, 24(sp)
ffffffff802088bc: 2e e8                	sd	a1, 16(sp)
ffffffff802088be: 09 a0                	j	2
ffffffff802088c0: 62 65                	ld	a0, 24(sp)
ffffffff802088c2: aa e4                	sd	a0, 72(sp)
ffffffff802088c4: 2a e4                	sd	a0, 8(sp)
ffffffff802088c6: 09 a0                	j	2
ffffffff802088c8: 22 65                	ld	a0, 8(sp)
ffffffff802088ca: 2a f0                	sd	a0, 32(sp)
ffffffff802088cc: c2 65                	ld	a1, 16(sp)
ffffffff802088ce: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff802088d0: 61 61                	addi	sp, sp, 80
ffffffff802088d2: 82 80                	ret

ffffffff802088d4 _ZN4core3num12NonZeroUsize3get17hcf40846e31853e1fE:
;                 pub const fn get(self) -> $Int {
ffffffff802088d4: 41 11                	addi	sp, sp, -16
ffffffff802088d6: 2a e4                	sd	a0, 8(sp)
;                 }
ffffffff802088d8: 41 01                	addi	sp, sp, 16
ffffffff802088da: 82 80                	ret

ffffffff802088dc _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h2c0f086ce51852aaE:
;             pub const fn checked_sub(self, rhs: Self) -> Option<Self> {
ffffffff802088dc: 5d 71                	addi	sp, sp, -80
ffffffff802088de: 86 e4                	sd	ra, 72(sp)
ffffffff802088e0: 2a f4                	sd	a0, 40(sp)
ffffffff802088e2: 2e f8                	sd	a1, 48(sp)
;                 let (a, b) = self.overflowing_sub(rhs);
ffffffff802088e4: 97 00 00 00          	auipc	ra, 0
ffffffff802088e8: e7 80 80 1b          	jalr	440(ra)
ffffffff802088ec: 2a e8                	sd	a0, 16(sp)
ffffffff802088ee: 2e e4                	sd	a1, 8(sp)
ffffffff802088f0: 09 a0                	j	2
ffffffff802088f2: 42 65                	ld	a0, 16(sp)
ffffffff802088f4: 2a fc                	sd	a0, 56(sp)
ffffffff802088f6: a2 65                	ld	a1, 8(sp)
ffffffff802088f8: 13 f6 15 00          	andi	a2, a1, 1
ffffffff802088fc: a3 03 c1 04          	sb	a2, 71(sp)
;                 if b {None} else {Some(a)}
ffffffff80208900: 19 e6                	bnez	a2, 14
ffffffff80208902: 09 a0                	j	2
ffffffff80208904: 42 65                	ld	a0, 16(sp)
ffffffff80208906: 2a f0                	sd	a0, 32(sp)
ffffffff80208908: 85 45                	addi	a1, zero, 1
ffffffff8020890a: 2e ec                	sd	a1, 24(sp)
ffffffff8020890c: 21 a0                	j	8
ffffffff8020890e: 01 45                	mv	a0, zero
ffffffff80208910: 2a ec                	sd	a0, 24(sp)
ffffffff80208912: 09 a0                	j	2
;             }
ffffffff80208914: 62 65                	ld	a0, 24(sp)
ffffffff80208916: 82 75                	ld	a1, 32(sp)
ffffffff80208918: a6 60                	ld	ra, 72(sp)
ffffffff8020891a: 61 61                	addi	sp, sp, 80
ffffffff8020891c: 82 80                	ret

ffffffff8020891e _ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17ha281210a5a19c1caE:
;             pub const fn wrapping_sub(self, rhs: Self) -> Self {
ffffffff8020891e: 01 11                	addi	sp, sp, -32
ffffffff80208920: 2a e4                	sd	a0, 8(sp)
ffffffff80208922: 2e e8                	sd	a1, 16(sp)
;                 intrinsics::wrapping_sub(self, rhs)
ffffffff80208924: 0d 8d                	sub	a0, a0, a1
ffffffff80208926: 2a ec                	sd	a0, 24(sp)
ffffffff80208928: 2a e0                	sd	a0, 0(sp)
ffffffff8020892a: 09 a0                	j	2
;             }
ffffffff8020892c: 02 65                	ld	a0, 0(sp)
ffffffff8020892e: 05 61                	addi	sp, sp, 32
ffffffff80208930: 82 80                	ret

ffffffff80208932 _ZN4core3num23_$LT$impl$u20$usize$GT$13leading_zeros17h931963daab3773d2E:
;             pub const fn leading_zeros(self) -> u32 {
ffffffff80208932: 01 11                	addi	sp, sp, -32
ffffffff80208934: 2a e8                	sd	a0, 16(sp)
;                 intrinsics::ctlz(self as $ActualT) as u32
ffffffff80208936: 93 55 15 00          	srli	a1, a0, 1
ffffffff8020893a: 4d 8d                	or	a0, a0, a1
ffffffff8020893c: 93 55 25 00          	srli	a1, a0, 2
ffffffff80208940: 4d 8d                	or	a0, a0, a1
ffffffff80208942: 93 55 45 00          	srli	a1, a0, 4
ffffffff80208946: 4d 8d                	or	a0, a0, a1
ffffffff80208948: 93 55 85 00          	srli	a1, a0, 8
ffffffff8020894c: 4d 8d                	or	a0, a0, a1
ffffffff8020894e: 93 55 05 01          	srli	a1, a0, 16
ffffffff80208952: 4d 8d                	or	a0, a0, a1
ffffffff80208954: 93 55 05 02          	srli	a1, a0, 32
ffffffff80208958: 4d 8d                	or	a0, a0, a1
ffffffff8020895a: 13 45 f5 ff          	not	a0, a0
ffffffff8020895e: 93 55 15 00          	srli	a1, a0, 1
ffffffff80208962: 37 56 55 05          	lui	a2, 21845
ffffffff80208966: 1b 06 56 55          	addiw	a2, a2, 1365
ffffffff8020896a: 32 06                	slli	a2, a2, 12
ffffffff8020896c: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80208970: 32 06                	slli	a2, a2, 12
ffffffff80208972: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80208976: 32 06                	slli	a2, a2, 12
ffffffff80208978: 13 06 56 55          	addi	a2, a2, 1365
ffffffff8020897c: f1 8d                	and	a1, a1, a2
ffffffff8020897e: 0d 8d                	sub	a0, a0, a1
ffffffff80208980: b7 35 33 03          	lui	a1, 13107
ffffffff80208984: 9b 85 35 33          	addiw	a1, a1, 819
ffffffff80208988: b2 05                	slli	a1, a1, 12
ffffffff8020898a: 93 85 35 33          	addi	a1, a1, 819
ffffffff8020898e: b2 05                	slli	a1, a1, 12
ffffffff80208990: 93 85 35 33          	addi	a1, a1, 819
ffffffff80208994: b2 05                	slli	a1, a1, 12
ffffffff80208996: 93 85 35 33          	addi	a1, a1, 819
ffffffff8020899a: 33 76 b5 00          	and	a2, a0, a1
ffffffff8020899e: 09 81                	srli	a0, a0, 2
ffffffff802089a0: 6d 8d                	and	a0, a0, a1
ffffffff802089a2: 32 95                	add	a0, a0, a2
ffffffff802089a4: 93 55 45 00          	srli	a1, a0, 4
ffffffff802089a8: 2e 95                	add	a0, a0, a1
ffffffff802089aa: b7 f5 f0 00          	lui	a1, 3855
ffffffff802089ae: 9b 85 15 0f          	addiw	a1, a1, 241
ffffffff802089b2: b2 05                	slli	a1, a1, 12
ffffffff802089b4: 93 85 f5 f0          	addi	a1, a1, -241
ffffffff802089b8: b2 05                	slli	a1, a1, 12
ffffffff802089ba: 93 85 15 0f          	addi	a1, a1, 241
ffffffff802089be: b2 05                	slli	a1, a1, 12
ffffffff802089c0: 93 85 f5 f0          	addi	a1, a1, -241
ffffffff802089c4: 6d 8d                	and	a0, a0, a1
ffffffff802089c6: b7 05 01 01          	lui	a1, 4112
ffffffff802089ca: 9b 85 15 10          	addiw	a1, a1, 257
ffffffff802089ce: c2 05                	slli	a1, a1, 16
ffffffff802089d0: 93 85 15 10          	addi	a1, a1, 257
ffffffff802089d4: c2 05                	slli	a1, a1, 16
ffffffff802089d6: 93 85 15 10          	addi	a1, a1, 257
ffffffff802089da: 33 05 b5 02          	<unknown>
ffffffff802089de: 61 91                	srli	a0, a0, 56
ffffffff802089e0: 2a ec                	sd	a0, 24(sp)
ffffffff802089e2: 2a e4                	sd	a0, 8(sp)
ffffffff802089e4: 09 a0                	j	2
;             }
ffffffff802089e6: 22 65                	ld	a0, 8(sp)
ffffffff802089e8: 05 61                	addi	sp, sp, 32
ffffffff802089ea: 82 80                	ret

ffffffff802089ec _ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hfd6eb55d47150321E:
;             pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
ffffffff802089ec: 01 11                	addi	sp, sp, -32
ffffffff802089ee: 2a e4                	sd	a0, 8(sp)
ffffffff802089f0: 2e e8                	sd	a1, 16(sp)
;                 intrinsics::unchecked_add(self, rhs)
ffffffff802089f2: 2e 95                	add	a0, a0, a1
ffffffff802089f4: 2a ec                	sd	a0, 24(sp)
ffffffff802089f6: 2a e0                	sd	a0, 0(sp)
ffffffff802089f8: 09 a0                	j	2
;             }
ffffffff802089fa: 02 65                	ld	a0, 0(sp)
ffffffff802089fc: 05 61                	addi	sp, sp, 32
ffffffff802089fe: 82 80                	ret

ffffffff80208a00 _ZN4core3num23_$LT$impl$u20$usize$GT$14trailing_zeros17h44c58e773d43c1a9E:
;             pub const fn trailing_zeros(self) -> u32 {
ffffffff80208a00: 01 11                	addi	sp, sp, -32
ffffffff80208a02: 2a e8                	sd	a0, 16(sp)
;                 intrinsics::cttz(self) as u32
ffffffff80208a04: 93 05 f5 ff          	addi	a1, a0, -1
ffffffff80208a08: 13 45 f5 ff          	not	a0, a0
ffffffff80208a0c: 6d 8d                	and	a0, a0, a1
ffffffff80208a0e: 93 55 15 00          	srli	a1, a0, 1
ffffffff80208a12: 37 56 55 05          	lui	a2, 21845
ffffffff80208a16: 1b 06 56 55          	addiw	a2, a2, 1365
ffffffff80208a1a: 32 06                	slli	a2, a2, 12
ffffffff80208a1c: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80208a20: 32 06                	slli	a2, a2, 12
ffffffff80208a22: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80208a26: 32 06                	slli	a2, a2, 12
ffffffff80208a28: 13 06 56 55          	addi	a2, a2, 1365
ffffffff80208a2c: f1 8d                	and	a1, a1, a2
ffffffff80208a2e: 0d 8d                	sub	a0, a0, a1
ffffffff80208a30: b7 35 33 03          	lui	a1, 13107
ffffffff80208a34: 9b 85 35 33          	addiw	a1, a1, 819
ffffffff80208a38: b2 05                	slli	a1, a1, 12
ffffffff80208a3a: 93 85 35 33          	addi	a1, a1, 819
ffffffff80208a3e: b2 05                	slli	a1, a1, 12
ffffffff80208a40: 93 85 35 33          	addi	a1, a1, 819
ffffffff80208a44: b2 05                	slli	a1, a1, 12
ffffffff80208a46: 93 85 35 33          	addi	a1, a1, 819
ffffffff80208a4a: 33 76 b5 00          	and	a2, a0, a1
ffffffff80208a4e: 09 81                	srli	a0, a0, 2
ffffffff80208a50: 6d 8d                	and	a0, a0, a1
ffffffff80208a52: 32 95                	add	a0, a0, a2
ffffffff80208a54: 93 55 45 00          	srli	a1, a0, 4
ffffffff80208a58: 2e 95                	add	a0, a0, a1
ffffffff80208a5a: b7 f5 f0 00          	lui	a1, 3855
ffffffff80208a5e: 9b 85 15 0f          	addiw	a1, a1, 241
ffffffff80208a62: b2 05                	slli	a1, a1, 12
ffffffff80208a64: 93 85 f5 f0          	addi	a1, a1, -241
ffffffff80208a68: b2 05                	slli	a1, a1, 12
ffffffff80208a6a: 93 85 15 0f          	addi	a1, a1, 241
ffffffff80208a6e: b2 05                	slli	a1, a1, 12
ffffffff80208a70: 93 85 f5 f0          	addi	a1, a1, -241
ffffffff80208a74: 6d 8d                	and	a0, a0, a1
ffffffff80208a76: b7 05 01 01          	lui	a1, 4112
ffffffff80208a7a: 9b 85 15 10          	addiw	a1, a1, 257
ffffffff80208a7e: c2 05                	slli	a1, a1, 16
ffffffff80208a80: 93 85 15 10          	addi	a1, a1, 257
ffffffff80208a84: c2 05                	slli	a1, a1, 16
ffffffff80208a86: 93 85 15 10          	addi	a1, a1, 257
ffffffff80208a8a: 33 05 b5 02          	<unknown>
ffffffff80208a8e: 61 91                	srli	a0, a0, 56
ffffffff80208a90: 2a ec                	sd	a0, 24(sp)
ffffffff80208a92: 2a e4                	sd	a0, 8(sp)
ffffffff80208a94: 09 a0                	j	2
;             }
ffffffff80208a96: 22 65                	ld	a0, 8(sp)
ffffffff80208a98: 05 61                	addi	sp, sp, 32
ffffffff80208a9a: 82 80                	ret

ffffffff80208a9c _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17hedcefac0fdc90fecE:
;             pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
ffffffff80208a9c: 5d 71                	addi	sp, sp, -80
ffffffff80208a9e: 2a f0                	sd	a0, 32(sp)
ffffffff80208aa0: 2e f4                	sd	a1, 40(sp)
;                 let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
ffffffff80208aa2: b3 05 b5 40          	sub	a1, a0, a1
ffffffff80208aa6: 33 35 b5 00          	sltu	a0, a0, a1
ffffffff80208aaa: 2e f8                	sd	a1, 48(sp)
ffffffff80208aac: 23 0c a1 02          	sb	a0, 56(sp)
ffffffff80208ab0: 2e e4                	sd	a1, 8(sp)
ffffffff80208ab2: 2a e0                	sd	a0, 0(sp)
ffffffff80208ab4: 09 a0                	j	2
ffffffff80208ab6: 22 65                	ld	a0, 8(sp)
ffffffff80208ab8: aa e0                	sd	a0, 64(sp)
ffffffff80208aba: 82 65                	ld	a1, 0(sp)
ffffffff80208abc: a3 07 b1 04          	sb	a1, 79(sp)
;                 (a as Self, b)
ffffffff80208ac0: 2a e8                	sd	a0, 16(sp)
ffffffff80208ac2: 23 0c b1 00          	sb	a1, 24(sp)
;             }
ffffffff80208ac6: 61 61                	addi	sp, sp, 80
ffffffff80208ac8: 82 80                	ret

ffffffff80208aca _ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17he9fd51901934b976E:
;             pub const fn next_power_of_two(self) -> Self {
ffffffff80208aca: 01 11                	addi	sp, sp, -32
ffffffff80208acc: 06 ec                	sd	ra, 24(sp)
ffffffff80208ace: 2a e8                	sd	a0, 16(sp)
;                 self.one_less_than_next_power_of_two() + 1
ffffffff80208ad0: 97 00 00 00          	auipc	ra, 0
ffffffff80208ad4: e7 80 e0 03          	jalr	62(ra)
ffffffff80208ad8: 2a e4                	sd	a0, 8(sp)
ffffffff80208ada: 09 a0                	j	2
ffffffff80208adc: 22 65                	ld	a0, 8(sp)
ffffffff80208ade: 93 05 15 00          	addi	a1, a0, 1
ffffffff80208ae2: 2e e0                	sd	a1, 0(sp)
ffffffff80208ae4: 63 e7 a5 00          	bltu	a1, a0, 14
ffffffff80208ae8: 09 a0                	j	2
;             }
ffffffff80208aea: 02 65                	ld	a0, 0(sp)
ffffffff80208aec: e2 60                	ld	ra, 24(sp)
ffffffff80208aee: 05 61                	addi	sp, sp, 32
ffffffff80208af0: 82 80                	ret

ffffffff80208af2 .LBB8_4:
;                 self.one_less_than_next_power_of_two() + 1
ffffffff80208af2: 17 65 00 00          	auipc	a0, 6
ffffffff80208af6: 13 05 e5 41          	addi	a0, a0, 1054

ffffffff80208afa .LBB8_5:
ffffffff80208afa: 17 66 00 00          	auipc	a2, 6
ffffffff80208afe: 13 06 66 3f          	addi	a2, a2, 1014
ffffffff80208b02: f1 45                	addi	a1, zero, 28
ffffffff80208b04: 97 20 00 00          	auipc	ra, 2
ffffffff80208b08: e7 80 40 83          	jalr	-1996(ra)
ffffffff80208b0c: 00 00                	unimp	

ffffffff80208b0e _ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17h0ed5ecc5373cd4acE:
;         const fn one_less_than_next_power_of_two(self) -> Self {
ffffffff80208b0e: 39 71                	addi	sp, sp, -64
ffffffff80208b10: 2a f0                	sd	a0, 32(sp)
ffffffff80208b12: 89 45                	addi	a1, zero, 2
;             if self <= 1 { return 0; }
ffffffff80208b14: 2a e8                	sd	a0, 16(sp)
ffffffff80208b16: 63 60 b5 0c          	bltu	a0, a1, 192
ffffffff80208b1a: 09 a0                	j	2
;             let p = self - 1;
ffffffff80208b1c: 42 65                	ld	a0, 16(sp)
ffffffff80208b1e: 93 05 f5 ff          	addi	a1, a0, -1
ffffffff80208b22: 2e f4                	sd	a1, 40(sp)
;             let z = unsafe { intrinsics::ctlz_nonzero(p) };
ffffffff80208b24: 13 d6 15 00          	srli	a2, a1, 1
ffffffff80208b28: d1 8d                	or	a1, a1, a2
ffffffff80208b2a: 13 d6 25 00          	srli	a2, a1, 2
ffffffff80208b2e: d1 8d                	or	a1, a1, a2
ffffffff80208b30: 13 d6 45 00          	srli	a2, a1, 4
ffffffff80208b34: d1 8d                	or	a1, a1, a2
ffffffff80208b36: 13 d6 85 00          	srli	a2, a1, 8
ffffffff80208b3a: d1 8d                	or	a1, a1, a2
ffffffff80208b3c: 13 d6 05 01          	srli	a2, a1, 16
ffffffff80208b40: d1 8d                	or	a1, a1, a2
ffffffff80208b42: 13 d6 05 02          	srli	a2, a1, 32
ffffffff80208b46: d1 8d                	or	a1, a1, a2
ffffffff80208b48: 93 c5 f5 ff          	not	a1, a1
ffffffff80208b4c: 13 d6 15 00          	srli	a2, a1, 1
ffffffff80208b50: b7 56 55 05          	lui	a3, 21845
ffffffff80208b54: 9b 86 56 55          	addiw	a3, a3, 1365
ffffffff80208b58: b2 06                	slli	a3, a3, 12
ffffffff80208b5a: 93 86 56 55          	addi	a3, a3, 1365
ffffffff80208b5e: b2 06                	slli	a3, a3, 12
ffffffff80208b60: 93 86 56 55          	addi	a3, a3, 1365
ffffffff80208b64: b2 06                	slli	a3, a3, 12
ffffffff80208b66: 93 86 56 55          	addi	a3, a3, 1365
ffffffff80208b6a: 75 8e                	and	a2, a2, a3
ffffffff80208b6c: 91 8d                	sub	a1, a1, a2
ffffffff80208b6e: 37 36 33 03          	lui	a2, 13107
ffffffff80208b72: 1b 06 36 33          	addiw	a2, a2, 819
ffffffff80208b76: 32 06                	slli	a2, a2, 12
ffffffff80208b78: 13 06 36 33          	addi	a2, a2, 819
ffffffff80208b7c: 32 06                	slli	a2, a2, 12
ffffffff80208b7e: 13 06 36 33          	addi	a2, a2, 819
ffffffff80208b82: 32 06                	slli	a2, a2, 12
ffffffff80208b84: 13 06 36 33          	addi	a2, a2, 819
ffffffff80208b88: b3 f6 c5 00          	and	a3, a1, a2
ffffffff80208b8c: 89 81                	srli	a1, a1, 2
ffffffff80208b8e: f1 8d                	and	a1, a1, a2
ffffffff80208b90: b6 95                	add	a1, a1, a3
ffffffff80208b92: 13 d6 45 00          	srli	a2, a1, 4
ffffffff80208b96: b2 95                	add	a1, a1, a2
ffffffff80208b98: 37 f6 f0 00          	lui	a2, 3855
ffffffff80208b9c: 1b 06 16 0f          	addiw	a2, a2, 241
ffffffff80208ba0: 32 06                	slli	a2, a2, 12
ffffffff80208ba2: 13 06 f6 f0          	addi	a2, a2, -241
ffffffff80208ba6: 32 06                	slli	a2, a2, 12
ffffffff80208ba8: 13 06 16 0f          	addi	a2, a2, 241
ffffffff80208bac: 32 06                	slli	a2, a2, 12
ffffffff80208bae: 13 06 f6 f0          	addi	a2, a2, -241
ffffffff80208bb2: f1 8d                	and	a1, a1, a2
ffffffff80208bb4: 37 06 01 01          	lui	a2, 4112
ffffffff80208bb8: 1b 06 16 10          	addiw	a2, a2, 257
ffffffff80208bbc: 42 06                	slli	a2, a2, 16
ffffffff80208bbe: 13 06 16 10          	addi	a2, a2, 257
ffffffff80208bc2: 42 06                	slli	a2, a2, 16
ffffffff80208bc4: 13 06 16 10          	addi	a2, a2, 257
ffffffff80208bc8: b3 85 c5 02          	<unknown>
ffffffff80208bcc: e1 91                	srli	a1, a1, 56
ffffffff80208bce: 2e f8                	sd	a1, 48(sp)
ffffffff80208bd0: 2e fc                	sd	a1, 56(sp)
ffffffff80208bd2: 2e e4                	sd	a1, 8(sp)
ffffffff80208bd4: 39 a0                	j	14
ffffffff80208bd6: 01 45                	mv	a0, zero
;             if self <= 1 { return 0; }
ffffffff80208bd8: 2a ec                	sd	a0, 24(sp)
ffffffff80208bda: 09 a0                	j	2
;         }
ffffffff80208bdc: 62 65                	ld	a0, 24(sp)
ffffffff80208bde: 21 61                	addi	sp, sp, 64
ffffffff80208be0: 82 80                	ret
ffffffff80208be2: 7d 55                	addi	a0, zero, -1
;             <$SelfT>::MAX >> z
ffffffff80208be4: a2 65                	ld	a1, 8(sp)
ffffffff80208be6: 33 55 b5 00          	srl	a0, a0, a1
ffffffff80208bea: 2a ec                	sd	a0, 24(sp)
;         }
ffffffff80208bec: c5 bf                	j	-16

ffffffff80208bee _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1d5a1e0cecec4720E:
;     fn next(&mut self) -> Option<A> {
ffffffff80208bee: 5d 71                	addi	sp, sp, -80
ffffffff80208bf0: 86 e4                	sd	ra, 72(sp)
ffffffff80208bf2: 2a fc                	sd	a0, 56(sp)
;         if self.start < self.end {
ffffffff80208bf4: 93 05 85 00          	addi	a1, a0, 8
ffffffff80208bf8: 2a f0                	sd	a0, 32(sp)
ffffffff80208bfa: 97 00 00 00          	auipc	ra, 0
ffffffff80208bfe: e7 80 80 1e          	jalr	488(ra)
ffffffff80208c02: 2a ec                	sd	a0, 24(sp)
ffffffff80208c04: 09 a0                	j	2
ffffffff80208c06: 62 65                	ld	a0, 24(sp)
ffffffff80208c08: 09 e5                	bnez	a0, 10
ffffffff80208c0a: 09 a0                	j	2
ffffffff80208c0c: 01 45                	mv	a0, zero
;             None
ffffffff80208c0e: 2a f4                	sd	a0, 40(sp)
;         if self.start < self.end {
ffffffff80208c10: 3d a8                	j	62
;             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
ffffffff80208c12: 02 75                	ld	a0, 32(sp)
ffffffff80208c14: 97 10 00 00          	auipc	ra, 1
ffffffff80208c18: e7 80 40 b4          	jalr	-1212(ra)
ffffffff80208c1c: 2a e8                	sd	a0, 16(sp)
ffffffff80208c1e: 09 a0                	j	2
ffffffff80208c20: 85 45                	addi	a1, zero, 1
ffffffff80208c22: 42 65                	ld	a0, 16(sp)
ffffffff80208c24: 97 10 00 00          	auipc	ra, 1
ffffffff80208c28: e7 80 c0 a8          	jalr	-1396(ra)
ffffffff80208c2c: aa 85                	add	a1, zero, a0
ffffffff80208c2e: aa e0                	sd	a0, 64(sp)
ffffffff80208c30: 2e e4                	sd	a1, 8(sp)
ffffffff80208c32: 09 a0                	j	2
;             Some(mem::replace(&mut self.start, n))
ffffffff80208c34: 02 75                	ld	a0, 32(sp)
ffffffff80208c36: a2 65                	ld	a1, 8(sp)
ffffffff80208c38: 97 00 00 00          	auipc	ra, 0
ffffffff80208c3c: e7 80 40 1d          	jalr	468(ra)
ffffffff80208c40: 2a e0                	sd	a0, 0(sp)
ffffffff80208c42: 09 a0                	j	2
ffffffff80208c44: 02 65                	ld	a0, 0(sp)
ffffffff80208c46: 2a f8                	sd	a0, 48(sp)
ffffffff80208c48: 85 45                	addi	a1, zero, 1
ffffffff80208c4a: 2e f4                	sd	a1, 40(sp)
;         if self.start < self.end {
ffffffff80208c4c: 09 a0                	j	2
;     }
ffffffff80208c4e: 22 75                	ld	a0, 40(sp)
ffffffff80208c50: c2 75                	ld	a1, 48(sp)
ffffffff80208c52: a6 60                	ld	ra, 72(sp)
ffffffff80208c54: 61 61                	addi	sp, sp, 80
ffffffff80208c56: 82 80                	ret

ffffffff80208c58 _ZN4core4iter5range116_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$9next_back17h831ce4389aa3ce74E:
;     fn next_back(&mut self) -> Option<A> {
ffffffff80208c58: 5d 71                	addi	sp, sp, -80
ffffffff80208c5a: 86 e4                	sd	ra, 72(sp)
ffffffff80208c5c: aa e0                	sd	a0, 64(sp)
;         if self.start < self.end {
ffffffff80208c5e: 93 05 85 00          	addi	a1, a0, 8
ffffffff80208c62: 2a f0                	sd	a0, 32(sp)
ffffffff80208c64: 97 00 00 00          	auipc	ra, 0
ffffffff80208c68: e7 80 e0 17          	jalr	382(ra)
ffffffff80208c6c: 2a ec                	sd	a0, 24(sp)
ffffffff80208c6e: 09 a0                	j	2
ffffffff80208c70: 62 65                	ld	a0, 24(sp)
ffffffff80208c72: 09 e5                	bnez	a0, 10
ffffffff80208c74: 09 a0                	j	2
ffffffff80208c76: 01 45                	mv	a0, zero
;             None
ffffffff80208c78: 2a f4                	sd	a0, 40(sp)
;         if self.start < self.end {
ffffffff80208c7a: 3d a0                	j	46
;             self.end = Step::backward(self.end.clone(), 1);
ffffffff80208c7c: 02 75                	ld	a0, 32(sp)
ffffffff80208c7e: 21 05                	addi	a0, a0, 8
ffffffff80208c80: 97 10 00 00          	auipc	ra, 1
ffffffff80208c84: e7 80 80 ad          	jalr	-1320(ra)
ffffffff80208c88: 2a e8                	sd	a0, 16(sp)
ffffffff80208c8a: 09 a0                	j	2
ffffffff80208c8c: 85 45                	addi	a1, zero, 1
ffffffff80208c8e: 42 65                	ld	a0, 16(sp)
ffffffff80208c90: 97 10 00 00          	auipc	ra, 1
ffffffff80208c94: e7 80 c0 a3          	jalr	-1476(ra)
ffffffff80208c98: 2a e4                	sd	a0, 8(sp)
ffffffff80208c9a: 09 a0                	j	2
ffffffff80208c9c: 19 a8                	j	22
;             Some(self.end.clone())
ffffffff80208c9e: 62 75                	ld	a0, 56(sp)
ffffffff80208ca0: 2a f8                	sd	a0, 48(sp)
ffffffff80208ca2: 05 45                	addi	a0, zero, 1
ffffffff80208ca4: 2a f4                	sd	a0, 40(sp)
;         if self.start < self.end {
ffffffff80208ca6: 09 a0                	j	2
;     }
ffffffff80208ca8: 22 75                	ld	a0, 40(sp)
ffffffff80208caa: c2 75                	ld	a1, 48(sp)
ffffffff80208cac: a6 60                	ld	ra, 72(sp)
ffffffff80208cae: 61 61                	addi	sp, sp, 80
ffffffff80208cb0: 82 80                	ret
;             self.end = Step::backward(self.end.clone(), 1);
ffffffff80208cb2: 02 75                	ld	a0, 32(sp)
ffffffff80208cb4: 21 05                	addi	a0, a0, 8
ffffffff80208cb6: a2 65                	ld	a1, 8(sp)
ffffffff80208cb8: 02 76                	ld	a2, 32(sp)
ffffffff80208cba: 0c e6                	sd	a1, 8(a2)
;             Some(self.end.clone())
ffffffff80208cbc: 97 10 00 00          	auipc	ra, 1
ffffffff80208cc0: e7 80 c0 a9          	jalr	-1380(ra)
ffffffff80208cc4: 2a fc                	sd	a0, 56(sp)
ffffffff80208cc6: e1 bf                	j	-40

ffffffff80208cc8 _ZN4core4iter6traits8iterator8Iterator3rev17hf0f6a5345e690a1fE:
;     fn rev(self) -> Rev<Self>
ffffffff80208cc8: 79 71                	addi	sp, sp, -48
ffffffff80208cca: 06 f4                	sd	ra, 40(sp)
ffffffff80208ccc: 2a ec                	sd	a0, 24(sp)
ffffffff80208cce: 2e f0                	sd	a1, 32(sp)
;         Rev::new(self)
ffffffff80208cd0: 97 00 00 00          	auipc	ra, 0
ffffffff80208cd4: e7 80 80 01          	jalr	24(ra)
ffffffff80208cd8: 2a e8                	sd	a0, 16(sp)
ffffffff80208cda: 2e e4                	sd	a1, 8(sp)
ffffffff80208cdc: 09 a0                	j	2
;     }
ffffffff80208cde: 42 65                	ld	a0, 16(sp)
ffffffff80208ce0: a2 65                	ld	a1, 8(sp)
ffffffff80208ce2: a2 70                	ld	ra, 40(sp)
ffffffff80208ce4: 45 61                	addi	sp, sp, 48
ffffffff80208ce6: 82 80                	ret

ffffffff80208ce8 _ZN4core4iter8adapters12Rev$LT$T$GT$3new17hbda90ee474eae0caE:
;     pub(super) fn new(iter: T) -> Rev<T> {
ffffffff80208ce8: 01 11                	addi	sp, sp, -32
ffffffff80208cea: 2a e8                	sd	a0, 16(sp)
ffffffff80208cec: 2e ec                	sd	a1, 24(sp)
;         Rev { iter }
ffffffff80208cee: 2a e0                	sd	a0, 0(sp)
ffffffff80208cf0: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff80208cf2: 05 61                	addi	sp, sp, 32
ffffffff80208cf4: 82 80                	ret

ffffffff80208cf6 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4b4145ae8b1e251aE:
;     fn into_iter(self) -> I {
ffffffff80208cf6: 41 11                	addi	sp, sp, -16
ffffffff80208cf8: 2a e0                	sd	a0, 0(sp)
ffffffff80208cfa: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff80208cfc: 41 01                	addi	sp, sp, 16
ffffffff80208cfe: 82 80                	ret

ffffffff80208d00 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h62293574697a701dE:
;     fn into_iter(self) -> I {
ffffffff80208d00: 41 11                	addi	sp, sp, -16
ffffffff80208d02: 2a e0                	sd	a0, 0(sp)
ffffffff80208d04: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff80208d06: 41 01                	addi	sp, sp, 16
ffffffff80208d08: 82 80                	ret

ffffffff80208d0a _ZN93_$LT$core..iter..adapters..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h69d03837ffdf39faE:
;     fn next(&mut self) -> Option<<I as Iterator>::Item> {
ffffffff80208d0a: 01 11                	addi	sp, sp, -32
ffffffff80208d0c: 06 ec                	sd	ra, 24(sp)
ffffffff80208d0e: 2a e8                	sd	a0, 16(sp)
;         self.iter.next_back()
ffffffff80208d10: 97 00 00 00          	auipc	ra, 0
ffffffff80208d14: e7 80 80 f4          	jalr	-184(ra)
ffffffff80208d18: 2a e4                	sd	a0, 8(sp)
ffffffff80208d1a: 2e e0                	sd	a1, 0(sp)
ffffffff80208d1c: 09 a0                	j	2
;     }
ffffffff80208d1e: 22 65                	ld	a0, 8(sp)
ffffffff80208d20: 82 65                	ld	a1, 0(sp)
ffffffff80208d22: e2 60                	ld	ra, 24(sp)
ffffffff80208d24: 05 61                	addi	sp, sp, 32
ffffffff80208d26: 82 80                	ret

ffffffff80208d28 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h91199f1bdc8f8b34E:
;     pub const fn wrapping_add(self, count: usize) -> Self
ffffffff80208d28: 01 11                	addi	sp, sp, -32
ffffffff80208d2a: 06 ec                	sd	ra, 24(sp)
ffffffff80208d2c: 2a e4                	sd	a0, 8(sp)
ffffffff80208d2e: 2e e8                	sd	a1, 16(sp)
;         self.wrapping_offset(count as isize)
ffffffff80208d30: 97 00 00 00          	auipc	ra, 0
ffffffff80208d34: e7 80 40 01          	jalr	20(ra)
ffffffff80208d38: 2a e0                	sd	a0, 0(sp)
ffffffff80208d3a: 09 a0                	j	2
;     }
ffffffff80208d3c: 02 65                	ld	a0, 0(sp)
ffffffff80208d3e: e2 60                	ld	ra, 24(sp)
ffffffff80208d40: 05 61                	addi	sp, sp, 32
ffffffff80208d42: 82 80                	ret

ffffffff80208d44 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h05ee6d1dba243dc0E:
;     pub const fn wrapping_offset(self, count: isize) -> *const T
ffffffff80208d44: 01 11                	addi	sp, sp, -32
ffffffff80208d46: 2a e4                	sd	a0, 8(sp)
ffffffff80208d48: 2e e8                	sd	a1, 16(sp)
;         unsafe { intrinsics::arith_offset(self, count) }
ffffffff80208d4a: 2e 95                	add	a0, a0, a1
ffffffff80208d4c: 2a ec                	sd	a0, 24(sp)
ffffffff80208d4e: 2a e0                	sd	a0, 0(sp)
ffffffff80208d50: 09 a0                	j	2
;     }
ffffffff80208d52: 02 65                	ld	a0, 0(sp)
ffffffff80208d54: 05 61                	addi	sp, sp, 32
ffffffff80208d56: 82 80                	ret

ffffffff80208d58 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h7622b9791ae9c935E:
;     pub const unsafe fn add(self, count: usize) -> Self
ffffffff80208d58: 01 11                	addi	sp, sp, -32
ffffffff80208d5a: 06 ec                	sd	ra, 24(sp)
ffffffff80208d5c: 2a e4                	sd	a0, 8(sp)
ffffffff80208d5e: 2e e8                	sd	a1, 16(sp)
;         self.offset(count as isize)
ffffffff80208d60: 97 00 00 00          	auipc	ra, 0
ffffffff80208d64: e7 80 40 01          	jalr	20(ra)
ffffffff80208d68: 2a e0                	sd	a0, 0(sp)
ffffffff80208d6a: 09 a0                	j	2
;     }
ffffffff80208d6c: 02 65                	ld	a0, 0(sp)
ffffffff80208d6e: e2 60                	ld	ra, 24(sp)
ffffffff80208d70: 05 61                	addi	sp, sp, 32
ffffffff80208d72: 82 80                	ret

ffffffff80208d74 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7e545483861404c8E:
;     pub const unsafe fn offset(self, count: isize) -> *const T
ffffffff80208d74: 01 11                	addi	sp, sp, -32
ffffffff80208d76: 2a e4                	sd	a0, 8(sp)
ffffffff80208d78: 2e e8                	sd	a1, 16(sp)
;         intrinsics::offset(self, count)
ffffffff80208d7a: 8e 05                	slli	a1, a1, 3
ffffffff80208d7c: 2e 95                	add	a0, a0, a1
ffffffff80208d7e: 2a ec                	sd	a0, 24(sp)
ffffffff80208d80: 2a e0                	sd	a0, 0(sp)
ffffffff80208d82: 09 a0                	j	2
;     }
ffffffff80208d84: 02 65                	ld	a0, 0(sp)
ffffffff80208d86: 05 61                	addi	sp, sp, 32
ffffffff80208d88: 82 80                	ret

ffffffff80208d8a _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7f949499a7449532E:
;     pub fn is_null(self) -> bool {
ffffffff80208d8a: 41 11                	addi	sp, sp, -16
ffffffff80208d8c: 2a e4                	sd	a0, 8(sp)
;         (self as *const u8) == null()
ffffffff80208d8e: 2a e0                	sd	a0, 0(sp)
ffffffff80208d90: 09 a0                	j	2
ffffffff80208d92: 02 65                	ld	a0, 0(sp)
ffffffff80208d94: 13 35 15 00          	seqz	a0, a0
;     }
ffffffff80208d98: 41 01                	addi	sp, sp, 16
ffffffff80208d9a: 82 80                	ret

ffffffff80208d9c _ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hffa32d3988c2b685E:
;                 fn cmp(&self, other: &$t) -> Ordering {
ffffffff80208d9c: 79 71                	addi	sp, sp, -48
ffffffff80208d9e: 2a f0                	sd	a0, 32(sp)
ffffffff80208da0: 2e f4                	sd	a1, 40(sp)
;                     if *self < *other { Less }
ffffffff80208da2: 10 61                	ld	a2, 0(a0)
ffffffff80208da4: 94 61                	ld	a3, 0(a1)
ffffffff80208da6: 2e e8                	sd	a1, 16(sp)
ffffffff80208da8: 2a e4                	sd	a0, 8(sp)
ffffffff80208daa: 63 6a d6 00          	bltu	a2, a3, 20
ffffffff80208dae: 09 a0                	j	2
;                     else if *self == *other { Equal }
ffffffff80208db0: 22 65                	ld	a0, 8(sp)
ffffffff80208db2: 0c 61                	ld	a1, 0(a0)
ffffffff80208db4: 42 66                	ld	a2, 16(sp)
ffffffff80208db6: 14 62                	ld	a3, 0(a2)
ffffffff80208db8: 63 8c d5 00          	beq	a1, a3, 24
ffffffff80208dbc: 31 a0                	j	12
ffffffff80208dbe: 13 05 f0 0f          	addi	a0, zero, 255
;                     if *self < *other { Less }
ffffffff80208dc2: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80208dc6: 11 a8                	j	20
ffffffff80208dc8: 05 45                	addi	a0, zero, 1
;                     else { Greater }
ffffffff80208dca: a3 0f a1 00          	sb	a0, 31(sp)
;                     else if *self == *other { Equal }
ffffffff80208dce: 29 a0                	j	10
ffffffff80208dd0: 01 45                	mv	a0, zero
ffffffff80208dd2: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80208dd6: 09 a0                	j	2
;                     if *self < *other { Less }
ffffffff80208dd8: 09 a0                	j	2
;                 }
ffffffff80208dda: 03 05 f1 01          	lb	a0, 31(sp)
ffffffff80208dde: 45 61                	addi	sp, sp, 48
ffffffff80208de0: 82 80                	ret

ffffffff80208de2 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h8db1e644f0b584dcE:
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
ffffffff80208de2: 41 11                	addi	sp, sp, -16
ffffffff80208de4: 2a e0                	sd	a0, 0(sp)
ffffffff80208de6: 2e e4                	sd	a1, 8(sp)
ffffffff80208de8: 08 61                	ld	a0, 0(a0)
ffffffff80208dea: 8c 61                	ld	a1, 0(a1)
ffffffff80208dec: 33 35 b5 00          	sltu	a0, a0, a1
ffffffff80208df0: 41 01                	addi	sp, sp, 16
ffffffff80208df2: 82 80                	ret

ffffffff80208df4 _ZN4core3mem4swap17ha184144c005ffc58E:
; pub fn swap<T>(x: &mut T, y: &mut T) {
ffffffff80208df4: 01 11                	addi	sp, sp, -32
ffffffff80208df6: 06 ec                	sd	ra, 24(sp)
ffffffff80208df8: 2a e4                	sd	a0, 8(sp)
ffffffff80208dfa: 2e e8                	sd	a1, 16(sp)
;         ptr::swap_nonoverlapping_one(x, y);
ffffffff80208dfc: 97 00 00 00          	auipc	ra, 0
ffffffff80208e00: e7 80 40 17          	jalr	372(ra)
ffffffff80208e04: 09 a0                	j	2
; }
ffffffff80208e06: e2 60                	ld	ra, 24(sp)
ffffffff80208e08: 05 61                	addi	sp, sp, 32
ffffffff80208e0a: 82 80                	ret

ffffffff80208e0c _ZN4core3mem7replace17h03fe3212614a21c2E:
; pub fn replace<T>(dest: &mut T, mut src: T) -> T {
ffffffff80208e0c: 01 11                	addi	sp, sp, -32
ffffffff80208e0e: 06 ec                	sd	ra, 24(sp)
ffffffff80208e10: 2e e4                	sd	a1, 8(sp)
ffffffff80208e12: 2a e8                	sd	a0, 16(sp)
ffffffff80208e14: 2c 00                	addi	a1, sp, 8
;     swap(dest, &mut src);
ffffffff80208e16: 97 00 00 00          	auipc	ra, 0
ffffffff80208e1a: e7 80 e0 fd          	jalr	-34(ra)
ffffffff80208e1e: 09 a0                	j	2
;     src
ffffffff80208e20: 22 65                	ld	a0, 8(sp)
; }
ffffffff80208e22: e2 60                	ld	ra, 24(sp)
ffffffff80208e24: 05 61                	addi	sp, sp, 32
ffffffff80208e26: 82 80                	ret

ffffffff80208e28 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h0676bd89a6e47517E:
;     pub const unsafe fn add(self, count: usize) -> Self
ffffffff80208e28: 01 11                	addi	sp, sp, -32
ffffffff80208e2a: 06 ec                	sd	ra, 24(sp)
ffffffff80208e2c: 2a e4                	sd	a0, 8(sp)
ffffffff80208e2e: 2e e8                	sd	a1, 16(sp)
;         self.offset(count as isize)
ffffffff80208e30: 97 00 00 00          	auipc	ra, 0
ffffffff80208e34: e7 80 40 04          	jalr	68(ra)
ffffffff80208e38: 2a e0                	sd	a0, 0(sp)
ffffffff80208e3a: 09 a0                	j	2
;     }
ffffffff80208e3c: 02 65                	ld	a0, 0(sp)
ffffffff80208e3e: e2 60                	ld	ra, 24(sp)
ffffffff80208e40: 05 61                	addi	sp, sp, 32
ffffffff80208e42: 82 80                	ret

ffffffff80208e44 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h79c739c54436e3b7E:
;     pub const unsafe fn add(self, count: usize) -> Self
ffffffff80208e44: 01 11                	addi	sp, sp, -32
ffffffff80208e46: 06 ec                	sd	ra, 24(sp)
ffffffff80208e48: 2a e4                	sd	a0, 8(sp)
ffffffff80208e4a: 2e e8                	sd	a1, 16(sp)
;         self.offset(count as isize)
ffffffff80208e4c: 97 00 00 00          	auipc	ra, 0
ffffffff80208e50: e7 80 40 01          	jalr	20(ra)
ffffffff80208e54: 2a e0                	sd	a0, 0(sp)
ffffffff80208e56: 09 a0                	j	2
;     }
ffffffff80208e58: 02 65                	ld	a0, 0(sp)
ffffffff80208e5a: e2 60                	ld	ra, 24(sp)
ffffffff80208e5c: 05 61                	addi	sp, sp, 32
ffffffff80208e5e: 82 80                	ret

ffffffff80208e60 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h5d0dd0c33d200e59E:
;     pub const unsafe fn offset(self, count: isize) -> *mut T
ffffffff80208e60: 01 11                	addi	sp, sp, -32
ffffffff80208e62: 2a e4                	sd	a0, 8(sp)
ffffffff80208e64: 2e e8                	sd	a1, 16(sp)
;         intrinsics::offset(self, count) as *mut T
ffffffff80208e66: 2e 95                	add	a0, a0, a1
ffffffff80208e68: 2a ec                	sd	a0, 24(sp)
ffffffff80208e6a: 2a e0                	sd	a0, 0(sp)
ffffffff80208e6c: 09 a0                	j	2
;     }
ffffffff80208e6e: 02 65                	ld	a0, 0(sp)
ffffffff80208e70: 05 61                	addi	sp, sp, 32
ffffffff80208e72: 82 80                	ret

ffffffff80208e74 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9c1b1a9a63b4f2beE:
;     pub const unsafe fn offset(self, count: isize) -> *mut T
ffffffff80208e74: 01 11                	addi	sp, sp, -32
ffffffff80208e76: 2a e4                	sd	a0, 8(sp)
ffffffff80208e78: 2e e8                	sd	a1, 16(sp)
;         intrinsics::offset(self, count) as *mut T
ffffffff80208e7a: 8e 05                	slli	a1, a1, 3
ffffffff80208e7c: 2e 95                	add	a0, a0, a1
ffffffff80208e7e: 2a ec                	sd	a0, 24(sp)
ffffffff80208e80: 2a e0                	sd	a0, 0(sp)
ffffffff80208e82: 09 a0                	j	2
;     }
ffffffff80208e84: 02 65                	ld	a0, 0(sp)
ffffffff80208e86: 05 61                	addi	sp, sp, 32
ffffffff80208e88: 82 80                	ret

ffffffff80208e8a _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h25c3c4383746d9deE:
;     pub fn is_null(self) -> bool {
ffffffff80208e8a: 41 11                	addi	sp, sp, -16
ffffffff80208e8c: 2a e4                	sd	a0, 8(sp)
;         (self as *mut u8) == null_mut()
ffffffff80208e8e: 2a e0                	sd	a0, 0(sp)
ffffffff80208e90: 09 a0                	j	2
ffffffff80208e92: 02 65                	ld	a0, 0(sp)
ffffffff80208e94: 13 35 15 00          	seqz	a0, a0
;     }
ffffffff80208e98: 41 01                	addi	sp, sp, 16
ffffffff80208e9a: 82 80                	ret

ffffffff80208e9c _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hf45eb60dfb1d7a9bE:
;     pub fn is_null(self) -> bool {
ffffffff80208e9c: 41 11                	addi	sp, sp, -16
ffffffff80208e9e: 2a e4                	sd	a0, 8(sp)
;         (self as *mut u8) == null_mut()
ffffffff80208ea0: 2a e0                	sd	a0, 0(sp)
ffffffff80208ea2: 09 a0                	j	2
ffffffff80208ea4: 02 65                	ld	a0, 0(sp)
ffffffff80208ea6: 13 35 15 00          	seqz	a0, a0
;     }
ffffffff80208eaa: 41 01                	addi	sp, sp, 16
ffffffff80208eac: 82 80                	ret

ffffffff80208eae _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h50cbe55b6dce591eE:
;     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
ffffffff80208eae: 41 11                	addi	sp, sp, -16
ffffffff80208eb0: 2a e4                	sd	a0, 8(sp)
;         NonNull { pointer: ptr as _ }
ffffffff80208eb2: 2a e0                	sd	a0, 0(sp)
;     }
ffffffff80208eb4: 41 01                	addi	sp, sp, 16
ffffffff80208eb6: 82 80                	ret

ffffffff80208eb8 _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h69b2532b1dc221fdE:
;     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
ffffffff80208eb8: 41 11                	addi	sp, sp, -16
ffffffff80208eba: 2a e4                	sd	a0, 8(sp)
;         NonNull { pointer: ptr as _ }
ffffffff80208ebc: 2a e0                	sd	a0, 0(sp)
;     }
ffffffff80208ebe: 41 01                	addi	sp, sp, 16
ffffffff80208ec0: 82 80                	ret

ffffffff80208ec2 _ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h27db2cb20ae09c75E:
;     pub fn new(ptr: *mut T) -> Option<Self> {
ffffffff80208ec2: 79 71                	addi	sp, sp, -48
ffffffff80208ec4: 06 f4                	sd	ra, 40(sp)
ffffffff80208ec6: 2a f0                	sd	a0, 32(sp)
;         if !ptr.is_null() {
ffffffff80208ec8: 2a e8                	sd	a0, 16(sp)
ffffffff80208eca: 97 00 00 00          	auipc	ra, 0
ffffffff80208ece: e7 80 00 fc          	jalr	-64(ra)
ffffffff80208ed2: 2a e4                	sd	a0, 8(sp)
ffffffff80208ed4: 09 a0                	j	2
ffffffff80208ed6: 01 45                	mv	a0, zero
ffffffff80208ed8: a2 65                	ld	a1, 8(sp)
ffffffff80208eda: 63 86 a5 00          	beq	a1, a0, 12
ffffffff80208ede: 09 a0                	j	2
ffffffff80208ee0: 01 45                	mv	a0, zero
;             None
ffffffff80208ee2: 2a ec                	sd	a0, 24(sp)
;         if !ptr.is_null() {
ffffffff80208ee4: 19 a8                	j	22
;             Some(unsafe { Self::new_unchecked(ptr) })
ffffffff80208ee6: 42 65                	ld	a0, 16(sp)
ffffffff80208ee8: 97 00 00 00          	auipc	ra, 0
ffffffff80208eec: e7 80 60 fc          	jalr	-58(ra)
ffffffff80208ef0: 2a e0                	sd	a0, 0(sp)
ffffffff80208ef2: 09 a0                	j	2
ffffffff80208ef4: 02 65                	ld	a0, 0(sp)
ffffffff80208ef6: 2a ec                	sd	a0, 24(sp)
;         if !ptr.is_null() {
ffffffff80208ef8: 09 a0                	j	2
;     }
ffffffff80208efa: 62 65                	ld	a0, 24(sp)
ffffffff80208efc: a2 70                	ld	ra, 40(sp)
ffffffff80208efe: 45 61                	addi	sp, sp, 48
ffffffff80208f00: 82 80                	ret

ffffffff80208f02 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7a9dbd50d05cb880E:
;     pub const fn as_ptr(self) -> *mut T {
ffffffff80208f02: 41 11                	addi	sp, sp, -16
ffffffff80208f04: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80208f06: 41 01                	addi	sp, sp, 16
ffffffff80208f08: 82 80                	ret

ffffffff80208f0a _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hbde7d79d567286a0E:
;     pub const fn as_ptr(self) -> *mut T {
ffffffff80208f0a: 41 11                	addi	sp, sp, -16
ffffffff80208f0c: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80208f0e: 41 01                	addi	sp, sp, 16
ffffffff80208f10: 82 80                	ret

ffffffff80208f12 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17hb87d37fb53f9c90dE:
;     pub const fn get(&self) -> *mut T {
ffffffff80208f12: 41 11                	addi	sp, sp, -16
ffffffff80208f14: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80208f16: 41 01                	addi	sp, sp, 16
ffffffff80208f18: 82 80                	ret

ffffffff80208f1a _ZN4core4cell19UnsafeCell$LT$T$GT$3get17hf8602232f4c49aebE:
;     pub const fn get(&self) -> *mut T {
ffffffff80208f1a: 41 11                	addi	sp, sp, -16
ffffffff80208f1c: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80208f1e: 41 01                	addi	sp, sp, 16
ffffffff80208f20: 82 80                	ret

ffffffff80208f22 _ZN4core4cell19UnsafeCell$LT$T$GT$3new17h6accef9819126238E:
;     pub const fn new(value: T) -> UnsafeCell<T> {
ffffffff80208f22: 41 11                	addi	sp, sp, -16
ffffffff80208f24: aa 85                	add	a1, zero, a0
ffffffff80208f26: a3 07 a1 00          	sb	a0, 15(sp)
;         UnsafeCell { value }
ffffffff80208f2a: 23 07 a1 00          	sb	a0, 14(sp)
;     }
ffffffff80208f2e: 41 01                	addi	sp, sp, 16
ffffffff80208f30: 82 80                	ret

ffffffff80208f32 _ZN4core3ptr19swap_nonoverlapping17hb8bf95407a6d0378E:
; pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {
ffffffff80208f32: 1d 71                	addi	sp, sp, -96
ffffffff80208f34: 86 ec                	sd	ra, 88(sp)
ffffffff80208f36: 2a f0                	sd	a0, 32(sp)
ffffffff80208f38: 2e f4                	sd	a1, 40(sp)
ffffffff80208f3a: 32 f8                	sd	a2, 48(sp)
;     let x = x as *mut u8;
ffffffff80208f3c: aa 86                	add	a3, zero, a0
ffffffff80208f3e: 2a fc                	sd	a0, 56(sp)
;     let y = y as *mut u8;
ffffffff80208f40: 2e 85                	add	a0, zero, a1
ffffffff80208f42: ae e0                	sd	a1, 64(sp)
ffffffff80208f44: a1 45                	addi	a1, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80208f46: ae e8                	sd	a1, 80(sp)
;     let len = mem::size_of::<T>() * count;
ffffffff80208f48: 32 ec                	sd	a2, 24(sp)
ffffffff80208f4a: 36 e8                	sd	a3, 16(sp)
ffffffff80208f4c: 2a e4                	sd	a0, 8(sp)
ffffffff80208f4e: 2e e0                	sd	a1, 0(sp)
ffffffff80208f50: 09 a0                	j	2
ffffffff80208f52: 02 65                	ld	a0, 0(sp)
ffffffff80208f54: e2 65                	ld	a1, 24(sp)
ffffffff80208f56: 33 06 b5 02          	<unknown>
ffffffff80208f5a: b2 e4                	sd	a2, 72(sp)
;     swap_nonoverlapping_bytes(x, y, len)
ffffffff80208f5c: 42 65                	ld	a0, 16(sp)
ffffffff80208f5e: a2 65                	ld	a1, 8(sp)
ffffffff80208f60: 97 00 00 00          	auipc	ra, 0
ffffffff80208f64: e7 80 c0 08          	jalr	140(ra)
ffffffff80208f68: 09 a0                	j	2
; }
ffffffff80208f6a: e6 60                	ld	ra, 88(sp)
ffffffff80208f6c: 25 61                	addi	sp, sp, 96
ffffffff80208f6e: 82 80                	ret

ffffffff80208f70 _ZN4core3ptr23swap_nonoverlapping_one17hc6771982da18ac47E:
; pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {
ffffffff80208f70: 5d 71                	addi	sp, sp, -80
ffffffff80208f72: 86 e4                	sd	ra, 72(sp)
ffffffff80208f74: 2a f4                	sd	a0, 40(sp)
ffffffff80208f76: 2e f8                	sd	a1, 48(sp)
ffffffff80208f78: 21 46                	addi	a2, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80208f7a: b2 e0                	sd	a2, 64(sp)
;     if mem::size_of::<T>() < 32 {
ffffffff80208f7c: 2e ec                	sd	a1, 24(sp)
ffffffff80208f7e: 2a e8                	sd	a0, 16(sp)
ffffffff80208f80: 32 e4                	sd	a2, 8(sp)
ffffffff80208f82: 09 a0                	j	2
ffffffff80208f84: 13 05 00 02          	addi	a0, zero, 32
ffffffff80208f88: a2 65                	ld	a1, 8(sp)
ffffffff80208f8a: 63 eb a5 00          	bltu	a1, a0, 22
ffffffff80208f8e: 09 a0                	j	2
ffffffff80208f90: 05 46                	addi	a2, zero, 1
;         swap_nonoverlapping(x, y, 1);
ffffffff80208f92: 42 65                	ld	a0, 16(sp)
ffffffff80208f94: e2 65                	ld	a1, 24(sp)
ffffffff80208f96: 97 00 00 00          	auipc	ra, 0
ffffffff80208f9a: e7 80 c0 f9          	jalr	-100(ra)
ffffffff80208f9e: 15 a8                	j	52
;         let z = read(x);
ffffffff80208fa0: 42 65                	ld	a0, 16(sp)
ffffffff80208fa2: 97 00 00 00          	auipc	ra, 0
ffffffff80208fa6: e7 80 a0 18          	jalr	394(ra)
ffffffff80208faa: aa 85                	add	a1, zero, a0
ffffffff80208fac: 2a fc                	sd	a0, 56(sp)
ffffffff80208fae: 2e e0                	sd	a1, 0(sp)
ffffffff80208fb0: 09 a0                	j	2
ffffffff80208fb2: 05 46                	addi	a2, zero, 1
;         copy_nonoverlapping(y, x, 1);
ffffffff80208fb4: 62 65                	ld	a0, 24(sp)
ffffffff80208fb6: c2 65                	ld	a1, 16(sp)
ffffffff80208fb8: 97 00 00 00          	auipc	ra, 0
ffffffff80208fbc: e7 80 60 86          	jalr	-1946(ra)
ffffffff80208fc0: 09 a0                	j	2
;         write(y, z);
ffffffff80208fc2: 62 65                	ld	a0, 24(sp)
ffffffff80208fc4: 82 65                	ld	a1, 0(sp)
ffffffff80208fc6: 97 00 00 00          	auipc	ra, 0
ffffffff80208fca: e7 80 e0 19          	jalr	414(ra)
ffffffff80208fce: 09 a0                	j	2
;     if mem::size_of::<T>() < 32 {
ffffffff80208fd0: 11 a0                	j	4
ffffffff80208fd2: 09 a0                	j	2
; }
ffffffff80208fd4: a6 60                	ld	ra, 72(sp)
ffffffff80208fd6: 61 61                	addi	sp, sp, 80
ffffffff80208fd8: 82 80                	ret

ffffffff80208fda _ZN4core3ptr24slice_from_raw_parts_mut17hee7088df2e35080eE:
; pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
ffffffff80208fda: 79 71                	addi	sp, sp, -48
ffffffff80208fdc: 2a f0                	sd	a0, 32(sp)
ffffffff80208fde: 2e f4                	sd	a1, 40(sp)
;     unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }
ffffffff80208fe0: 2a e8                	sd	a0, 16(sp)
ffffffff80208fe2: 2e ec                	sd	a1, 24(sp)
ffffffff80208fe4: 2a e0                	sd	a0, 0(sp)
ffffffff80208fe6: 2e e4                	sd	a1, 8(sp)
; }
ffffffff80208fe8: 45 61                	addi	sp, sp, 48
ffffffff80208fea: 82 80                	ret

ffffffff80208fec _ZN4core3ptr25swap_nonoverlapping_bytes17hd09dadb31d09cf27E:
; unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
ffffffff80208fec: 09 71                	addi	sp, sp, -384
ffffffff80208fee: 86 fe                	sd	ra, 376(sp)
ffffffff80208ff0: a2 fa                	sd	s0, 368(sp)
ffffffff80208ff2: 00 03                	addi	s0, sp, 384
ffffffff80208ff4: 13 71 01 fe          	andi	sp, sp, -32
ffffffff80208ff8: aa f9                	sd	a0, 240(sp)
ffffffff80208ffa: ae fd                	sd	a1, 248(sp)
ffffffff80208ffc: 32 e2                	sd	a2, 256(sp)
ffffffff80208ffe: 93 06 00 02          	addi	a3, zero, 32
;     intrinsics::size_of::<T>()
ffffffff80209002: b6 e6                	sd	a3, 328(sp)
;     let block_size = mem::size_of::<Block>();
ffffffff80209004: 36 e6                	sd	a3, 264(sp)
ffffffff80209006: 32 e5                	sd	a2, 136(sp)
ffffffff80209008: 2e e1                	sd	a1, 128(sp)
ffffffff8020900a: aa fc                	sd	a0, 120(sp)
ffffffff8020900c: b6 f8                	sd	a3, 112(sp)
ffffffff8020900e: 09 a0                	j	2
ffffffff80209010: 01 45                	mv	a0, zero
;     let mut i = 0;
ffffffff80209012: 2a ed                	sd	a0, 152(sp)
;     while i + block_size <= len {
ffffffff80209014: 09 a0                	j	2
ffffffff80209016: 6a 65                	ld	a0, 152(sp)
ffffffff80209018: c6 75                	ld	a1, 112(sp)
ffffffff8020901a: 2e 95                	add	a0, a0, a1
ffffffff8020901c: 2a 66                	ld	a2, 136(sp)
ffffffff8020901e: 63 78 a6 00          	bgeu	a2, a0, 16
ffffffff80209022: 09 a0                	j	2
;     if i < len {
ffffffff80209024: 6a 65                	ld	a0, 152(sp)
ffffffff80209026: aa 65                	ld	a1, 136(sp)
ffffffff80209028: 63 6e b5 06          	bltu	a0, a1, 124
ffffffff8020902c: 9d a8                	j	118
;         let mut t = mem::MaybeUninit::<Block>::uninit();
ffffffff8020902e: 09 a0                	j	2
ffffffff80209030: 08 11                	addi	a0, sp, 160
ffffffff80209032: aa f2                	sd	a0, 352(sp)
ffffffff80209034: aa f6                	sd	a0, 360(sp)
;         let t = t.as_mut_ptr() as *mut u8;
ffffffff80209036: 09 a0                	j	2
ffffffff80209038: 08 11                	addi	a0, sp, 160
ffffffff8020903a: 2a ea                	sd	a0, 272(sp)
;         let x = x.add(i);
ffffffff8020903c: ea 65                	ld	a1, 152(sp)
ffffffff8020903e: 66 76                	ld	a2, 120(sp)
ffffffff80209040: aa f4                	sd	a0, 104(sp)
ffffffff80209042: 32 85                	add	a0, zero, a2
ffffffff80209044: 97 00 00 00          	auipc	ra, 0
ffffffff80209048: e7 80 00 e0          	jalr	-512(ra)
ffffffff8020904c: aa 85                	add	a1, zero, a0
ffffffff8020904e: 2a ee                	sd	a0, 280(sp)
ffffffff80209050: ae f0                	sd	a1, 96(sp)
ffffffff80209052: 09 a0                	j	2
;         let y = y.add(i);
ffffffff80209054: ea 65                	ld	a1, 152(sp)
ffffffff80209056: 0a 65                	ld	a0, 128(sp)
ffffffff80209058: 97 00 00 00          	auipc	ra, 0
ffffffff8020905c: e7 80 c0 de          	jalr	-532(ra)
ffffffff80209060: aa 85                	add	a1, zero, a0
ffffffff80209062: 2a f2                	sd	a0, 288(sp)
ffffffff80209064: ae ec                	sd	a1, 88(sp)
ffffffff80209066: 09 a0                	j	2
;         copy_nonoverlapping(x, t, block_size);
ffffffff80209068: 06 75                	ld	a0, 96(sp)
ffffffff8020906a: a6 75                	ld	a1, 104(sp)
ffffffff8020906c: 46 76                	ld	a2, 112(sp)
ffffffff8020906e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80209072: e7 80 20 7d          	jalr	2002(ra)
ffffffff80209076: 09 a0                	j	2
;         copy_nonoverlapping(y, x, block_size);
ffffffff80209078: 66 65                	ld	a0, 88(sp)
ffffffff8020907a: 86 75                	ld	a1, 96(sp)
ffffffff8020907c: 46 76                	ld	a2, 112(sp)
ffffffff8020907e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80209082: e7 80 20 7c          	jalr	1986(ra)
ffffffff80209086: 09 a0                	j	2
;         copy_nonoverlapping(t, y, block_size);
ffffffff80209088: 26 75                	ld	a0, 104(sp)
ffffffff8020908a: e6 65                	ld	a1, 88(sp)
ffffffff8020908c: 46 76                	ld	a2, 112(sp)
ffffffff8020908e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80209092: e7 80 20 7b          	jalr	1970(ra)
ffffffff80209096: 09 a0                	j	2
;         i += block_size;
ffffffff80209098: 6a 65                	ld	a0, 152(sp)
ffffffff8020909a: c6 75                	ld	a1, 112(sp)
ffffffff8020909c: 2e 95                	add	a0, a0, a1
ffffffff8020909e: 2a ed                	sd	a0, 152(sp)
;     while i + block_size <= len {
ffffffff802090a0: 9d bf                	j	-138
;     if i < len {
ffffffff802090a2: bd a8                	j	126
;         let mut t = mem::MaybeUninit::<UnalignedBlock>::uninit();
ffffffff802090a4: 09 a0                	j	2
;         let rem = len - i;
ffffffff802090a6: 6a 65                	ld	a0, 152(sp)
ffffffff802090a8: aa 65                	ld	a1, 136(sp)
ffffffff802090aa: 33 85 a5 40          	sub	a0, a1, a0
ffffffff802090ae: 2a f6                	sd	a0, 296(sp)
ffffffff802090b0: 90 09                	addi	a2, sp, 208
ffffffff802090b2: b2 ea                	sd	a2, 336(sp)
ffffffff802090b4: b2 ee                	sd	a2, 344(sp)
;         let t = t.as_mut_ptr() as *mut u8;
ffffffff802090b6: aa e8                	sd	a0, 80(sp)
ffffffff802090b8: b2 e4                	sd	a2, 72(sp)
ffffffff802090ba: 09 a0                	j	2
ffffffff802090bc: 26 65                	ld	a0, 72(sp)
ffffffff802090be: a6 65                	ld	a1, 72(sp)
ffffffff802090c0: 2e fa                	sd	a1, 304(sp)
;         let x = x.add(i);
ffffffff802090c2: ea 65                	ld	a1, 152(sp)
ffffffff802090c4: 66 76                	ld	a2, 120(sp)
ffffffff802090c6: aa e0                	sd	a0, 64(sp)
ffffffff802090c8: 32 85                	add	a0, zero, a2
ffffffff802090ca: 97 00 00 00          	auipc	ra, 0
ffffffff802090ce: e7 80 a0 d7          	jalr	-646(ra)
ffffffff802090d2: aa 85                	add	a1, zero, a0
ffffffff802090d4: 2a fe                	sd	a0, 312(sp)
ffffffff802090d6: 2e fc                	sd	a1, 56(sp)
ffffffff802090d8: 09 a0                	j	2
;         let y = y.add(i);
ffffffff802090da: ea 65                	ld	a1, 152(sp)
ffffffff802090dc: 0a 65                	ld	a0, 128(sp)
ffffffff802090de: 97 00 00 00          	auipc	ra, 0
ffffffff802090e2: e7 80 60 d6          	jalr	-666(ra)
ffffffff802090e6: aa 85                	add	a1, zero, a0
ffffffff802090e8: aa e2                	sd	a0, 320(sp)
ffffffff802090ea: 2e f8                	sd	a1, 48(sp)
ffffffff802090ec: 09 a0                	j	2
;         copy_nonoverlapping(x, t, rem);
ffffffff802090ee: 62 75                	ld	a0, 56(sp)
ffffffff802090f0: 86 65                	ld	a1, 64(sp)
ffffffff802090f2: 46 66                	ld	a2, 80(sp)
ffffffff802090f4: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802090f8: e7 80 c0 74          	jalr	1868(ra)
ffffffff802090fc: 09 a0                	j	2
;         copy_nonoverlapping(y, x, rem);
ffffffff802090fe: 42 75                	ld	a0, 48(sp)
ffffffff80209100: e2 75                	ld	a1, 56(sp)
ffffffff80209102: 46 66                	ld	a2, 80(sp)
ffffffff80209104: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80209108: e7 80 c0 73          	jalr	1852(ra)
ffffffff8020910c: 09 a0                	j	2
;         copy_nonoverlapping(t, y, rem);
ffffffff8020910e: 06 65                	ld	a0, 64(sp)
ffffffff80209110: c2 75                	ld	a1, 48(sp)
ffffffff80209112: 46 66                	ld	a2, 80(sp)
ffffffff80209114: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80209118: e7 80 c0 72          	jalr	1836(ra)
ffffffff8020911c: 09 a0                	j	2
;     if i < len {
ffffffff8020911e: 09 a0                	j	2
; }
ffffffff80209120: 13 01 04 e8          	addi	sp, s0, -384
ffffffff80209124: 56 74                	ld	s0, 368(sp)
ffffffff80209126: f6 70                	ld	ra, 376(sp)
ffffffff80209128: 19 61                	addi	sp, sp, 384
ffffffff8020912a: 82 80                	ret

ffffffff8020912c _ZN4core3ptr4read17h130f8093910942b7E:
; pub unsafe fn read<T>(src: *const T) -> T {
ffffffff8020912c: 5d 71                	addi	sp, sp, -80
ffffffff8020912e: 86 e4                	sd	ra, 72(sp)
ffffffff80209130: 2a ec                	sd	a0, 24(sp)
;     }
ffffffff80209132: 82 75                	ld	a1, 32(sp)
;     let mut tmp = MaybeUninit::<T>::uninit();
ffffffff80209134: 2e e8                	sd	a1, 16(sp)
ffffffff80209136: 2a e4                	sd	a0, 8(sp)
ffffffff80209138: 09 a0                	j	2
ffffffff8020913a: 08 08                	addi	a0, sp, 16
ffffffff8020913c: 2a fc                	sd	a0, 56(sp)
ffffffff8020913e: aa e0                	sd	a0, 64(sp)
;     copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
ffffffff80209140: 09 a0                	j	2
ffffffff80209142: 0c 08                	addi	a1, sp, 16
ffffffff80209144: 05 46                	addi	a2, zero, 1
ffffffff80209146: 22 65                	ld	a0, 8(sp)
ffffffff80209148: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020914c: e7 80 60 6d          	jalr	1750(ra)
ffffffff80209150: 09 a0                	j	2
;     tmp.assume_init()
ffffffff80209152: 42 65                	ld	a0, 16(sp)
ffffffff80209154: 2a f4                	sd	a0, 40(sp)
ffffffff80209156: 2a f8                	sd	a0, 48(sp)
ffffffff80209158: 2a e0                	sd	a0, 0(sp)
ffffffff8020915a: 09 a0                	j	2
; }
ffffffff8020915c: 02 65                	ld	a0, 0(sp)
ffffffff8020915e: a6 60                	ld	ra, 72(sp)
ffffffff80209160: 61 61                	addi	sp, sp, 80
ffffffff80209162: 82 80                	ret

ffffffff80209164 _ZN4core3ptr5write17hbd100ed6ab97a677E:
; pub unsafe fn write<T>(dst: *mut T, src: T) {
ffffffff80209164: 01 11                	addi	sp, sp, -32
ffffffff80209166: 2a e8                	sd	a0, 16(sp)
ffffffff80209168: 2e ec                	sd	a1, 24(sp)
;     intrinsics::move_val_init(&mut *dst, src)
ffffffff8020916a: 0c e1                	sd	a1, 0(a0)
; }
ffffffff8020916c: 05 61                	addi	sp, sp, 32
ffffffff8020916e: 82 80                	ret

ffffffff80209170 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h2a97e5a6e0a63af0E:
;     pub const fn len(&self) -> usize {
ffffffff80209170: 01 11                	addi	sp, sp, -32
ffffffff80209172: 2a e8                	sd	a0, 16(sp)
ffffffff80209174: 2e ec                	sd	a1, 24(sp)
;         unsafe { crate::ptr::Repr { rust: self }.raw.len }
ffffffff80209176: 2a e0                	sd	a0, 0(sp)
ffffffff80209178: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff8020917a: 2e 85                	add	a0, zero, a1
ffffffff8020917c: 05 61                	addi	sp, sp, 32
ffffffff8020917e: 82 80                	ret

ffffffff80209180 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hde91e54b0b6c2217E:
;     pub fn iter(&self) -> Iter<'_, T> {
ffffffff80209180: 35 71                	addi	sp, sp, -160
ffffffff80209182: 06 ed                	sd	ra, 152(sp)
ffffffff80209184: aa fc                	sd	a0, 120(sp)
ffffffff80209186: 2e e1                	sd	a1, 128(sp)
;             let ptr = self.as_ptr();
ffffffff80209188: aa e8                	sd	a0, 80(sp)
ffffffff8020918a: ae e4                	sd	a1, 72(sp)
ffffffff8020918c: 97 00 00 00          	auipc	ra, 0
ffffffff80209190: e7 80 00 0a          	jalr	160(ra)
ffffffff80209194: aa 85                	add	a1, zero, a0
ffffffff80209196: 2a e5                	sd	a0, 136(sp)
ffffffff80209198: ae e0                	sd	a1, 64(sp)
ffffffff8020919a: 09 a0                	j	2
;             assume(!ptr.is_null());
ffffffff8020919c: 06 65                	ld	a0, 64(sp)
ffffffff8020919e: 97 00 00 00          	auipc	ra, 0
ffffffff802091a2: e7 80 c0 be          	jalr	-1044(ra)
ffffffff802091a6: 09 a0                	j	2
ffffffff802091a8: 09 a0                	j	2
ffffffff802091aa: 21 45                	addi	a0, zero, 8
;     intrinsics::size_of::<T>()
ffffffff802091ac: 2a e9                	sd	a0, 144(sp)
;             let end = if mem::size_of::<T>() == 0 {
ffffffff802091ae: 2a fc                	sd	a0, 56(sp)
ffffffff802091b0: 09 a0                	j	2
ffffffff802091b2: 01 45                	mv	a0, zero
ffffffff802091b4: e2 75                	ld	a1, 56(sp)
ffffffff802091b6: 63 8b a5 00          	beq	a1, a0, 22
ffffffff802091ba: 09 a0                	j	2
;                 ptr.add(self.len())
ffffffff802091bc: 46 65                	ld	a0, 80(sp)
ffffffff802091be: a6 65                	ld	a1, 72(sp)
ffffffff802091c0: 97 00 00 00          	auipc	ra, 0
ffffffff802091c4: e7 80 00 fb          	jalr	-80(ra)
ffffffff802091c8: 2a f8                	sd	a0, 48(sp)
ffffffff802091ca: 3d a0                	j	46
;                 (ptr as *const u8).wrapping_add(self.len()) as *const T
ffffffff802091cc: 06 65                	ld	a0, 64(sp)
ffffffff802091ce: c6 65                	ld	a1, 80(sp)
ffffffff802091d0: 2a f4                	sd	a0, 40(sp)
ffffffff802091d2: 2e 85                	add	a0, zero, a1
ffffffff802091d4: a6 65                	ld	a1, 72(sp)
ffffffff802091d6: 97 00 00 00          	auipc	ra, 0
ffffffff802091da: e7 80 a0 f9          	jalr	-102(ra)
ffffffff802091de: 2a f0                	sd	a0, 32(sp)
ffffffff802091e0: 09 a0                	j	2
ffffffff802091e2: 22 75                	ld	a0, 40(sp)
ffffffff802091e4: 82 75                	ld	a1, 32(sp)
ffffffff802091e6: 97 00 00 00          	auipc	ra, 0
ffffffff802091ea: e7 80 20 b4          	jalr	-1214(ra)
ffffffff802091ee: 2a ec                	sd	a0, 24(sp)
ffffffff802091f0: 09 a0                	j	2
ffffffff802091f2: 62 65                	ld	a0, 24(sp)
ffffffff802091f4: aa f4                	sd	a0, 104(sp)
;             let end = if mem::size_of::<T>() == 0 {
ffffffff802091f6: 11 a8                	j	20
;                 ptr.add(self.len())
ffffffff802091f8: 06 65                	ld	a0, 64(sp)
ffffffff802091fa: c2 75                	ld	a1, 48(sp)
ffffffff802091fc: 97 00 00 00          	auipc	ra, 0
ffffffff80209200: e7 80 c0 b5          	jalr	-1188(ra)
ffffffff80209204: aa f4                	sd	a0, 104(sp)
ffffffff80209206: 09 a0                	j	2
;             let end = if mem::size_of::<T>() == 0 {
ffffffff80209208: 09 a0                	j	2
;             Iter { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: marker::PhantomData }
ffffffff8020920a: 06 65                	ld	a0, 64(sp)
ffffffff8020920c: 97 00 00 00          	auipc	ra, 0
ffffffff80209210: e7 80 c0 ca          	jalr	-852(ra)
ffffffff80209214: 2a e8                	sd	a0, 16(sp)
ffffffff80209216: 09 a0                	j	2
ffffffff80209218: 26 75                	ld	a0, 104(sp)
ffffffff8020921a: c2 65                	ld	a1, 16(sp)
ffffffff8020921c: ae ec                	sd	a1, 88(sp)
ffffffff8020921e: aa f0                	sd	a0, 96(sp)
;     }
ffffffff80209220: 2a e4                	sd	a0, 8(sp)
ffffffff80209222: 2e 85                	add	a0, zero, a1
ffffffff80209224: a2 65                	ld	a1, 8(sp)
ffffffff80209226: ea 60                	ld	ra, 152(sp)
ffffffff80209228: 0d 61                	addi	sp, sp, 160
ffffffff8020922a: 82 80                	ret

ffffffff8020922c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h9345113677ed1f0eE:
;     pub const fn as_ptr(&self) -> *const T {
ffffffff8020922c: 41 11                	addi	sp, sp, -16
ffffffff8020922e: 2a e0                	sd	a0, 0(sp)
ffffffff80209230: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff80209232: 41 01                	addi	sp, sp, 16
ffffffff80209234: 82 80                	ret

ffffffff80209236 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h819a07971ca45a82E:
;             fn next(&mut self) -> Option<$elem> {
ffffffff80209236: 19 71                	addi	sp, sp, -128
ffffffff80209238: 86 fc                	sd	ra, 120(sp)
ffffffff8020923a: aa e0                	sd	a0, 64(sp)
;                     assume(!self.ptr.as_ptr().is_null());
ffffffff8020923c: 0c 61                	ld	a1, 0(a0)
ffffffff8020923e: 2a f8                	sd	a0, 48(sp)
ffffffff80209240: 2e 85                	add	a0, zero, a1
ffffffff80209242: 97 00 00 00          	auipc	ra, 0
ffffffff80209246: e7 80 00 cc          	jalr	-832(ra)
ffffffff8020924a: 2a f4                	sd	a0, 40(sp)
ffffffff8020924c: 09 a0                	j	2
ffffffff8020924e: 22 75                	ld	a0, 40(sp)
ffffffff80209250: 97 00 00 00          	auipc	ra, 0
ffffffff80209254: e7 80 c0 c4          	jalr	-948(ra)
ffffffff80209258: 09 a0                	j	2
ffffffff8020925a: 09 a0                	j	2
ffffffff8020925c: 21 45                	addi	a0, zero, 8
;     intrinsics::size_of::<T>()
ffffffff8020925e: aa e4                	sd	a0, 72(sp)
;                     if mem::size_of::<T>() != 0 {
ffffffff80209260: 2a f0                	sd	a0, 32(sp)
ffffffff80209262: 09 a0                	j	2
ffffffff80209264: 01 45                	mv	a0, zero
ffffffff80209266: 82 75                	ld	a1, 32(sp)
ffffffff80209268: 63 94 a5 00          	bne	a1, a0, 8
ffffffff8020926c: 09 a0                	j	2
ffffffff8020926e: 11 a8                	j	20
;                         assume(!self.end.is_null());
ffffffff80209270: 42 75                	ld	a0, 48(sp)
ffffffff80209272: 08 65                	ld	a0, 8(a0)
ffffffff80209274: 97 00 00 00          	auipc	ra, 0
ffffffff80209278: e7 80 60 b1          	jalr	-1258(ra)
ffffffff8020927c: 09 a0                	j	2
ffffffff8020927e: 09 a0                	j	2
;                     if mem::size_of::<T>() != 0 {
ffffffff80209280: 09 a0                	j	2
;         $self.ptr.as_ptr() as *const T == $self.end
ffffffff80209282: 42 75                	ld	a0, 48(sp)
ffffffff80209284: 08 61                	ld	a0, 0(a0)
ffffffff80209286: 97 00 00 00          	auipc	ra, 0
ffffffff8020928a: e7 80 c0 c7          	jalr	-900(ra)
ffffffff8020928e: 2a ec                	sd	a0, 24(sp)
ffffffff80209290: 09 a0                	j	2
ffffffff80209292: 42 75                	ld	a0, 48(sp)
ffffffff80209294: 0c 65                	ld	a1, 8(a0)
;                     if is_empty!(self) {
ffffffff80209296: 62 66                	ld	a2, 24(sp)
ffffffff80209298: 63 0c b6 06          	beq	a2, a1, 120
ffffffff8020929c: 09 a0                	j	2
ffffffff8020929e: 42 75                	ld	a0, 48(sp)
ffffffff802092a0: aa ec                	sd	a0, 88(sp)
ffffffff802092a2: 85 45                	addi	a1, zero, 1
ffffffff802092a4: ae f0                	sd	a1, 96(sp)
ffffffff802092a6: a1 45                	addi	a1, zero, 8
;     intrinsics::size_of::<T>()
ffffffff802092a8: ae f8                	sd	a1, 112(sp)
ffffffff802092aa: 81 45                	mv	a1, zero
;                 if mem::size_of::<T>() == 0 {
ffffffff802092ac: 9d ed                	bnez	a1, 62
ffffffff802092ae: 09 a0                	j	2
;                     let old = self.ptr.as_ptr();
ffffffff802092b0: 42 75                	ld	a0, 48(sp)
ffffffff802092b2: 08 61                	ld	a0, 0(a0)
ffffffff802092b4: 97 00 00 00          	auipc	ra, 0
ffffffff802092b8: e7 80 e0 c4          	jalr	-946(ra)
ffffffff802092bc: aa f4                	sd	a0, 104(sp)
;                     self.ptr = NonNull::new_unchecked(self.ptr.as_ptr().offset(offset));
ffffffff802092be: c2 75                	ld	a1, 48(sp)
ffffffff802092c0: 90 61                	ld	a2, 0(a1)
ffffffff802092c2: 2a e8                	sd	a0, 16(sp)
ffffffff802092c4: 32 85                	add	a0, zero, a2
ffffffff802092c6: 97 00 00 00          	auipc	ra, 0
ffffffff802092ca: e7 80 c0 c3          	jalr	-964(ra)
ffffffff802092ce: 85 45                	addi	a1, zero, 1
ffffffff802092d0: 97 00 00 00          	auipc	ra, 0
ffffffff802092d4: e7 80 40 ba          	jalr	-1116(ra)
ffffffff802092d8: 97 00 00 00          	auipc	ra, 0
ffffffff802092dc: e7 80 00 be          	jalr	-1056(ra)
ffffffff802092e0: c2 75                	ld	a1, 48(sp)
ffffffff802092e2: 88 e1                	sd	a0, 0(a1)
;                     old
ffffffff802092e4: 42 65                	ld	a0, 16(sp)
ffffffff802092e6: aa e8                	sd	a0, 80(sp)
;                 if mem::size_of::<T>() == 0 {
ffffffff802092e8: 0d a0                	j	34
;                 $self.end = ($self.end as * $raw_mut u8).wrapping_offset(-$n) as * $raw_mut T;
ffffffff802092ea: 42 75                	ld	a0, 48(sp)
ffffffff802092ec: 08 65                	ld	a0, 8(a0)
ffffffff802092ee: fd 55                	addi	a1, zero, -1
ffffffff802092f0: 97 00 00 00          	auipc	ra, 0
ffffffff802092f4: e7 80 40 a5          	jalr	-1452(ra)
ffffffff802092f8: c2 75                	ld	a1, 48(sp)
ffffffff802092fa: 88 e5                	sd	a0, 8(a1)
;                     self.ptr.as_ptr()
ffffffff802092fc: 88 61                	ld	a0, 0(a1)
ffffffff802092fe: 97 00 00 00          	auipc	ra, 0
ffffffff80209302: e7 80 40 c0          	jalr	-1020(ra)
ffffffff80209306: aa e8                	sd	a0, 80(sp)
;                 if mem::size_of::<T>() == 0 {
ffffffff80209308: 09 a0                	j	2
;             }
ffffffff8020930a: 46 65                	ld	a0, 80(sp)
;             ($self: ident) => {& $( $mut_ )* *$self.post_inc_start(1)}
ffffffff8020930c: 2a e4                	sd	a0, 8(sp)
ffffffff8020930e: 21 a0                	j	8
ffffffff80209310: 01 45                	mv	a0, zero
;                         None
ffffffff80209312: 2a fc                	sd	a0, 56(sp)
;                     if is_empty!(self) {
ffffffff80209314: 21 a0                	j	8
;                         Some(next_unchecked!(self))
ffffffff80209316: 22 65                	ld	a0, 8(sp)
ffffffff80209318: 2a fc                	sd	a0, 56(sp)
;                     if is_empty!(self) {
ffffffff8020931a: 09 a0                	j	2
;             }
ffffffff8020931c: 62 75                	ld	a0, 56(sp)
ffffffff8020931e: e6 70                	ld	ra, 120(sp)
ffffffff80209320: 09 61                	addi	sp, sp, 128
ffffffff80209322: 82 80                	ret

ffffffff80209324 _ZN4core3cmp3Ord3max17h454e0e187c7cd86dE:
;     fn max(self, other: Self) -> Self
ffffffff80209324: 01 11                	addi	sp, sp, -32
ffffffff80209326: 06 ec                	sd	ra, 24(sp)
ffffffff80209328: 2a e4                	sd	a0, 8(sp)
ffffffff8020932a: 2e e8                	sd	a1, 16(sp)
;         max_by(self, other, Ord::cmp)
ffffffff8020932c: 97 00 00 00          	auipc	ra, 0
ffffffff80209330: e7 80 80 06          	jalr	104(ra)
ffffffff80209334: 2a e0                	sd	a0, 0(sp)
ffffffff80209336: 09 a0                	j	2
;     }
ffffffff80209338: 02 65                	ld	a0, 0(sp)
ffffffff8020933a: e2 60                	ld	ra, 24(sp)
ffffffff8020933c: 05 61                	addi	sp, sp, 32
ffffffff8020933e: 82 80                	ret

ffffffff80209340 _ZN4core3cmp3Ord3min17h0bbecc4cb8da0662E:
;     fn min(self, other: Self) -> Self
ffffffff80209340: 01 11                	addi	sp, sp, -32
ffffffff80209342: 06 ec                	sd	ra, 24(sp)
ffffffff80209344: 2a e4                	sd	a0, 8(sp)
ffffffff80209346: 2e e8                	sd	a1, 16(sp)
;         min_by(self, other, Ord::cmp)
ffffffff80209348: 97 00 00 00          	auipc	ra, 0
ffffffff8020934c: e7 80 80 0c          	jalr	200(ra)
ffffffff80209350: 2a e0                	sd	a0, 0(sp)
ffffffff80209352: 09 a0                	j	2
;     }
ffffffff80209354: 02 65                	ld	a0, 0(sp)
ffffffff80209356: e2 60                	ld	ra, 24(sp)
ffffffff80209358: 05 61                	addi	sp, sp, 32
ffffffff8020935a: 82 80                	ret

ffffffff8020935c _ZN4core3cmp3max17h01555d3a8af38a4eE:
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
ffffffff8020935c: 01 11                	addi	sp, sp, -32
ffffffff8020935e: 06 ec                	sd	ra, 24(sp)
ffffffff80209360: 2a e4                	sd	a0, 8(sp)
ffffffff80209362: 2e e8                	sd	a1, 16(sp)
;     v1.max(v2)
ffffffff80209364: 97 00 00 00          	auipc	ra, 0
ffffffff80209368: e7 80 00 fc          	jalr	-64(ra)
ffffffff8020936c: 2a e0                	sd	a0, 0(sp)
ffffffff8020936e: 09 a0                	j	2
; }
ffffffff80209370: 02 65                	ld	a0, 0(sp)
ffffffff80209372: e2 60                	ld	ra, 24(sp)
ffffffff80209374: 05 61                	addi	sp, sp, 32
ffffffff80209376: 82 80                	ret

ffffffff80209378 _ZN4core3cmp3min17h39cb7422b79d2c29E:
; pub fn min<T: Ord>(v1: T, v2: T) -> T {
ffffffff80209378: 01 11                	addi	sp, sp, -32
ffffffff8020937a: 06 ec                	sd	ra, 24(sp)
ffffffff8020937c: 2a e4                	sd	a0, 8(sp)
ffffffff8020937e: 2e e8                	sd	a1, 16(sp)
;     v1.min(v2)
ffffffff80209380: 97 00 00 00          	auipc	ra, 0
ffffffff80209384: e7 80 00 fc          	jalr	-64(ra)
ffffffff80209388: 2a e0                	sd	a0, 0(sp)
ffffffff8020938a: 09 a0                	j	2
; }
ffffffff8020938c: 02 65                	ld	a0, 0(sp)
ffffffff8020938e: e2 60                	ld	ra, 24(sp)
ffffffff80209390: 05 61                	addi	sp, sp, 32
ffffffff80209392: 82 80                	ret

ffffffff80209394 _ZN4core3cmp6max_by17h0d835ae80efb1793E:
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
ffffffff80209394: 5d 71                	addi	sp, sp, -80
ffffffff80209396: 86 e4                	sd	ra, 72(sp)
ffffffff80209398: 2a e4                	sd	a0, 8(sp)
ffffffff8020939a: 2e e8                	sd	a1, 16(sp)
ffffffff8020939c: 05 45                	addi	a0, zero, 1
;     match compare(&v1, &v2) {
ffffffff8020939e: a3 0f a1 02          	sb	a0, 63(sp)
ffffffff802093a2: 23 0f a1 02          	sb	a0, 62(sp)
ffffffff802093a6: 28 00                	addi	a0, sp, 8
ffffffff802093a8: 2a f4                	sd	a0, 40(sp)
ffffffff802093aa: 0c 08                	addi	a1, sp, 16
ffffffff802093ac: 2e f8                	sd	a1, 48(sp)
ffffffff802093ae: 97 00 00 00          	auipc	ra, 0
ffffffff802093b2: e7 80 60 37          	jalr	886(ra)
ffffffff802093b6: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff802093ba: 09 a0                	j	2
;         Ordering::Less | Ordering::Equal => v2,
ffffffff802093bc: 03 05 71 02          	lb	a0, 39(sp)
ffffffff802093c0: 05 05                	addi	a0, a0, 1
ffffffff802093c2: 89 45                	addi	a1, zero, 2
ffffffff802093c4: 63 6a b5 00          	bltu	a0, a1, 20
ffffffff802093c8: 09 a0                	j	2
ffffffff802093ca: 01 45                	mv	a0, zero
;         Ordering::Greater => v1,
ffffffff802093cc: a3 0f a1 02          	sb	a0, 63(sp)
ffffffff802093d0: 22 65                	ld	a0, 8(sp)
ffffffff802093d2: 2a ec                	sd	a0, 24(sp)
;     match compare(&v1, &v2) {
ffffffff802093d4: 01 a8                	j	16
ffffffff802093d6: 00 00                	unimp	
ffffffff802093d8: 01 45                	mv	a0, zero
;         Ordering::Less | Ordering::Equal => v2,
ffffffff802093da: 23 0f a1 02          	sb	a0, 62(sp)
ffffffff802093de: 42 65                	ld	a0, 16(sp)
ffffffff802093e0: 2a ec                	sd	a0, 24(sp)
;     match compare(&v1, &v2) {
ffffffff802093e2: 09 a0                	j	2
; }
ffffffff802093e4: 03 45 e1 03          	lbu	a0, 62(sp)
ffffffff802093e8: 05 89                	andi	a0, a0, 1
ffffffff802093ea: 19 e9                	bnez	a0, 22
ffffffff802093ec: 09 a0                	j	2
ffffffff802093ee: 03 45 f1 03          	lbu	a0, 63(sp)
ffffffff802093f2: 05 89                	andi	a0, a0, 1
ffffffff802093f4: 11 e9                	bnez	a0, 20
ffffffff802093f6: 09 a0                	j	2
ffffffff802093f8: 62 65                	ld	a0, 24(sp)
ffffffff802093fa: a6 60                	ld	ra, 72(sp)
ffffffff802093fc: 61 61                	addi	sp, sp, 80
ffffffff802093fe: 82 80                	ret
ffffffff80209400: 01 45                	mv	a0, zero
ffffffff80209402: 23 0f a1 02          	sb	a0, 62(sp)
ffffffff80209406: e5 b7                	j	-24
ffffffff80209408: 01 45                	mv	a0, zero
ffffffff8020940a: a3 0f a1 02          	sb	a0, 63(sp)
ffffffff8020940e: ed b7                	j	-22

ffffffff80209410 _ZN4core3cmp6min_by17h9bc8b65bfb1c6322E:
; pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
ffffffff80209410: 5d 71                	addi	sp, sp, -80
ffffffff80209412: 86 e4                	sd	ra, 72(sp)
ffffffff80209414: 2a e4                	sd	a0, 8(sp)
ffffffff80209416: 2e e8                	sd	a1, 16(sp)
ffffffff80209418: 05 45                	addi	a0, zero, 1
;     match compare(&v1, &v2) {
ffffffff8020941a: a3 0f a1 02          	sb	a0, 63(sp)
ffffffff8020941e: 23 0f a1 02          	sb	a0, 62(sp)
ffffffff80209422: 28 00                	addi	a0, sp, 8
ffffffff80209424: 2a f4                	sd	a0, 40(sp)
ffffffff80209426: 0c 08                	addi	a1, sp, 16
ffffffff80209428: 2e f8                	sd	a1, 48(sp)
ffffffff8020942a: 97 00 00 00          	auipc	ra, 0
ffffffff8020942e: e7 80 a0 2f          	jalr	762(ra)
ffffffff80209432: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff80209436: 09 a0                	j	2
;         Ordering::Less | Ordering::Equal => v1,
ffffffff80209438: 03 05 71 02          	lb	a0, 39(sp)
ffffffff8020943c: 05 05                	addi	a0, a0, 1
ffffffff8020943e: 89 45                	addi	a1, zero, 2
ffffffff80209440: 63 6a b5 00          	bltu	a0, a1, 20
ffffffff80209444: 09 a0                	j	2
ffffffff80209446: 01 45                	mv	a0, zero
;         Ordering::Greater => v2,
ffffffff80209448: 23 0f a1 02          	sb	a0, 62(sp)
ffffffff8020944c: 42 65                	ld	a0, 16(sp)
ffffffff8020944e: 2a ec                	sd	a0, 24(sp)
;     match compare(&v1, &v2) {
ffffffff80209450: 01 a8                	j	16
ffffffff80209452: 00 00                	unimp	
ffffffff80209454: 01 45                	mv	a0, zero
;         Ordering::Less | Ordering::Equal => v1,
ffffffff80209456: a3 0f a1 02          	sb	a0, 63(sp)
ffffffff8020945a: 22 65                	ld	a0, 8(sp)
ffffffff8020945c: 2a ec                	sd	a0, 24(sp)
;     match compare(&v1, &v2) {
ffffffff8020945e: 09 a0                	j	2
; }
ffffffff80209460: 03 45 e1 03          	lbu	a0, 62(sp)
ffffffff80209464: 05 89                	andi	a0, a0, 1
ffffffff80209466: 19 e9                	bnez	a0, 22
ffffffff80209468: 09 a0                	j	2
ffffffff8020946a: 03 45 f1 03          	lbu	a0, 63(sp)
ffffffff8020946e: 05 89                	andi	a0, a0, 1
ffffffff80209470: 11 e9                	bnez	a0, 20
ffffffff80209472: 09 a0                	j	2
ffffffff80209474: 62 65                	ld	a0, 24(sp)
ffffffff80209476: a6 60                	ld	ra, 72(sp)
ffffffff80209478: 61 61                	addi	sp, sp, 80
ffffffff8020947a: 82 80                	ret
ffffffff8020947c: 01 45                	mv	a0, zero
ffffffff8020947e: 23 0f a1 02          	sb	a0, 62(sp)
ffffffff80209482: e5 b7                	j	-24
ffffffff80209484: 01 45                	mv	a0, zero
ffffffff80209486: a3 0f a1 02          	sb	a0, 63(sp)
ffffffff8020948a: ed b7                	j	-22

ffffffff8020948c _ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h242ffe7b3ab14303E:
;     fn obtain_lock(&self)
ffffffff8020948c: 39 71                	addi	sp, sp, -64
ffffffff8020948e: 06 fc                	sd	ra, 56(sp)
ffffffff80209490: 2a f8                	sd	a0, 48(sp)
ffffffff80209492: 2a f4                	sd	a0, 40(sp)
ffffffff80209494: 09 a0                	j	2
ffffffff80209496: 01 45                	mv	a0, zero
ffffffff80209498: 05 46                	addi	a2, zero, 1
ffffffff8020949a: 89 46                	addi	a3, zero, 2
;         while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
ffffffff8020949c: a2 75                	ld	a1, 40(sp)
ffffffff8020949e: 2a f0                	sd	a0, 32(sp)
ffffffff802094a0: 2e 85                	add	a0, zero, a1
ffffffff802094a2: 82 75                	ld	a1, 32(sp)
ffffffff802094a4: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802094a8: e7 80 40 b0          	jalr	-1276(ra)
ffffffff802094ac: 2a ec                	sd	a0, 24(sp)
ffffffff802094ae: 09 a0                	j	2
ffffffff802094b0: 01 45                	mv	a0, zero
ffffffff802094b2: e2 65                	ld	a1, 24(sp)
ffffffff802094b4: 63 96 a5 00          	bne	a1, a0, 12
ffffffff802094b8: 09 a0                	j	2
;     }
ffffffff802094ba: e2 70                	ld	ra, 56(sp)
ffffffff802094bc: 21 61                	addi	sp, sp, 64
ffffffff802094be: 82 80                	ret
ffffffff802094c0: 01 45                	mv	a0, zero
;             while self.lock.load(Ordering::Relaxed)
ffffffff802094c2: a2 75                	ld	a1, 40(sp)
ffffffff802094c4: 2a e8                	sd	a0, 16(sp)
ffffffff802094c6: 2e 85                	add	a0, zero, a1
ffffffff802094c8: c2 65                	ld	a1, 16(sp)
ffffffff802094ca: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802094ce: e7 80 e0 bf          	jalr	-1026(ra)
ffffffff802094d2: 2a e4                	sd	a0, 8(sp)
ffffffff802094d4: 09 a0                	j	2
ffffffff802094d6: 22 65                	ld	a0, 8(sp)
ffffffff802094d8: 19 e1                	bnez	a0, 6
ffffffff802094da: 09 a0                	j	2
;         while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
ffffffff802094dc: 6d bf                	j	-70
;                 cpu_relax();
ffffffff802094de: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802094e2: e7 80 20 dc          	jalr	-574(ra)
ffffffff802094e6: 09 a0                	j	2
;             while self.lock.load(Ordering::Relaxed)
ffffffff802094e8: e1 bf                	j	-40

ffffffff802094ea _ZN4spin5mutex14Mutex$LT$T$GT$4lock17h038fd51e87465d3dE:
;     pub fn lock(&self) -> MutexGuard<T>
ffffffff802094ea: 39 71                	addi	sp, sp, -64
ffffffff802094ec: 06 fc                	sd	ra, 56(sp)
ffffffff802094ee: 2a f8                	sd	a0, 48(sp)
;         self.obtain_lock();
ffffffff802094f0: 2a ec                	sd	a0, 24(sp)
ffffffff802094f2: 97 00 00 00          	auipc	ra, 0
ffffffff802094f6: e7 80 a0 f9          	jalr	-102(ra)
ffffffff802094fa: 09 a0                	j	2
;             lock: &self.lock,
ffffffff802094fc: 62 65                	ld	a0, 24(sp)
;             data: unsafe { &mut *self.data.get() },
ffffffff802094fe: e2 65                	ld	a1, 24(sp)
ffffffff80209500: 13 86 85 00          	addi	a2, a1, 8
ffffffff80209504: 2a e8                	sd	a0, 16(sp)
ffffffff80209506: 32 85                	add	a0, zero, a2
ffffffff80209508: 97 00 00 00          	auipc	ra, 0
ffffffff8020950c: e7 80 a0 a0          	jalr	-1526(ra)
ffffffff80209510: 2a e4                	sd	a0, 8(sp)
ffffffff80209512: 09 a0                	j	2
;         MutexGuard
ffffffff80209514: 42 65                	ld	a0, 16(sp)
ffffffff80209516: 2a f0                	sd	a0, 32(sp)
ffffffff80209518: a2 65                	ld	a1, 8(sp)
ffffffff8020951a: 2e f4                	sd	a1, 40(sp)
;     }
ffffffff8020951c: e2 70                	ld	ra, 56(sp)
ffffffff8020951e: 21 61                	addi	sp, sp, 64
ffffffff80209520: 82 80                	ret

ffffffff80209522 _ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7db50c7e181ec643E:
;     fn drop(&mut self)
ffffffff80209522: 41 11                	addi	sp, sp, -16
ffffffff80209524: 06 e4                	sd	ra, 8(sp)
ffffffff80209526: 2a e0                	sd	a0, 0(sp)
;         self.lock.store(false, Ordering::Release);
ffffffff80209528: 08 61                	ld	a0, 0(a0)
ffffffff8020952a: 81 45                	mv	a1, zero
ffffffff8020952c: 05 46                	addi	a2, zero, 1
ffffffff8020952e: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80209532: e7 80 40 bd          	jalr	-1068(ra)
ffffffff80209536: 09 a0                	j	2
;     }
ffffffff80209538: a2 60                	ld	ra, 8(sp)
ffffffff8020953a: 41 01                	addi	sp, sp, 16
ffffffff8020953c: 82 80                	ret

ffffffff8020953e _ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h41a9e0dd8836eca0E:
;     fn deref_mut<'b>(&'b mut self) -> &'b mut T { &mut *self.data }
ffffffff8020953e: 41 11                	addi	sp, sp, -16
ffffffff80209540: 2a e4                	sd	a0, 8(sp)
ffffffff80209542: 08 65                	ld	a0, 8(a0)
ffffffff80209544: 41 01                	addi	sp, sp, 16
ffffffff80209546: 82 80                	ret

ffffffff80209548 _ZN4core6option15Option$LT$T$GT$6expect17h058fe52b1ed7ceb9E:
;     pub fn expect(self, msg: &str) -> T {
ffffffff80209548: 39 71                	addi	sp, sp, -64
ffffffff8020954a: 2a ec                	sd	a0, 24(sp)
ffffffff8020954c: 2e f0                	sd	a1, 32(sp)
ffffffff8020954e: 32 f4                	sd	a2, 40(sp)
ffffffff80209550: 36 f8                	sd	a3, 48(sp)
;             Some(val) => val,
ffffffff80209552: aa 85                	add	a1, zero, a0
ffffffff80209554: 81 47                	mv	a5, zero
ffffffff80209556: 3a e8                	sd	a4, 16(sp)
ffffffff80209558: 36 e4                	sd	a3, 8(sp)
ffffffff8020955a: 32 e0                	sd	a2, 0(sp)
ffffffff8020955c: 63 04 f5 00          	beq	a0, a5, 8
ffffffff80209560: 09 a0                	j	2
ffffffff80209562: 11 a8                	j	20
;             None => expect_failed(msg),
ffffffff80209564: 02 65                	ld	a0, 0(sp)
ffffffff80209566: a2 65                	ld	a1, 8(sp)
ffffffff80209568: 42 66                	ld	a2, 16(sp)
ffffffff8020956a: 97 10 00 00          	auipc	ra, 1
ffffffff8020956e: e7 80 40 d4          	jalr	-700(ra)
ffffffff80209572: 00 00                	unimp	
;         match self {
ffffffff80209574: 00 00                	unimp	
;             Some(val) => val,
ffffffff80209576: 02 75                	ld	a0, 32(sp)
ffffffff80209578: 2a fc                	sd	a0, 56(sp)
;     }
ffffffff8020957a: 21 61                	addi	sp, sp, 64
ffffffff8020957c: 82 80                	ret

ffffffff8020957e _ZN4core6option15Option$LT$T$GT$6map_or17hd41402a78ab280a0E:
;     pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
ffffffff8020957e: 5d 71                	addi	sp, sp, -80
ffffffff80209580: 86 e4                	sd	ra, 72(sp)
ffffffff80209582: 2a e8                	sd	a0, 16(sp)
ffffffff80209584: 2e f8                	sd	a1, 48(sp)
ffffffff80209586: 05 46                	addi	a2, zero, 1
;             Some(t) => f(t),
ffffffff80209588: a3 07 c1 02          	sb	a2, 47(sp)
ffffffff8020958c: 23 07 c1 02          	sb	a2, 46(sp)
ffffffff80209590: 33 36 a0 00          	snez	a2, a0
ffffffff80209594: 81 46                	mv	a3, zero
ffffffff80209596: 2e e4                	sd	a1, 8(sp)
ffffffff80209598: 63 04 d5 00          	beq	a0, a3, 8
ffffffff8020959c: 09 a0                	j	2
ffffffff8020959e: 01 a8                	j	16
ffffffff802095a0: 01 45                	mv	a0, zero
;             None => default,
ffffffff802095a2: a3 07 a1 02          	sb	a0, 47(sp)
ffffffff802095a6: 22 65                	ld	a0, 8(sp)
ffffffff802095a8: 2a ec                	sd	a0, 24(sp)
;         match self {
ffffffff802095aa: 25 a8                	j	56
ffffffff802095ac: 00 00                	unimp	
;             Some(t) => f(t),
ffffffff802095ae: 42 65                	ld	a0, 16(sp)
ffffffff802095b0: aa e0                	sd	a0, 64(sp)
ffffffff802095b2: 81 45                	mv	a1, zero
ffffffff802095b4: 23 07 b1 02          	sb	a1, 46(sp)
ffffffff802095b8: 2a f0                	sd	a0, 32(sp)
ffffffff802095ba: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802095be: e7 80 e0 88          	jalr	-1906(ra)
ffffffff802095c2: 2a ec                	sd	a0, 24(sp)
ffffffff802095c4: 09 a0                	j	2
;     }
ffffffff802095c6: 31 a8                	j	28
ffffffff802095c8: 03 45 f1 02          	lbu	a0, 47(sp)
ffffffff802095cc: 05 89                	andi	a0, a0, 1
ffffffff802095ce: 19 ed                	bnez	a0, 30
ffffffff802095d0: 09 a0                	j	2
ffffffff802095d2: 62 65                	ld	a0, 24(sp)
ffffffff802095d4: a6 60                	ld	ra, 72(sp)
ffffffff802095d6: 61 61                	addi	sp, sp, 80
ffffffff802095d8: 82 80                	ret
ffffffff802095da: 01 45                	mv	a0, zero
ffffffff802095dc: 23 07 a1 02          	sb	a0, 46(sp)
ffffffff802095e0: e5 b7                	j	-24
ffffffff802095e2: 03 45 e1 02          	lbu	a0, 46(sp)
ffffffff802095e6: 05 89                	andi	a0, a0, 1
ffffffff802095e8: 6d f9                	bnez	a0, -14
ffffffff802095ea: f9 bf                	j	-34
ffffffff802095ec: 01 45                	mv	a0, zero
ffffffff802095ee: a3 07 a1 02          	sb	a0, 47(sp)
ffffffff802095f2: c5 b7                	j	-32

ffffffff802095f4 _ZN4core6option15Option$LT$T$GT$7is_none17h30aa557a71e3dc44E:
;     pub fn is_none(&self) -> bool {
ffffffff802095f4: 01 11                	addi	sp, sp, -32
ffffffff802095f6: 06 ec                	sd	ra, 24(sp)
ffffffff802095f8: 2a e8                	sd	a0, 16(sp)
;         !self.is_some()
ffffffff802095fa: 97 00 00 00          	auipc	ra, 0
ffffffff802095fe: e7 80 80 01          	jalr	24(ra)
ffffffff80209602: 2a e4                	sd	a0, 8(sp)
ffffffff80209604: 09 a0                	j	2
ffffffff80209606: 22 65                	ld	a0, 8(sp)
ffffffff80209608: 13 45 15 00          	xori	a0, a0, 1
;     }
ffffffff8020960c: e2 60                	ld	ra, 24(sp)
ffffffff8020960e: 05 61                	addi	sp, sp, 32
ffffffff80209610: 82 80                	ret

ffffffff80209612 _ZN4core6option15Option$LT$T$GT$7is_some17hbcc4cf80a5596b36E:
;     pub fn is_some(&self) -> bool {
ffffffff80209612: 41 11                	addi	sp, sp, -16
ffffffff80209614: 2a e4                	sd	a0, 8(sp)
;         matches!(*self, Some(_))
ffffffff80209616: 08 61                	ld	a0, 0(a0)
ffffffff80209618: 85 45                	addi	a1, zero, 1
ffffffff8020961a: 63 07 b5 00          	beq	a0, a1, 14
ffffffff8020961e: 09 a0                	j	2
ffffffff80209620: 01 45                	mv	a0, zero
;             _ => false
ffffffff80209622: a3 03 a1 00          	sb	a0, 7(sp)
;         match $expression {
ffffffff80209626: 29 a0                	j	10
ffffffff80209628: 05 45                	addi	a0, zero, 1
;             $( $pattern )|+ $( if $guard )? => true,
ffffffff8020962a: a3 03 a1 00          	sb	a0, 7(sp)
;         match $expression {
ffffffff8020962e: 09 a0                	j	2
;     }
ffffffff80209630: 03 45 71 00          	lbu	a0, 7(sp)
ffffffff80209634: 41 01                	addi	sp, sp, 16
ffffffff80209636: 82 80                	ret

ffffffff80209638 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h793236bfa077939aE:
;     fn from(t: T) -> T {
ffffffff80209638: 41 11                	addi	sp, sp, -16
;     }
ffffffff8020963a: 41 01                	addi	sp, sp, 16
ffffffff8020963c: 82 80                	ret

ffffffff8020963e _ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h54b147facfcf16ceE:
;             fn sub(self, other: $t) -> $t { self - other }
ffffffff8020963e: 01 11                	addi	sp, sp, -32
ffffffff80209640: 2a e8                	sd	a0, 16(sp)
ffffffff80209642: 2e ec                	sd	a1, 24(sp)
ffffffff80209644: b3 05 b5 40          	sub	a1, a0, a1
ffffffff80209648: 2e e4                	sd	a1, 8(sp)
ffffffff8020964a: 63 66 b5 00          	bltu	a0, a1, 12
ffffffff8020964e: 09 a0                	j	2
ffffffff80209650: 22 65                	ld	a0, 8(sp)
ffffffff80209652: 05 61                	addi	sp, sp, 32
ffffffff80209654: 82 80                	ret

ffffffff80209656 .LBB0_3:
ffffffff80209656: 17 65 00 00          	auipc	a0, 6
ffffffff8020965a: 13 05 a5 96          	addi	a0, a0, -1686

ffffffff8020965e .LBB0_4:
ffffffff8020965e: 17 66 00 00          	auipc	a2, 6
ffffffff80209662: 13 06 a6 94          	addi	a2, a2, -1718
ffffffff80209666: 93 05 10 02          	addi	a1, zero, 33
ffffffff8020966a: 97 10 00 00          	auipc	ra, 1
ffffffff8020966e: e7 80 e0 cc          	jalr	-818(ra)
ffffffff80209672: 00 00                	unimp	

ffffffff80209674 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$16backward_checked17h7c99a0f3f2447112E:
;                 fn backward_checked(start: Self, n: usize) -> Option<Self> {
ffffffff80209674: 5d 71                	addi	sp, sp, -80
ffffffff80209676: 86 e4                	sd	ra, 72(sp)
ffffffff80209678: 2a f8                	sd	a0, 48(sp)
ffffffff8020967a: 2e fc                	sd	a1, 56(sp)
;                     match Self::try_from(n) {
ffffffff8020967c: 2a f0                	sd	a0, 32(sp)
ffffffff8020967e: 2e 85                	add	a0, zero, a1
ffffffff80209680: 97 00 00 00          	auipc	ra, 0
ffffffff80209684: e7 80 40 10          	jalr	260(ra)
ffffffff80209688: 2a f4                	sd	a0, 40(sp)
ffffffff8020968a: 09 a0                	j	2
;                         Ok(n) => start.checked_sub(n),
ffffffff8020968c: 22 75                	ld	a0, 40(sp)
ffffffff8020968e: aa e0                	sd	a0, 64(sp)
ffffffff80209690: 82 75                	ld	a1, 32(sp)
ffffffff80209692: 2a ec                	sd	a0, 24(sp)
ffffffff80209694: 2e 85                	add	a0, zero, a1
ffffffff80209696: e2 65                	ld	a1, 24(sp)
ffffffff80209698: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020969c: e7 80 40 24          	jalr	580(ra)
ffffffff802096a0: 2a e8                	sd	a0, 16(sp)
ffffffff802096a2: 2e e4                	sd	a1, 8(sp)
ffffffff802096a4: 09 a0                	j	2
;                 }
ffffffff802096a6: 42 65                	ld	a0, 16(sp)
ffffffff802096a8: a2 65                	ld	a1, 8(sp)
ffffffff802096aa: a6 60                	ld	ra, 72(sp)
ffffffff802096ac: 61 61                	addi	sp, sp, 80
ffffffff802096ae: 82 80                	ret

ffffffff802096b0 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h0bf4d4a85f84fadaE:
;         unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
ffffffff802096b0: 01 11                	addi	sp, sp, -32
ffffffff802096b2: 06 ec                	sd	ra, 24(sp)
ffffffff802096b4: 2a e4                	sd	a0, 8(sp)
ffffffff802096b6: 2e e8                	sd	a1, 16(sp)
;             start.unchecked_add(n as Self)
ffffffff802096b8: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802096bc: e7 80 40 33          	jalr	820(ra)
ffffffff802096c0: 2a e0                	sd	a0, 0(sp)
ffffffff802096c2: 09 a0                	j	2
;         }
ffffffff802096c4: 02 65                	ld	a0, 0(sp)
ffffffff802096c6: e2 60                	ld	ra, 24(sp)
ffffffff802096c8: 05 61                	addi	sp, sp, 32
ffffffff802096ca: 82 80                	ret

ffffffff802096cc _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$8backward17h4a5f1c0fc644cc86E:
;         fn backward(start: Self, n: usize) -> Self {
ffffffff802096cc: 5d 71                	addi	sp, sp, -80
ffffffff802096ce: 86 e4                	sd	ra, 72(sp)
ffffffff802096d0: 2a fc                	sd	a0, 56(sp)
ffffffff802096d2: ae e0                	sd	a1, 64(sp)
;             if Self::backward_checked(start, n).is_none() {
ffffffff802096d4: 2a f0                	sd	a0, 32(sp)
ffffffff802096d6: 2e ec                	sd	a1, 24(sp)
ffffffff802096d8: 97 00 00 00          	auipc	ra, 0
ffffffff802096dc: e7 80 c0 f9          	jalr	-100(ra)
ffffffff802096e0: 2a f4                	sd	a0, 40(sp)
ffffffff802096e2: 2e f8                	sd	a1, 48(sp)
ffffffff802096e4: 09 a0                	j	2
ffffffff802096e6: 28 10                	addi	a0, sp, 40
ffffffff802096e8: 97 00 00 00          	auipc	ra, 0
ffffffff802096ec: e7 80 c0 f0          	jalr	-244(ra)
ffffffff802096f0: 2a e8                	sd	a0, 16(sp)
ffffffff802096f2: 09 a0                	j	2
ffffffff802096f4: 42 65                	ld	a0, 16(sp)
ffffffff802096f6: 19 e1                	bnez	a0, 6
ffffffff802096f8: 09 a0                	j	2
ffffffff802096fa: 09 a8                	j	18
ffffffff802096fc: 01 45                	mv	a0, zero
ffffffff802096fe: 85 45                	addi	a1, zero, 1
;                 let _ = Sub::sub(Self::MIN, 1);
ffffffff80209700: 97 00 00 00          	auipc	ra, 0
ffffffff80209704: e7 80 e0 f3          	jalr	-194(ra)
ffffffff80209708: 09 a0                	j	2
;             if Self::backward_checked(start, n).is_none() {
ffffffff8020970a: 09 a0                	j	2
;             start.wrapping_sub(n as Self)
ffffffff8020970c: 02 75                	ld	a0, 32(sp)
ffffffff8020970e: e2 65                	ld	a1, 24(sp)
ffffffff80209710: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80209714: e7 80 e0 20          	jalr	526(ra)
ffffffff80209718: 2a e4                	sd	a0, 8(sp)
ffffffff8020971a: 09 a0                	j	2
;         }
ffffffff8020971c: 22 65                	ld	a0, 8(sp)
ffffffff8020971e: a6 60                	ld	ra, 72(sp)
ffffffff80209720: 61 61                	addi	sp, sp, 80
ffffffff80209722: 82 80                	ret

ffffffff80209724 _ZN4core3ops8function6FnOnce9call_once17h122b2871bfe59be0E:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
ffffffff80209724: 79 71                	addi	sp, sp, -48
ffffffff80209726: 06 f4                	sd	ra, 40(sp)
ffffffff80209728: 2a e8                	sd	a0, 16(sp)
ffffffff8020972a: 2e ec                	sd	a1, 24(sp)
ffffffff8020972c: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80209730: e7 80 00 67          	jalr	1648(ra)
ffffffff80209734: 2a e4                	sd	a0, 8(sp)
ffffffff80209736: 09 a0                	j	2
ffffffff80209738: 22 65                	ld	a0, 8(sp)
ffffffff8020973a: a2 70                	ld	ra, 40(sp)
ffffffff8020973c: 45 61                	addi	sp, sp, 48
ffffffff8020973e: 82 80                	ret

ffffffff80209740 _ZN4core3ptr13drop_in_place17hde08076852d18f88E:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
ffffffff80209740: 01 11                	addi	sp, sp, -32
ffffffff80209742: 06 ec                	sd	ra, 24(sp)
ffffffff80209744: 2a e8                	sd	a0, 16(sp)
ffffffff80209746: 97 00 00 00          	auipc	ra, 0
ffffffff8020974a: e7 80 c0 dd          	jalr	-548(ra)
ffffffff8020974e: 09 a0                	j	2
ffffffff80209750: e2 60                	ld	ra, 24(sp)
ffffffff80209752: 05 61                	addi	sp, sp, 32
ffffffff80209754: 82 80                	ret

ffffffff80209756 _ZN4core4hint9spin_loop17h3fc0adc18e3d6ae4E:
; }
ffffffff80209756: 82 80                	ret

ffffffff80209758 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17hbd81c554915f4b66E:
;                     fn clone(&self) -> Self {
ffffffff80209758: 41 11                	addi	sp, sp, -16
ffffffff8020975a: 2a e4                	sd	a0, 8(sp)
;                         *self
ffffffff8020975c: 08 61                	ld	a0, 0(a0)
;                     }
ffffffff8020975e: 41 01                	addi	sp, sp, 16
ffffffff80209760: 82 80                	ret

ffffffff80209762 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h8cb0191a2476925fE:
;     fn from(t: T) -> T {
ffffffff80209762: 41 11                	addi	sp, sp, -16
ffffffff80209764: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff80209766: 41 01                	addi	sp, sp, 16
ffffffff80209768: 82 80                	ret

ffffffff8020976a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h15139b14a8f51a21E:
;     fn into(self) -> U {
ffffffff8020976a: 01 11                	addi	sp, sp, -32
ffffffff8020976c: 06 ec                	sd	ra, 24(sp)
ffffffff8020976e: 2a e8                	sd	a0, 16(sp)
;         U::from(self)
ffffffff80209770: 97 00 00 00          	auipc	ra, 0
ffffffff80209774: e7 80 20 ff          	jalr	-14(ra)
ffffffff80209778: 2a e4                	sd	a0, 8(sp)
ffffffff8020977a: 09 a0                	j	2
;     }
ffffffff8020977c: 22 65                	ld	a0, 8(sp)
ffffffff8020977e: e2 60                	ld	ra, 24(sp)
ffffffff80209780: 05 61                	addi	sp, sp, 32
ffffffff80209782: 82 80                	ret

ffffffff80209784 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17h270cdeffe5d919f3E:
;     fn try_from(value: U) -> Result<Self, Self::Error> {
ffffffff80209784: 01 11                	addi	sp, sp, -32
ffffffff80209786: 06 ec                	sd	ra, 24(sp)
ffffffff80209788: 2a e8                	sd	a0, 16(sp)
;         Ok(U::into(value))
ffffffff8020978a: 97 00 00 00          	auipc	ra, 0
ffffffff8020978e: e7 80 00 fe          	jalr	-32(ra)
ffffffff80209792: 2a e0                	sd	a0, 0(sp)
ffffffff80209794: 09 a0                	j	2
ffffffff80209796: 02 65                	ld	a0, 0(sp)
ffffffff80209798: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff8020979a: e2 60                	ld	ra, 24(sp)
ffffffff8020979c: 05 61                	addi	sp, sp, 32
ffffffff8020979e: 82 80                	ret

ffffffff802097a0 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb6d52f3813943a8cE:
;     pub const fn len(&self) -> usize {
ffffffff802097a0: 01 11                	addi	sp, sp, -32
ffffffff802097a2: 2a e8                	sd	a0, 16(sp)
ffffffff802097a4: 2e ec                	sd	a1, 24(sp)
;         unsafe { crate::ptr::Repr { rust: self }.raw.len }
ffffffff802097a6: 2a e0                	sd	a0, 0(sp)
ffffffff802097a8: 2e e4                	sd	a1, 8(sp)
;     }
ffffffff802097aa: 2e 85                	add	a0, zero, a1
ffffffff802097ac: 05 61                	addi	sp, sp, 32
ffffffff802097ae: 82 80                	ret

ffffffff802097b0 _ZN4core6result19Result$LT$T$C$E$GT$2ok17hc867ec5961824c36E:
;     pub fn ok(self) -> Option<T> {
ffffffff802097b0: 01 11                	addi	sp, sp, -32
ffffffff802097b2: 2a e4                	sd	a0, 8(sp)
;             Ok(x) => Some(x),
ffffffff802097b4: 93 35 15 00          	seqz	a1, a0
ffffffff802097b8: 01 46                	mv	a2, zero
ffffffff802097ba: 63 17 c5 00          	bne	a0, a2, 14
ffffffff802097be: 09 a0                	j	2
ffffffff802097c0: 01 45                	mv	a0, zero
;             Err(_) => None,
ffffffff802097c2: 2a e8                	sd	a0, 16(sp)
;         match self {
ffffffff802097c4: 11 a8                	j	20
ffffffff802097c6: 00 00                	unimp	
;             Ok(x) => Some(x),
ffffffff802097c8: 22 65                	ld	a0, 8(sp)
ffffffff802097ca: 2a ec                	sd	a0, 24(sp)
ffffffff802097cc: 2a e8                	sd	a0, 16(sp)
;     }
ffffffff802097ce: 29 a0                	j	10
ffffffff802097d0: 42 65                	ld	a0, 16(sp)
ffffffff802097d2: 05 61                	addi	sp, sp, 32
ffffffff802097d4: 82 80                	ret
ffffffff802097d6: ed bf                	j	-6
ffffffff802097d8: 22 65                	ld	a0, 8(sp)
ffffffff802097da: 81 45                	mv	a1, zero
ffffffff802097dc: e3 1a b5 fe          	bne	a0, a1, -12
ffffffff802097e0: dd bf                	j	-10

ffffffff802097e2 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hebfd1b9260b5bbd3E:
;         self
ffffffff802097e2: 90 69                	ld	a2, 16(a1)
ffffffff802097e4: 10 e9                	sd	a2, 16(a0)
ffffffff802097e6: 90 65                	ld	a2, 8(a1)
ffffffff802097e8: 10 e5                	sd	a2, 8(a0)
ffffffff802097ea: 8c 61                	ld	a1, 0(a1)
ffffffff802097ec: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff802097ee: 82 80                	ret

ffffffff802097f0 _ZN22buddy_system_allocator11linked_list10LinkedList8is_empty17h11f50d5f3a10c010E:
;     pub fn is_empty(&self) -> bool {
ffffffff802097f0: 01 11                	addi	sp, sp, -32
ffffffff802097f2: 06 ec                	sd	ra, 24(sp)
ffffffff802097f4: 2a e8                	sd	a0, 16(sp)
;         self.head.is_null()
ffffffff802097f6: 08 61                	ld	a0, 0(a0)
ffffffff802097f8: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff802097fc: e7 80 40 6a          	jalr	1700(ra)
ffffffff80209800: 2a e4                	sd	a0, 8(sp)
ffffffff80209802: 09 a0                	j	2
;     }
ffffffff80209804: 22 65                	ld	a0, 8(sp)
ffffffff80209806: e2 60                	ld	ra, 24(sp)
ffffffff80209808: 05 61                	addi	sp, sp, 32
ffffffff8020980a: 82 80                	ret

ffffffff8020980c _ZN22buddy_system_allocator11linked_list10LinkedList4push17h3c13a9359d173927E:
;     pub unsafe fn push(&mut self, item: *mut usize) {
ffffffff8020980c: 41 11                	addi	sp, sp, -16
ffffffff8020980e: 2a e0                	sd	a0, 0(sp)
ffffffff80209810: 2e e4                	sd	a1, 8(sp)
;         *item = self.head as usize;
ffffffff80209812: 10 61                	ld	a2, 0(a0)
ffffffff80209814: 90 e1                	sd	a2, 0(a1)
;         self.head = item;
ffffffff80209816: 0c e1                	sd	a1, 0(a0)
;     }
ffffffff80209818: 41 01                	addi	sp, sp, 16
ffffffff8020981a: 82 80                	ret

ffffffff8020981c _ZN22buddy_system_allocator11linked_list10LinkedList3pop17h3d1f1ca0e7bd9e75E:
;     pub fn pop(&mut self) -> Option<*mut usize> {
ffffffff8020981c: 39 71                	addi	sp, sp, -64
ffffffff8020981e: 06 fc                	sd	ra, 56(sp)
ffffffff80209820: 2a f4                	sd	a0, 40(sp)
;         match self.is_empty() {
ffffffff80209822: 2a e8                	sd	a0, 16(sp)
ffffffff80209824: 97 00 00 00          	auipc	ra, 0
ffffffff80209828: e7 80 c0 fc          	jalr	-52(ra)
ffffffff8020982c: 2a e4                	sd	a0, 8(sp)
ffffffff8020982e: 09 a0                	j	2
;             true => None,
ffffffff80209830: 22 65                	ld	a0, 8(sp)
ffffffff80209832: 19 e9                	bnez	a0, 22
ffffffff80209834: 09 a0                	j	2
;                 let item = self.head;
ffffffff80209836: 42 65                	ld	a0, 16(sp)
ffffffff80209838: 0c 61                	ld	a1, 0(a0)
ffffffff8020983a: 2e f8                	sd	a1, 48(sp)
;                 self.head = unsafe { *item as *mut usize };
ffffffff8020983c: 90 61                	ld	a2, 0(a1)
ffffffff8020983e: 10 e1                	sd	a2, 0(a0)
;                 Some(item)
ffffffff80209840: 2e f0                	sd	a1, 32(sp)
ffffffff80209842: 85 45                	addi	a1, zero, 1
ffffffff80209844: 2e ec                	sd	a1, 24(sp)
;         match self.is_empty() {
ffffffff80209846: 21 a0                	j	8
ffffffff80209848: 01 45                	mv	a0, zero
;             true => None,
ffffffff8020984a: 2a ec                	sd	a0, 24(sp)
;         match self.is_empty() {
ffffffff8020984c: 09 a0                	j	2
;     }
ffffffff8020984e: 62 65                	ld	a0, 24(sp)
ffffffff80209850: 82 75                	ld	a1, 32(sp)
ffffffff80209852: e2 70                	ld	ra, 56(sp)
ffffffff80209854: 21 61                	addi	sp, sp, 64
ffffffff80209856: 82 80                	ret

ffffffff80209858 _ZN22buddy_system_allocator11linked_list10LinkedList8iter_mut17h1b8b5aa8e52bdf09E:
;     pub fn iter_mut(&mut self) -> IterMut {
ffffffff80209858: 41 11                	addi	sp, sp, -16
ffffffff8020985a: 2e e4                	sd	a1, 8(sp)
;             curr: self.head,
ffffffff8020985c: 90 61                	ld	a2, 0(a1)
;         IterMut {
ffffffff8020985e: 0c e1                	sd	a1, 0(a0)
ffffffff80209860: 0c e5                	sd	a1, 8(a0)
ffffffff80209862: 10 e9                	sd	a2, 16(a0)
;     }
ffffffff80209864: 41 01                	addi	sp, sp, 16
ffffffff80209866: 82 80                	ret

ffffffff80209868 _ZN22buddy_system_allocator11linked_list8ListNode3pop17he714415d95cf92d8E:
;     pub fn pop(self) -> *mut usize {
ffffffff80209868: 41 11                	addi	sp, sp, -16
ffffffff8020986a: 2a e0                	sd	a0, 0(sp)
ffffffff8020986c: 2e e4                	sd	a1, 8(sp)
;             *(self.prev) = *(self.curr);
ffffffff8020986e: 90 61                	ld	a2, 0(a1)
ffffffff80209870: 10 e1                	sd	a2, 0(a0)
;     }
ffffffff80209872: 2e 85                	add	a0, zero, a1
ffffffff80209874: 41 01                	addi	sp, sp, 16
ffffffff80209876: 82 80                	ret

ffffffff80209878 _ZN22buddy_system_allocator11linked_list8ListNode5value17ha200fa20646a336eE:
;     pub fn value(&self) -> *mut usize {
ffffffff80209878: 41 11                	addi	sp, sp, -16
ffffffff8020987a: 2a e4                	sd	a0, 8(sp)
;         self.curr
ffffffff8020987c: 08 65                	ld	a0, 8(a0)
;     }
ffffffff8020987e: 41 01                	addi	sp, sp, 16
ffffffff80209880: 82 80                	ret

ffffffff80209882 _ZN103_$LT$buddy_system_allocator..linked_list..IterMut$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4c5265826e4d39b1E:
;     fn next(&mut self) -> Option<Self::Item> {
ffffffff80209882: 39 71                	addi	sp, sp, -64
ffffffff80209884: 06 fc                	sd	ra, 56(sp)
ffffffff80209886: 2e f8                	sd	a1, 48(sp)
;         if self.curr.is_null() {
ffffffff80209888: 90 69                	ld	a2, 16(a1)
ffffffff8020988a: 2a ec                	sd	a0, 24(sp)
ffffffff8020988c: 32 85                	add	a0, zero, a2
ffffffff8020988e: 2e e8                	sd	a1, 16(sp)
ffffffff80209890: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff80209894: e7 80 c0 60          	jalr	1548(ra)
ffffffff80209898: 2a e4                	sd	a0, 8(sp)
ffffffff8020989a: 09 a0                	j	2
ffffffff8020989c: 22 65                	ld	a0, 8(sp)
ffffffff8020989e: 1d e1                	bnez	a0, 38
ffffffff802098a0: 09 a0                	j	2
;                 prev: self.prev,
ffffffff802098a2: 42 65                	ld	a0, 16(sp)
ffffffff802098a4: 0c 65                	ld	a1, 8(a0)
;                 curr: self.curr,
ffffffff802098a6: 10 69                	ld	a2, 16(a0)
;             let res = ListNode {
ffffffff802098a8: 2e f0                	sd	a1, 32(sp)
ffffffff802098aa: 32 f4                	sd	a2, 40(sp)
;             self.prev = self.curr;
ffffffff802098ac: 0c 69                	ld	a1, 16(a0)
ffffffff802098ae: 0c e5                	sd	a1, 8(a0)
;             self.curr = unsafe { *self.curr as *mut usize };
ffffffff802098b0: 8c 61                	ld	a1, 0(a1)
ffffffff802098b2: 0c e9                	sd	a1, 16(a0)
;             Some(res)
ffffffff802098b4: 82 75                	ld	a1, 32(sp)
ffffffff802098b6: 22 76                	ld	a2, 40(sp)
ffffffff802098b8: e2 66                	ld	a3, 24(sp)
ffffffff802098ba: 8c e6                	sd	a1, 8(a3)
ffffffff802098bc: 90 ea                	sd	a2, 16(a3)
ffffffff802098be: 85 45                	addi	a1, zero, 1
ffffffff802098c0: 8c e2                	sd	a1, 0(a3)
;         if self.curr.is_null() {
ffffffff802098c2: 29 a0                	j	10
ffffffff802098c4: 01 45                	mv	a0, zero
;             None
ffffffff802098c6: e2 65                	ld	a1, 24(sp)
ffffffff802098c8: 88 e1                	sd	a0, 0(a1)
;         if self.curr.is_null() {
ffffffff802098ca: 09 a0                	j	2
;     }
ffffffff802098cc: e2 70                	ld	ra, 56(sp)
ffffffff802098ce: 21 61                	addi	sp, sp, 64
ffffffff802098d0: 82 80                	ret

ffffffff802098d2 _ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hacc74e682de6720bE:
;     fn drop(&mut self) {
ffffffff802098d2: 01 11                	addi	sp, sp, -32
ffffffff802098d4: 06 ec                	sd	ra, 24(sp)
ffffffff802098d6: 2a e8                	sd	a0, 16(sp)
;         if self.panicked {
ffffffff802098d8: 83 45 85 00          	lbu	a1, 8(a0)
ffffffff802098dc: 85 89                	andi	a1, a1, 1
ffffffff802098de: 2a e0                	sd	a0, 0(sp)
ffffffff802098e0: 99 e1                	bnez	a1, 6
ffffffff802098e2: 09 a0                	j	2
ffffffff802098e4: 19 a8                	j	22
;             self.state.store(PANICKED, Ordering::SeqCst);
ffffffff802098e6: 02 65                	ld	a0, 0(sp)
ffffffff802098e8: 08 61                	ld	a0, 0(a0)
ffffffff802098ea: 8d 45                	addi	a1, zero, 3
ffffffff802098ec: 11 46                	addi	a2, zero, 4
ffffffff802098ee: 97 00 00 00          	auipc	ra, 0
ffffffff802098f2: e7 80 20 01          	jalr	18(ra)
ffffffff802098f6: 09 a0                	j	2
;         if self.panicked {
ffffffff802098f8: 09 a0                	j	2
;     }
ffffffff802098fa: e2 60                	ld	ra, 24(sp)
ffffffff802098fc: 05 61                	addi	sp, sp, 32
ffffffff802098fe: 82 80                	ret

ffffffff80209900 _ZN4core4sync6atomic11AtomicUsize5store17h3dec5db0ddee1c5aE:
;                 pub fn store(&self, val: $int_type, order: Ordering) {
ffffffff80209900: 39 71                	addi	sp, sp, -64
ffffffff80209902: 06 fc                	sd	ra, 56(sp)
ffffffff80209904: b2 86                	add	a3, zero, a2
ffffffff80209906: 2a f0                	sd	a0, 32(sp)
ffffffff80209908: 2e f4                	sd	a1, 40(sp)
ffffffff8020990a: a3 0b c1 02          	sb	a2, 55(sp)
;                     unsafe { atomic_store(self.v.get(), val, order); }
ffffffff8020990e: 2e ec                	sd	a1, 24(sp)
ffffffff80209910: 36 e8                	sd	a3, 16(sp)
ffffffff80209912: 97 00 00 00          	auipc	ra, 0
ffffffff80209916: e7 80 80 0c          	jalr	200(ra)
ffffffff8020991a: 2a e4                	sd	a0, 8(sp)
ffffffff8020991c: 09 a0                	j	2
ffffffff8020991e: 22 65                	ld	a0, 8(sp)
ffffffff80209920: e2 65                	ld	a1, 24(sp)
ffffffff80209922: 42 66                	ld	a2, 16(sp)
ffffffff80209924: 97 00 00 00          	auipc	ra, 0
ffffffff80209928: e7 80 00 01          	jalr	16(ra)
ffffffff8020992c: 09 a0                	j	2
;                 }
ffffffff8020992e: e2 70                	ld	ra, 56(sp)
ffffffff80209930: 21 61                	addi	sp, sp, 64
ffffffff80209932: 82 80                	ret

ffffffff80209934 _ZN4core4sync6atomic12atomic_store17hbd19a05b2e99872bE:
; unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
ffffffff80209934: 39 71                	addi	sp, sp, -64
ffffffff80209936: b2 86                	add	a3, zero, a2
ffffffff80209938: a3 03 c1 02          	sb	a2, 39(sp)
ffffffff8020993c: 2a f8                	sd	a0, 48(sp)
ffffffff8020993e: 2e fc                	sd	a1, 56(sp)
;         Release => intrinsics::atomic_store_rel(dst, val),
ffffffff80209940: 13 76 f6 0f          	andi	a2, a2, 255
ffffffff80209944: 01 47                	mv	a4, zero
ffffffff80209946: 2e ec                	sd	a1, 24(sp)
ffffffff80209948: 2a e8                	sd	a0, 16(sp)
ffffffff8020994a: 32 e4                	sd	a2, 8(sp)
ffffffff8020994c: 63 0a e6 04          	beq	a2, a4, 84
ffffffff80209950: 09 a0                	j	2
ffffffff80209952: 05 45                	addi	a0, zero, 1
ffffffff80209954: a2 65                	ld	a1, 8(sp)
ffffffff80209956: 63 8e a5 02          	beq	a1, a0, 60
ffffffff8020995a: 09 a0                	j	2
ffffffff8020995c: 09 45                	addi	a0, zero, 2
ffffffff8020995e: a2 65                	ld	a1, 8(sp)
ffffffff80209960: 63 8c a5 04          	beq	a1, a0, 88
ffffffff80209964: 09 a0                	j	2
ffffffff80209966: 0d 45                	addi	a0, zero, 3
ffffffff80209968: a2 65                	ld	a1, 8(sp)
ffffffff8020996a: 63 84 a5 00          	beq	a1, a0, 8
ffffffff8020996e: 09 a0                	j	2
ffffffff80209970: 2d a8                	j	58

ffffffff80209972 .LBB1_15:
;         $crate::panicking::panic($msg)
ffffffff80209972: 17 55 00 00          	auipc	a0, 5
ffffffff80209976: 13 05 f5 66          	addi	a0, a0, 1647

ffffffff8020997a .LBB1_16:
ffffffff8020997a: 17 56 00 00          	auipc	a2, 5
ffffffff8020997e: 13 06 66 71          	addi	a2, a2, 1814
ffffffff80209982: 93 05 20 03          	addi	a1, zero, 50
ffffffff80209986: 97 10 00 00          	auipc	ra, 1
ffffffff8020998a: e7 80 20 9b          	jalr	-1614(ra)
ffffffff8020998e: 00 00                	unimp	
;     match order {
ffffffff80209990: 00 00                	unimp	
;         Release => intrinsics::atomic_store_rel(dst, val),
ffffffff80209992: 0f 00 10 03          	fence	rw, w
ffffffff80209996: 62 65                	ld	a0, 24(sp)
ffffffff80209998: c2 65                	ld	a1, 16(sp)
ffffffff8020999a: 88 e1                	sd	a0, 0(a1)
ffffffff8020999c: 09 a0                	j	2
;     match order {
ffffffff8020999e: 25 a8                	j	56
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
ffffffff802099a0: 62 65                	ld	a0, 24(sp)
ffffffff802099a2: c2 65                	ld	a1, 16(sp)
ffffffff802099a4: 88 e1                	sd	a0, 0(a1)
ffffffff802099a6: 09 a0                	j	2
;     match order {
ffffffff802099a8: 3d a0                	j	46
;         SeqCst => intrinsics::atomic_store(dst, val),
ffffffff802099aa: 0f 00 10 03          	fence	rw, w
ffffffff802099ae: 62 65                	ld	a0, 24(sp)
ffffffff802099b0: c2 65                	ld	a1, 16(sp)
ffffffff802099b2: 88 e1                	sd	a0, 0(a1)
ffffffff802099b4: 09 a0                	j	2
;     match order {
ffffffff802099b6: 05 a0                	j	32

ffffffff802099b8 .LBB1_17:
;         $crate::panicking::panic($msg)
ffffffff802099b8: 17 55 00 00          	auipc	a0, 5
ffffffff802099bc: 13 05 05 6f          	addi	a0, a0, 1776

ffffffff802099c0 .LBB1_18:
ffffffff802099c0: 17 56 00 00          	auipc	a2, 5
ffffffff802099c4: 13 06 06 6d          	addi	a2, a2, 1744
ffffffff802099c8: 93 05 a0 02          	addi	a1, zero, 42
ffffffff802099cc: 97 10 00 00          	auipc	ra, 1
ffffffff802099d0: e7 80 c0 96          	jalr	-1684(ra)
ffffffff802099d4: 00 00                	unimp	
; }
ffffffff802099d6: 21 61                	addi	sp, sp, 64
ffffffff802099d8: 82 80                	ret

ffffffff802099da _ZN4core4cell19UnsafeCell$LT$T$GT$3get17ha89cd70ec93badbfE:
;     pub const fn get(&self) -> *mut T {
ffffffff802099da: 41 11                	addi	sp, sp, -16
ffffffff802099dc: 2a e4                	sd	a0, 8(sp)
;     }
ffffffff802099de: 41 01                	addi	sp, sp, 16
ffffffff802099e0: 82 80                	ret

ffffffff802099e2 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd01b3b57698724c2E:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
ffffffff802099e2: 01 11                	addi	sp, sp, -32
ffffffff802099e4: 06 ec                	sd	ra, 24(sp)
ffffffff802099e6: 2a e4                	sd	a0, 8(sp)
ffffffff802099e8: 2e e8                	sd	a1, 16(sp)
ffffffff802099ea: 08 61                	ld	a0, 0(a0)
ffffffff802099ec: 97 00 00 00          	auipc	ra, 0
ffffffff802099f0: e7 80 c0 2f          	jalr	764(ra)
ffffffff802099f4: 2a e0                	sd	a0, 0(sp)
ffffffff802099f6: 09 a0                	j	2
ffffffff802099f8: 02 65                	ld	a0, 0(sp)
ffffffff802099fa: e2 60                	ld	ra, 24(sp)
ffffffff802099fc: 05 61                	addi	sp, sp, 32
ffffffff802099fe: 82 80                	ret

ffffffff80209a00 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hee9dd6b7c7805aeaE:
ffffffff80209a00: 01 11                	addi	sp, sp, -32
ffffffff80209a02: 06 ec                	sd	ra, 24(sp)
ffffffff80209a04: 2a e4                	sd	a0, 8(sp)
ffffffff80209a06: 2e e8                	sd	a1, 16(sp)
ffffffff80209a08: 08 61                	ld	a0, 0(a0)
ffffffff80209a0a: 97 00 00 00          	auipc	ra, 0
ffffffff80209a0e: e7 80 c0 45          	jalr	1116(ra)
ffffffff80209a12: 2a e0                	sd	a0, 0(sp)
ffffffff80209a14: 09 a0                	j	2
ffffffff80209a16: 02 65                	ld	a0, 0(sp)
ffffffff80209a18: e2 60                	ld	ra, 24(sp)
ffffffff80209a1a: 05 61                	addi	sp, sp, 32
ffffffff80209a1c: 82 80                	ret

ffffffff80209a1e _ZN5riscv8register6scause9Interrupt4from17h2812b9baea87b320E:
;     pub fn from(nr: usize) -> Self {
ffffffff80209a1e: 01 11                	addi	sp, sp, -32
ffffffff80209a20: 2a ec                	sd	a0, 24(sp)
ffffffff80209a22: 81 45                	mv	a1, zero
;             0 => Interrupt::UserSoft,
ffffffff80209a24: 2a e4                	sd	a0, 8(sp)
ffffffff80209a26: 63 00 b5 04          	beq	a0, a1, 64
ffffffff80209a2a: 09 a0                	j	2
ffffffff80209a2c: 05 45                	addi	a0, zero, 1
ffffffff80209a2e: a2 65                	ld	a1, 8(sp)
ffffffff80209a30: 63 8f a5 02          	beq	a1, a0, 62
ffffffff80209a34: 09 a0                	j	2
ffffffff80209a36: 11 45                	addi	a0, zero, 4
ffffffff80209a38: a2 65                	ld	a1, 8(sp)
ffffffff80209a3a: 63 8e a5 02          	beq	a1, a0, 60
ffffffff80209a3e: 09 a0                	j	2
ffffffff80209a40: 15 45                	addi	a0, zero, 5
ffffffff80209a42: a2 65                	ld	a1, 8(sp)
ffffffff80209a44: 63 8d a5 02          	beq	a1, a0, 58
ffffffff80209a48: 09 a0                	j	2
ffffffff80209a4a: 21 45                	addi	a0, zero, 8
ffffffff80209a4c: a2 65                	ld	a1, 8(sp)
ffffffff80209a4e: 63 8c a5 02          	beq	a1, a0, 56
ffffffff80209a52: 09 a0                	j	2
ffffffff80209a54: 25 45                	addi	a0, zero, 9
ffffffff80209a56: a2 65                	ld	a1, 8(sp)
ffffffff80209a58: 63 8b a5 02          	beq	a1, a0, 54
ffffffff80209a5c: 09 a0                	j	2
ffffffff80209a5e: 19 45                	addi	a0, zero, 6
;             _ => Interrupt::Unknown,
ffffffff80209a60: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209a64: 0d a8                	j	50
ffffffff80209a66: 01 45                	mv	a0, zero
;             0 => Interrupt::UserSoft,
ffffffff80209a68: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209a6c: 2d a0                	j	42
ffffffff80209a6e: 05 45                	addi	a0, zero, 1
;             1 => Interrupt::SupervisorSoft,
ffffffff80209a70: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209a74: 0d a0                	j	34
ffffffff80209a76: 09 45                	addi	a0, zero, 2
;             4 => Interrupt::UserTimer,
ffffffff80209a78: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209a7c: 29 a8                	j	26
ffffffff80209a7e: 0d 45                	addi	a0, zero, 3
;             5 => Interrupt::SupervisorTimer,
ffffffff80209a80: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209a84: 09 a8                	j	18
ffffffff80209a86: 11 45                	addi	a0, zero, 4
;             8 => Interrupt::UserExternal,
ffffffff80209a88: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209a8c: 29 a0                	j	10
ffffffff80209a8e: 15 45                	addi	a0, zero, 5
;             9 => Interrupt::SupervisorExternal,
ffffffff80209a90: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209a94: 09 a0                	j	2
;     }
ffffffff80209a96: 03 05 71 01          	lb	a0, 23(sp)
ffffffff80209a9a: 05 61                	addi	sp, sp, 32
ffffffff80209a9c: 82 80                	ret

ffffffff80209a9e _ZN5riscv8register6scause9Exception4from17ha3b91cfd575f2249E:
;     pub fn from(nr: usize) -> Self {
ffffffff80209a9e: 01 11                	addi	sp, sp, -32
ffffffff80209aa0: 2a ec                	sd	a0, 24(sp)
ffffffff80209aa2: 81 45                	mv	a1, zero
;             0 => Exception::InstructionMisaligned,
ffffffff80209aa4: 2a e4                	sd	a0, 8(sp)
ffffffff80209aa6: 63 09 b5 06          	beq	a0, a1, 114
ffffffff80209aaa: 09 a0                	j	2
ffffffff80209aac: 05 45                	addi	a0, zero, 1
ffffffff80209aae: a2 65                	ld	a1, 8(sp)
ffffffff80209ab0: 63 88 a5 06          	beq	a1, a0, 112
ffffffff80209ab4: 09 a0                	j	2
ffffffff80209ab6: 09 45                	addi	a0, zero, 2
ffffffff80209ab8: a2 65                	ld	a1, 8(sp)
ffffffff80209aba: 63 87 a5 06          	beq	a1, a0, 110
ffffffff80209abe: 09 a0                	j	2
ffffffff80209ac0: 0d 45                	addi	a0, zero, 3
ffffffff80209ac2: a2 65                	ld	a1, 8(sp)
ffffffff80209ac4: 63 86 a5 06          	beq	a1, a0, 108
ffffffff80209ac8: 09 a0                	j	2
ffffffff80209aca: 15 45                	addi	a0, zero, 5
ffffffff80209acc: a2 65                	ld	a1, 8(sp)
ffffffff80209ace: 63 85 a5 06          	beq	a1, a0, 106
ffffffff80209ad2: 09 a0                	j	2
ffffffff80209ad4: 19 45                	addi	a0, zero, 6
ffffffff80209ad6: a2 65                	ld	a1, 8(sp)
ffffffff80209ad8: 63 84 a5 06          	beq	a1, a0, 104
ffffffff80209adc: 09 a0                	j	2
ffffffff80209ade: 1d 45                	addi	a0, zero, 7
ffffffff80209ae0: a2 65                	ld	a1, 8(sp)
ffffffff80209ae2: 63 83 a5 06          	beq	a1, a0, 102
ffffffff80209ae6: 09 a0                	j	2
ffffffff80209ae8: 21 45                	addi	a0, zero, 8
ffffffff80209aea: a2 65                	ld	a1, 8(sp)
ffffffff80209aec: 63 82 a5 06          	beq	a1, a0, 100
ffffffff80209af0: 09 a0                	j	2
ffffffff80209af2: 31 45                	addi	a0, zero, 12
ffffffff80209af4: a2 65                	ld	a1, 8(sp)
ffffffff80209af6: 63 81 a5 06          	beq	a1, a0, 98
ffffffff80209afa: 09 a0                	j	2
ffffffff80209afc: 35 45                	addi	a0, zero, 13
ffffffff80209afe: a2 65                	ld	a1, 8(sp)
ffffffff80209b00: 63 80 a5 06          	beq	a1, a0, 96
ffffffff80209b04: 09 a0                	j	2
ffffffff80209b06: 3d 45                	addi	a0, zero, 15
ffffffff80209b08: a2 65                	ld	a1, 8(sp)
ffffffff80209b0a: 63 8f a5 04          	beq	a1, a0, 94
ffffffff80209b0e: 09 a0                	j	2
ffffffff80209b10: 2d 45                	addi	a0, zero, 11
;             _ => Exception::Unknown,
ffffffff80209b12: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b16: a9 a8                	j	90
ffffffff80209b18: 01 45                	mv	a0, zero
;             0 => Exception::InstructionMisaligned,
ffffffff80209b1a: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b1e: 89 a8                	j	82
ffffffff80209b20: 05 45                	addi	a0, zero, 1
;             1 => Exception::InstructionFault,
ffffffff80209b22: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b26: a9 a0                	j	74
ffffffff80209b28: 09 45                	addi	a0, zero, 2
;             2 => Exception::IllegalInstruction,
ffffffff80209b2a: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b2e: 89 a0                	j	66
ffffffff80209b30: 0d 45                	addi	a0, zero, 3
;             3 => Exception::Breakpoint,
ffffffff80209b32: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b36: 2d a8                	j	58
ffffffff80209b38: 11 45                	addi	a0, zero, 4
;             5 => Exception::LoadFault,
ffffffff80209b3a: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b3e: 0d a8                	j	50
ffffffff80209b40: 15 45                	addi	a0, zero, 5
;             6 => Exception::StoreMisaligned,
ffffffff80209b42: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b46: 2d a0                	j	42
ffffffff80209b48: 19 45                	addi	a0, zero, 6
;             7 => Exception::StoreFault,
ffffffff80209b4a: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b4e: 0d a0                	j	34
ffffffff80209b50: 1d 45                	addi	a0, zero, 7
;             8 => Exception::UserEnvCall,
ffffffff80209b52: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b56: 29 a8                	j	26
ffffffff80209b58: 21 45                	addi	a0, zero, 8
;             12 => Exception::InstructionPageFault,
ffffffff80209b5a: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b5e: 09 a8                	j	18
ffffffff80209b60: 25 45                	addi	a0, zero, 9
;             13 => Exception::LoadPageFault,
ffffffff80209b62: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b66: 29 a0                	j	10
ffffffff80209b68: 29 45                	addi	a0, zero, 10
;             15 => Exception::StorePageFault,
ffffffff80209b6a: a3 0b a1 00          	sb	a0, 23(sp)
;         match nr {
ffffffff80209b6e: 09 a0                	j	2
;     }
ffffffff80209b70: 03 05 71 01          	lb	a0, 23(sp)
ffffffff80209b74: 05 61                	addi	sp, sp, 32
ffffffff80209b76: 82 80                	ret

ffffffff80209b78 _ZN5riscv8register6scause6Scause4code17h4f53ce64a1d43e5dE:
;     pub fn code(&self) -> usize {
ffffffff80209b78: 39 71                	addi	sp, sp, -64
ffffffff80209b7a: 2a f4                	sd	a0, 40(sp)
ffffffff80209b7c: a1 45                	addi	a1, zero, 8
;     intrinsics::size_of::<T>()
ffffffff80209b7e: 2e fc                	sd	a1, 56(sp)
;         let bit = 1 << (size_of::<usize>() * 8 - 1);
ffffffff80209b80: 2a f0                	sd	a0, 32(sp)
ffffffff80209b82: 2e ec                	sd	a1, 24(sp)
ffffffff80209b84: 09 a0                	j	2
ffffffff80209b86: 62 65                	ld	a0, 24(sp)
ffffffff80209b88: 93 15 35 00          	slli	a1, a0, 3
ffffffff80209b8c: 01 46                	mv	a2, zero
ffffffff80209b8e: 2e e8                	sd	a1, 16(sp)
ffffffff80209b90: 15 ee                	bnez	a2, 60
ffffffff80209b92: 09 a0                	j	2
ffffffff80209b94: 42 65                	ld	a0, 16(sp)
ffffffff80209b96: 93 05 f5 ff          	addi	a1, a0, -1
ffffffff80209b9a: 2e e4                	sd	a1, 8(sp)
ffffffff80209b9c: 63 67 b5 04          	bltu	a0, a1, 78
ffffffff80209ba0: 09 a0                	j	2
ffffffff80209ba2: 22 65                	ld	a0, 8(sp)
ffffffff80209ba4: 93 75 05 fc          	andi	a1, a0, -64
ffffffff80209ba8: 05 46                	addi	a2, zero, 1
ffffffff80209baa: 33 16 a6 00          	sll	a2, a2, a0
ffffffff80209bae: 81 46                	mv	a3, zero
ffffffff80209bb0: 32 e0                	sd	a2, 0(sp)
ffffffff80209bb2: 63 9b d5 04          	bne	a1, a3, 86
ffffffff80209bb6: 09 a0                	j	2
ffffffff80209bb8: 02 65                	ld	a0, 0(sp)
ffffffff80209bba: 2a f8                	sd	a0, 48(sp)
;         self.bits & !bit
ffffffff80209bbc: 82 75                	ld	a1, 32(sp)
ffffffff80209bbe: 90 61                	ld	a2, 0(a1)
ffffffff80209bc0: 93 46 f5 ff          	not	a3, a0
ffffffff80209bc4: 33 75 d6 00          	and	a0, a2, a3
;     }
ffffffff80209bc8: 21 61                	addi	sp, sp, 64
ffffffff80209bca: 82 80                	ret

ffffffff80209bcc .LBB4_8:
;         let bit = 1 << (size_of::<usize>() * 8 - 1);
ffffffff80209bcc: 17 55 00 00          	auipc	a0, 5
ffffffff80209bd0: 13 05 45 57          	addi	a0, a0, 1396

ffffffff80209bd4 .LBB4_9:
ffffffff80209bd4: 17 56 00 00          	auipc	a2, 5
ffffffff80209bd8: 13 06 46 55          	addi	a2, a2, 1364
ffffffff80209bdc: 93 05 10 02          	addi	a1, zero, 33
ffffffff80209be0: 97 00 00 00          	auipc	ra, 0
ffffffff80209be4: e7 80 80 75          	jalr	1880(ra)
ffffffff80209be8: 00 00                	unimp	

ffffffff80209bea .LBB4_10:
ffffffff80209bea: 17 55 00 00          	auipc	a0, 5
ffffffff80209bee: 13 05 65 59          	addi	a0, a0, 1430

ffffffff80209bf2 .LBB4_11:
ffffffff80209bf2: 17 56 00 00          	auipc	a2, 5
ffffffff80209bf6: 13 06 66 57          	addi	a2, a2, 1398
ffffffff80209bfa: 93 05 10 02          	addi	a1, zero, 33
ffffffff80209bfe: 97 00 00 00          	auipc	ra, 0
ffffffff80209c02: e7 80 a0 73          	jalr	1850(ra)
ffffffff80209c06: 00 00                	unimp	

ffffffff80209c08 .LBB4_12:
ffffffff80209c08: 17 55 00 00          	auipc	a0, 5
ffffffff80209c0c: 13 05 85 5b          	addi	a0, a0, 1464

ffffffff80209c10 .LBB4_13:
ffffffff80209c10: 17 56 00 00          	auipc	a2, 5
ffffffff80209c14: 13 06 86 59          	addi	a2, a2, 1432
ffffffff80209c18: 93 05 30 02          	addi	a1, zero, 35
ffffffff80209c1c: 97 00 00 00          	auipc	ra, 0
ffffffff80209c20: e7 80 c0 71          	jalr	1820(ra)
ffffffff80209c24: 00 00                	unimp	

ffffffff80209c26 _ZN66_$LT$riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17h1ec2a8fac8c1fae7E:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
ffffffff80209c26: 75 71                	addi	sp, sp, -144
ffffffff80209c28: 06 e5                	sd	ra, 136(sp)
ffffffff80209c2a: aa f4                	sd	a0, 104(sp)
ffffffff80209c2c: ae f8                	sd	a1, 112(sp)
ffffffff80209c2e: 2a f0                	sd	a0, 32(sp)
ffffffff80209c30: 03 45 05 00          	lbu	a0, 0(a0)
ffffffff80209c34: 05 89                	andi	a0, a0, 1
ffffffff80209c36: 01 46                	mv	a2, zero
ffffffff80209c38: 2e e8                	sd	a1, 16(sp)
ffffffff80209c3a: 63 05 c5 02          	beq	a0, a2, 42
ffffffff80209c3e: 09 a0                	j	2
;     Exception(Exception),
ffffffff80209c40: 02 75                	ld	a0, 32(sp)
ffffffff80209c42: 05 05                	addi	a0, a0, 1
ffffffff80209c44: aa fc                	sd	a0, 120(sp)

ffffffff80209c46 .LBB5_12:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
ffffffff80209c46: 17 56 00 00          	auipc	a2, 5
ffffffff80209c4a: 13 06 d6 59          	addi	a2, a2, 1437
ffffffff80209c4e: ac 00                	addi	a1, sp, 72
ffffffff80209c50: a5 46                	addi	a3, zero, 9
ffffffff80209c52: 2a e4                	sd	a0, 8(sp)
ffffffff80209c54: 2e 85                	add	a0, zero, a1
ffffffff80209c56: c2 65                	ld	a1, 16(sp)
ffffffff80209c58: 97 10 00 00          	auipc	ra, 1
ffffffff80209c5c: e7 80 20 6e          	jalr	1762(ra)
ffffffff80209c60: 89 a8                	j	82
ffffffff80209c62: 00 00                	unimp	
;     Interrupt(Interrupt),
ffffffff80209c64: 02 75                	ld	a0, 32(sp)
ffffffff80209c66: 05 05                	addi	a0, a0, 1
ffffffff80209c68: 2a e1                	sd	a0, 128(sp)

ffffffff80209c6a .LBB5_13:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
ffffffff80209c6a: 17 56 00 00          	auipc	a2, 5
ffffffff80209c6e: 13 06 66 5a          	addi	a2, a2, 1446
ffffffff80209c72: 2c 10                	addi	a1, sp, 40
ffffffff80209c74: a5 46                	addi	a3, zero, 9
ffffffff80209c76: 2a e0                	sd	a0, 0(sp)
ffffffff80209c78: 2e 85                	add	a0, zero, a1
ffffffff80209c7a: c2 65                	ld	a1, 16(sp)
ffffffff80209c7c: 97 10 00 00          	auipc	ra, 1
ffffffff80209c80: e7 80 e0 6b          	jalr	1726(ra)
ffffffff80209c84: 09 a0                	j	2
;     Interrupt(Interrupt),
ffffffff80209c86: 02 65                	ld	a0, 0(sp)
ffffffff80209c88: aa e0                	sd	a0, 64(sp)

ffffffff80209c8a .LBB5_14:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
ffffffff80209c8a: 17 56 00 00          	auipc	a2, 5
ffffffff80209c8e: 13 06 66 59          	addi	a2, a2, 1430
ffffffff80209c92: 28 10                	addi	a0, sp, 40
ffffffff80209c94: 8c 00                	addi	a1, sp, 64
ffffffff80209c96: 97 10 00 00          	auipc	ra, 1
ffffffff80209c9a: e7 80 c0 a9          	jalr	-1380(ra)
ffffffff80209c9e: 09 a0                	j	2
ffffffff80209ca0: 28 10                	addi	a0, sp, 40
ffffffff80209ca2: 97 10 00 00          	auipc	ra, 1
ffffffff80209ca6: e7 80 00 b8          	jalr	-1152(ra)
ffffffff80209caa: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80209cae: 09 a0                	j	2
ffffffff80209cb0: 3d a0                	j	46
;     Exception(Exception),
ffffffff80209cb2: 22 65                	ld	a0, 8(sp)
ffffffff80209cb4: aa f0                	sd	a0, 96(sp)

ffffffff80209cb6 .LBB5_15:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
ffffffff80209cb6: 17 56 00 00          	auipc	a2, 5
ffffffff80209cba: 13 06 a6 53          	addi	a2, a2, 1338
ffffffff80209cbe: a8 00                	addi	a0, sp, 72
ffffffff80209cc0: 8c 10                	addi	a1, sp, 96
ffffffff80209cc2: 97 10 00 00          	auipc	ra, 1
ffffffff80209cc6: e7 80 00 a7          	jalr	-1424(ra)
ffffffff80209cca: 09 a0                	j	2
ffffffff80209ccc: a8 00                	addi	a0, sp, 72
ffffffff80209cce: 97 10 00 00          	auipc	ra, 1
ffffffff80209cd2: e7 80 40 b5          	jalr	-1196(ra)
ffffffff80209cd6: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80209cda: 09 a0                	j	2
ffffffff80209cdc: 09 a0                	j	2
ffffffff80209cde: 03 45 f1 01          	lbu	a0, 31(sp)
ffffffff80209ce2: aa 60                	ld	ra, 136(sp)
ffffffff80209ce4: 49 61                	addi	sp, sp, 144
ffffffff80209ce6: 82 80                	ret

ffffffff80209ce8 _ZN71_$LT$riscv..register..scause..Interrupt$u20$as$u20$core..fmt..Debug$GT$3fmt17hbf66d1e3a4b8f1beE:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
ffffffff80209ce8: 15 71                	addi	sp, sp, -224
ffffffff80209cea: 86 ed                	sd	ra, 216(sp)
ffffffff80209cec: aa e5                	sd	a0, 200(sp)
ffffffff80209cee: ae e9                	sd	a1, 208(sp)
ffffffff80209cf0: 2a ec                	sd	a0, 24(sp)
ffffffff80209cf2: 03 45 05 00          	lbu	a0, 0(a0)
ffffffff80209cf6: 01 46                	mv	a2, zero
ffffffff80209cf8: 2e e4                	sd	a1, 8(sp)
ffffffff80209cfa: 2a e0                	sd	a0, 0(sp)
ffffffff80209cfc: 63 09 c5 04          	beq	a0, a2, 82
ffffffff80209d00: 09 a0                	j	2
ffffffff80209d02: 05 45                	addi	a0, zero, 1
ffffffff80209d04: 82 65                	ld	a1, 0(sp)
ffffffff80209d06: 63 89 a5 06          	beq	a1, a0, 114
ffffffff80209d0a: 09 a0                	j	2
ffffffff80209d0c: 09 45                	addi	a0, zero, 2
ffffffff80209d0e: 82 65                	ld	a1, 0(sp)
ffffffff80209d10: 63 89 a5 08          	beq	a1, a0, 146
ffffffff80209d14: 09 a0                	j	2
ffffffff80209d16: 0d 45                	addi	a0, zero, 3
ffffffff80209d18: 82 65                	ld	a1, 0(sp)
ffffffff80209d1a: 63 89 a5 0a          	beq	a1, a0, 178
ffffffff80209d1e: 09 a0                	j	2
ffffffff80209d20: 11 45                	addi	a0, zero, 4
ffffffff80209d22: 82 65                	ld	a1, 0(sp)
ffffffff80209d24: 63 89 a5 0c          	beq	a1, a0, 210
ffffffff80209d28: 09 a0                	j	2
ffffffff80209d2a: 15 45                	addi	a0, zero, 5
ffffffff80209d2c: 82 65                	ld	a1, 0(sp)
ffffffff80209d2e: 63 89 a5 0e          	beq	a1, a0, 242
ffffffff80209d32: 09 a0                	j	2

ffffffff80209d34 .LBB6_30:
ffffffff80209d34: 17 56 00 00          	auipc	a2, 5
ffffffff80209d38: 13 06 c6 50          	addi	a2, a2, 1292
ffffffff80209d3c: 08 19                	addi	a0, sp, 176
ffffffff80209d3e: 9d 46                	addi	a3, zero, 7
ffffffff80209d40: a2 65                	ld	a1, 8(sp)
ffffffff80209d42: 97 10 00 00          	auipc	ra, 1
ffffffff80209d46: e7 80 80 5f          	jalr	1528(ra)
ffffffff80209d4a: 01 a2                	j	256
ffffffff80209d4c: 00 00                	unimp	

ffffffff80209d4e .LBB6_31:
ffffffff80209d4e: 17 36 00 00          	auipc	a2, 3
ffffffff80209d52: 13 06 a6 4d          	addi	a2, a2, 1242
ffffffff80209d56: 08 10                	addi	a0, sp, 32
ffffffff80209d58: a1 46                	addi	a3, zero, 8
ffffffff80209d5a: a2 65                	ld	a1, 8(sp)
ffffffff80209d5c: 97 10 00 00          	auipc	ra, 1
ffffffff80209d60: e7 80 e0 5d          	jalr	1502(ra)
ffffffff80209d64: 09 a0                	j	2
ffffffff80209d66: 08 10                	addi	a0, sp, 32
ffffffff80209d68: 97 10 00 00          	auipc	ra, 1
ffffffff80209d6c: e7 80 a0 ab          	jalr	-1350(ra)
ffffffff80209d70: a3 0b a1 00          	sb	a0, 23(sp)
ffffffff80209d74: 09 a0                	j	2
ffffffff80209d76: dd a0                	j	230

ffffffff80209d78 .LBB6_32:
ffffffff80209d78: 17 56 00 00          	auipc	a2, 5
ffffffff80209d7c: 13 06 56 50          	addi	a2, a2, 1285
ffffffff80209d80: 28 18                	addi	a0, sp, 56
ffffffff80209d82: b9 46                	addi	a3, zero, 14
ffffffff80209d84: a2 65                	ld	a1, 8(sp)
ffffffff80209d86: 97 10 00 00          	auipc	ra, 1
ffffffff80209d8a: e7 80 40 5b          	jalr	1460(ra)
ffffffff80209d8e: 09 a0                	j	2
ffffffff80209d90: 28 18                	addi	a0, sp, 56
ffffffff80209d92: 97 10 00 00          	auipc	ra, 1
ffffffff80209d96: e7 80 00 a9          	jalr	-1392(ra)
ffffffff80209d9a: a3 0b a1 00          	sb	a0, 23(sp)
ffffffff80209d9e: 09 a0                	j	2
ffffffff80209da0: 75 a8                	j	188

ffffffff80209da2 .LBB6_33:
ffffffff80209da2: 17 56 00 00          	auipc	a2, 5
ffffffff80209da6: 13 06 26 4d          	addi	a2, a2, 1234
ffffffff80209daa: 88 08                	addi	a0, sp, 80
ffffffff80209dac: a5 46                	addi	a3, zero, 9
ffffffff80209dae: a2 65                	ld	a1, 8(sp)
ffffffff80209db0: 97 10 00 00          	auipc	ra, 1
ffffffff80209db4: e7 80 a0 58          	jalr	1418(ra)
ffffffff80209db8: 09 a0                	j	2
ffffffff80209dba: 88 08                	addi	a0, sp, 80
ffffffff80209dbc: 97 10 00 00          	auipc	ra, 1
ffffffff80209dc0: e7 80 60 a6          	jalr	-1434(ra)
ffffffff80209dc4: a3 0b a1 00          	sb	a0, 23(sp)
ffffffff80209dc8: 09 a0                	j	2
ffffffff80209dca: 49 a8                	j	146

ffffffff80209dcc .LBB6_34:
ffffffff80209dcc: 17 56 00 00          	auipc	a2, 5
ffffffff80209dd0: 13 06 96 49          	addi	a2, a2, 1177
ffffffff80209dd4: a8 10                	addi	a0, sp, 104
ffffffff80209dd6: bd 46                	addi	a3, zero, 15
ffffffff80209dd8: a2 65                	ld	a1, 8(sp)
ffffffff80209dda: 97 10 00 00          	auipc	ra, 1
ffffffff80209dde: e7 80 00 56          	jalr	1376(ra)
ffffffff80209de2: 09 a0                	j	2
ffffffff80209de4: a8 10                	addi	a0, sp, 104
ffffffff80209de6: 97 10 00 00          	auipc	ra, 1
ffffffff80209dea: e7 80 c0 a3          	jalr	-1476(ra)
ffffffff80209dee: a3 0b a1 00          	sb	a0, 23(sp)
ffffffff80209df2: 09 a0                	j	2
ffffffff80209df4: a5 a0                	j	104

ffffffff80209df6 .LBB6_35:
ffffffff80209df6: 17 56 00 00          	auipc	a2, 5
ffffffff80209dfa: 13 06 36 46          	addi	a2, a2, 1123
ffffffff80209dfe: 08 01                	addi	a0, sp, 128
ffffffff80209e00: b1 46                	addi	a3, zero, 12
ffffffff80209e02: a2 65                	ld	a1, 8(sp)
ffffffff80209e04: 97 10 00 00          	auipc	ra, 1
ffffffff80209e08: e7 80 60 53          	jalr	1334(ra)
ffffffff80209e0c: 09 a0                	j	2
ffffffff80209e0e: 08 01                	addi	a0, sp, 128
ffffffff80209e10: 97 10 00 00          	auipc	ra, 1
ffffffff80209e14: e7 80 20 a1          	jalr	-1518(ra)
ffffffff80209e18: a3 0b a1 00          	sb	a0, 23(sp)
ffffffff80209e1c: 09 a0                	j	2
ffffffff80209e1e: 3d a8                	j	62

ffffffff80209e20 .LBB6_36:
ffffffff80209e20: 17 56 00 00          	auipc	a2, 5
ffffffff80209e24: 13 06 76 42          	addi	a2, a2, 1063
ffffffff80209e28: 28 09                	addi	a0, sp, 152
ffffffff80209e2a: c9 46                	addi	a3, zero, 18
ffffffff80209e2c: a2 65                	ld	a1, 8(sp)
ffffffff80209e2e: 97 10 00 00          	auipc	ra, 1
ffffffff80209e32: e7 80 c0 50          	jalr	1292(ra)
ffffffff80209e36: 09 a0                	j	2
ffffffff80209e38: 28 09                	addi	a0, sp, 152
ffffffff80209e3a: 97 10 00 00          	auipc	ra, 1
ffffffff80209e3e: e7 80 80 9e          	jalr	-1560(ra)
ffffffff80209e42: a3 0b a1 00          	sb	a0, 23(sp)
ffffffff80209e46: 09 a0                	j	2
ffffffff80209e48: 11 a8                	j	20
ffffffff80209e4a: 08 19                	addi	a0, sp, 176
ffffffff80209e4c: 97 10 00 00          	auipc	ra, 1
ffffffff80209e50: e7 80 60 9d          	jalr	-1578(ra)
ffffffff80209e54: a3 0b a1 00          	sb	a0, 23(sp)
ffffffff80209e58: 09 a0                	j	2
ffffffff80209e5a: 09 a0                	j	2
ffffffff80209e5c: 03 45 71 01          	lbu	a0, 23(sp)
ffffffff80209e60: ee 60                	ld	ra, 216(sp)
ffffffff80209e62: 2d 61                	addi	sp, sp, 224
ffffffff80209e64: 82 80                	ret

ffffffff80209e66 _ZN71_$LT$riscv..register..scause..Exception$u20$as$u20$core..fmt..Debug$GT$3fmt17h45d572c496ad7dc3E:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
ffffffff80209e66: 0d 71                	addi	sp, sp, -352
ffffffff80209e68: 86 ee                	sd	ra, 344(sp)
ffffffff80209e6a: aa e6                	sd	a0, 328(sp)
ffffffff80209e6c: ae ea                	sd	a1, 336(sp)
ffffffff80209e6e: 2a f0                	sd	a0, 32(sp)
ffffffff80209e70: 03 45 05 00          	lbu	a0, 0(a0)
ffffffff80209e74: 01 46                	mv	a2, zero
ffffffff80209e76: 2e e8                	sd	a1, 16(sp)
ffffffff80209e78: 2a e4                	sd	a0, 8(sp)
ffffffff80209e7a: 63 02 c5 08          	beq	a0, a2, 132
ffffffff80209e7e: 09 a0                	j	2
ffffffff80209e80: 05 45                	addi	a0, zero, 1
ffffffff80209e82: a2 65                	ld	a1, 8(sp)
ffffffff80209e84: 63 82 a5 0a          	beq	a1, a0, 164
ffffffff80209e88: 09 a0                	j	2
ffffffff80209e8a: 09 45                	addi	a0, zero, 2
ffffffff80209e8c: a2 65                	ld	a1, 8(sp)
ffffffff80209e8e: 63 82 a5 0c          	beq	a1, a0, 196
ffffffff80209e92: 09 a0                	j	2
ffffffff80209e94: 0d 45                	addi	a0, zero, 3
ffffffff80209e96: a2 65                	ld	a1, 8(sp)
ffffffff80209e98: 63 82 a5 0e          	beq	a1, a0, 228
ffffffff80209e9c: 09 a0                	j	2
ffffffff80209e9e: 11 45                	addi	a0, zero, 4
ffffffff80209ea0: a2 65                	ld	a1, 8(sp)
ffffffff80209ea2: 63 82 a5 10          	beq	a1, a0, 260
ffffffff80209ea6: 09 a0                	j	2
ffffffff80209ea8: 15 45                	addi	a0, zero, 5
ffffffff80209eaa: a2 65                	ld	a1, 8(sp)
ffffffff80209eac: 63 82 a5 12          	beq	a1, a0, 292
ffffffff80209eb0: 09 a0                	j	2
ffffffff80209eb2: 19 45                	addi	a0, zero, 6
ffffffff80209eb4: a2 65                	ld	a1, 8(sp)
ffffffff80209eb6: 63 82 a5 14          	beq	a1, a0, 324
ffffffff80209eba: 09 a0                	j	2
ffffffff80209ebc: 1d 45                	addi	a0, zero, 7
ffffffff80209ebe: a2 65                	ld	a1, 8(sp)
ffffffff80209ec0: 63 82 a5 16          	beq	a1, a0, 356
ffffffff80209ec4: 09 a0                	j	2
ffffffff80209ec6: 21 45                	addi	a0, zero, 8
ffffffff80209ec8: a2 65                	ld	a1, 8(sp)
ffffffff80209eca: 63 82 a5 18          	beq	a1, a0, 388
ffffffff80209ece: 09 a0                	j	2
ffffffff80209ed0: 25 45                	addi	a0, zero, 9
ffffffff80209ed2: a2 65                	ld	a1, 8(sp)
ffffffff80209ed4: 63 82 a5 1a          	beq	a1, a0, 420
ffffffff80209ed8: 09 a0                	j	2
ffffffff80209eda: 29 45                	addi	a0, zero, 10
ffffffff80209edc: a2 65                	ld	a1, 8(sp)
ffffffff80209ede: 63 82 a5 1c          	beq	a1, a0, 452
ffffffff80209ee2: 09 a0                	j	2

ffffffff80209ee4 .LBB7_50:
ffffffff80209ee4: 17 56 00 00          	auipc	a2, 5
ffffffff80209ee8: 13 06 c6 35          	addi	a2, a2, 860
ffffffff80209eec: 08 1a                	addi	a0, sp, 304
ffffffff80209eee: 9d 46                	addi	a3, zero, 7
ffffffff80209ef0: c2 65                	ld	a1, 16(sp)
ffffffff80209ef2: 97 10 00 00          	auipc	ra, 1
ffffffff80209ef6: e7 80 80 44          	jalr	1096(ra)
ffffffff80209efa: c9 aa                	j	466
ffffffff80209efc: 00 00                	unimp	

ffffffff80209efe .LBB7_51:
ffffffff80209efe: 17 56 00 00          	auipc	a2, 5
ffffffff80209f02: 13 06 56 40          	addi	a2, a2, 1029
ffffffff80209f06: 28 10                	addi	a0, sp, 40
ffffffff80209f08: d5 46                	addi	a3, zero, 21
ffffffff80209f0a: c2 65                	ld	a1, 16(sp)
ffffffff80209f0c: 97 10 00 00          	auipc	ra, 1
ffffffff80209f10: e7 80 e0 42          	jalr	1070(ra)
ffffffff80209f14: 09 a0                	j	2
ffffffff80209f16: 28 10                	addi	a0, sp, 40
ffffffff80209f18: 97 10 00 00          	auipc	ra, 1
ffffffff80209f1c: e7 80 a0 90          	jalr	-1782(ra)
ffffffff80209f20: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80209f24: 09 a0                	j	2
ffffffff80209f26: 65 aa                	j	440

ffffffff80209f28 .LBB7_52:
ffffffff80209f28: 17 46 00 00          	auipc	a2, 4
ffffffff80209f2c: 13 06 86 c9          	addi	a2, a2, -872
ffffffff80209f30: 88 00                	addi	a0, sp, 64
ffffffff80209f32: c1 46                	addi	a3, zero, 16
ffffffff80209f34: c2 65                	ld	a1, 16(sp)
ffffffff80209f36: 97 10 00 00          	auipc	ra, 1
ffffffff80209f3a: e7 80 40 40          	jalr	1028(ra)
ffffffff80209f3e: 09 a0                	j	2
ffffffff80209f40: 88 00                	addi	a0, sp, 64
ffffffff80209f42: 97 10 00 00          	auipc	ra, 1
ffffffff80209f46: e7 80 00 8e          	jalr	-1824(ra)
ffffffff80209f4a: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80209f4e: 09 a0                	j	2
ffffffff80209f50: 79 a2                	j	398

ffffffff80209f52 .LBB7_53:
ffffffff80209f52: 17 56 00 00          	auipc	a2, 5
ffffffff80209f56: 13 06 f6 39          	addi	a2, a2, 927
ffffffff80209f5a: a8 08                	addi	a0, sp, 88
ffffffff80209f5c: c9 46                	addi	a3, zero, 18
ffffffff80209f5e: c2 65                	ld	a1, 16(sp)
ffffffff80209f60: 97 10 00 00          	auipc	ra, 1
ffffffff80209f64: e7 80 a0 3d          	jalr	986(ra)
ffffffff80209f68: 09 a0                	j	2
ffffffff80209f6a: a8 08                	addi	a0, sp, 88
ffffffff80209f6c: 97 10 00 00          	auipc	ra, 1
ffffffff80209f70: e7 80 60 8b          	jalr	-1866(ra)
ffffffff80209f74: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80209f78: 09 a0                	j	2
ffffffff80209f7a: 95 a2                	j	356

ffffffff80209f7c .LBB7_54:
ffffffff80209f7c: 17 56 00 00          	auipc	a2, 5
ffffffff80209f80: 13 06 b6 36          	addi	a2, a2, 875
ffffffff80209f84: 88 18                	addi	a0, sp, 112
ffffffff80209f86: a9 46                	addi	a3, zero, 10
ffffffff80209f88: c2 65                	ld	a1, 16(sp)
ffffffff80209f8a: 97 10 00 00          	auipc	ra, 1
ffffffff80209f8e: e7 80 00 3b          	jalr	944(ra)
ffffffff80209f92: 09 a0                	j	2
ffffffff80209f94: 88 18                	addi	a0, sp, 112
ffffffff80209f96: 97 10 00 00          	auipc	ra, 1
ffffffff80209f9a: e7 80 c0 88          	jalr	-1908(ra)
ffffffff80209f9e: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80209fa2: 09 a0                	j	2
ffffffff80209fa4: 2d aa                	j	314

ffffffff80209fa6 .LBB7_55:
ffffffff80209fa6: 17 56 00 00          	auipc	a2, 5
ffffffff80209faa: 13 06 86 33          	addi	a2, a2, 824
ffffffff80209fae: 28 01                	addi	a0, sp, 136
ffffffff80209fb0: a5 46                	addi	a3, zero, 9
ffffffff80209fb2: c2 65                	ld	a1, 16(sp)
ffffffff80209fb4: 97 10 00 00          	auipc	ra, 1
ffffffff80209fb8: e7 80 60 38          	jalr	902(ra)
ffffffff80209fbc: 09 a0                	j	2
ffffffff80209fbe: 28 01                	addi	a0, sp, 136
ffffffff80209fc0: 97 10 00 00          	auipc	ra, 1
ffffffff80209fc4: e7 80 20 86          	jalr	-1950(ra)
ffffffff80209fc8: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80209fcc: 09 a0                	j	2
ffffffff80209fce: 01 aa                	j	272

ffffffff80209fd0 .LBB7_56:
ffffffff80209fd0: 17 56 00 00          	auipc	a2, 5
ffffffff80209fd4: 13 06 f6 2f          	addi	a2, a2, 767
ffffffff80209fd8: 08 11                	addi	a0, sp, 160
ffffffff80209fda: bd 46                	addi	a3, zero, 15
ffffffff80209fdc: c2 65                	ld	a1, 16(sp)
ffffffff80209fde: 97 10 00 00          	auipc	ra, 1
ffffffff80209fe2: e7 80 c0 35          	jalr	860(ra)
ffffffff80209fe6: 09 a0                	j	2
ffffffff80209fe8: 08 11                	addi	a0, sp, 160
ffffffff80209fea: 97 10 00 00          	auipc	ra, 1
ffffffff80209fee: e7 80 80 83          	jalr	-1992(ra)
ffffffff80209ff2: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff80209ff6: 09 a0                	j	2
ffffffff80209ff8: dd a0                	j	230

ffffffff80209ffa .LBB7_57:
ffffffff80209ffa: 17 56 00 00          	auipc	a2, 5
ffffffff80209ffe: 13 06 b6 2c          	addi	a2, a2, 715
ffffffff8020a002: 28 19                	addi	a0, sp, 184
ffffffff8020a004: a9 46                	addi	a3, zero, 10
ffffffff8020a006: c2 65                	ld	a1, 16(sp)
ffffffff8020a008: 97 10 00 00          	auipc	ra, 1
ffffffff8020a00c: e7 80 20 33          	jalr	818(ra)
ffffffff8020a010: 09 a0                	j	2
ffffffff8020a012: 28 19                	addi	a0, sp, 184
ffffffff8020a014: 97 10 00 00          	auipc	ra, 1
ffffffff8020a018: e7 80 e0 80          	jalr	-2034(ra)
ffffffff8020a01c: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff8020a020: 09 a0                	j	2
ffffffff8020a022: 75 a8                	j	188

ffffffff8020a024 .LBB7_58:
ffffffff8020a024: 17 56 00 00          	auipc	a2, 5
ffffffff8020a028: 13 06 66 29          	addi	a2, a2, 662
ffffffff8020a02c: 88 09                	addi	a0, sp, 208
ffffffff8020a02e: ad 46                	addi	a3, zero, 11
ffffffff8020a030: c2 65                	ld	a1, 16(sp)
ffffffff8020a032: 97 10 00 00          	auipc	ra, 1
ffffffff8020a036: e7 80 80 30          	jalr	776(ra)
ffffffff8020a03a: 09 a0                	j	2
ffffffff8020a03c: 88 09                	addi	a0, sp, 208
ffffffff8020a03e: 97 00 00 00          	auipc	ra, 0
ffffffff8020a042: e7 80 40 7e          	jalr	2020(ra)
ffffffff8020a046: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff8020a04a: 09 a0                	j	2
ffffffff8020a04c: 49 a8                	j	146

ffffffff8020a04e .LBB7_59:
ffffffff8020a04e: 17 56 00 00          	auipc	a2, 5
ffffffff8020a052: 13 06 86 25          	addi	a2, a2, 600
ffffffff8020a056: a8 11                	addi	a0, sp, 232
ffffffff8020a058: d1 46                	addi	a3, zero, 20
ffffffff8020a05a: c2 65                	ld	a1, 16(sp)
ffffffff8020a05c: 97 10 00 00          	auipc	ra, 1
ffffffff8020a060: e7 80 e0 2d          	jalr	734(ra)
ffffffff8020a064: 09 a0                	j	2
ffffffff8020a066: a8 11                	addi	a0, sp, 232
ffffffff8020a068: 97 00 00 00          	auipc	ra, 0
ffffffff8020a06c: e7 80 a0 7b          	jalr	1978(ra)
ffffffff8020a070: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff8020a074: 09 a0                	j	2
ffffffff8020a076: a5 a0                	j	104

ffffffff8020a078 .LBB7_60:
ffffffff8020a078: 17 56 00 00          	auipc	a2, 5
ffffffff8020a07c: 13 06 16 22          	addi	a2, a2, 545
ffffffff8020a080: 08 02                	addi	a0, sp, 256
ffffffff8020a082: b5 46                	addi	a3, zero, 13
ffffffff8020a084: c2 65                	ld	a1, 16(sp)
ffffffff8020a086: 97 10 00 00          	auipc	ra, 1
ffffffff8020a08a: e7 80 40 2b          	jalr	692(ra)
ffffffff8020a08e: 09 a0                	j	2
ffffffff8020a090: 08 02                	addi	a0, sp, 256
ffffffff8020a092: 97 00 00 00          	auipc	ra, 0
ffffffff8020a096: e7 80 00 79          	jalr	1936(ra)
ffffffff8020a09a: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff8020a09e: 09 a0                	j	2
ffffffff8020a0a0: 3d a8                	j	62

ffffffff8020a0a2 .LBB7_61:
ffffffff8020a0a2: 17 56 00 00          	auipc	a2, 5
ffffffff8020a0a6: 13 06 96 1e          	addi	a2, a2, 489
ffffffff8020a0aa: 28 0a                	addi	a0, sp, 280
ffffffff8020a0ac: b9 46                	addi	a3, zero, 14
ffffffff8020a0ae: c2 65                	ld	a1, 16(sp)
ffffffff8020a0b0: 97 10 00 00          	auipc	ra, 1
ffffffff8020a0b4: e7 80 a0 28          	jalr	650(ra)
ffffffff8020a0b8: 09 a0                	j	2
ffffffff8020a0ba: 28 0a                	addi	a0, sp, 280
ffffffff8020a0bc: 97 00 00 00          	auipc	ra, 0
ffffffff8020a0c0: e7 80 60 76          	jalr	1894(ra)
ffffffff8020a0c4: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff8020a0c8: 09 a0                	j	2
ffffffff8020a0ca: 11 a8                	j	20
ffffffff8020a0cc: 08 1a                	addi	a0, sp, 304
ffffffff8020a0ce: 97 00 00 00          	auipc	ra, 0
ffffffff8020a0d2: e7 80 40 75          	jalr	1876(ra)
ffffffff8020a0d6: a3 0f a1 00          	sb	a0, 31(sp)
ffffffff8020a0da: 09 a0                	j	2
ffffffff8020a0dc: 09 a0                	j	2
ffffffff8020a0de: 03 45 f1 01          	lbu	a0, 31(sp)
ffffffff8020a0e2: f6 60                	ld	ra, 344(sp)
ffffffff8020a0e4: 35 61                	addi	sp, sp, 352
ffffffff8020a0e6: 82 80                	ret

ffffffff8020a0e8 _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7e95f1f217f693c2E:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
ffffffff8020a0e8: 39 71                	addi	sp, sp, -64
ffffffff8020a0ea: 06 fc                	sd	ra, 56(sp)
ffffffff8020a0ec: 2a f4                	sd	a0, 40(sp)
ffffffff8020a0ee: 2e f8                	sd	a1, 48(sp)
;                 if f.debug_lower_hex() {
ffffffff8020a0f0: 2a ec                	sd	a0, 24(sp)
ffffffff8020a0f2: 2e 85                	add	a0, zero, a1
ffffffff8020a0f4: 2e e8                	sd	a1, 16(sp)
ffffffff8020a0f6: 97 10 00 00          	auipc	ra, 1
ffffffff8020a0fa: e7 80 00 20          	jalr	512(ra)
ffffffff8020a0fe: 2a e4                	sd	a0, 8(sp)
ffffffff8020a100: 09 a0                	j	2
ffffffff8020a102: 22 65                	ld	a0, 8(sp)
ffffffff8020a104: 09 e9                	bnez	a0, 18
ffffffff8020a106: 09 a0                	j	2
;                 } else if f.debug_upper_hex() {
ffffffff8020a108: 42 65                	ld	a0, 16(sp)
ffffffff8020a10a: 97 10 00 00          	auipc	ra, 1
ffffffff8020a10e: e7 80 60 1f          	jalr	502(ra)
ffffffff8020a112: 2a e0                	sd	a0, 0(sp)
ffffffff8020a114: 19 a8                	j	22
;                     fmt::LowerHex::fmt(self, f)
ffffffff8020a116: 62 65                	ld	a0, 24(sp)
ffffffff8020a118: c2 65                	ld	a1, 16(sp)
ffffffff8020a11a: 97 20 00 00          	auipc	ra, 2
ffffffff8020a11e: e7 80 c0 cf          	jalr	-772(ra)
ffffffff8020a122: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff8020a126: 09 a0                	j	2
;                 if f.debug_lower_hex() {
ffffffff8020a128: 0d a8                	j	50
;                 } else if f.debug_upper_hex() {
ffffffff8020a12a: 02 65                	ld	a0, 0(sp)
ffffffff8020a12c: 19 e9                	bnez	a0, 22
ffffffff8020a12e: 09 a0                	j	2
;                     fmt::Display::fmt(self, f)
ffffffff8020a130: 62 65                	ld	a0, 24(sp)
ffffffff8020a132: c2 65                	ld	a1, 16(sp)
ffffffff8020a134: 97 20 00 00          	auipc	ra, 2
ffffffff8020a138: e7 80 40 fb          	jalr	-76(ra)
ffffffff8020a13c: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff8020a140: 19 a8                	j	22
;                     fmt::UpperHex::fmt(self, f)
ffffffff8020a142: 62 65                	ld	a0, 24(sp)
ffffffff8020a144: c2 65                	ld	a1, 16(sp)
ffffffff8020a146: 97 20 00 00          	auipc	ra, 2
ffffffff8020a14a: e7 80 00 d5          	jalr	-688(ra)
ffffffff8020a14e: a3 03 a1 02          	sb	a0, 39(sp)
ffffffff8020a152: 09 a0                	j	2
;                 } else if f.debug_upper_hex() {
ffffffff8020a154: 11 a0                	j	4
ffffffff8020a156: 09 a0                	j	2
;                 if f.debug_lower_hex() {
ffffffff8020a158: 09 a0                	j	2
;             }
ffffffff8020a15a: 03 45 71 02          	lbu	a0, 39(sp)
ffffffff8020a15e: e2 70                	ld	ra, 56(sp)
ffffffff8020a160: 21 61                	addi	sp, sp, 64
ffffffff8020a162: 82 80                	ret

ffffffff8020a164 _ZN4core3ptr13drop_in_place17h0ae23b659442b0aaE:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
ffffffff8020a164: 41 11                	addi	sp, sp, -16
ffffffff8020a166: 2a e4                	sd	a0, 8(sp)
ffffffff8020a168: 41 01                	addi	sp, sp, 16
ffffffff8020a16a: 82 80                	ret

ffffffff8020a16c _ZN4core3ptr13drop_in_place17he84a03d8f0fdcdbbE:
ffffffff8020a16c: 41 11                	addi	sp, sp, -16
ffffffff8020a16e: 2a e4                	sd	a0, 8(sp)
ffffffff8020a170: 41 01                	addi	sp, sp, 16
ffffffff8020a172: 82 80                	ret

ffffffff8020a174 _ZN4core3ptr13drop_in_place17he9a637a3116858adE:
ffffffff8020a174: 41 11                	addi	sp, sp, -16
ffffffff8020a176: 2a e4                	sd	a0, 8(sp)
ffffffff8020a178: 41 01                	addi	sp, sp, 16
ffffffff8020a17a: 82 80                	ret

ffffffff8020a17c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hcd14be12fcf7d305E:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
ffffffff8020a17c: 01 11                	addi	sp, sp, -32
ffffffff8020a17e: 06 ec                	sd	ra, 24(sp)
ffffffff8020a180: 2a e4                	sd	a0, 8(sp)
ffffffff8020a182: 2e e8                	sd	a1, 16(sp)
ffffffff8020a184: 08 61                	ld	a0, 0(a0)
ffffffff8020a186: 97 00 00 00          	auipc	ra, 0
ffffffff8020a18a: e7 80 20 f6          	jalr	-158(ra)
ffffffff8020a18e: 2a e0                	sd	a0, 0(sp)
ffffffff8020a190: 09 a0                	j	2
ffffffff8020a192: 02 65                	ld	a0, 0(sp)
ffffffff8020a194: e2 60                	ld	ra, 24(sp)
ffffffff8020a196: 05 61                	addi	sp, sp, 32
ffffffff8020a198: 82 80                	ret

ffffffff8020a19a _ZN70_$LT$riscv..register..sstatus..Sstatus$u20$as$u20$core..fmt..Debug$GT$3fmt17h8fc2c3332591bdd8E:
; #[derive(Clone, Copy, Debug)]
ffffffff8020a19a: 5d 71                	addi	sp, sp, -80
ffffffff8020a19c: 86 e4                	sd	ra, 72(sp)
ffffffff8020a19e: 2a f8                	sd	a0, 48(sp)
ffffffff8020a1a0: 2e fc                	sd	a1, 56(sp)
;     bits: usize,
ffffffff8020a1a2: aa e0                	sd	a0, 64(sp)

ffffffff8020a1a4 .LBB15_4:
; #[derive(Clone, Copy, Debug)]
ffffffff8020a1a4: 17 56 00 00          	auipc	a2, 5
ffffffff8020a1a8: 13 06 46 17          	addi	a2, a2, 372
ffffffff8020a1ac: 34 08                	addi	a3, sp, 24
ffffffff8020a1ae: 1d 47                	addi	a4, zero, 7
ffffffff8020a1b0: 2a e8                	sd	a0, 16(sp)
ffffffff8020a1b2: 36 85                	add	a0, zero, a3
ffffffff8020a1b4: ba 86                	add	a3, zero, a4
ffffffff8020a1b6: 97 10 00 00          	auipc	ra, 1
ffffffff8020a1ba: e7 80 60 15          	jalr	342(ra)
ffffffff8020a1be: 09 a0                	j	2
;     bits: usize,
ffffffff8020a1c0: 42 65                	ld	a0, 16(sp)
ffffffff8020a1c2: 2a f4                	sd	a0, 40(sp)

ffffffff8020a1c4 .LBB15_5:
; #[derive(Clone, Copy, Debug)]
ffffffff8020a1c4: 97 35 00 00          	auipc	a1, 3
ffffffff8020a1c8: 93 85 45 f7          	addi	a1, a1, -140

ffffffff8020a1cc .LBB15_6:
ffffffff8020a1cc: 17 57 00 00          	auipc	a4, 5
ffffffff8020a1d0: 13 07 47 15          	addi	a4, a4, 340
ffffffff8020a1d4: 28 08                	addi	a0, sp, 24
ffffffff8020a1d6: 11 46                	addi	a2, zero, 4
ffffffff8020a1d8: 34 10                	addi	a3, sp, 40
ffffffff8020a1da: 97 00 00 00          	auipc	ra, 0
ffffffff8020a1de: e7 80 e0 3a          	jalr	942(ra)
ffffffff8020a1e2: 09 a0                	j	2
ffffffff8020a1e4: 28 08                	addi	a0, sp, 24
ffffffff8020a1e6: 97 00 00 00          	auipc	ra, 0
ffffffff8020a1ea: e7 80 a0 4f          	jalr	1274(ra)
ffffffff8020a1ee: 2a e4                	sd	a0, 8(sp)
ffffffff8020a1f0: 09 a0                	j	2
ffffffff8020a1f2: 22 65                	ld	a0, 8(sp)
ffffffff8020a1f4: a6 60                	ld	ra, 72(sp)
ffffffff8020a1f6: 61 61                	addi	sp, sp, 80
ffffffff8020a1f8: 82 80                	ret

ffffffff8020a1fa _ZN5alloc5alloc18handle_alloc_error17h4c810f2f0bf4d02eE:
ffffffff8020a1fa: 41 11                	addi	sp, sp, -16
ffffffff8020a1fc: 06 e4                	sd	ra, 8(sp)
ffffffff8020a1fe: 97 60 ff ff          	auipc	ra, 1048566
ffffffff8020a202: e7 80 00 01          	jalr	16(ra)
ffffffff8020a206: 00 00                	unimp	

ffffffff8020a208 _ZN5alloc7raw_vec17capacity_overflow17h04e69de28881a0cfE:
ffffffff8020a208: 41 11                	addi	sp, sp, -16
ffffffff8020a20a: 06 e4                	sd	ra, 8(sp)

ffffffff8020a20c .LBB20_1:
ffffffff8020a20c: 17 55 00 00          	auipc	a0, 5
ffffffff8020a210: 13 05 b5 14          	addi	a0, a0, 331

ffffffff8020a214 .LBB20_2:
ffffffff8020a214: 17 56 00 00          	auipc	a2, 5
ffffffff8020a218: 13 06 46 15          	addi	a2, a2, 340
ffffffff8020a21c: c5 45                	addi	a1, zero, 17
ffffffff8020a21e: 97 00 00 00          	auipc	ra, 0
ffffffff8020a222: e7 80 a0 11          	jalr	282(ra)
ffffffff8020a226: 00 00                	unimp	

ffffffff8020a228 _ZN4core3ops8function6FnOnce9call_once17h18f451d4e9740791E:
ffffffff8020a228: 08 61                	ld	a0, 0(a0)
ffffffff8020a22a: 01 a0                	j	0

ffffffff8020a22c _ZN4core3ptr13drop_in_place17h00027e84e2978af7E:
ffffffff8020a22c: 82 80                	ret

ffffffff8020a22e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5b56fd9706c86594E:
ffffffff8020a22e: 5d 71                	addi	sp, sp, -80
ffffffff8020a230: 86 e4                	sd	ra, 72(sp)
ffffffff8020a232: a2 e0                	sd	s0, 64(sp)
ffffffff8020a234: 26 fc                	sd	s1, 56(sp)
ffffffff8020a236: 2e 84                	add	s0, zero, a1
ffffffff8020a238: aa 84                	add	s1, zero, a0
ffffffff8020a23a: 97 20 00 00          	auipc	ra, 2
ffffffff8020a23e: e7 80 80 9e          	jalr	-1560(ra)
ffffffff8020a242: 1d e5                	bnez	a0, 46
ffffffff8020a244: 08 70                	ld	a0, 32(s0)
ffffffff8020a246: 0c 74                	ld	a1, 40(s0)

ffffffff8020a248 .LBB76_4:
ffffffff8020a248: 17 56 00 00          	auipc	a2, 5
ffffffff8020a24c: 13 06 06 18          	addi	a2, a2, 384
ffffffff8020a250: 32 e4                	sd	a2, 8(sp)
ffffffff8020a252: 05 46                	addi	a2, zero, 1
ffffffff8020a254: 32 e8                	sd	a2, 16(sp)
ffffffff8020a256: 02 ec                	sd	zero, 24(sp)

ffffffff8020a258 .LBB76_5:
ffffffff8020a258: 17 56 00 00          	auipc	a2, 5
ffffffff8020a25c: 13 06 86 16          	addi	a2, a2, 360
ffffffff8020a260: 32 f4                	sd	a2, 40(sp)
ffffffff8020a262: 02 f8                	sd	zero, 48(sp)
ffffffff8020a264: 30 00                	addi	a2, sp, 8
ffffffff8020a266: 97 10 00 00          	auipc	ra, 1
ffffffff8020a26a: e7 80 a0 9c          	jalr	-1590(ra)
ffffffff8020a26e: 19 c5                	beqz	a0, 14
ffffffff8020a270: 05 45                	addi	a0, zero, 1
ffffffff8020a272: e2 74                	ld	s1, 56(sp)
ffffffff8020a274: 06 64                	ld	s0, 64(sp)
ffffffff8020a276: a6 60                	ld	ra, 72(sp)
ffffffff8020a278: 61 61                	addi	sp, sp, 80
ffffffff8020a27a: 82 80                	ret
ffffffff8020a27c: 13 85 84 00          	addi	a0, s1, 8
ffffffff8020a280: a2 85                	add	a1, zero, s0
ffffffff8020a282: e2 74                	ld	s1, 56(sp)
ffffffff8020a284: 06 64                	ld	s0, 64(sp)
ffffffff8020a286: a6 60                	ld	ra, 72(sp)
ffffffff8020a288: 61 61                	addi	sp, sp, 80
ffffffff8020a28a: 17 23 00 00          	auipc	t1, 2
ffffffff8020a28e: 67 00 83 99          	jr	-1640(t1)

ffffffff8020a292 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hc8534dacc0949383E:
ffffffff8020a292: 37 85 a7 fa          	lui	a0, 1026680
ffffffff8020a296: 1b 05 d5 32          	addiw	a0, a0, 813
ffffffff8020a29a: 32 05                	slli	a0, a0, 12
ffffffff8020a29c: 13 05 d5 5b          	addi	a0, a0, 1469
ffffffff8020a2a0: 32 05                	slli	a0, a0, 12
ffffffff8020a2a2: 13 05 b5 58          	addi	a0, a0, 1419
ffffffff8020a2a6: 32 05                	slli	a0, a0, 12
ffffffff8020a2a8: 13 05 b5 48          	addi	a0, a0, 1163
ffffffff8020a2ac: 82 80                	ret

ffffffff8020a2ae _ZN4core6option13expect_failed17h1e072b597c05d52eE:
ffffffff8020a2ae: 1d 71                	addi	sp, sp, -96
ffffffff8020a2b0: 86 ec                	sd	ra, 88(sp)
ffffffff8020a2b2: 2a e4                	sd	a0, 8(sp)
ffffffff8020a2b4: 2e e8                	sd	a1, 16(sp)
ffffffff8020a2b6: 28 00                	addi	a0, sp, 8
ffffffff8020a2b8: aa e4                	sd	a0, 72(sp)

ffffffff8020a2ba .LBB116_1:
ffffffff8020a2ba: 17 25 00 00          	auipc	a0, 2
ffffffff8020a2be: 13 05 c5 e6          	addi	a0, a0, -404
ffffffff8020a2c2: aa e8                	sd	a0, 80(sp)

ffffffff8020a2c4 .LBB116_2:
ffffffff8020a2c4: 17 55 00 00          	auipc	a0, 5
ffffffff8020a2c8: 13 05 45 14          	addi	a0, a0, 324
ffffffff8020a2cc: 2a ec                	sd	a0, 24(sp)
ffffffff8020a2ce: 05 45                	addi	a0, zero, 1
ffffffff8020a2d0: 2a f0                	sd	a0, 32(sp)
ffffffff8020a2d2: 02 f4                	sd	zero, 40(sp)
ffffffff8020a2d4: ac 00                	addi	a1, sp, 72
ffffffff8020a2d6: 2e fc                	sd	a1, 56(sp)
ffffffff8020a2d8: aa e0                	sd	a0, 64(sp)
ffffffff8020a2da: 28 08                	addi	a0, sp, 24
ffffffff8020a2dc: b2 85                	add	a1, zero, a2
ffffffff8020a2de: 97 00 00 00          	auipc	ra, 0
ffffffff8020a2e2: e7 80 60 0c          	jalr	198(ra)
ffffffff8020a2e6: 00 00                	unimp	

ffffffff8020a2e8 _ZN4core6result13unwrap_failed17hfee963a945caf0a4E:
ffffffff8020a2e8: 19 71                	addi	sp, sp, -128
ffffffff8020a2ea: 86 fc                	sd	ra, 120(sp)
ffffffff8020a2ec: 2a e4                	sd	a0, 8(sp)
ffffffff8020a2ee: 2e e8                	sd	a1, 16(sp)
ffffffff8020a2f0: 32 ec                	sd	a2, 24(sp)
ffffffff8020a2f2: 36 f0                	sd	a3, 32(sp)
ffffffff8020a2f4: 28 00                	addi	a0, sp, 8
ffffffff8020a2f6: aa ec                	sd	a0, 88(sp)

ffffffff8020a2f8 .LBB117_1:
ffffffff8020a2f8: 17 25 00 00          	auipc	a0, 2
ffffffff8020a2fc: 13 05 e5 e2          	addi	a0, a0, -466
ffffffff8020a300: aa f0                	sd	a0, 96(sp)
ffffffff8020a302: 28 08                	addi	a0, sp, 24
ffffffff8020a304: aa f4                	sd	a0, 104(sp)

ffffffff8020a306 .LBB117_2:
ffffffff8020a306: 17 25 00 00          	auipc	a0, 2
ffffffff8020a30a: 13 05 85 e1          	addi	a0, a0, -488
ffffffff8020a30e: aa f8                	sd	a0, 112(sp)

ffffffff8020a310 .LBB117_3:
ffffffff8020a310: 17 55 00 00          	auipc	a0, 5
ffffffff8020a314: 13 05 05 11          	addi	a0, a0, 272
ffffffff8020a318: 2a f4                	sd	a0, 40(sp)
ffffffff8020a31a: 09 45                	addi	a0, zero, 2
ffffffff8020a31c: 2a f8                	sd	a0, 48(sp)
ffffffff8020a31e: 02 fc                	sd	zero, 56(sp)
ffffffff8020a320: ac 08                	addi	a1, sp, 88
ffffffff8020a322: ae e4                	sd	a1, 72(sp)
ffffffff8020a324: aa e8                	sd	a0, 80(sp)
ffffffff8020a326: 28 10                	addi	a0, sp, 40
ffffffff8020a328: ba 85                	add	a1, zero, a4
ffffffff8020a32a: 97 00 00 00          	auipc	ra, 0
ffffffff8020a32e: e7 80 a0 07          	jalr	122(ra)
ffffffff8020a332: 00 00                	unimp	

ffffffff8020a334 _ZN4core5panic9PanicInfo7message17h784f4369f0e35bc0E:
ffffffff8020a334: 08 69                	ld	a0, 16(a0)
ffffffff8020a336: 82 80                	ret

ffffffff8020a338 _ZN4core9panicking5panic17hada9984cc1d6f2faE:
ffffffff8020a338: 5d 71                	addi	sp, sp, -80
ffffffff8020a33a: 86 e4                	sd	ra, 72(sp)
ffffffff8020a33c: 2a fc                	sd	a0, 56(sp)
ffffffff8020a33e: ae e0                	sd	a1, 64(sp)
ffffffff8020a340: 28 18                	addi	a0, sp, 56
ffffffff8020a342: 2a e4                	sd	a0, 8(sp)
ffffffff8020a344: 05 45                	addi	a0, zero, 1
ffffffff8020a346: 2a e8                	sd	a0, 16(sp)
ffffffff8020a348: 02 ec                	sd	zero, 24(sp)

ffffffff8020a34a .LBB128_1:
ffffffff8020a34a: 17 55 00 00          	auipc	a0, 5
ffffffff8020a34e: 13 05 65 07          	addi	a0, a0, 118
ffffffff8020a352: 2a f4                	sd	a0, 40(sp)
ffffffff8020a354: 02 f8                	sd	zero, 48(sp)
ffffffff8020a356: 28 00                	addi	a0, sp, 8
ffffffff8020a358: b2 85                	add	a1, zero, a2
ffffffff8020a35a: 97 00 00 00          	auipc	ra, 0
ffffffff8020a35e: e7 80 a0 04          	jalr	74(ra)
ffffffff8020a362: 00 00                	unimp	

ffffffff8020a364 _ZN4core9panicking18panic_bounds_check17hb127dc4cc37fde7aE:
ffffffff8020a364: 59 71                	addi	sp, sp, -112
ffffffff8020a366: 86 f4                	sd	ra, 104(sp)
ffffffff8020a368: 2a e4                	sd	a0, 8(sp)
ffffffff8020a36a: 2e e8                	sd	a1, 16(sp)
ffffffff8020a36c: 08 08                	addi	a0, sp, 16
ffffffff8020a36e: aa e4                	sd	a0, 72(sp)

ffffffff8020a370 .LBB129_1:
ffffffff8020a370: 17 25 00 00          	auipc	a0, 2
ffffffff8020a374: 13 05 85 d7          	addi	a0, a0, -648
ffffffff8020a378: aa e8                	sd	a0, 80(sp)
ffffffff8020a37a: 2c 00                	addi	a1, sp, 8
ffffffff8020a37c: ae ec                	sd	a1, 88(sp)
ffffffff8020a37e: aa f0                	sd	a0, 96(sp)

ffffffff8020a380 .LBB129_2:
ffffffff8020a380: 17 55 00 00          	auipc	a0, 5
ffffffff8020a384: 13 05 85 0f          	addi	a0, a0, 248
ffffffff8020a388: 2a ec                	sd	a0, 24(sp)
ffffffff8020a38a: 09 45                	addi	a0, zero, 2
ffffffff8020a38c: 2a f0                	sd	a0, 32(sp)
ffffffff8020a38e: 02 f4                	sd	zero, 40(sp)
ffffffff8020a390: ac 00                	addi	a1, sp, 72
ffffffff8020a392: 2e fc                	sd	a1, 56(sp)
ffffffff8020a394: aa e0                	sd	a0, 64(sp)
ffffffff8020a396: 28 08                	addi	a0, sp, 24
ffffffff8020a398: b2 85                	add	a1, zero, a2
ffffffff8020a39a: 97 00 00 00          	auipc	ra, 0
ffffffff8020a39e: e7 80 a0 00          	jalr	10(ra)
ffffffff8020a3a2: 00 00                	unimp	

ffffffff8020a3a4 _ZN4core9panicking9panic_fmt17h2f823c72a23f8e31E:
ffffffff8020a3a4: 79 71                	addi	sp, sp, -48
ffffffff8020a3a6: 06 f4                	sd	ra, 40(sp)

ffffffff8020a3a8 .LBB130_1:
ffffffff8020a3a8: 17 56 00 00          	auipc	a2, 5
ffffffff8020a3ac: 13 06 86 01          	addi	a2, a2, 24
ffffffff8020a3b0: 32 e4                	sd	a2, 8(sp)

ffffffff8020a3b2 .LBB130_2:
ffffffff8020a3b2: 17 56 00 00          	auipc	a2, 5
ffffffff8020a3b6: 13 06 e6 08          	addi	a2, a2, 142
ffffffff8020a3ba: 32 e8                	sd	a2, 16(sp)
ffffffff8020a3bc: 2a ec                	sd	a0, 24(sp)
ffffffff8020a3be: 2e f0                	sd	a1, 32(sp)
ffffffff8020a3c0: 28 00                	addi	a0, sp, 8
ffffffff8020a3c2: 97 90 ff ff          	auipc	ra, 1048569
ffffffff8020a3c6: e7 80 60 8e          	jalr	-1818(ra)
ffffffff8020a3ca: 00 00                	unimp	

ffffffff8020a3cc _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17he3aedd4f3d080c40E:
ffffffff8020a3cc: 35 71                	addi	sp, sp, -160
ffffffff8020a3ce: 06 ed                	sd	ra, 152(sp)
ffffffff8020a3d0: 22 e9                	sd	s0, 144(sp)
ffffffff8020a3d2: 26 e5                	sd	s1, 136(sp)
ffffffff8020a3d4: 4a e1                	sd	s2, 128(sp)
ffffffff8020a3d6: ce fc                	sd	s3, 120(sp)
ffffffff8020a3d8: d2 f8                	sd	s4, 112(sp)
ffffffff8020a3da: d6 f4                	sd	s5, 104(sp)
ffffffff8020a3dc: da f0                	sd	s6, 96(sp)
ffffffff8020a3de: de ec                	sd	s7, 88(sp)
ffffffff8020a3e0: e2 e8                	sd	s8, 80(sp)
ffffffff8020a3e2: e6 e4                	sd	s9, 72(sp)
ffffffff8020a3e4: ea e0                	sd	s10, 64(sp)
ffffffff8020a3e6: 6e fc                	sd	s11, 56(sp)
ffffffff8020a3e8: 63 09 06 12          	beqz	a2, 306
ffffffff8020a3ec: b2 8d                	add	s11, zero, a2
ffffffff8020a3ee: ae 8a                	add	s5, zero, a1
ffffffff8020a3f0: 2a 89                	add	s2, zero, a0
ffffffff8020a3f2: 13 0b 81 00          	addi	s6, sp, 8
ffffffff8020a3f6: 93 09 cb 02          	addi	s3, s6, 44
ffffffff8020a3fa: 95 4b                	addi	s7, zero, 5
ffffffff8020a3fc: 13 95 1b 02          	slli	a0, s7, 33
ffffffff8020a400: 13 0c a5 00          	addi	s8, a0, 10
ffffffff8020a404: 85 4c                	addi	s9, zero, 1

ffffffff8020a406 .LBB132_31:
ffffffff8020a406: 17 35 00 00          	auipc	a0, 3
ffffffff8020a40a: 13 05 e5 d1          	addi	a0, a0, -738
ffffffff8020a40e: 2a e0                	sd	a0, 0(sp)
ffffffff8020a410: 31 a0                	j	12
ffffffff8020a412: b3 8d 8d 40          	sub	s11, s11, s0
ffffffff8020a416: ea 8a                	add	s5, zero, s10
ffffffff8020a418: 63 81 0d 10          	beqz	s11, 258
ffffffff8020a41c: 03 35 09 01          	ld	a0, 16(s2)
ffffffff8020a420: 03 45 05 00          	lbu	a0, 0(a0)
ffffffff8020a424: 11 c9                	beqz	a0, 20
ffffffff8020a426: 83 35 89 00          	ld	a1, 8(s2)
ffffffff8020a42a: 03 35 09 00          	ld	a0, 0(s2)
ffffffff8020a42e: 94 6d                	ld	a3, 24(a1)
ffffffff8020a430: 11 46                	addi	a2, zero, 4
ffffffff8020a432: 82 65                	ld	a1, 0(sp)
ffffffff8020a434: 82 96                	jalr	a3
ffffffff8020a436: 65 e5                	bnez	a0, 232
ffffffff8020a438: 56 e4                	sd	s5, 8(sp)
ffffffff8020a43a: 6e e8                	sd	s11, 16(sp)
ffffffff8020a43c: 02 ec                	sd	zero, 24(sp)
ffffffff8020a43e: 6e f0                	sd	s11, 32(sp)
ffffffff8020a440: 62 f8                	sd	s8, 48(sp)
ffffffff8020a442: 66 f4                	sd	s9, 40(sp)
ffffffff8020a444: 29 45                	addi	a0, zero, 10
ffffffff8020a446: d6 85                	add	a1, zero, s5
ffffffff8020a448: 6e 86                	add	a2, zero, s11
ffffffff8020a44a: 97 10 00 00          	auipc	ra, 1
ffffffff8020a44e: e7 80 e0 29          	jalr	670(ra)
ffffffff8020a452: 63 10 95 07          	bne	a0, s9, 96
ffffffff8020a456: 62 65                	ld	a0, 24(sp)
ffffffff8020a458: 2e 95                	add	a0, a0, a1
ffffffff8020a45a: 93 04 15 00          	addi	s1, a0, 1
ffffffff8020a45e: 26 ec                	sd	s1, 24(sp)
ffffffff8020a460: 22 74                	ld	s0, 40(sp)
ffffffff8020a462: 63 f4 84 00          	bgeu	s1, s0, 8
ffffffff8020a466: 42 6d                	ld	s10, 16(sp)
ffffffff8020a468: 1d a0                	j	38
ffffffff8020a46a: 42 6d                	ld	s10, 16(sp)
ffffffff8020a46c: 63 61 9d 02          	bltu	s10, s1, 34
ffffffff8020a470: 63 77 74 0d          	bgeu	s0, s7, 206
ffffffff8020a474: 22 65                	ld	a0, 8(sp)
ffffffff8020a476: 33 8a 84 40          	sub	s4, s1, s0
ffffffff8020a47a: 52 95                	add	a0, a0, s4
ffffffff8020a47c: 63 08 35 09          	beq	a0, s3, 144
ffffffff8020a480: ce 85                	add	a1, zero, s3
ffffffff8020a482: 22 86                	add	a2, zero, s0
ffffffff8020a484: 97 20 00 00          	auipc	ra, 2
ffffffff8020a488: e7 80 20 ed          	jalr	-302(ra)
ffffffff8020a48c: 41 c1                	beqz	a0, 128
ffffffff8020a48e: 02 76                	ld	a2, 32(sp)
ffffffff8020a490: 63 63 96 02          	bltu	a2, s1, 38
ffffffff8020a494: 63 61 cd 02          	bltu	s10, a2, 34
ffffffff8020a498: a2 65                	ld	a1, 8(sp)
ffffffff8020a49a: 33 05 64 01          	add	a0, s0, s6
ffffffff8020a49e: 03 05 b5 02          	lb	a0, 43(a0)
ffffffff8020a4a2: a6 95                	add	a1, a1, s1
ffffffff8020a4a4: 05 8e                	sub	a2, a2, s1
ffffffff8020a4a6: 97 10 00 00          	auipc	ra, 1
ffffffff8020a4aa: e7 80 20 24          	jalr	578(ra)
ffffffff8020a4ae: e3 04 95 fb          	beq	a0, s9, -88
ffffffff8020a4b2: 02 75                	ld	a0, 32(sp)
ffffffff8020a4b4: 2a ec                	sd	a0, 24(sp)
ffffffff8020a4b6: 03 35 09 01          	ld	a0, 16(s2)
ffffffff8020a4ba: 23 00 05 00          	sb	zero, 0(a0)
ffffffff8020a4be: 6e 84                	add	s0, zero, s11
ffffffff8020a4c0: 03 35 09 00          	ld	a0, 0(s2)
ffffffff8020a4c4: 83 35 89 00          	ld	a1, 8(s2)
ffffffff8020a4c8: 13 36 14 00          	seqz	a2, s0
ffffffff8020a4cc: b3 c6 8d 00          	xor	a3, s11, s0
ffffffff8020a4d0: 93 b6 16 00          	seqz	a3, a3
ffffffff8020a4d4: b3 64 d6 00          	or	s1, a2, a3
ffffffff8020a4d8: 33 8d 8a 00          	add	s10, s5, s0
ffffffff8020a4dc: 89 e8                	bnez	s1, 18
ffffffff8020a4de: 63 7b b4 07          	bgeu	s0, s11, 118
ffffffff8020a4e2: 03 06 0d 00          	lb	a2, 0(s10)
ffffffff8020a4e6: 93 06 f0 fb          	addi	a3, zero, -65
ffffffff8020a4ea: 63 d5 c6 06          	bge	a3, a2, 106
ffffffff8020a4ee: 94 6d                	ld	a3, 24(a1)
ffffffff8020a4f0: d6 85                	add	a1, zero, s5
ffffffff8020a4f2: 22 86                	add	a2, zero, s0
ffffffff8020a4f4: 82 96                	jalr	a3
ffffffff8020a4f6: 05 e5                	bnez	a0, 40
ffffffff8020a4f8: 89 fc                	bnez	s1, -230
ffffffff8020a4fa: 63 7a b4 07          	bgeu	s0, s11, 116
ffffffff8020a4fe: 03 05 0d 00          	lb	a0, 0(s10)
ffffffff8020a502: 93 05 f0 fb          	addi	a1, zero, -65
ffffffff8020a506: e3 c6 a5 f0          	blt	a1, a0, -244
ffffffff8020a50a: 95 a0                	j	100
ffffffff8020a50c: 03 35 09 01          	ld	a0, 16(s2)
ffffffff8020a510: 23 00 95 01          	sb	s9, 0(a0)
ffffffff8020a514: 13 04 1a 00          	addi	s0, s4, 1
ffffffff8020a518: 65 b7                	j	-88
ffffffff8020a51a: 01 45                	mv	a0, zero
ffffffff8020a51c: 11 a0                	j	4
ffffffff8020a51e: 05 45                	addi	a0, zero, 1
ffffffff8020a520: e2 7d                	ld	s11, 56(sp)
ffffffff8020a522: 06 6d                	ld	s10, 64(sp)
ffffffff8020a524: a6 6c                	ld	s9, 72(sp)
ffffffff8020a526: 46 6c                	ld	s8, 80(sp)
ffffffff8020a528: e6 6b                	ld	s7, 88(sp)
ffffffff8020a52a: 06 7b                	ld	s6, 96(sp)
ffffffff8020a52c: a6 7a                	ld	s5, 104(sp)
ffffffff8020a52e: 46 7a                	ld	s4, 112(sp)
ffffffff8020a530: e6 79                	ld	s3, 120(sp)
ffffffff8020a532: 0a 69                	ld	s2, 128(sp)
ffffffff8020a534: aa 64                	ld	s1, 136(sp)
ffffffff8020a536: 4a 64                	ld	s0, 144(sp)
ffffffff8020a538: ea 60                	ld	ra, 152(sp)
ffffffff8020a53a: 0d 61                	addi	sp, sp, 160
ffffffff8020a53c: 82 80                	ret

ffffffff8020a53e .LBB132_32:
ffffffff8020a53e: 17 56 00 00          	auipc	a2, 5
ffffffff8020a542: 13 06 26 20          	addi	a2, a2, 514
ffffffff8020a546: 91 45                	addi	a1, zero, 4
ffffffff8020a548: 22 85                	add	a0, zero, s0
ffffffff8020a54a: 97 10 00 00          	auipc	ra, 1
ffffffff8020a54e: e7 80 a0 2b          	jalr	698(ra)
ffffffff8020a552: 00 00                	unimp	

ffffffff8020a554 .LBB132_33:
ffffffff8020a554: 17 57 00 00          	auipc	a4, 5
ffffffff8020a558: 13 07 c7 21          	addi	a4, a4, 540
ffffffff8020a55c: 56 85                	add	a0, zero, s5
ffffffff8020a55e: ee 85                	add	a1, zero, s11
ffffffff8020a560: 01 46                	mv	a2, zero
ffffffff8020a562: a2 86                	add	a3, zero, s0
ffffffff8020a564: 97 10 00 00          	auipc	ra, 1
ffffffff8020a568: e7 80 00 32          	jalr	800(ra)
ffffffff8020a56c: 00 00                	unimp	

ffffffff8020a56e .LBB132_34:
ffffffff8020a56e: 17 57 00 00          	auipc	a4, 5
ffffffff8020a572: 13 07 a7 21          	addi	a4, a4, 538
ffffffff8020a576: 56 85                	add	a0, zero, s5
ffffffff8020a578: ee 85                	add	a1, zero, s11
ffffffff8020a57a: 22 86                	add	a2, zero, s0
ffffffff8020a57c: ee 86                	add	a3, zero, s11
ffffffff8020a57e: 97 10 00 00          	auipc	ra, 1
ffffffff8020a582: e7 80 60 30          	jalr	774(ra)
ffffffff8020a586: 00 00                	unimp	

ffffffff8020a588 _ZN4core3fmt8builders11DebugStruct5field17he0bb0cc499e35d52E:
ffffffff8020a588: 35 71                	addi	sp, sp, -160
ffffffff8020a58a: 06 ed                	sd	ra, 152(sp)
ffffffff8020a58c: 22 e9                	sd	s0, 144(sp)
ffffffff8020a58e: 26 e5                	sd	s1, 136(sp)
ffffffff8020a590: 4a e1                	sd	s2, 128(sp)
ffffffff8020a592: ce fc                	sd	s3, 120(sp)
ffffffff8020a594: d2 f8                	sd	s4, 112(sp)
ffffffff8020a596: d6 f4                	sd	s5, 104(sp)
ffffffff8020a598: da f0                	sd	s6, 96(sp)
ffffffff8020a59a: 2a 84                	add	s0, zero, a0
ffffffff8020a59c: 03 45 85 00          	lbu	a0, 8(a0)
ffffffff8020a5a0: 05 4b                	addi	s6, zero, 1
ffffffff8020a5a2: 85 44                	addi	s1, zero, 1
ffffffff8020a5a4: 05 c1                	beqz	a0, 32
ffffffff8020a5a6: 23 04 94 00          	sb	s1, 8(s0)
ffffffff8020a5aa: a3 04 64 01          	sb	s6, 9(s0)
ffffffff8020a5ae: 22 85                	add	a0, zero, s0
ffffffff8020a5b0: 06 7b                	ld	s6, 96(sp)
ffffffff8020a5b2: a6 7a                	ld	s5, 104(sp)
ffffffff8020a5b4: 46 7a                	ld	s4, 112(sp)
ffffffff8020a5b6: e6 79                	ld	s3, 120(sp)
ffffffff8020a5b8: 0a 69                	ld	s2, 128(sp)
ffffffff8020a5ba: aa 64                	ld	s1, 136(sp)
ffffffff8020a5bc: 4a 64                	ld	s0, 144(sp)
ffffffff8020a5be: ea 60                	ld	ra, 152(sp)
ffffffff8020a5c0: 0d 61                	addi	sp, sp, 160
ffffffff8020a5c2: 82 80                	ret
ffffffff8020a5c4: ba 89                	add	s3, zero, a4
ffffffff8020a5c6: 36 89                	add	s2, zero, a3
ffffffff8020a5c8: 32 8a                	add	s4, zero, a2
ffffffff8020a5ca: ae 8a                	add	s5, zero, a1
ffffffff8020a5cc: 08 60                	ld	a0, 0(s0)
ffffffff8020a5ce: 83 65 05 03          	lwu	a1, 48(a0)
ffffffff8020a5d2: 03 46 94 00          	lbu	a2, 9(s0)
ffffffff8020a5d6: 93 f6 45 00          	andi	a3, a1, 4
ffffffff8020a5da: 81 ea                	bnez	a3, 16
ffffffff8020a5dc: 4d ca                	beqz	a2, 178

ffffffff8020a5de .LBB133_18:
ffffffff8020a5de: 97 55 00 00          	auipc	a1, 5
ffffffff8020a5e2: 93 85 f5 ee          	addi	a1, a1, -273
ffffffff8020a5e6: 09 46                	addi	a2, zero, 2
ffffffff8020a5e8: 45 a8                	j	176
ffffffff8020a5ea: 19 ee                	bnez	a2, 30
ffffffff8020a5ec: 0c 75                	ld	a1, 40(a0)
ffffffff8020a5ee: 08 71                	ld	a0, 32(a0)
ffffffff8020a5f0: 94 6d                	ld	a3, 24(a1)

ffffffff8020a5f2 .LBB133_19:
ffffffff8020a5f2: 97 55 00 00          	auipc	a1, 5
ffffffff8020a5f6: 93 85 65 ed          	addi	a1, a1, -298
ffffffff8020a5fa: 0d 46                	addi	a2, zero, 3
ffffffff8020a5fc: 82 96                	jalr	a3
ffffffff8020a5fe: 85 44                	addi	s1, zero, 1
ffffffff8020a600: 5d f1                	bnez	a0, -90
ffffffff8020a602: 08 60                	ld	a0, 0(s0)
ffffffff8020a604: 83 65 05 03          	lwu	a1, 48(a0)
ffffffff8020a608: 85 44                	addi	s1, zero, 1
ffffffff8020a60a: a3 0f 91 00          	sb	s1, 31(sp)
ffffffff8020a60e: 10 71                	ld	a2, 32(a0)
ffffffff8020a610: 14 75                	ld	a3, 40(a0)
ffffffff8020a612: 32 e0                	sd	a2, 0(sp)
ffffffff8020a614: 36 e4                	sd	a3, 8(sp)
ffffffff8020a616: 13 06 f1 01          	addi	a2, sp, 31
ffffffff8020a61a: 32 e8                	sd	a2, 16(sp)
ffffffff8020a61c: 50 59                	lw	a2, 52(a0)
ffffffff8020a61e: 83 06 85 03          	lb	a3, 56(a0)
ffffffff8020a622: 18 61                	ld	a4, 0(a0)
ffffffff8020a624: 1c 65                	ld	a5, 8(a0)
ffffffff8020a626: 03 38 05 01          	ld	a6, 16(a0)
ffffffff8020a62a: 08 6d                	ld	a0, 24(a0)
ffffffff8020a62c: ae c8                	sw	a1, 80(sp)
ffffffff8020a62e: b2 ca                	sw	a2, 84(sp)
ffffffff8020a630: 23 0c d1 04          	sb	a3, 88(sp)
ffffffff8020a634: 3a f0                	sd	a4, 32(sp)
ffffffff8020a636: 3e f4                	sd	a5, 40(sp)
ffffffff8020a638: 42 f8                	sd	a6, 48(sp)
ffffffff8020a63a: 2a fc                	sd	a0, 56(sp)
ffffffff8020a63c: 0a 85                	add	a0, zero, sp
ffffffff8020a63e: aa e0                	sd	a0, 64(sp)

ffffffff8020a640 .LBB133_20:
ffffffff8020a640: 97 55 00 00          	auipc	a1, 5
ffffffff8020a644: 93 85 85 e5          	addi	a1, a1, -424
ffffffff8020a648: ae e4                	sd	a1, 72(sp)
ffffffff8020a64a: d6 85                	add	a1, zero, s5
ffffffff8020a64c: 52 86                	add	a2, zero, s4
ffffffff8020a64e: 97 00 00 00          	auipc	ra, 0
ffffffff8020a652: e7 80 e0 d7          	jalr	-642(ra)
ffffffff8020a656: 21 f9                	bnez	a0, -176

ffffffff8020a658 .LBB133_21:
ffffffff8020a658: 97 55 00 00          	auipc	a1, 5
ffffffff8020a65c: 93 85 05 dc          	addi	a1, a1, -576
ffffffff8020a660: 0a 85                	add	a0, zero, sp
ffffffff8020a662: 09 46                	addi	a2, zero, 2
ffffffff8020a664: 97 00 00 00          	auipc	ra, 0
ffffffff8020a668: e7 80 80 d6          	jalr	-664(ra)
ffffffff8020a66c: 0d fd                	bnez	a0, -198
ffffffff8020a66e: 03 b6 89 01          	ld	a2, 24(s3)
ffffffff8020a672: 0c 10                	addi	a1, sp, 32
ffffffff8020a674: 4a 85                	add	a0, zero, s2
ffffffff8020a676: 02 96                	jalr	a2
ffffffff8020a678: 1d f5                	bnez	a0, -210
ffffffff8020a67a: a6 65                	ld	a1, 72(sp)
ffffffff8020a67c: 06 65                	ld	a0, 64(sp)
ffffffff8020a67e: 94 6d                	ld	a3, 24(a1)

ffffffff8020a680 .LBB133_22:
ffffffff8020a680: 97 55 00 00          	auipc	a1, 5
ffffffff8020a684: 93 85 b5 e4          	addi	a1, a1, -437
ffffffff8020a688: 09 46                	addi	a2, zero, 2
ffffffff8020a68a: 82 96                	jalr	a3
ffffffff8020a68c: 81 a8                	j	80

ffffffff8020a68e .LBB133_23:
ffffffff8020a68e: 97 55 00 00          	auipc	a1, 5
ffffffff8020a692: 93 85 15 e4          	addi	a1, a1, -447
ffffffff8020a696: 0d 46                	addi	a2, zero, 3
ffffffff8020a698: 14 75                	ld	a3, 40(a0)
ffffffff8020a69a: 08 71                	ld	a0, 32(a0)
ffffffff8020a69c: 94 6e                	ld	a3, 24(a3)
ffffffff8020a69e: 82 96                	jalr	a3
ffffffff8020a6a0: 85 44                	addi	s1, zero, 1
ffffffff8020a6a2: 11 f1                	bnez	a0, -252
ffffffff8020a6a4: 08 60                	ld	a0, 0(s0)
ffffffff8020a6a6: 0c 75                	ld	a1, 40(a0)
ffffffff8020a6a8: 08 71                	ld	a0, 32(a0)
ffffffff8020a6aa: 94 6d                	ld	a3, 24(a1)
ffffffff8020a6ac: d6 85                	add	a1, zero, s5
ffffffff8020a6ae: 52 86                	add	a2, zero, s4
ffffffff8020a6b0: 82 96                	jalr	a3
ffffffff8020a6b2: 85 44                	addi	s1, zero, 1
ffffffff8020a6b4: e3 19 05 ee          	bnez	a0, -270
ffffffff8020a6b8: 08 60                	ld	a0, 0(s0)
ffffffff8020a6ba: 0c 75                	ld	a1, 40(a0)
ffffffff8020a6bc: 08 71                	ld	a0, 32(a0)
ffffffff8020a6be: 94 6d                	ld	a3, 24(a1)

ffffffff8020a6c0 .LBB133_24:
ffffffff8020a6c0: 97 55 00 00          	auipc	a1, 5
ffffffff8020a6c4: 93 85 85 d5          	addi	a1, a1, -680
ffffffff8020a6c8: 09 46                	addi	a2, zero, 2
ffffffff8020a6ca: 82 96                	jalr	a3
ffffffff8020a6cc: 85 44                	addi	s1, zero, 1
ffffffff8020a6ce: e3 1c 05 ec          	bnez	a0, -296
ffffffff8020a6d2: 0c 60                	ld	a1, 0(s0)
ffffffff8020a6d4: 03 b6 89 01          	ld	a2, 24(s3)
ffffffff8020a6d8: 4a 85                	add	a0, zero, s2
ffffffff8020a6da: 02 96                	jalr	a2
ffffffff8020a6dc: aa 84                	add	s1, zero, a0
ffffffff8020a6de: e1 b5                	j	-312

ffffffff8020a6e0 _ZN4core3fmt8builders11DebugStruct6finish17h0ae4d84d7099b51cE:
ffffffff8020a6e0: 41 11                	addi	sp, sp, -16
ffffffff8020a6e2: 06 e4                	sd	ra, 8(sp)
ffffffff8020a6e4: 22 e0                	sd	s0, 0(sp)
ffffffff8020a6e6: 2a 84                	add	s0, zero, a0
ffffffff8020a6e8: 03 45 95 00          	lbu	a0, 9(a0)
ffffffff8020a6ec: 83 45 84 00          	lbu	a1, 8(s0)
ffffffff8020a6f0: 1d c9                	beqz	a0, 54
ffffffff8020a6f2: 05 45                	addi	a0, zero, 1
ffffffff8020a6f4: 95 e5                	bnez	a1, 44
ffffffff8020a6f6: 08 60                	ld	a0, 0(s0)
ffffffff8020a6f8: 0c 75                	ld	a1, 40(a0)
ffffffff8020a6fa: 03 46 05 03          	lbu	a2, 48(a0)
ffffffff8020a6fe: 08 71                	ld	a0, 32(a0)
ffffffff8020a700: 94 6d                	ld	a3, 24(a1)
ffffffff8020a702: 93 75 46 00          	andi	a1, a2, 4
ffffffff8020a706: 99 e5                	bnez	a1, 14

ffffffff8020a708 .LBB135_8:
ffffffff8020a708: 97 55 00 00          	auipc	a1, 5
ffffffff8020a70c: 93 85 b5 dc          	addi	a1, a1, -565
ffffffff8020a710: 09 46                	addi	a2, zero, 2
ffffffff8020a712: 31 a0                	j	12

ffffffff8020a714 .LBB135_9:
ffffffff8020a714: 97 55 00 00          	auipc	a1, 5
ffffffff8020a718: 93 85 e5 db          	addi	a1, a1, -578
ffffffff8020a71c: 05 46                	addi	a2, zero, 1
ffffffff8020a71e: 82 96                	jalr	a3
ffffffff8020a720: 23 04 a4 00          	sb	a0, 8(s0)
ffffffff8020a724: aa 85                	add	a1, zero, a0
ffffffff8020a726: 33 35 b0 00          	snez	a0, a1
ffffffff8020a72a: 02 64                	ld	s0, 0(sp)
ffffffff8020a72c: a2 60                	ld	ra, 8(sp)
ffffffff8020a72e: 41 01                	addi	sp, sp, 16
ffffffff8020a730: 82 80                	ret

ffffffff8020a732 _ZN4core3fmt8builders10DebugTuple5field17h10609664a1c96872E:
ffffffff8020a732: 75 71                	addi	sp, sp, -144
ffffffff8020a734: 06 e5                	sd	ra, 136(sp)
ffffffff8020a736: 22 e1                	sd	s0, 128(sp)
ffffffff8020a738: a6 fc                	sd	s1, 120(sp)
ffffffff8020a73a: ca f8                	sd	s2, 112(sp)
ffffffff8020a73c: ce f4                	sd	s3, 104(sp)
ffffffff8020a73e: 2a 84                	add	s0, zero, a0
ffffffff8020a740: 03 45 05 01          	lbu	a0, 16(a0)
ffffffff8020a744: 85 44                	addi	s1, zero, 1
ffffffff8020a746: 69 e1                	bnez	a0, 194
ffffffff8020a748: b2 89                	add	s3, zero, a2
ffffffff8020a74a: 2e 89                	add	s2, zero, a1
ffffffff8020a74c: 08 60                	ld	a0, 0(s0)
ffffffff8020a74e: 83 65 05 03          	lwu	a1, 48(a0)
ffffffff8020a752: 10 64                	ld	a2, 8(s0)
ffffffff8020a754: 93 f6 45 00          	andi	a3, a1, 4
ffffffff8020a758: 89 ea                	bnez	a3, 18
ffffffff8020a75a: 85 44                	addi	s1, zero, 1
ffffffff8020a75c: 51 c6                	beqz	a2, 140

ffffffff8020a75e .LBB136_14:
ffffffff8020a75e: 97 55 00 00          	auipc	a1, 5
ffffffff8020a762: 93 85 f5 d6          	addi	a1, a1, -657
ffffffff8020a766: 09 46                	addi	a2, zero, 2
ffffffff8020a768: 69 a0                	j	138
ffffffff8020a76a: 11 ee                	bnez	a2, 28
ffffffff8020a76c: 0c 75                	ld	a1, 40(a0)
ffffffff8020a76e: 08 71                	ld	a0, 32(a0)
ffffffff8020a770: 94 6d                	ld	a3, 24(a1)

ffffffff8020a772 .LBB136_15:
ffffffff8020a772: 97 55 00 00          	auipc	a1, 5
ffffffff8020a776: 93 85 35 d6          	addi	a1, a1, -669
ffffffff8020a77a: 09 46                	addi	a2, zero, 2
ffffffff8020a77c: 82 96                	jalr	a3
ffffffff8020a77e: 49 e5                	bnez	a0, 138
ffffffff8020a780: 08 60                	ld	a0, 0(s0)
ffffffff8020a782: 83 65 05 03          	lwu	a1, 48(a0)
ffffffff8020a786: 85 44                	addi	s1, zero, 1
ffffffff8020a788: a3 03 91 02          	sb	s1, 39(sp)
ffffffff8020a78c: 10 71                	ld	a2, 32(a0)
ffffffff8020a78e: 14 75                	ld	a3, 40(a0)
ffffffff8020a790: 32 e4                	sd	a2, 8(sp)
ffffffff8020a792: 36 e8                	sd	a3, 16(sp)
ffffffff8020a794: 13 06 71 02          	addi	a2, sp, 39
ffffffff8020a798: 32 ec                	sd	a2, 24(sp)
ffffffff8020a79a: 50 59                	lw	a2, 52(a0)
ffffffff8020a79c: 83 06 85 03          	lb	a3, 56(a0)
ffffffff8020a7a0: 18 61                	ld	a4, 0(a0)
ffffffff8020a7a2: 1c 65                	ld	a5, 8(a0)
ffffffff8020a7a4: 03 38 05 01          	ld	a6, 16(a0)
ffffffff8020a7a8: 08 6d                	ld	a0, 24(a0)
ffffffff8020a7aa: ae cc                	sw	a1, 88(sp)
ffffffff8020a7ac: b2 ce                	sw	a2, 92(sp)
ffffffff8020a7ae: 23 00 d1 06          	sb	a3, 96(sp)
ffffffff8020a7b2: 3a f4                	sd	a4, 40(sp)
ffffffff8020a7b4: 3e f8                	sd	a5, 48(sp)
ffffffff8020a7b6: 42 fc                	sd	a6, 56(sp)
ffffffff8020a7b8: aa e0                	sd	a0, 64(sp)
ffffffff8020a7ba: 28 00                	addi	a0, sp, 8
ffffffff8020a7bc: 03 b6 89 01          	ld	a2, 24(s3)
ffffffff8020a7c0: aa e4                	sd	a0, 72(sp)

ffffffff8020a7c2 .LBB136_16:
ffffffff8020a7c2: 17 55 00 00          	auipc	a0, 5
ffffffff8020a7c6: 13 05 65 cd          	addi	a0, a0, -810
ffffffff8020a7ca: aa e8                	sd	a0, 80(sp)
ffffffff8020a7cc: 2c 10                	addi	a1, sp, 40
ffffffff8020a7ce: 4a 85                	add	a0, zero, s2
ffffffff8020a7d0: 02 96                	jalr	a2
ffffffff8020a7d2: 1d e9                	bnez	a0, 54
ffffffff8020a7d4: c6 65                	ld	a1, 80(sp)
ffffffff8020a7d6: 26 65                	ld	a0, 72(sp)
ffffffff8020a7d8: 94 6d                	ld	a3, 24(a1)

ffffffff8020a7da .LBB136_17:
ffffffff8020a7da: 97 55 00 00          	auipc	a1, 5
ffffffff8020a7de: 93 85 15 cf          	addi	a1, a1, -783
ffffffff8020a7e2: 09 46                	addi	a2, zero, 2
ffffffff8020a7e4: 82 96                	jalr	a3
ffffffff8020a7e6: 05 a0                	j	32

ffffffff8020a7e8 .LBB136_18:
ffffffff8020a7e8: 97 55 00 00          	auipc	a1, 5
ffffffff8020a7ec: 93 85 f5 ce          	addi	a1, a1, -785
ffffffff8020a7f0: 05 46                	addi	a2, zero, 1
ffffffff8020a7f2: 14 75                	ld	a3, 40(a0)
ffffffff8020a7f4: 08 71                	ld	a0, 32(a0)
ffffffff8020a7f6: 94 6e                	ld	a3, 24(a3)
ffffffff8020a7f8: 82 96                	jalr	a3
ffffffff8020a7fa: 19 e5                	bnez	a0, 14
ffffffff8020a7fc: 0c 60                	ld	a1, 0(s0)
ffffffff8020a7fe: 03 b6 89 01          	ld	a2, 24(s3)
ffffffff8020a802: 4a 85                	add	a0, zero, s2
ffffffff8020a804: 02 96                	jalr	a2
ffffffff8020a806: aa 84                	add	s1, zero, a0
ffffffff8020a808: 08 64                	ld	a0, 8(s0)
ffffffff8020a80a: 23 08 94 00          	sb	s1, 16(s0)
ffffffff8020a80e: 05 05                	addi	a0, a0, 1
ffffffff8020a810: 08 e4                	sd	a0, 8(s0)
ffffffff8020a812: 22 85                	add	a0, zero, s0
ffffffff8020a814: a6 79                	ld	s3, 104(sp)
ffffffff8020a816: 46 79                	ld	s2, 112(sp)
ffffffff8020a818: e6 74                	ld	s1, 120(sp)
ffffffff8020a81a: 0a 64                	ld	s0, 128(sp)
ffffffff8020a81c: aa 60                	ld	ra, 136(sp)
ffffffff8020a81e: 49 61                	addi	sp, sp, 144
ffffffff8020a820: 82 80                	ret

ffffffff8020a822 _ZN4core3fmt8builders10DebugTuple6finish17h00fad7daa6b35633E:
ffffffff8020a822: 01 11                	addi	sp, sp, -32
ffffffff8020a824: 06 ec                	sd	ra, 24(sp)
ffffffff8020a826: 22 e8                	sd	s0, 16(sp)
ffffffff8020a828: 26 e4                	sd	s1, 8(sp)
ffffffff8020a82a: 2a 84                	add	s0, zero, a0
ffffffff8020a82c: 0c 65                	ld	a1, 8(a0)
ffffffff8020a82e: 03 45 05 01          	lbu	a0, 16(a0)
ffffffff8020a832: b9 c5                	beqz	a1, 78
ffffffff8020a834: 85 44                	addi	s1, zero, 1
ffffffff8020a836: 31 e1                	bnez	a0, 68
ffffffff8020a838: 05 45                	addi	a0, zero, 1
ffffffff8020a83a: 63 95 a5 02          	bne	a1, a0, 42
ffffffff8020a83e: 03 45 14 01          	lbu	a0, 17(s0)
ffffffff8020a842: 0d c1                	beqz	a0, 34
ffffffff8020a844: 08 60                	ld	a0, 0(s0)
ffffffff8020a846: 83 45 05 03          	lbu	a1, 48(a0)
ffffffff8020a84a: 91 89                	andi	a1, a1, 4
ffffffff8020a84c: 81 ed                	bnez	a1, 24
ffffffff8020a84e: 0c 75                	ld	a1, 40(a0)
ffffffff8020a850: 08 71                	ld	a0, 32(a0)
ffffffff8020a852: 94 6d                	ld	a3, 24(a1)

ffffffff8020a854 .LBB137_9:
ffffffff8020a854: 97 55 00 00          	auipc	a1, 5
ffffffff8020a858: 93 85 45 c8          	addi	a1, a1, -892
ffffffff8020a85c: 05 46                	addi	a2, zero, 1
ffffffff8020a85e: 85 44                	addi	s1, zero, 1
ffffffff8020a860: 82 96                	jalr	a3
ffffffff8020a862: 01 ed                	bnez	a0, 24
ffffffff8020a864: 08 60                	ld	a0, 0(s0)
ffffffff8020a866: 0c 75                	ld	a1, 40(a0)
ffffffff8020a868: 08 71                	ld	a0, 32(a0)
ffffffff8020a86a: 94 6d                	ld	a3, 24(a1)

ffffffff8020a86c .LBB137_10:
ffffffff8020a86c: 97 55 00 00          	auipc	a1, 5
ffffffff8020a870: 93 85 d5 c6          	addi	a1, a1, -915
ffffffff8020a874: 05 46                	addi	a2, zero, 1
ffffffff8020a876: 82 96                	jalr	a3
ffffffff8020a878: aa 84                	add	s1, zero, a0
ffffffff8020a87a: 23 08 94 00          	sb	s1, 16(s0)
ffffffff8020a87e: 26 85                	add	a0, zero, s1
ffffffff8020a880: 33 35 a0 00          	snez	a0, a0
ffffffff8020a884: a2 64                	ld	s1, 8(sp)
ffffffff8020a886: 42 64                	ld	s0, 16(sp)
ffffffff8020a888: e2 60                	ld	ra, 24(sp)
ffffffff8020a88a: 05 61                	addi	sp, sp, 32
ffffffff8020a88c: 82 80                	ret

ffffffff8020a88e _ZN4core3fmt8builders10DebugInner5entry17h077f88d5f8afc4fcE:
ffffffff8020a88e: 75 71                	addi	sp, sp, -144
ffffffff8020a890: 06 e5                	sd	ra, 136(sp)
ffffffff8020a892: 22 e1                	sd	s0, 128(sp)
ffffffff8020a894: a6 fc                	sd	s1, 120(sp)
ffffffff8020a896: ca f8                	sd	s2, 112(sp)
ffffffff8020a898: ce f4                	sd	s3, 104(sp)
ffffffff8020a89a: d2 f0                	sd	s4, 96(sp)
ffffffff8020a89c: 2a 84                	add	s0, zero, a0
ffffffff8020a89e: 03 45 85 00          	lbu	a0, 8(a0)
ffffffff8020a8a2: 05 4a                	addi	s4, zero, 1
ffffffff8020a8a4: 85 44                	addi	s1, zero, 1
ffffffff8020a8a6: 4d ed                	bnez	a0, 186
ffffffff8020a8a8: b2 89                	add	s3, zero, a2
ffffffff8020a8aa: 2e 89                	add	s2, zero, a1
ffffffff8020a8ac: 0c 60                	ld	a1, 0(s0)
ffffffff8020a8ae: 03 e5 05 03          	lwu	a0, 48(a1)
ffffffff8020a8b2: 03 46 94 00          	lbu	a2, 9(s0)
ffffffff8020a8b6: 93 76 45 00          	andi	a3, a0, 4
ffffffff8020a8ba: 9d e2                	bnez	a3, 38
ffffffff8020a8bc: 09 ce                	beqz	a2, 26
ffffffff8020a8be: 90 75                	ld	a2, 40(a1)
ffffffff8020a8c0: 88 71                	ld	a0, 32(a1)
ffffffff8020a8c2: 14 6e                	ld	a3, 24(a2)

ffffffff8020a8c4 .LBB138_13:
ffffffff8020a8c4: 97 55 00 00          	auipc	a1, 5
ffffffff8020a8c8: 93 85 95 c0          	addi	a1, a1, -1015
ffffffff8020a8cc: 09 46                	addi	a2, zero, 2
ffffffff8020a8ce: 82 96                	jalr	a3
ffffffff8020a8d0: 85 44                	addi	s1, zero, 1
ffffffff8020a8d2: 59 e5                	bnez	a0, 142
ffffffff8020a8d4: 0c 60                	ld	a1, 0(s0)
ffffffff8020a8d6: 03 b6 89 01          	ld	a2, 24(s3)
ffffffff8020a8da: 4a 85                	add	a0, zero, s2
ffffffff8020a8dc: 02 96                	jalr	a2
ffffffff8020a8de: 41 a0                	j	128
ffffffff8020a8e0: 19 ee                	bnez	a2, 30
ffffffff8020a8e2: 90 75                	ld	a2, 40(a1)
ffffffff8020a8e4: 88 71                	ld	a0, 32(a1)
ffffffff8020a8e6: 14 6e                	ld	a3, 24(a2)

ffffffff8020a8e8 .LBB138_14:
ffffffff8020a8e8: 97 55 00 00          	auipc	a1, 5
ffffffff8020a8ec: 93 85 25 bf          	addi	a1, a1, -1038
ffffffff8020a8f0: 05 46                	addi	a2, zero, 1
ffffffff8020a8f2: 85 44                	addi	s1, zero, 1
ffffffff8020a8f4: 82 96                	jalr	a3
ffffffff8020a8f6: 2d e5                	bnez	a0, 106
ffffffff8020a8f8: 0c 60                	ld	a1, 0(s0)
ffffffff8020a8fa: 03 e5 05 03          	lwu	a0, 48(a1)
ffffffff8020a8fe: 85 44                	addi	s1, zero, 1
ffffffff8020a900: a3 0f 91 00          	sb	s1, 31(sp)
ffffffff8020a904: 90 71                	ld	a2, 32(a1)
ffffffff8020a906: 94 75                	ld	a3, 40(a1)
ffffffff8020a908: 32 e0                	sd	a2, 0(sp)
ffffffff8020a90a: 36 e4                	sd	a3, 8(sp)
ffffffff8020a90c: 13 06 f1 01          	addi	a2, sp, 31
ffffffff8020a910: 32 e8                	sd	a2, 16(sp)
ffffffff8020a912: d0 59                	lw	a2, 52(a1)
ffffffff8020a914: 83 86 85 03          	lb	a3, 56(a1)
ffffffff8020a918: 98 61                	ld	a4, 0(a1)
ffffffff8020a91a: 9c 65                	ld	a5, 8(a1)
ffffffff8020a91c: 03 b8 05 01          	ld	a6, 16(a1)
ffffffff8020a920: 8c 6d                	ld	a1, 24(a1)
ffffffff8020a922: aa c8                	sw	a0, 80(sp)
ffffffff8020a924: b2 ca                	sw	a2, 84(sp)
ffffffff8020a926: 23 0c d1 04          	sb	a3, 88(sp)
ffffffff8020a92a: 3a f0                	sd	a4, 32(sp)
ffffffff8020a92c: 3e f4                	sd	a5, 40(sp)
ffffffff8020a92e: 42 f8                	sd	a6, 48(sp)
ffffffff8020a930: 2e fc                	sd	a1, 56(sp)
ffffffff8020a932: 0a 85                	add	a0, zero, sp
ffffffff8020a934: 03 b6 89 01          	ld	a2, 24(s3)
ffffffff8020a938: aa e0                	sd	a0, 64(sp)

ffffffff8020a93a .LBB138_15:
ffffffff8020a93a: 17 55 00 00          	auipc	a0, 5
ffffffff8020a93e: 13 05 e5 b5          	addi	a0, a0, -1186
ffffffff8020a942: aa e4                	sd	a0, 72(sp)
ffffffff8020a944: 0c 10                	addi	a1, sp, 32
ffffffff8020a946: 4a 85                	add	a0, zero, s2
ffffffff8020a948: 02 96                	jalr	a2
ffffffff8020a94a: 19 e9                	bnez	a0, 22
ffffffff8020a94c: a6 65                	ld	a1, 72(sp)
ffffffff8020a94e: 06 65                	ld	a0, 64(sp)
ffffffff8020a950: 94 6d                	ld	a3, 24(a1)

ffffffff8020a952 .LBB138_16:
ffffffff8020a952: 97 55 00 00          	auipc	a1, 5
ffffffff8020a956: 93 85 95 b7          	addi	a1, a1, -1159
ffffffff8020a95a: 09 46                	addi	a2, zero, 2
ffffffff8020a95c: 82 96                	jalr	a3
ffffffff8020a95e: aa 84                	add	s1, zero, a0
ffffffff8020a960: 23 04 94 00          	sb	s1, 8(s0)
ffffffff8020a964: a3 04 44 01          	sb	s4, 9(s0)
ffffffff8020a968: 06 7a                	ld	s4, 96(sp)
ffffffff8020a96a: a6 79                	ld	s3, 104(sp)
ffffffff8020a96c: 46 79                	ld	s2, 112(sp)
ffffffff8020a96e: e6 74                	ld	s1, 120(sp)
ffffffff8020a970: 0a 64                	ld	s0, 128(sp)
ffffffff8020a972: aa 60                	ld	ra, 136(sp)
ffffffff8020a974: 49 61                	addi	sp, sp, 144
ffffffff8020a976: 82 80                	ret

ffffffff8020a978 _ZN4core3fmt8builders9DebugList5entry17h2d7f6a925ee1ea89E:
ffffffff8020a978: 41 11                	addi	sp, sp, -16
ffffffff8020a97a: 06 e4                	sd	ra, 8(sp)
ffffffff8020a97c: 22 e0                	sd	s0, 0(sp)
ffffffff8020a97e: 2a 84                	add	s0, zero, a0
ffffffff8020a980: 97 00 00 00          	auipc	ra, 0
ffffffff8020a984: e7 80 e0 f0          	jalr	-242(ra)
ffffffff8020a988: 22 85                	add	a0, zero, s0
ffffffff8020a98a: 02 64                	ld	s0, 0(sp)
ffffffff8020a98c: a2 60                	ld	ra, 8(sp)
ffffffff8020a98e: 41 01                	addi	sp, sp, 16
ffffffff8020a990: 82 80                	ret

ffffffff8020a992 _ZN4core3fmt8builders9DebugList6finish17h2f821bfd5190c778E:
ffffffff8020a992: 41 11                	addi	sp, sp, -16
ffffffff8020a994: 06 e4                	sd	ra, 8(sp)
ffffffff8020a996: aa 85                	add	a1, zero, a0
ffffffff8020a998: 03 46 85 00          	lbu	a2, 8(a0)
ffffffff8020a99c: 05 45                	addi	a0, zero, 1
ffffffff8020a99e: 01 c6                	beqz	a2, 8
ffffffff8020a9a0: a2 60                	ld	ra, 8(sp)
ffffffff8020a9a2: 41 01                	addi	sp, sp, 16
ffffffff8020a9a4: 82 80                	ret
ffffffff8020a9a6: 88 61                	ld	a0, 0(a1)
ffffffff8020a9a8: 0c 75                	ld	a1, 40(a0)
ffffffff8020a9aa: 08 71                	ld	a0, 32(a0)
ffffffff8020a9ac: 94 6d                	ld	a3, 24(a1)

ffffffff8020a9ae .LBB141_3:
ffffffff8020a9ae: 97 55 00 00          	auipc	a1, 5
ffffffff8020a9b2: 93 85 e5 b2          	addi	a1, a1, -1234
ffffffff8020a9b6: 05 46                	addi	a2, zero, 1
ffffffff8020a9b8: 82 96                	jalr	a3
ffffffff8020a9ba: a2 60                	ld	ra, 8(sp)
ffffffff8020a9bc: 41 01                	addi	sp, sp, 16
ffffffff8020a9be: 82 80                	ret

ffffffff8020a9c0 _ZN4core3fmt5Write10write_char17h88d98e20541d2fccE:
ffffffff8020a9c0: 41 11                	addi	sp, sp, -16
ffffffff8020a9c2: 06 e4                	sd	ra, 8(sp)
ffffffff8020a9c4: 2e 86                	add	a2, zero, a1
ffffffff8020a9c6: 81 25                	sext.w	a1, a1
ffffffff8020a9c8: 93 06 00 08          	addi	a3, zero, 128
ffffffff8020a9cc: 02 c2                	sw	zero, 4(sp)
ffffffff8020a9ce: 63 fd d5 00          	bgeu	a1, a3, 26
ffffffff8020a9d2: 4c 00                	addi	a1, sp, 4
ffffffff8020a9d4: 23 02 c1 00          	sb	a2, 4(sp)
ffffffff8020a9d8: 05 46                	addi	a2, zero, 1
ffffffff8020a9da: 97 00 00 00          	auipc	ra, 0
ffffffff8020a9de: e7 80 20 9f          	jalr	-1550(ra)
ffffffff8020a9e2: a2 60                	ld	ra, 8(sp)
ffffffff8020a9e4: 41 01                	addi	sp, sp, 16
ffffffff8020a9e6: 82 80                	ret
ffffffff8020a9e8: 9b 55 b6 00          	srliw	a1, a2, 11
ffffffff8020a9ec: 95 e5                	bnez	a1, 44
ffffffff8020a9ee: 4c 00                	addi	a1, sp, 4
ffffffff8020a9f0: 93 56 66 00          	srli	a3, a2, 6
ffffffff8020a9f4: 93 e6 06 0c          	ori	a3, a3, 192
ffffffff8020a9f8: 23 02 d1 00          	sb	a3, 4(sp)
ffffffff8020a9fc: 13 76 f6 03          	andi	a2, a2, 63
ffffffff8020aa00: 13 66 06 08          	ori	a2, a2, 128
ffffffff8020aa04: a3 02 c1 00          	sb	a2, 5(sp)
ffffffff8020aa08: 09 46                	addi	a2, zero, 2
ffffffff8020aa0a: 97 00 00 00          	auipc	ra, 0
ffffffff8020aa0e: e7 80 20 9c          	jalr	-1598(ra)
ffffffff8020aa12: a2 60                	ld	ra, 8(sp)
ffffffff8020aa14: 41 01                	addi	sp, sp, 16
ffffffff8020aa16: 82 80                	ret
ffffffff8020aa18: 9b 56 06 01          	srliw	a3, a2, 16
ffffffff8020aa1c: 4c 00                	addi	a1, sp, 4
ffffffff8020aa1e: 8d ee                	bnez	a3, 58
ffffffff8020aa20: 9b 56 c6 00          	srliw	a3, a2, 12
ffffffff8020aa24: 93 e6 06 0e          	ori	a3, a3, 224
ffffffff8020aa28: 23 02 d1 00          	sb	a3, 4(sp)
ffffffff8020aa2c: 9b 56 66 00          	srliw	a3, a2, 6
ffffffff8020aa30: 93 f6 f6 03          	andi	a3, a3, 63
ffffffff8020aa34: 93 e6 06 08          	ori	a3, a3, 128
ffffffff8020aa38: a3 02 d1 00          	sb	a3, 5(sp)
ffffffff8020aa3c: 13 76 f6 03          	andi	a2, a2, 63
ffffffff8020aa40: 13 66 06 08          	ori	a2, a2, 128
ffffffff8020aa44: 23 03 c1 00          	sb	a2, 6(sp)
ffffffff8020aa48: 0d 46                	addi	a2, zero, 3
ffffffff8020aa4a: 97 00 00 00          	auipc	ra, 0
ffffffff8020aa4e: e7 80 20 98          	jalr	-1662(ra)
ffffffff8020aa52: a2 60                	ld	ra, 8(sp)
ffffffff8020aa54: 41 01                	addi	sp, sp, 16
ffffffff8020aa56: 82 80                	ret
ffffffff8020aa58: 9b 56 26 01          	srliw	a3, a2, 18
ffffffff8020aa5c: 93 e6 06 0f          	ori	a3, a3, 240
ffffffff8020aa60: 23 02 d1 00          	sb	a3, 4(sp)
ffffffff8020aa64: 9b 56 c6 00          	srliw	a3, a2, 12
ffffffff8020aa68: 93 f6 f6 03          	andi	a3, a3, 63
ffffffff8020aa6c: 93 e6 06 08          	ori	a3, a3, 128
ffffffff8020aa70: a3 02 d1 00          	sb	a3, 5(sp)
ffffffff8020aa74: 9b 56 66 00          	srliw	a3, a2, 6
ffffffff8020aa78: 93 f6 f6 03          	andi	a3, a3, 63
ffffffff8020aa7c: 93 e6 06 08          	ori	a3, a3, 128
ffffffff8020aa80: 23 03 d1 00          	sb	a3, 6(sp)
ffffffff8020aa84: 13 76 f6 03          	andi	a2, a2, 63
ffffffff8020aa88: 13 66 06 08          	ori	a2, a2, 128
ffffffff8020aa8c: a3 03 c1 00          	sb	a2, 7(sp)
ffffffff8020aa90: 11 46                	addi	a2, zero, 4
ffffffff8020aa92: 97 00 00 00          	auipc	ra, 0
ffffffff8020aa96: e7 80 a0 93          	jalr	-1734(ra)
ffffffff8020aa9a: a2 60                	ld	ra, 8(sp)
ffffffff8020aa9c: 41 01                	addi	sp, sp, 16
ffffffff8020aa9e: 82 80                	ret

ffffffff8020aaa0 _ZN4core3fmt5Write9write_fmt17h89d269e5e8b0f57eE:
ffffffff8020aaa0: 39 71                	addi	sp, sp, -64
ffffffff8020aaa2: 06 fc                	sd	ra, 56(sp)
ffffffff8020aaa4: 90 75                	ld	a2, 40(a1)
ffffffff8020aaa6: 94 71                	ld	a3, 32(a1)
ffffffff8020aaa8: 2a e0                	sd	a0, 0(sp)
ffffffff8020aaaa: 32 f8                	sd	a2, 48(sp)
ffffffff8020aaac: 36 f4                	sd	a3, 40(sp)
ffffffff8020aaae: 88 6d                	ld	a0, 24(a1)
ffffffff8020aab0: 90 69                	ld	a2, 16(a1)
ffffffff8020aab2: 94 65                	ld	a3, 8(a1)
ffffffff8020aab4: 8c 61                	ld	a1, 0(a1)
ffffffff8020aab6: 2a f0                	sd	a0, 32(sp)
ffffffff8020aab8: 32 ec                	sd	a2, 24(sp)
ffffffff8020aaba: 36 e8                	sd	a3, 16(sp)
ffffffff8020aabc: 2e e4                	sd	a1, 8(sp)

ffffffff8020aabe .LBB155_1:
ffffffff8020aabe: 97 55 00 00          	auipc	a1, 5
ffffffff8020aac2: 93 85 25 b2          	addi	a1, a1, -1246
ffffffff8020aac6: 0a 85                	add	a0, zero, sp
ffffffff8020aac8: 30 00                	addi	a2, sp, 8
ffffffff8020aaca: 97 00 00 00          	auipc	ra, 0
ffffffff8020aace: e7 80 60 16          	jalr	358(ra)
ffffffff8020aad2: e2 70                	ld	ra, 56(sp)
ffffffff8020aad4: 21 61                	addi	sp, sp, 64
ffffffff8020aad6: 82 80                	ret

ffffffff8020aad8 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hb5709b01b7c41321E:
ffffffff8020aad8: 08 61                	ld	a0, 0(a0)
ffffffff8020aada: 17 03 00 00          	auipc	t1, 0
ffffffff8020aade: 67 00 23 8f          	jr	-1806(t1)

ffffffff8020aae2 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h20ad077d9942d13eE:
ffffffff8020aae2: 41 11                	addi	sp, sp, -16
ffffffff8020aae4: 06 e4                	sd	ra, 8(sp)
ffffffff8020aae6: 2e 86                	add	a2, zero, a1
ffffffff8020aae8: 08 61                	ld	a0, 0(a0)
ffffffff8020aaea: 81 25                	sext.w	a1, a1
ffffffff8020aaec: 93 06 00 08          	addi	a3, zero, 128
ffffffff8020aaf0: 02 c2                	sw	zero, 4(sp)
ffffffff8020aaf2: 63 fd d5 00          	bgeu	a1, a3, 26
ffffffff8020aaf6: 4c 00                	addi	a1, sp, 4
ffffffff8020aaf8: 23 02 c1 00          	sb	a2, 4(sp)
ffffffff8020aafc: 05 46                	addi	a2, zero, 1
ffffffff8020aafe: 97 00 00 00          	auipc	ra, 0
ffffffff8020ab02: e7 80 e0 8c          	jalr	-1842(ra)
ffffffff8020ab06: a2 60                	ld	ra, 8(sp)
ffffffff8020ab08: 41 01                	addi	sp, sp, 16
ffffffff8020ab0a: 82 80                	ret
ffffffff8020ab0c: 9b 55 b6 00          	srliw	a1, a2, 11
ffffffff8020ab10: 95 e5                	bnez	a1, 44
ffffffff8020ab12: 4c 00                	addi	a1, sp, 4
ffffffff8020ab14: 93 56 66 00          	srli	a3, a2, 6
ffffffff8020ab18: 93 e6 06 0c          	ori	a3, a3, 192
ffffffff8020ab1c: 23 02 d1 00          	sb	a3, 4(sp)
ffffffff8020ab20: 13 76 f6 03          	andi	a2, a2, 63
ffffffff8020ab24: 13 66 06 08          	ori	a2, a2, 128
ffffffff8020ab28: a3 02 c1 00          	sb	a2, 5(sp)
ffffffff8020ab2c: 09 46                	addi	a2, zero, 2
ffffffff8020ab2e: 97 00 00 00          	auipc	ra, 0
ffffffff8020ab32: e7 80 e0 89          	jalr	-1890(ra)
ffffffff8020ab36: a2 60                	ld	ra, 8(sp)
ffffffff8020ab38: 41 01                	addi	sp, sp, 16
ffffffff8020ab3a: 82 80                	ret
ffffffff8020ab3c: 9b 56 06 01          	srliw	a3, a2, 16
ffffffff8020ab40: 4c 00                	addi	a1, sp, 4
ffffffff8020ab42: 8d ee                	bnez	a3, 58
ffffffff8020ab44: 9b 56 c6 00          	srliw	a3, a2, 12
ffffffff8020ab48: 93 e6 06 0e          	ori	a3, a3, 224
ffffffff8020ab4c: 23 02 d1 00          	sb	a3, 4(sp)
ffffffff8020ab50: 9b 56 66 00          	srliw	a3, a2, 6
ffffffff8020ab54: 93 f6 f6 03          	andi	a3, a3, 63
ffffffff8020ab58: 93 e6 06 08          	ori	a3, a3, 128
ffffffff8020ab5c: a3 02 d1 00          	sb	a3, 5(sp)
ffffffff8020ab60: 13 76 f6 03          	andi	a2, a2, 63
ffffffff8020ab64: 13 66 06 08          	ori	a2, a2, 128
ffffffff8020ab68: 23 03 c1 00          	sb	a2, 6(sp)
ffffffff8020ab6c: 0d 46                	addi	a2, zero, 3
ffffffff8020ab6e: 97 00 00 00          	auipc	ra, 0
ffffffff8020ab72: e7 80 e0 85          	jalr	-1954(ra)
ffffffff8020ab76: a2 60                	ld	ra, 8(sp)
ffffffff8020ab78: 41 01                	addi	sp, sp, 16
ffffffff8020ab7a: 82 80                	ret
ffffffff8020ab7c: 9b 56 26 01          	srliw	a3, a2, 18
ffffffff8020ab80: 93 e6 06 0f          	ori	a3, a3, 240
ffffffff8020ab84: 23 02 d1 00          	sb	a3, 4(sp)
ffffffff8020ab88: 9b 56 c6 00          	srliw	a3, a2, 12
ffffffff8020ab8c: 93 f6 f6 03          	andi	a3, a3, 63
ffffffff8020ab90: 93 e6 06 08          	ori	a3, a3, 128
ffffffff8020ab94: a3 02 d1 00          	sb	a3, 5(sp)
ffffffff8020ab98: 9b 56 66 00          	srliw	a3, a2, 6
ffffffff8020ab9c: 93 f6 f6 03          	andi	a3, a3, 63
ffffffff8020aba0: 93 e6 06 08          	ori	a3, a3, 128
ffffffff8020aba4: 23 03 d1 00          	sb	a3, 6(sp)
ffffffff8020aba8: 13 76 f6 03          	andi	a2, a2, 63
ffffffff8020abac: 13 66 06 08          	ori	a2, a2, 128
ffffffff8020abb0: a3 03 c1 00          	sb	a2, 7(sp)
ffffffff8020abb4: 11 46                	addi	a2, zero, 4
ffffffff8020abb6: 97 00 00 00          	auipc	ra, 0
ffffffff8020abba: e7 80 60 81          	jalr	-2026(ra)
ffffffff8020abbe: a2 60                	ld	ra, 8(sp)
ffffffff8020abc0: 41 01                	addi	sp, sp, 16
ffffffff8020abc2: 82 80                	ret

ffffffff8020abc4 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h99d0fa3a9ff66bb1E:
ffffffff8020abc4: 39 71                	addi	sp, sp, -64
ffffffff8020abc6: 06 fc                	sd	ra, 56(sp)
ffffffff8020abc8: 08 61                	ld	a0, 0(a0)
ffffffff8020abca: 90 75                	ld	a2, 40(a1)
ffffffff8020abcc: 94 71                	ld	a3, 32(a1)
ffffffff8020abce: 2a e0                	sd	a0, 0(sp)
ffffffff8020abd0: 32 f8                	sd	a2, 48(sp)
ffffffff8020abd2: 36 f4                	sd	a3, 40(sp)
ffffffff8020abd4: 88 6d                	ld	a0, 24(a1)
ffffffff8020abd6: 90 69                	ld	a2, 16(a1)
ffffffff8020abd8: 94 65                	ld	a3, 8(a1)
ffffffff8020abda: 8c 61                	ld	a1, 0(a1)
ffffffff8020abdc: 2a f0                	sd	a0, 32(sp)
ffffffff8020abde: 32 ec                	sd	a2, 24(sp)
ffffffff8020abe0: 36 e8                	sd	a3, 16(sp)
ffffffff8020abe2: 2e e4                	sd	a1, 8(sp)

ffffffff8020abe4 .LBB158_1:
ffffffff8020abe4: 97 55 00 00          	auipc	a1, 5
ffffffff8020abe8: 93 85 c5 9f          	addi	a1, a1, -1540
ffffffff8020abec: 0a 85                	add	a0, zero, sp
ffffffff8020abee: 30 00                	addi	a2, sp, 8
ffffffff8020abf0: 97 00 00 00          	auipc	ra, 0
ffffffff8020abf4: e7 80 00 04          	jalr	64(ra)
ffffffff8020abf8: e2 70                	ld	ra, 56(sp)
ffffffff8020abfa: 21 61                	addi	sp, sp, 64
ffffffff8020abfc: 82 80                	ret

ffffffff8020abfe _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17ha5d29d1af7bdcf5aE:
ffffffff8020abfe: 39 71                	addi	sp, sp, -64
ffffffff8020ac00: 06 fc                	sd	ra, 56(sp)
ffffffff8020ac02: 10 75                	ld	a2, 40(a0)
ffffffff8020ac04: 18 71                	ld	a4, 32(a0)
ffffffff8020ac06: 94 71                	ld	a3, 32(a1)
ffffffff8020ac08: 8c 75                	ld	a1, 40(a1)
ffffffff8020ac0a: 32 f8                	sd	a2, 48(sp)
ffffffff8020ac0c: 3a f4                	sd	a4, 40(sp)
ffffffff8020ac0e: 10 6d                	ld	a2, 24(a0)
ffffffff8020ac10: 18 69                	ld	a4, 16(a0)
ffffffff8020ac12: 1c 65                	ld	a5, 8(a0)
ffffffff8020ac14: 08 61                	ld	a0, 0(a0)
ffffffff8020ac16: 32 f0                	sd	a2, 32(sp)
ffffffff8020ac18: 3a ec                	sd	a4, 24(sp)
ffffffff8020ac1a: 3e e8                	sd	a5, 16(sp)
ffffffff8020ac1c: 2a e4                	sd	a0, 8(sp)
ffffffff8020ac1e: 30 00                	addi	a2, sp, 8
ffffffff8020ac20: 36 85                	add	a0, zero, a3
ffffffff8020ac22: 97 00 00 00          	auipc	ra, 0
ffffffff8020ac26: e7 80 e0 00          	jalr	14(ra)
ffffffff8020ac2a: e2 70                	ld	ra, 56(sp)
ffffffff8020ac2c: 21 61                	addi	sp, sp, 64
ffffffff8020ac2e: 82 80                	ret

ffffffff8020ac30 _ZN4core3fmt5write17hab57c96bb669b93aE:
ffffffff8020ac30: 35 71                	addi	sp, sp, -160
ffffffff8020ac32: 06 ed                	sd	ra, 152(sp)
ffffffff8020ac34: 22 e9                	sd	s0, 144(sp)
ffffffff8020ac36: 26 e5                	sd	s1, 136(sp)
ffffffff8020ac38: 4a e1                	sd	s2, 128(sp)
ffffffff8020ac3a: ce fc                	sd	s3, 120(sp)
ffffffff8020ac3c: d2 f8                	sd	s4, 112(sp)
ffffffff8020ac3e: d6 f4                	sd	s5, 104(sp)
ffffffff8020ac40: da f0                	sd	s6, 96(sp)
ffffffff8020ac42: de ec                	sd	s7, 88(sp)
ffffffff8020ac44: e2 e8                	sd	s8, 80(sp)
ffffffff8020ac46: e6 e4                	sd	s9, 72(sp)
ffffffff8020ac48: ea e0                	sd	s10, 64(sp)
ffffffff8020ac4a: 85 46                	addi	a3, zero, 1
ffffffff8020ac4c: 96 16                	slli	a3, a3, 37
ffffffff8020ac4e: 36 f8                	sd	a3, 48(sp)
ffffffff8020ac50: 8d 46                	addi	a3, zero, 3
ffffffff8020ac52: 23 0c d1 02          	sb	a3, 56(sp)
ffffffff8020ac56: 04 6a                	ld	s1, 16(a2)
ffffffff8020ac58: 02 e0                	sd	zero, 0(sp)
ffffffff8020ac5a: 02 e8                	sd	zero, 16(sp)
ffffffff8020ac5c: 2a f0                	sd	a0, 32(sp)
ffffffff8020ac5e: 2e f4                	sd	a1, 40(sp)
ffffffff8020ac60: 63 81 04 10          	beqz	s1, 258
ffffffff8020ac64: 14 6e                	ld	a3, 24(a2)
ffffffff8020ac66: 03 3a 86 00          	ld	s4, 8(a2)
ffffffff8020ac6a: 83 39 06 00          	ld	s3, 0(a2)
ffffffff8020ac6e: d2 8b                	add	s7, zero, s4
ffffffff8020ac70: 63 63 da 00          	bltu	s4, a3, 6
ffffffff8020ac74: b6 8b                	add	s7, zero, a3
ffffffff8020ac76: 63 84 0b 14          	beqz	s7, 328
ffffffff8020ac7a: 03 3b 06 02          	ld	s6, 32(a2)
ffffffff8020ac7e: 83 3a 86 02          	ld	s5, 40(a2)
ffffffff8020ac82: 83 b6 09 00          	ld	a3, 0(s3)
ffffffff8020ac86: 03 b6 89 00          	ld	a2, 8(s3)
ffffffff8020ac8a: 98 6d                	ld	a4, 24(a1)
ffffffff8020ac8c: b6 85                	add	a1, zero, a3
ffffffff8020ac8e: 02 97                	jalr	a4
ffffffff8020ac90: 63 15 05 14          	bnez	a0, 330
ffffffff8020ac94: 01 44                	mv	s0, zero
ffffffff8020ac96: 93 84 04 03          	addi	s1, s1, 48
ffffffff8020ac9a: 13 8d 89 01          	addi	s10, s3, 24
ffffffff8020ac9e: 0a 89                	add	s2, zero, sp
ffffffff8020aca0: 09 4c                	addi	s8, zero, 2

ffffffff8020aca2 .LBB162_41:
ffffffff8020aca2: 97 fc ff ff          	auipc	s9, 1048575
ffffffff8020aca6: 93 8c 6c 58          	addi	s9, s9, 1414
ffffffff8020acaa: 03 a5 84 ff          	lw	a0, -8(s1)
ffffffff8020acae: 2a da                	sw	a0, 52(sp)
ffffffff8020acb0: 03 85 04 00          	lb	a0, 0(s1)
ffffffff8020acb4: 23 0c a1 02          	sb	a0, 56(sp)
ffffffff8020acb8: 03 a5 c4 ff          	lw	a0, -4(s1)
ffffffff8020acbc: 2a d8                	sw	a0, 48(sp)
ffffffff8020acbe: 03 b6 84 fe          	ld	a2, -24(s1)
ffffffff8020acc2: 03 b5 04 ff          	ld	a0, -16(s1)
ffffffff8020acc6: 09 ce                	beqz	a2, 26
ffffffff8020acc8: 81 45                	mv	a1, zero
ffffffff8020acca: 63 0e 86 01          	beq	a2, s8, 28
ffffffff8020acce: 63 77 55 13          	bgeu	a0, s5, 302
ffffffff8020acd2: 12 05                	slli	a0, a0, 4
ffffffff8020acd4: 5a 95                	add	a0, a0, s6
ffffffff8020acd6: 0c 65                	ld	a1, 8(a0)
ffffffff8020acd8: 63 96 95 01          	bne	a1, s9, 12
ffffffff8020acdc: 08 61                	ld	a0, 0(a0)
ffffffff8020acde: 08 61                	ld	a0, 0(a0)
ffffffff8020ace0: 85 45                	addi	a1, zero, 1
ffffffff8020ace2: 11 a0                	j	4
ffffffff8020ace4: 81 45                	mv	a1, zero
ffffffff8020ace6: 2e e0                	sd	a1, 0(sp)
ffffffff8020ace8: 2a e4                	sd	a0, 8(sp)
ffffffff8020acea: 03 b6 84 fd          	ld	a2, -40(s1)
ffffffff8020acee: 03 b5 04 fe          	ld	a0, -32(s1)
ffffffff8020acf2: 09 ce                	beqz	a2, 26
ffffffff8020acf4: 81 45                	mv	a1, zero
ffffffff8020acf6: 63 0c 86 01          	beq	a2, s8, 24
ffffffff8020acfa: 63 71 55 11          	bgeu	a0, s5, 258
ffffffff8020acfe: 12 05                	slli	a0, a0, 4
ffffffff8020ad00: 5a 95                	add	a0, a0, s6
ffffffff8020ad02: 0c 65                	ld	a1, 8(a0)
ffffffff8020ad04: 63 93 95 05          	bne	a1, s9, 70
ffffffff8020ad08: 08 61                	ld	a0, 0(a0)
ffffffff8020ad0a: 08 61                	ld	a0, 0(a0)
ffffffff8020ad0c: 85 45                	addi	a1, zero, 1
ffffffff8020ad0e: 2e e8                	sd	a1, 16(sp)
ffffffff8020ad10: 2a ec                	sd	a0, 24(sp)
ffffffff8020ad12: 03 b5 04 fd          	ld	a0, -48(s1)
ffffffff8020ad16: 63 71 55 05          	bgeu	a0, s5, 66
ffffffff8020ad1a: 12 05                	slli	a0, a0, 4
ffffffff8020ad1c: b3 05 ab 00          	add	a1, s6, a0
ffffffff8020ad20: 88 61                	ld	a0, 0(a1)
ffffffff8020ad22: 90 65                	ld	a2, 8(a1)
ffffffff8020ad24: ca 85                	add	a1, zero, s2
ffffffff8020ad26: 02 96                	jalr	a2
ffffffff8020ad28: 4d e9                	bnez	a0, 178
ffffffff8020ad2a: 05 04                	addi	s0, s0, 1
ffffffff8020ad2c: 63 7a 74 09          	bgeu	s0, s7, 148
ffffffff8020ad30: a2 76                	ld	a3, 40(sp)
ffffffff8020ad32: 02 75                	ld	a0, 32(sp)
ffffffff8020ad34: 83 35 8d ff          	ld	a1, -8(s10)
ffffffff8020ad38: 03 36 0d 00          	ld	a2, 0(s10)
ffffffff8020ad3c: 94 6e                	ld	a3, 24(a3)
ffffffff8020ad3e: 93 84 84 03          	addi	s1, s1, 56
ffffffff8020ad42: 41 0d                	addi	s10, s10, 16
ffffffff8020ad44: 82 96                	jalr	a3
ffffffff8020ad46: 35 d1                	beqz	a0, -156
ffffffff8020ad48: 49 a8                	j	146
ffffffff8020ad4a: 81 45                	mv	a1, zero
ffffffff8020ad4c: 2e e8                	sd	a1, 16(sp)
ffffffff8020ad4e: 2a ec                	sd	a0, 24(sp)
ffffffff8020ad50: 03 b5 04 fd          	ld	a0, -48(s1)
ffffffff8020ad54: e3 63 55 fd          	bltu	a0, s5, -58

ffffffff8020ad58 .LBB162_42:
ffffffff8020ad58: 17 56 00 00          	auipc	a2, 5
ffffffff8020ad5c: 13 06 06 8d          	addi	a2, a2, -1840
ffffffff8020ad60: 55 a0                	j	164
ffffffff8020ad62: 00 72                	ld	s0, 32(a2)
ffffffff8020ad64: 14 76                	ld	a3, 40(a2)
ffffffff8020ad66: 03 3a 86 00          	ld	s4, 8(a2)
ffffffff8020ad6a: 83 39 06 00          	ld	s3, 0(a2)
ffffffff8020ad6e: d2 8b                	add	s7, zero, s4
ffffffff8020ad70: 63 63 da 00          	bltu	s4, a3, 6
ffffffff8020ad74: b6 8b                	add	s7, zero, a3
ffffffff8020ad76: 63 84 0b 04          	beqz	s7, 72
ffffffff8020ad7a: 83 b6 09 00          	ld	a3, 0(s3)
ffffffff8020ad7e: 03 b6 89 00          	ld	a2, 8(s3)
ffffffff8020ad82: 98 6d                	ld	a4, 24(a1)
ffffffff8020ad84: b6 85                	add	a1, zero, a3
ffffffff8020ad86: 02 97                	jalr	a4
ffffffff8020ad88: 29 e9                	bnez	a0, 82
ffffffff8020ad8a: 81 44                	mv	s1, zero
ffffffff8020ad8c: 21 04                	addi	s0, s0, 8
ffffffff8020ad8e: 93 8a 89 01          	addi	s5, s3, 24
ffffffff8020ad92: 0a 89                	add	s2, zero, sp
ffffffff8020ad94: 10 60                	ld	a2, 0(s0)
ffffffff8020ad96: 03 35 84 ff          	ld	a0, -8(s0)
ffffffff8020ad9a: ca 85                	add	a1, zero, s2
ffffffff8020ad9c: 02 96                	jalr	a2
ffffffff8020ad9e: 15 ed                	bnez	a0, 60
ffffffff8020ada0: 85 04                	addi	s1, s1, 1
ffffffff8020ada2: 63 ff 74 01          	bgeu	s1, s7, 30
ffffffff8020ada6: a2 76                	ld	a3, 40(sp)
ffffffff8020ada8: 02 75                	ld	a0, 32(sp)
ffffffff8020adaa: 83 b5 8a ff          	ld	a1, -8(s5)
ffffffff8020adae: 03 b6 0a 00          	ld	a2, 0(s5)
ffffffff8020adb2: 94 6e                	ld	a3, 24(a3)
ffffffff8020adb4: 41 04                	addi	s0, s0, 16
ffffffff8020adb6: c1 0a                	addi	s5, s5, 16
ffffffff8020adb8: 82 96                	jalr	a3
ffffffff8020adba: 69 dd                	beqz	a0, -38
ffffffff8020adbc: 39 a8                	j	30
ffffffff8020adbe: 81 4b                	mv	s7, zero
ffffffff8020adc0: 63 ff 4b 01          	bgeu	s7, s4, 30
ffffffff8020adc4: 02 75                	ld	a0, 32(sp)
ffffffff8020adc6: a2 76                	ld	a3, 40(sp)
ffffffff8020adc8: 93 95 4b 00          	slli	a1, s7, 4
ffffffff8020adcc: 33 86 b9 00          	add	a2, s3, a1
ffffffff8020add0: 0c 62                	ld	a1, 0(a2)
ffffffff8020add2: 10 66                	ld	a2, 8(a2)
ffffffff8020add4: 94 6e                	ld	a3, 24(a3)
ffffffff8020add6: 82 96                	jalr	a3
ffffffff8020add8: 19 c1                	beqz	a0, 6
ffffffff8020adda: 05 45                	addi	a0, zero, 1
ffffffff8020addc: 11 a0                	j	4
ffffffff8020adde: 01 45                	mv	a0, zero
ffffffff8020ade0: 06 6d                	ld	s10, 64(sp)
ffffffff8020ade2: a6 6c                	ld	s9, 72(sp)
ffffffff8020ade4: 46 6c                	ld	s8, 80(sp)
ffffffff8020ade6: e6 6b                	ld	s7, 88(sp)
ffffffff8020ade8: 06 7b                	ld	s6, 96(sp)
ffffffff8020adea: a6 7a                	ld	s5, 104(sp)
ffffffff8020adec: 46 7a                	ld	s4, 112(sp)
ffffffff8020adee: e6 79                	ld	s3, 120(sp)
ffffffff8020adf0: 0a 69                	ld	s2, 128(sp)
ffffffff8020adf2: aa 64                	ld	s1, 136(sp)
ffffffff8020adf4: 4a 64                	ld	s0, 144(sp)
ffffffff8020adf6: ea 60                	ld	ra, 152(sp)
ffffffff8020adf8: 0d 61                	addi	sp, sp, 160
ffffffff8020adfa: 82 80                	ret

ffffffff8020adfc .LBB162_43:
ffffffff8020adfc: 17 56 00 00          	auipc	a2, 5
ffffffff8020ae00: 13 06 46 84          	addi	a2, a2, -1980
ffffffff8020ae04: d6 85                	add	a1, zero, s5
ffffffff8020ae06: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020ae0a: e7 80 e0 55          	jalr	1374(ra)
ffffffff8020ae0e: 00 00                	unimp	

ffffffff8020ae10 _ZN4core3fmt9Formatter12pad_integral17hd6c3049cc532f3cdE:
ffffffff8020ae10: 59 71                	addi	sp, sp, -112
ffffffff8020ae12: 86 f4                	sd	ra, 104(sp)
ffffffff8020ae14: a2 f0                	sd	s0, 96(sp)
ffffffff8020ae16: a6 ec                	sd	s1, 88(sp)
ffffffff8020ae18: ca e8                	sd	s2, 80(sp)
ffffffff8020ae1a: ce e4                	sd	s3, 72(sp)
ffffffff8020ae1c: d2 e0                	sd	s4, 64(sp)
ffffffff8020ae1e: 56 fc                	sd	s5, 56(sp)
ffffffff8020ae20: 5a f8                	sd	s6, 48(sp)
ffffffff8020ae22: 5e f4                	sd	s7, 40(sp)
ffffffff8020ae24: 62 f0                	sd	s8, 32(sp)
ffffffff8020ae26: 66 ec                	sd	s9, 24(sp)
ffffffff8020ae28: 6a e8                	sd	s10, 16(sp)
ffffffff8020ae2a: 6e e4                	sd	s11, 8(sp)
ffffffff8020ae2c: be 89                	add	s3, zero, a5
ffffffff8020ae2e: 3a 89                	add	s2, zero, a4
ffffffff8020ae30: b6 8a                	add	s5, zero, a3
ffffffff8020ae32: 2a 84                	add	s0, zero, a0
ffffffff8020ae34: b1 c9                	beqz	a1, 84
ffffffff8020ae36: 03 65 04 03          	lwu	a0, 48(s0)
ffffffff8020ae3a: 93 75 15 00          	andi	a1, a0, 1
ffffffff8020ae3e: 37 0a 11 00          	lui	s4, 272
ffffffff8020ae42: 99 c1                	beqz	a1, 6
ffffffff8020ae44: 13 0a b0 02          	addi	s4, zero, 43
ffffffff8020ae48: b3 8c 35 01          	add	s9, a1, s3
ffffffff8020ae4c: 93 75 45 00          	andi	a1, a0, 4
ffffffff8020ae50: a9 c5                	beqz	a1, 74
ffffffff8020ae52: 81 45                	mv	a1, zero
ffffffff8020ae54: 63 80 0a 02          	beqz	s5, 32
ffffffff8020ae58: d6 86                	add	a3, zero, s5
ffffffff8020ae5a: 32 87                	add	a4, zero, a2
ffffffff8020ae5c: 83 47 07 00          	lbu	a5, 0(a4)
ffffffff8020ae60: 05 07                	addi	a4, a4, 1
ffffffff8020ae62: 93 f7 07 0c          	andi	a5, a5, 192
ffffffff8020ae66: 93 c7 07 08          	xori	a5, a5, 128
ffffffff8020ae6a: 93 b7 17 00          	seqz	a5, a5
ffffffff8020ae6e: fd 16                	addi	a3, a3, -1
ffffffff8020ae70: be 95                	add	a1, a1, a5
ffffffff8020ae72: ed f6                	bnez	a3, -22
ffffffff8020ae74: b3 86 5c 01          	add	a3, s9, s5
ffffffff8020ae78: b3 8c b6 40          	sub	s9, a3, a1
ffffffff8020ae7c: 32 8b                	add	s6, zero, a2
ffffffff8020ae7e: 0c 60                	ld	a1, 0(s0)
ffffffff8020ae80: 85 4d                	addi	s11, zero, 1
ffffffff8020ae82: 63 81 b5 03          	beq	a1, s11, 34
ffffffff8020ae86: a9 a0                	j	74
ffffffff8020ae88: 03 65 04 03          	lwu	a0, 48(s0)
ffffffff8020ae8c: 93 8c 19 00          	addi	s9, s3, 1
ffffffff8020ae90: 13 0a d0 02          	addi	s4, zero, 45
ffffffff8020ae94: 93 75 45 00          	andi	a1, a0, 4
ffffffff8020ae98: cd fd                	bnez	a1, -70
ffffffff8020ae9a: 01 4b                	mv	s6, zero
ffffffff8020ae9c: 0c 60                	ld	a1, 0(s0)
ffffffff8020ae9e: 85 4d                	addi	s11, zero, 1
ffffffff8020aea0: 63 98 b5 03          	bne	a1, s11, 48
ffffffff8020aea4: 03 3d 84 00          	ld	s10, 8(s0)
ffffffff8020aea8: 63 f4 ac 03          	bgeu	s9, s10, 40
ffffffff8020aeac: 21 89                	andi	a0, a0, 8
ffffffff8020aeae: 2d e1                	bnez	a0, 98
ffffffff8020aeb0: 03 45 84 03          	lbu	a0, 56(s0)
ffffffff8020aeb4: 05 46                	addi	a2, zero, 1
ffffffff8020aeb6: 8d 46                	addi	a3, zero, 3
ffffffff8020aeb8: 85 45                	addi	a1, zero, 1
ffffffff8020aeba: 63 03 d5 00          	beq	a0, a3, 6
ffffffff8020aebe: aa 85                	add	a1, zero, a0
ffffffff8020aec0: 33 05 9d 41          	sub	a0, s10, s9
ffffffff8020aec4: 63 49 b6 08          	blt	a2, a1, 146
ffffffff8020aec8: d1 e9                	bnez	a1, 148
ffffffff8020aeca: 2a 8c                	add	s8, zero, a0
ffffffff8020aecc: 01 45                	mv	a0, zero
ffffffff8020aece: 5d a0                	j	166
ffffffff8020aed0: 22 85                	add	a0, zero, s0
ffffffff8020aed2: d2 85                	add	a1, zero, s4
ffffffff8020aed4: 5a 86                	add	a2, zero, s6
ffffffff8020aed6: d6 86                	add	a3, zero, s5
ffffffff8020aed8: 97 00 00 00          	auipc	ra, 0
ffffffff8020aedc: e7 80 80 15          	jalr	344(ra)
ffffffff8020aee0: 01 e9                	bnez	a0, 16
ffffffff8020aee2: 0c 74                	ld	a1, 40(s0)
ffffffff8020aee4: 08 70                	ld	a0, 32(s0)
ffffffff8020aee6: 94 6d                	ld	a3, 24(a1)
ffffffff8020aee8: ca 85                	add	a1, zero, s2
ffffffff8020aeea: 4e 86                	add	a2, zero, s3
ffffffff8020aeec: 82 96                	jalr	a3
ffffffff8020aeee: aa 8d                	add	s11, zero, a0
ffffffff8020aef0: 6e 85                	add	a0, zero, s11
ffffffff8020aef2: a2 6d                	ld	s11, 8(sp)
ffffffff8020aef4: 42 6d                	ld	s10, 16(sp)
ffffffff8020aef6: e2 6c                	ld	s9, 24(sp)
ffffffff8020aef8: 02 7c                	ld	s8, 32(sp)
ffffffff8020aefa: a2 7b                	ld	s7, 40(sp)
ffffffff8020aefc: 42 7b                	ld	s6, 48(sp)
ffffffff8020aefe: e2 7a                	ld	s5, 56(sp)
ffffffff8020af00: 06 6a                	ld	s4, 64(sp)
ffffffff8020af02: a6 69                	ld	s3, 72(sp)
ffffffff8020af04: 46 69                	ld	s2, 80(sp)
ffffffff8020af06: e6 64                	ld	s1, 88(sp)
ffffffff8020af08: 06 74                	ld	s0, 96(sp)
ffffffff8020af0a: a6 70                	ld	ra, 104(sp)
ffffffff8020af0c: 65 61                	addi	sp, sp, 112
ffffffff8020af0e: 82 80                	ret
ffffffff8020af10: 83 6b 44 03          	lwu	s7, 52(s0)
ffffffff8020af14: 13 05 00 03          	addi	a0, zero, 48
ffffffff8020af18: 03 4c 84 03          	lbu	s8, 56(s0)
ffffffff8020af1c: 48 d8                	sw	a0, 52(s0)
ffffffff8020af1e: 85 4d                	addi	s11, zero, 1
ffffffff8020af20: 23 0c b4 03          	sb	s11, 56(s0)
ffffffff8020af24: 22 85                	add	a0, zero, s0
ffffffff8020af26: d2 85                	add	a1, zero, s4
ffffffff8020af28: 5a 86                	add	a2, zero, s6
ffffffff8020af2a: d6 86                	add	a3, zero, s5
ffffffff8020af2c: 97 00 00 00          	auipc	ra, 0
ffffffff8020af30: e7 80 40 10          	jalr	260(ra)
ffffffff8020af34: 55 fd                	bnez	a0, -68
ffffffff8020af36: 03 45 84 03          	lbu	a0, 56(s0)
ffffffff8020af3a: 05 46                	addi	a2, zero, 1
ffffffff8020af3c: 8d 46                	addi	a3, zero, 3
ffffffff8020af3e: 85 45                	addi	a1, zero, 1
ffffffff8020af40: 63 03 d5 00          	beq	a0, a3, 6
ffffffff8020af44: aa 85                	add	a1, zero, a0
ffffffff8020af46: 33 05 9d 41          	sub	a0, s10, s9
ffffffff8020af4a: 63 4b b6 00          	blt	a2, a1, 22
ffffffff8020af4e: 81 ed                	bnez	a1, 24
ffffffff8020af50: aa 8a                	add	s5, zero, a0
ffffffff8020af52: 01 45                	mv	a0, zero
ffffffff8020af54: 41 a0                	j	128
ffffffff8020af56: 0d 46                	addi	a2, zero, 3
ffffffff8020af58: 63 99 c5 00          	bne	a1, a2, 18
ffffffff8020af5c: 01 4c                	mv	s8, zero
ffffffff8020af5e: 19 a8                	j	22
ffffffff8020af60: 0d 46                	addi	a2, zero, 3
ffffffff8020af62: 63 94 c5 06          	bne	a1, a2, 104
ffffffff8020af66: 81 4a                	mv	s5, zero
ffffffff8020af68: b5 a0                	j	108
ffffffff8020af6a: 93 05 15 00          	addi	a1, a0, 1
ffffffff8020af6e: 05 81                	srli	a0, a0, 1
ffffffff8020af70: 13 dc 15 00          	srli	s8, a1, 1
ffffffff8020af74: 93 04 15 00          	addi	s1, a0, 1
ffffffff8020af78: fd 14                	addi	s1, s1, -1
ffffffff8020af7a: 81 c8                	beqz	s1, 16
ffffffff8020af7c: 0c 74                	ld	a1, 40(s0)
ffffffff8020af7e: 08 70                	ld	a0, 32(s0)
ffffffff8020af80: 90 71                	ld	a2, 32(a1)
ffffffff8020af82: 4c 58                	lw	a1, 52(s0)
ffffffff8020af84: 02 96                	jalr	a2
ffffffff8020af86: 6d d9                	beqz	a0, -14
ffffffff8020af88: 85 a0                	j	96
ffffffff8020af8a: 83 6b 44 03          	lwu	s7, 52(s0)
ffffffff8020af8e: 22 85                	add	a0, zero, s0
ffffffff8020af90: d2 85                	add	a1, zero, s4
ffffffff8020af92: 5a 86                	add	a2, zero, s6
ffffffff8020af94: d6 86                	add	a3, zero, s5
ffffffff8020af96: 97 00 00 00          	auipc	ra, 0
ffffffff8020af9a: e7 80 a0 09          	jalr	154(ra)
ffffffff8020af9e: 85 4d                	addi	s11, zero, 1
ffffffff8020afa0: 21 f9                	bnez	a0, -176
ffffffff8020afa2: 0c 74                	ld	a1, 40(s0)
ffffffff8020afa4: 08 70                	ld	a0, 32(s0)
ffffffff8020afa6: 94 6d                	ld	a3, 24(a1)
ffffffff8020afa8: ca 85                	add	a1, zero, s2
ffffffff8020afaa: 4e 86                	add	a2, zero, s3
ffffffff8020afac: 82 96                	jalr	a3
ffffffff8020afae: 29 f1                	bnez	a0, -190
ffffffff8020afb0: 03 39 04 02          	ld	s2, 32(s0)
ffffffff8020afb4: 00 74                	ld	s0, 40(s0)
ffffffff8020afb6: 93 04 1c 00          	addi	s1, s8, 1
ffffffff8020afba: fd 14                	addi	s1, s1, -1
ffffffff8020afbc: b5 c0                	beqz	s1, 100
ffffffff8020afbe: 10 70                	ld	a2, 32(s0)
ffffffff8020afc0: 4a 85                	add	a0, zero, s2
ffffffff8020afc2: de 85                	add	a1, zero, s7
ffffffff8020afc4: 02 96                	jalr	a2
ffffffff8020afc6: 75 d9                	beqz	a0, -12
ffffffff8020afc8: 25 b7                	j	-216
ffffffff8020afca: 93 05 15 00          	addi	a1, a0, 1
ffffffff8020afce: 05 81                	srli	a0, a0, 1
ffffffff8020afd0: 93 da 15 00          	srli	s5, a1, 1
ffffffff8020afd4: 93 04 15 00          	addi	s1, a0, 1
ffffffff8020afd8: fd 14                	addi	s1, s1, -1
ffffffff8020afda: 89 c8                	beqz	s1, 18
ffffffff8020afdc: 0c 74                	ld	a1, 40(s0)
ffffffff8020afde: 08 70                	ld	a0, 32(s0)
ffffffff8020afe0: 90 71                	ld	a2, 32(a1)
ffffffff8020afe2: 4c 58                	lw	a1, 52(s0)
ffffffff8020afe4: 02 96                	jalr	a2
ffffffff8020afe6: 6d d9                	beqz	a0, -14
ffffffff8020afe8: 85 4d                	addi	s11, zero, 1
ffffffff8020afea: 19 b7                	j	-250
ffffffff8020afec: 0c 74                	ld	a1, 40(s0)
ffffffff8020afee: 03 6a 44 03          	lwu	s4, 52(s0)
ffffffff8020aff2: 08 70                	ld	a0, 32(s0)
ffffffff8020aff4: 94 6d                	ld	a3, 24(a1)
ffffffff8020aff6: ca 85                	add	a1, zero, s2
ffffffff8020aff8: 4e 86                	add	a2, zero, s3
ffffffff8020affa: 82 96                	jalr	a3
ffffffff8020affc: 85 4d                	addi	s11, zero, 1
ffffffff8020affe: e3 19 05 ee          	bnez	a0, -270
ffffffff8020b002: 03 39 04 02          	ld	s2, 32(s0)
ffffffff8020b006: 83 39 84 02          	ld	s3, 40(s0)
ffffffff8020b00a: 93 84 1a 00          	addi	s1, s5, 1
ffffffff8020b00e: fd 14                	addi	s1, s1, -1
ffffffff8020b010: 91 c8                	beqz	s1, 20
ffffffff8020b012: 03 b6 09 02          	ld	a2, 32(s3)
ffffffff8020b016: 4a 85                	add	a0, zero, s2
ffffffff8020b018: d2 85                	add	a1, zero, s4
ffffffff8020b01a: 02 96                	jalr	a2
ffffffff8020b01c: 6d d9                	beqz	a0, -14
ffffffff8020b01e: c9 bd                	j	-302
ffffffff8020b020: 81 4d                	mv	s11, zero
ffffffff8020b022: f9 b5                	j	-306
ffffffff8020b024: 81 4d                	mv	s11, zero
ffffffff8020b026: 23 2a 74 03          	sw	s7, 52(s0)
ffffffff8020b02a: 23 0c 84 03          	sb	s8, 56(s0)
ffffffff8020b02e: c9 b5                	j	-318

ffffffff8020b030 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hf78ea515610d6c2eE:
ffffffff8020b030: 01 11                	addi	sp, sp, -32
ffffffff8020b032: 06 ec                	sd	ra, 24(sp)
ffffffff8020b034: 22 e8                	sd	s0, 16(sp)
ffffffff8020b036: 26 e4                	sd	s1, 8(sp)
ffffffff8020b038: 4a e0                	sd	s2, 0(sp)
ffffffff8020b03a: 13 97 05 02          	slli	a4, a1, 32
ffffffff8020b03e: 01 93                	srli	a4, a4, 32
ffffffff8020b040: b7 07 11 00          	lui	a5, 272
ffffffff8020b044: 36 89                	add	s2, zero, a3
ffffffff8020b046: b2 84                	add	s1, zero, a2
ffffffff8020b048: 2a 84                	add	s0, zero, a0
ffffffff8020b04a: 63 09 f7 00          	beq	a4, a5, 18
ffffffff8020b04e: 10 74                	ld	a2, 40(s0)
ffffffff8020b050: 08 70                	ld	a0, 32(s0)
ffffffff8020b052: 10 72                	ld	a2, 32(a2)
ffffffff8020b054: 02 96                	jalr	a2
ffffffff8020b056: aa 85                	add	a1, zero, a0
ffffffff8020b058: 05 45                	addi	a0, zero, 1
ffffffff8020b05a: 91 e9                	bnez	a1, 20
ffffffff8020b05c: 81 c8                	beqz	s1, 16
ffffffff8020b05e: 0c 74                	ld	a1, 40(s0)
ffffffff8020b060: 08 70                	ld	a0, 32(s0)
ffffffff8020b062: 94 6d                	ld	a3, 24(a1)
ffffffff8020b064: a6 85                	add	a1, zero, s1
ffffffff8020b066: 4a 86                	add	a2, zero, s2
ffffffff8020b068: 82 96                	jalr	a3
ffffffff8020b06a: 11 a0                	j	4
ffffffff8020b06c: 01 45                	mv	a0, zero
ffffffff8020b06e: 02 69                	ld	s2, 0(sp)
ffffffff8020b070: a2 64                	ld	s1, 8(sp)
ffffffff8020b072: 42 64                	ld	s0, 16(sp)
ffffffff8020b074: e2 60                	ld	ra, 24(sp)
ffffffff8020b076: 05 61                	addi	sp, sp, 32
ffffffff8020b078: 82 80                	ret

ffffffff8020b07a _ZN4core3fmt9Formatter3pad17h017f758b28b77478E:
ffffffff8020b07a: 39 71                	addi	sp, sp, -64
ffffffff8020b07c: 06 fc                	sd	ra, 56(sp)
ffffffff8020b07e: 22 f8                	sd	s0, 48(sp)
ffffffff8020b080: 26 f4                	sd	s1, 40(sp)
ffffffff8020b082: 4a f0                	sd	s2, 32(sp)
ffffffff8020b084: 4e ec                	sd	s3, 24(sp)
ffffffff8020b086: 52 e8                	sd	s4, 16(sp)
ffffffff8020b088: 56 e4                	sd	s5, 8(sp)
ffffffff8020b08a: 5a e0                	sd	s6, 0(sp)
ffffffff8020b08c: 2a 8b                	add	s6, zero, a0
ffffffff8020b08e: 83 33 05 00          	ld	t2, 0(a0)
ffffffff8020b092: 08 69                	ld	a0, 16(a0)
ffffffff8020b094: 85 46                	addi	a3, zero, 1
ffffffff8020b096: 32 8a                	add	s4, zero, a2
ffffffff8020b098: 2e 89                	add	s2, zero, a1
ffffffff8020b09a: 63 95 d3 00          	bne	t2, a3, 10
ffffffff8020b09e: 63 05 d5 00          	beq	a0, a3, 10
ffffffff8020b0a2: 09 aa                	j	274
ffffffff8020b0a4: 63 11 d5 18          	bne	a0, a3, 386
ffffffff8020b0a8: 63 0c 0a 0c          	beqz	s4, 216
ffffffff8020b0ac: 03 35 8b 01          	ld	a0, 24(s6)
ffffffff8020b0b0: 81 45                	mv	a1, zero
ffffffff8020b0b2: 33 07 49 01          	add	a4, s2, s4
ffffffff8020b0b6: 93 06 15 00          	addi	a3, a0, 1
ffffffff8020b0ba: 7d 5e                	addi	t3, zero, -1
ffffffff8020b0bc: 13 03 f0 0d          	addi	t1, zero, 223
ffffffff8020b0c0: 13 08 00 0f          	addi	a6, zero, 240
ffffffff8020b0c4: b7 08 1c 00          	lui	a7, 448
ffffffff8020b0c8: b7 02 11 00          	lui	t0, 272
ffffffff8020b0cc: ca 87                	add	a5, zero, s2
ffffffff8020b0ce: 4a 85                	add	a0, zero, s2
ffffffff8020b0d0: 03 84 07 00          	lb	s0, 0(a5)
ffffffff8020b0d4: 13 86 17 00          	addi	a2, a5, 1
ffffffff8020b0d8: 93 74 f4 0f          	andi	s1, s0, 255
ffffffff8020b0dc: 63 54 8e 00          	bge	t3, s0, 8
ffffffff8020b0e0: b2 87                	add	a5, zero, a2
ffffffff8020b0e2: 69 a0                	j	138
ffffffff8020b0e4: 63 03 e6 04          	beq	a2, a4, 70
ffffffff8020b0e8: 03 c4 17 00          	lbu	s0, 1(a5)
ffffffff8020b0ec: 13 86 27 00          	addi	a2, a5, 2
ffffffff8020b0f0: 13 74 f4 03          	andi	s0, s0, 63
ffffffff8020b0f4: b2 87                	add	a5, zero, a2
ffffffff8020b0f6: 93 fe f4 01          	andi	t4, s1, 31
ffffffff8020b0fa: 63 7f 93 02          	bgeu	t1, s1, 62
ffffffff8020b0fe: 63 02 e6 04          	beq	a2, a4, 68
ffffffff8020b102: 03 4f 06 00          	lbu	t5, 0(a2)
ffffffff8020b106: 93 07 16 00          	addi	a5, a2, 1
ffffffff8020b10a: 13 76 ff 03          	andi	a2, t5, 63
ffffffff8020b10e: 3e 8f                	add	t5, zero, a5
ffffffff8020b110: 1a 04                	slli	s0, s0, 6
ffffffff8020b112: 51 8c                	or	s0, s0, a2
ffffffff8020b114: 63 ed 04 03          	bltu	s1, a6, 58
ffffffff8020b118: 63 00 ef 04          	beq	t5, a4, 64
ffffffff8020b11c: 03 46 0f 00          	lbu	a2, 0(t5)
ffffffff8020b120: 93 07 1f 00          	addi	a5, t5, 1
ffffffff8020b124: 13 76 f6 03          	andi	a2, a2, 63
ffffffff8020b128: 0d a8                	j	50
ffffffff8020b12a: 01 44                	mv	s0, zero
ffffffff8020b12c: b2 87                	add	a5, zero, a2
ffffffff8020b12e: 3a 86                	add	a2, zero, a4
ffffffff8020b130: 93 fe f4 01          	andi	t4, s1, 31
ffffffff8020b134: e3 65 93 fc          	bltu	t1, s1, -54
ffffffff8020b138: 13 96 6e 00          	slli	a2, t4, 6
ffffffff8020b13c: b3 64 c4 00          	or	s1, s0, a2
ffffffff8020b140: 35 a0                	j	44
ffffffff8020b142: 01 46                	mv	a2, zero
ffffffff8020b144: 3a 8f                	add	t5, zero, a4
ffffffff8020b146: 1a 04                	slli	s0, s0, 6
ffffffff8020b148: 51 8c                	or	s0, s0, a2
ffffffff8020b14a: e3 f7 04 fd          	bgeu	s1, a6, -50
ffffffff8020b14e: 13 96 ce 00          	slli	a2, t4, 12
ffffffff8020b152: b3 64 c4 00          	or	s1, s0, a2
ffffffff8020b156: 19 a8                	j	22
ffffffff8020b158: 01 46                	mv	a2, zero
ffffffff8020b15a: 93 94 2e 01          	slli	s1, t4, 18
ffffffff8020b15e: b3 f4 14 01          	and	s1, s1, a7
ffffffff8020b162: 1a 04                	slli	s0, s0, 6
ffffffff8020b164: c1 8c                	or	s1, s1, s0
ffffffff8020b166: d1 8c                	or	s1, s1, a2
ffffffff8020b168: 63 83 54 04          	beq	s1, t0, 70
ffffffff8020b16c: fd 16                	addi	a3, a3, -1
ffffffff8020b16e: 99 ca                	beqz	a3, 22
ffffffff8020b170: 33 85 a5 40          	sub	a0, a1, a0
ffffffff8020b174: b3 05 f5 00          	add	a1, a0, a5
ffffffff8020b178: 3e 85                	add	a0, zero, a5
ffffffff8020b17a: e3 1b f7 f4          	bne	a4, a5, -170
ffffffff8020b17e: 05 a8                	j	48
ffffffff8020b180: 01 4a                	mv	s4, zero
ffffffff8020b182: 35 a0                	j	44
ffffffff8020b184: 37 05 11 00          	lui	a0, 272
ffffffff8020b188: 63 83 a4 02          	beq	s1, a0, 38
ffffffff8020b18c: 89 cd                	beqz	a1, 26
ffffffff8020b18e: 63 8c 45 01          	beq	a1, s4, 24
ffffffff8020b192: 63 f4 45 13          	bgeu	a1, s4, 296
ffffffff8020b196: 33 05 b9 00          	add	a0, s2, a1
ffffffff8020b19a: 03 05 05 00          	lb	a0, 0(a0)
ffffffff8020b19e: 13 06 00 fc          	addi	a2, zero, -64
ffffffff8020b1a2: 63 4c c5 10          	blt	a0, a2, 280
ffffffff8020b1a6: 4a 85                	add	a0, zero, s2
ffffffff8020b1a8: 19 c1                	beqz	a0, 6
ffffffff8020b1aa: 2a 89                	add	s2, zero, a0
ffffffff8020b1ac: 2e 8a                	add	s4, zero, a1
ffffffff8020b1ae: 05 45                	addi	a0, zero, 1
ffffffff8020b1b0: 63 9b a3 06          	bne	t2, a0, 118
ffffffff8020b1b4: 81 45                	mv	a1, zero
ffffffff8020b1b6: 63 00 0a 02          	beqz	s4, 32
ffffffff8020b1ba: 52 85                	add	a0, zero, s4
ffffffff8020b1bc: 4a 86                	add	a2, zero, s2
ffffffff8020b1be: 83 46 06 00          	lbu	a3, 0(a2)
ffffffff8020b1c2: 05 06                	addi	a2, a2, 1
ffffffff8020b1c4: 93 f6 06 0c          	andi	a3, a3, 192
ffffffff8020b1c8: 93 c6 06 08          	xori	a3, a3, 128
ffffffff8020b1cc: 93 b6 16 00          	seqz	a3, a3
ffffffff8020b1d0: 7d 15                	addi	a0, a0, -1
ffffffff8020b1d2: b6 95                	add	a1, a1, a3
ffffffff8020b1d4: 6d f5                	bnez	a0, -22
ffffffff8020b1d6: 03 35 8b 00          	ld	a0, 8(s6)
ffffffff8020b1da: b3 05 ba 40          	sub	a1, s4, a1
ffffffff8020b1de: 63 f4 a5 04          	bgeu	a1, a0, 72
ffffffff8020b1e2: 81 45                	mv	a1, zero
ffffffff8020b1e4: 63 00 0a 02          	beqz	s4, 32
ffffffff8020b1e8: 52 86                	add	a2, zero, s4
ffffffff8020b1ea: ca 86                	add	a3, zero, s2
ffffffff8020b1ec: 03 c7 06 00          	lbu	a4, 0(a3)
ffffffff8020b1f0: 85 06                	addi	a3, a3, 1
ffffffff8020b1f2: 13 77 07 0c          	andi	a4, a4, 192
ffffffff8020b1f6: 13 47 07 08          	xori	a4, a4, 128
ffffffff8020b1fa: 13 37 17 00          	seqz	a4, a4
ffffffff8020b1fe: 7d 16                	addi	a2, a2, -1
ffffffff8020b200: ba 95                	add	a1, a1, a4
ffffffff8020b202: 6d f6                	bnez	a2, -22
ffffffff8020b204: 83 46 8b 03          	lbu	a3, 56(s6)
ffffffff8020b208: 01 46                	mv	a2, zero
ffffffff8020b20a: 0d 47                	addi	a4, zero, 3
ffffffff8020b20c: b3 85 45 41          	sub	a1, a1, s4
ffffffff8020b210: 63 83 e6 00          	beq	a3, a4, 6
ffffffff8020b214: 36 86                	add	a2, zero, a3
ffffffff8020b216: 85 46                	addi	a3, zero, 1
ffffffff8020b218: 2e 95                	add	a0, a0, a1
ffffffff8020b21a: 63 ca c6 02          	blt	a3, a2, 52
ffffffff8020b21e: 1d ea                	bnez	a2, 54
ffffffff8020b220: aa 8a                	add	s5, zero, a0
ffffffff8020b222: 01 45                	mv	a0, zero
ffffffff8020b224: 3d a8                	j	62
ffffffff8020b226: 83 35 8b 02          	ld	a1, 40(s6)
ffffffff8020b22a: 03 35 0b 02          	ld	a0, 32(s6)
ffffffff8020b22e: 94 6d                	ld	a3, 24(a1)
ffffffff8020b230: ca 85                	add	a1, zero, s2
ffffffff8020b232: 52 86                	add	a2, zero, s4
ffffffff8020b234: 82 96                	jalr	a3
ffffffff8020b236: aa 84                	add	s1, zero, a0
ffffffff8020b238: 26 85                	add	a0, zero, s1
ffffffff8020b23a: 02 6b                	ld	s6, 0(sp)
ffffffff8020b23c: a2 6a                	ld	s5, 8(sp)
ffffffff8020b23e: 42 6a                	ld	s4, 16(sp)
ffffffff8020b240: e2 69                	ld	s3, 24(sp)
ffffffff8020b242: 02 79                	ld	s2, 32(sp)
ffffffff8020b244: a2 74                	ld	s1, 40(sp)
ffffffff8020b246: 42 74                	ld	s0, 48(sp)
ffffffff8020b248: e2 70                	ld	ra, 56(sp)
ffffffff8020b24a: 21 61                	addi	sp, sp, 64
ffffffff8020b24c: 82 80                	ret
ffffffff8020b24e: 8d 45                	addi	a1, zero, 3
ffffffff8020b250: 63 14 b6 00          	bne	a2, a1, 8
ffffffff8020b254: 81 4a                	mv	s5, zero
ffffffff8020b256: 31 a0                	j	12
ffffffff8020b258: 93 05 15 00          	addi	a1, a0, 1
ffffffff8020b25c: 05 81                	srli	a0, a0, 1
ffffffff8020b25e: 93 da 15 00          	srli	s5, a1, 1
ffffffff8020b262: 13 04 15 00          	addi	s0, a0, 1
ffffffff8020b266: 7d 14                	addi	s0, s0, -1
ffffffff8020b268: 01 cc                	beqz	s0, 24
ffffffff8020b26a: 83 35 8b 02          	ld	a1, 40(s6)
ffffffff8020b26e: 03 35 0b 02          	ld	a0, 32(s6)
ffffffff8020b272: 90 71                	ld	a2, 32(a1)
ffffffff8020b274: 83 25 4b 03          	lw	a1, 52(s6)
ffffffff8020b278: 02 96                	jalr	a2
ffffffff8020b27a: 75 d5                	beqz	a0, -20
ffffffff8020b27c: 85 44                	addi	s1, zero, 1
ffffffff8020b27e: 6d bf                	j	-70
ffffffff8020b280: 83 35 8b 02          	ld	a1, 40(s6)
ffffffff8020b284: 83 69 4b 03          	lwu	s3, 52(s6)
ffffffff8020b288: 03 35 0b 02          	ld	a0, 32(s6)
ffffffff8020b28c: 94 6d                	ld	a3, 24(a1)
ffffffff8020b28e: ca 85                	add	a1, zero, s2
ffffffff8020b290: 52 86                	add	a2, zero, s4
ffffffff8020b292: 82 96                	jalr	a3
ffffffff8020b294: 85 44                	addi	s1, zero, 1
ffffffff8020b296: 4d f1                	bnez	a0, -94
ffffffff8020b298: 03 39 0b 02          	ld	s2, 32(s6)
ffffffff8020b29c: 03 3a 8b 02          	ld	s4, 40(s6)
ffffffff8020b2a0: 13 84 1a 00          	addi	s0, s5, 1
ffffffff8020b2a4: 7d 14                	addi	s0, s0, -1
ffffffff8020b2a6: 01 c8                	beqz	s0, 16
ffffffff8020b2a8: 03 36 0a 02          	ld	a2, 32(s4)
ffffffff8020b2ac: 4a 85                	add	a0, zero, s2
ffffffff8020b2ae: ce 85                	add	a1, zero, s3
ffffffff8020b2b0: 02 96                	jalr	a2
ffffffff8020b2b2: 6d d9                	beqz	a0, -14
ffffffff8020b2b4: 51 b7                	j	-124
ffffffff8020b2b6: 81 44                	mv	s1, zero
ffffffff8020b2b8: 41 b7                	j	-128
ffffffff8020b2ba: 01 45                	mv	a0, zero
ffffffff8020b2bc: e3 09 05 ee          	beqz	a0, -270
ffffffff8020b2c0: ed b5                	j	-278

ffffffff8020b2c2 _ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_fmt17he08225d798b5c395E:
ffffffff8020b2c2: 39 71                	addi	sp, sp, -64
ffffffff8020b2c4: 06 fc                	sd	ra, 56(sp)
ffffffff8020b2c6: 90 75                	ld	a2, 40(a1)
ffffffff8020b2c8: 9c 71                	ld	a5, 32(a1)
ffffffff8020b2ca: 18 71                	ld	a4, 32(a0)
ffffffff8020b2cc: 14 75                	ld	a3, 40(a0)
ffffffff8020b2ce: 32 f8                	sd	a2, 48(sp)
ffffffff8020b2d0: 3e f4                	sd	a5, 40(sp)
ffffffff8020b2d2: 88 6d                	ld	a0, 24(a1)
ffffffff8020b2d4: 90 69                	ld	a2, 16(a1)
ffffffff8020b2d6: 9c 65                	ld	a5, 8(a1)
ffffffff8020b2d8: 8c 61                	ld	a1, 0(a1)
ffffffff8020b2da: 2a f0                	sd	a0, 32(sp)
ffffffff8020b2dc: 32 ec                	sd	a2, 24(sp)
ffffffff8020b2de: 3e e8                	sd	a5, 16(sp)
ffffffff8020b2e0: 2e e4                	sd	a1, 8(sp)
ffffffff8020b2e2: 30 00                	addi	a2, sp, 8
ffffffff8020b2e4: 3a 85                	add	a0, zero, a4
ffffffff8020b2e6: b6 85                	add	a1, zero, a3
ffffffff8020b2e8: 97 00 00 00          	auipc	ra, 0
ffffffff8020b2ec: e7 80 80 94          	jalr	-1720(ra)
ffffffff8020b2f0: e2 70                	ld	ra, 56(sp)
ffffffff8020b2f2: 21 61                	addi	sp, sp, 64
ffffffff8020b2f4: 82 80                	ret

ffffffff8020b2f6 _ZN4core3fmt9Formatter15debug_lower_hex17h58b529c6b82c61dfE:
ffffffff8020b2f6: 03 45 05 03          	lbu	a0, 48(a0)
ffffffff8020b2fa: 41 89                	andi	a0, a0, 16
ffffffff8020b2fc: 11 81                	srli	a0, a0, 4
ffffffff8020b2fe: 82 80                	ret

ffffffff8020b300 _ZN4core3fmt9Formatter15debug_upper_hex17hbfe6fe7aaa09bf33E:
ffffffff8020b300: 03 45 05 03          	lbu	a0, 48(a0)
ffffffff8020b304: 13 75 05 02          	andi	a0, a0, 32
ffffffff8020b308: 15 81                	srli	a0, a0, 5
ffffffff8020b30a: 82 80                	ret

ffffffff8020b30c _ZN4core3fmt9Formatter12debug_struct17h6ce77db37abc6f74E:
ffffffff8020b30c: 01 11                	addi	sp, sp, -32
ffffffff8020b30e: 06 ec                	sd	ra, 24(sp)
ffffffff8020b310: 22 e8                	sd	s0, 16(sp)
ffffffff8020b312: 26 e4                	sd	s1, 8(sp)
ffffffff8020b314: 2e 84                	add	s0, zero, a1
ffffffff8020b316: 98 75                	ld	a4, 40(a1)
ffffffff8020b318: 8c 71                	ld	a1, 32(a1)
ffffffff8020b31a: 18 6f                	ld	a4, 24(a4)
ffffffff8020b31c: aa 84                	add	s1, zero, a0
ffffffff8020b31e: 2e 85                	add	a0, zero, a1
ffffffff8020b320: b2 85                	add	a1, zero, a2
ffffffff8020b322: 36 86                	add	a2, zero, a3
ffffffff8020b324: 02 97                	jalr	a4
ffffffff8020b326: 80 e0                	sd	s0, 0(s1)
ffffffff8020b328: 23 84 a4 00          	sb	a0, 8(s1)
ffffffff8020b32c: a3 84 04 00          	sb	zero, 9(s1)
ffffffff8020b330: a2 64                	ld	s1, 8(sp)
ffffffff8020b332: 42 64                	ld	s0, 16(sp)
ffffffff8020b334: e2 60                	ld	ra, 24(sp)
ffffffff8020b336: 05 61                	addi	sp, sp, 32
ffffffff8020b338: 82 80                	ret

ffffffff8020b33a _ZN4core3fmt9Formatter11debug_tuple17h3e7836b24f51e394E:
ffffffff8020b33a: 01 11                	addi	sp, sp, -32
ffffffff8020b33c: 06 ec                	sd	ra, 24(sp)
ffffffff8020b33e: 22 e8                	sd	s0, 16(sp)
ffffffff8020b340: 26 e4                	sd	s1, 8(sp)
ffffffff8020b342: 4a e0                	sd	s2, 0(sp)
ffffffff8020b344: 2e 84                	add	s0, zero, a1
ffffffff8020b346: 98 75                	ld	a4, 40(a1)
ffffffff8020b348: 8c 71                	ld	a1, 32(a1)
ffffffff8020b34a: 18 6f                	ld	a4, 24(a4)
ffffffff8020b34c: 36 89                	add	s2, zero, a3
ffffffff8020b34e: aa 84                	add	s1, zero, a0
ffffffff8020b350: 2e 85                	add	a0, zero, a1
ffffffff8020b352: b2 85                	add	a1, zero, a2
ffffffff8020b354: 36 86                	add	a2, zero, a3
ffffffff8020b356: 02 97                	jalr	a4
ffffffff8020b358: 93 35 19 00          	seqz	a1, s2
ffffffff8020b35c: 80 e0                	sd	s0, 0(s1)
ffffffff8020b35e: 23 88 a4 00          	sb	a0, 16(s1)
ffffffff8020b362: 23 b4 04 00          	sd	zero, 8(s1)
ffffffff8020b366: a3 88 b4 00          	sb	a1, 17(s1)
ffffffff8020b36a: 02 69                	ld	s2, 0(sp)
ffffffff8020b36c: a2 64                	ld	s1, 8(sp)
ffffffff8020b36e: 42 64                	ld	s0, 16(sp)
ffffffff8020b370: e2 60                	ld	ra, 24(sp)
ffffffff8020b372: 05 61                	addi	sp, sp, 32
ffffffff8020b374: 82 80                	ret

ffffffff8020b376 _ZN4core3fmt9Formatter10debug_list17h686a8f4ac8fa2970E:
ffffffff8020b376: 01 11                	addi	sp, sp, -32
ffffffff8020b378: 06 ec                	sd	ra, 24(sp)
ffffffff8020b37a: 22 e8                	sd	s0, 16(sp)
ffffffff8020b37c: 26 e4                	sd	s1, 8(sp)
ffffffff8020b37e: 2e 84                	add	s0, zero, a1
ffffffff8020b380: 8c 75                	ld	a1, 40(a1)
ffffffff8020b382: 14 70                	ld	a3, 32(s0)
ffffffff8020b384: 98 6d                	ld	a4, 24(a1)
ffffffff8020b386: aa 84                	add	s1, zero, a0

ffffffff8020b388 .LBB183_1:
ffffffff8020b388: 97 45 00 00          	auipc	a1, 4
ffffffff8020b38c: 93 85 35 15          	addi	a1, a1, 339
ffffffff8020b390: 05 46                	addi	a2, zero, 1
ffffffff8020b392: 36 85                	add	a0, zero, a3
ffffffff8020b394: 02 97                	jalr	a4
ffffffff8020b396: 80 e0                	sd	s0, 0(s1)
ffffffff8020b398: 23 84 a4 00          	sb	a0, 8(s1)
ffffffff8020b39c: a3 84 04 00          	sb	zero, 9(s1)
ffffffff8020b3a0: a2 64                	ld	s1, 8(sp)
ffffffff8020b3a2: 42 64                	ld	s0, 16(sp)
ffffffff8020b3a4: e2 60                	ld	ra, 24(sp)
ffffffff8020b3a6: 05 61                	addi	sp, sp, 32
ffffffff8020b3a8: 82 80                	ret

ffffffff8020b3aa _ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hbc3d99ec4c26518bE:
ffffffff8020b3aa: ae 86                	add	a3, zero, a1
ffffffff8020b3ac: aa 85                	add	a1, zero, a0
ffffffff8020b3ae: 32 85                	add	a0, zero, a2
ffffffff8020b3b0: 36 86                	add	a2, zero, a3
ffffffff8020b3b2: 17 03 00 00          	auipc	t1, 0
ffffffff8020b3b6: 67 00 83 cc          	jr	-824(t1)

ffffffff8020b3ba _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd80063bf4fae91a8E:
ffffffff8020b3ba: 59 71                	addi	sp, sp, -112
ffffffff8020b3bc: 86 f4                	sd	ra, 104(sp)
ffffffff8020b3be: a2 f0                	sd	s0, 96(sp)
ffffffff8020b3c0: a6 ec                	sd	s1, 88(sp)
ffffffff8020b3c2: ca e8                	sd	s2, 80(sp)
ffffffff8020b3c4: ce e4                	sd	s3, 72(sp)
ffffffff8020b3c6: d2 e0                	sd	s4, 64(sp)
ffffffff8020b3c8: 56 fc                	sd	s5, 56(sp)
ffffffff8020b3ca: 5a f8                	sd	s6, 48(sp)
ffffffff8020b3cc: 5e f4                	sd	s7, 40(sp)
ffffffff8020b3ce: 62 f0                	sd	s8, 32(sp)
ffffffff8020b3d0: 66 ec                	sd	s9, 24(sp)
ffffffff8020b3d2: 6a e8                	sd	s10, 16(sp)
ffffffff8020b3d4: 6e e4                	sd	s11, 8(sp)
ffffffff8020b3d6: 2e 84                	add	s0, zero, a1
ffffffff8020b3d8: 8c 75                	ld	a1, 40(a1)
ffffffff8020b3da: 10 70                	ld	a2, 32(s0)
ffffffff8020b3dc: 94 71                	ld	a3, 32(a1)
ffffffff8020b3de: aa 84                	add	s1, zero, a0
ffffffff8020b3e0: 93 05 70 02          	addi	a1, zero, 39
ffffffff8020b3e4: 32 85                	add	a0, zero, a2
ffffffff8020b3e6: 82 96                	jalr	a3
ffffffff8020b3e8: aa 85                	add	a1, zero, a0
ffffffff8020b3ea: 05 45                	addi	a0, zero, 1
ffffffff8020b3ec: 63 97 05 22          	bnez	a1, 558
ffffffff8020b3f0: 03 e9 04 00          	lwu	s2, 0(s1)
ffffffff8020b3f4: 13 05 10 02          	addi	a0, zero, 33
ffffffff8020b3f8: 89 44                	addi	s1, zero, 2
ffffffff8020b3fa: 63 4e 25 01          	blt	a0, s2, 28
ffffffff8020b3fe: 25 45                	addi	a0, zero, 9
ffffffff8020b400: 63 09 a9 02          	beq	s2, a0, 50
ffffffff8020b404: 29 45                	addi	a0, zero, 10
ffffffff8020b406: 63 09 a9 02          	beq	s2, a0, 50
ffffffff8020b40a: 35 45                	addi	a0, zero, 13
ffffffff8020b40c: 63 19 a9 02          	bne	s2, a0, 50
ffffffff8020b410: 93 09 20 07          	addi	s3, zero, 114
ffffffff8020b414: a1 aa                	j	344
ffffffff8020b416: 13 05 20 02          	addi	a0, zero, 34
ffffffff8020b41a: 63 0a a9 00          	beq	s2, a0, 20
ffffffff8020b41e: 13 05 70 02          	addi	a0, zero, 39
ffffffff8020b422: 63 06 a9 00          	beq	s2, a0, 12
ffffffff8020b426: 13 05 c0 05          	addi	a0, zero, 92
ffffffff8020b42a: 63 1a a9 00          	bne	s2, a0, 20
ffffffff8020b42e: ca 89                	add	s3, zero, s2
ffffffff8020b430: 35 aa                	j	316
ffffffff8020b432: 93 09 40 07          	addi	s3, zero, 116
ffffffff8020b436: 1d aa                	j	310
ffffffff8020b438: 93 09 e0 06          	addi	s3, zero, 110
ffffffff8020b43c: 05 aa                	j	304
ffffffff8020b43e: 4a 85                	add	a0, zero, s2
ffffffff8020b440: 97 10 00 00          	auipc	ra, 1
ffffffff8020b444: e7 80 60 cf          	jalr	-778(ra)
ffffffff8020b448: 25 e5                	bnez	a0, 104
ffffffff8020b44a: 13 55 09 01          	srli	a0, s2, 16
ffffffff8020b44e: 05 e5                	bnez	a0, 40

ffffffff8020b450 .LBB193_53:
ffffffff8020b450: 97 45 00 00          	auipc	a1, 4
ffffffff8020b454: 93 85 85 4a          	addi	a1, a1, 1192

ffffffff8020b458 .LBB193_54:
ffffffff8020b458: 97 46 00 00          	auipc	a3, 4
ffffffff8020b45c: 93 86 26 4f          	addi	a3, a3, 1266

ffffffff8020b460 .LBB193_55:
ffffffff8020b460: 97 47 00 00          	auipc	a5, 4
ffffffff8020b464: 93 87 c7 60          	addi	a5, a5, 1548
ffffffff8020b468: 13 06 90 02          	addi	a2, zero, 41
ffffffff8020b46c: 13 07 20 12          	addi	a4, zero, 290
ffffffff8020b470: 13 08 50 13          	addi	a6, zero, 309
ffffffff8020b474: 3d a0                	j	46
ffffffff8020b476: 13 55 19 01          	srli	a0, s2, 17
ffffffff8020b47a: 63 11 05 1c          	bnez	a0, 450

ffffffff8020b47e .LBB193_56:
ffffffff8020b47e: 97 45 00 00          	auipc	a1, 4
ffffffff8020b482: 93 85 35 72          	addi	a1, a1, 1827

ffffffff8020b486 .LBB193_57:
ffffffff8020b486: 97 46 00 00          	auipc	a3, 4
ffffffff8020b48a: 93 86 76 76          	addi	a3, a3, 1895

ffffffff8020b48e .LBB193_58:
ffffffff8020b48e: 97 57 00 00          	auipc	a5, 5
ffffffff8020b492: 93 87 e7 80          	addi	a5, a5, -2034
ffffffff8020b496: 13 06 60 02          	addi	a2, zero, 38
ffffffff8020b49a: 13 07 f0 0a          	addi	a4, zero, 175
ffffffff8020b49e: 13 08 30 1a          	addi	a6, zero, 419
ffffffff8020b4a2: 4a 85                	add	a0, zero, s2
ffffffff8020b4a4: 97 00 00 00          	auipc	ra, 0
ffffffff8020b4a8: e7 80 80 67          	jalr	1656(ra)
ffffffff8020b4ac: 63 1c 05 22          	bnez	a0, 568
ffffffff8020b4b0: 13 65 19 00          	ori	a0, s2, 1
ffffffff8020b4b4: 93 55 15 00          	srli	a1, a0, 1
ffffffff8020b4b8: 4d 8d                	or	a0, a0, a1
ffffffff8020b4ba: 93 55 25 00          	srli	a1, a0, 2
ffffffff8020b4be: 4d 8d                	or	a0, a0, a1
ffffffff8020b4c0: 93 55 45 00          	srli	a1, a0, 4
ffffffff8020b4c4: 4d 8d                	or	a0, a0, a1
ffffffff8020b4c6: 93 55 85 00          	srli	a1, a0, 8
ffffffff8020b4ca: 4d 8d                	or	a0, a0, a1
ffffffff8020b4cc: 93 55 05 01          	srli	a1, a0, 16
ffffffff8020b4d0: 4d 8d                	or	a0, a0, a1
ffffffff8020b4d2: 93 55 05 02          	srli	a1, a0, 32
ffffffff8020b4d6: 4d 8d                	or	a0, a0, a1
ffffffff8020b4d8: 13 45 f5 ff          	not	a0, a0
ffffffff8020b4dc: 93 55 15 00          	srli	a1, a0, 1
ffffffff8020b4e0: 37 56 55 05          	lui	a2, 21845
ffffffff8020b4e4: 1b 06 56 55          	addiw	a2, a2, 1365
ffffffff8020b4e8: 32 06                	slli	a2, a2, 12
ffffffff8020b4ea: 13 06 56 55          	addi	a2, a2, 1365
ffffffff8020b4ee: 32 06                	slli	a2, a2, 12
ffffffff8020b4f0: 13 06 56 55          	addi	a2, a2, 1365
ffffffff8020b4f4: 32 06                	slli	a2, a2, 12
ffffffff8020b4f6: 13 06 56 55          	addi	a2, a2, 1365
ffffffff8020b4fa: f1 8d                	and	a1, a1, a2
ffffffff8020b4fc: 0d 8d                	sub	a0, a0, a1
ffffffff8020b4fe: b7 35 33 03          	lui	a1, 13107
ffffffff8020b502: 9b 85 35 33          	addiw	a1, a1, 819
ffffffff8020b506: b2 05                	slli	a1, a1, 12
ffffffff8020b508: 93 85 35 33          	addi	a1, a1, 819
ffffffff8020b50c: b2 05                	slli	a1, a1, 12
ffffffff8020b50e: 93 85 35 33          	addi	a1, a1, 819
ffffffff8020b512: b2 05                	slli	a1, a1, 12
ffffffff8020b514: 93 85 35 33          	addi	a1, a1, 819
ffffffff8020b518: 33 76 b5 00          	and	a2, a0, a1
ffffffff8020b51c: 09 81                	srli	a0, a0, 2
ffffffff8020b51e: 6d 8d                	and	a0, a0, a1
ffffffff8020b520: 32 95                	add	a0, a0, a2
ffffffff8020b522: 93 55 45 00          	srli	a1, a0, 4
ffffffff8020b526: 2e 95                	add	a0, a0, a1
ffffffff8020b528: b7 f5 f0 00          	lui	a1, 3855
ffffffff8020b52c: 9b 85 15 0f          	addiw	a1, a1, 241
ffffffff8020b530: b2 05                	slli	a1, a1, 12
ffffffff8020b532: 93 85 f5 f0          	addi	a1, a1, -241
ffffffff8020b536: b2 05                	slli	a1, a1, 12
ffffffff8020b538: 93 85 15 0f          	addi	a1, a1, 241
ffffffff8020b53c: b2 05                	slli	a1, a1, 12
ffffffff8020b53e: 93 85 f5 f0          	addi	a1, a1, -241
ffffffff8020b542: 6d 8d                	and	a0, a0, a1
ffffffff8020b544: b7 05 01 01          	lui	a1, 4112
ffffffff8020b548: 9b 85 15 10          	addiw	a1, a1, 257
ffffffff8020b54c: c2 05                	slli	a1, a1, 16
ffffffff8020b54e: 93 85 15 10          	addi	a1, a1, 257
ffffffff8020b552: c2 05                	slli	a1, a1, 16
ffffffff8020b554: 93 85 15 10          	addi	a1, a1, 257
ffffffff8020b558: 33 05 b5 02          	<unknown>
ffffffff8020b55c: 61 91                	srli	a0, a0, 56
ffffffff8020b55e: 01 15                	addi	a0, a0, -32
ffffffff8020b560: 1b 55 25 00          	srliw	a0, a0, 2
ffffffff8020b564: 13 45 75 00          	xori	a0, a0, 7
ffffffff8020b568: 2a e0                	sd	a0, 0(sp)
ffffffff8020b56a: 8d 44                	addi	s1, zero, 3
ffffffff8020b56c: 15 4a                	addi	s4, zero, 5
ffffffff8020b56e: 13 95 09 02          	slli	a0, s3, 32
ffffffff8020b572: 93 5a 05 02          	srli	s5, a0, 32
ffffffff8020b576: 37 0b 11 00          	lui	s6, 272
ffffffff8020b57a: 89 4b                	addi	s7, zero, 2
ffffffff8020b57c: 05 4c                	addi	s8, zero, 1
ffffffff8020b57e: a9 4c                	addi	s9, zero, 10
ffffffff8020b580: 0d 4d                	addi	s10, zero, 3
ffffffff8020b582: 91 4d                	addi	s11, zero, 4
ffffffff8020b584: 39 a0                	j	14
ffffffff8020b586: 85 44                	addi	s1, zero, 1
ffffffff8020b588: 10 74                	ld	a2, 40(s0)
ffffffff8020b58a: 08 70                	ld	a0, 32(s0)
ffffffff8020b58c: 10 72                	ld	a2, 32(a2)
ffffffff8020b58e: 02 96                	jalr	a2
ffffffff8020b590: 45 e5                	bnez	a0, 168
ffffffff8020b592: 13 95 04 02          	slli	a0, s1, 32
ffffffff8020b596: 01 91                	srli	a0, a0, 32
ffffffff8020b598: 63 48 ac 00          	blt	s8, a0, 16
ffffffff8020b59c: 2d c9                	beqz	a0, 114
ffffffff8020b59e: 63 88 6a 07          	beq	s5, s6, 112
ffffffff8020b5a2: 81 44                	mv	s1, zero
ffffffff8020b5a4: ce 85                	add	a1, zero, s3
ffffffff8020b5a6: cd b7                	j	-30
ffffffff8020b5a8: 93 05 c0 05          	addi	a1, zero, 92
ffffffff8020b5ac: e3 0d 75 fd          	beq	a0, s7, -38
ffffffff8020b5b0: 13 75 fa 0f          	andi	a0, s4, 255
ffffffff8020b5b4: 8d 44                	addi	s1, zero, 3
ffffffff8020b5b6: 63 c9 ab 00          	blt	s7, a0, 18
ffffffff8020b5ba: 31 c9                	beqz	a0, 84
ffffffff8020b5bc: 63 10 85 03          	bne	a0, s8, 32
ffffffff8020b5c0: 01 4a                	mv	s4, zero
ffffffff8020b5c2: 93 05 d0 07          	addi	a1, zero, 125
ffffffff8020b5c6: c9 b7                	j	-62
ffffffff8020b5c8: 63 05 a5 03          	beq	a0, s10, 42
ffffffff8020b5cc: 11 4a                	addi	s4, zero, 4
ffffffff8020b5ce: e3 1d b5 fb          	bne	a0, s11, -70
ffffffff8020b5d2: 0d 4a                	addi	s4, zero, 3
ffffffff8020b5d4: 93 05 50 07          	addi	a1, zero, 117
ffffffff8020b5d8: 8d 44                	addi	s1, zero, 3
ffffffff8020b5da: 7d b7                	j	-82
ffffffff8020b5dc: 02 66                	ld	a2, 0(sp)
ffffffff8020b5de: 13 15 26 00          	slli	a0, a2, 2
ffffffff8020b5e2: 3b 55 a9 00          	srlw	a0, s2, a0
ffffffff8020b5e6: 3d 89                	andi	a0, a0, 15
ffffffff8020b5e8: 63 69 95 01          	bltu	a0, s9, 18
ffffffff8020b5ec: 93 05 75 05          	addi	a1, a0, 87
ffffffff8020b5f0: 39 a0                	j	14
ffffffff8020b5f2: 09 4a                	addi	s4, zero, 2
ffffffff8020b5f4: 93 05 b0 07          	addi	a1, zero, 123
ffffffff8020b5f8: 41 bf                	j	-112
ffffffff8020b5fa: 93 65 05 03          	ori	a1, a0, 48
ffffffff8020b5fe: 01 45                	mv	a0, zero
ffffffff8020b600: 05 4a                	addi	s4, zero, 1
ffffffff8020b602: 01 c6                	beqz	a2, 8
ffffffff8020b604: 13 05 f6 ff          	addi	a0, a2, -1
ffffffff8020b608: 09 4a                	addi	s4, zero, 2
ffffffff8020b60a: 2a e0                	sd	a0, 0(sp)
ffffffff8020b60c: b5 bf                	j	-132
ffffffff8020b60e: 0c 74                	ld	a1, 40(s0)
ffffffff8020b610: 08 70                	ld	a0, 32(s0)
ffffffff8020b612: 90 71                	ld	a2, 32(a1)
ffffffff8020b614: 93 05 70 02          	addi	a1, zero, 39
ffffffff8020b618: 02 96                	jalr	a2
ffffffff8020b61a: a2 6d                	ld	s11, 8(sp)
ffffffff8020b61c: 42 6d                	ld	s10, 16(sp)
ffffffff8020b61e: e2 6c                	ld	s9, 24(sp)
ffffffff8020b620: 02 7c                	ld	s8, 32(sp)
ffffffff8020b622: a2 7b                	ld	s7, 40(sp)
ffffffff8020b624: 42 7b                	ld	s6, 48(sp)
ffffffff8020b626: e2 7a                	ld	s5, 56(sp)
ffffffff8020b628: 06 6a                	ld	s4, 64(sp)
ffffffff8020b62a: a6 69                	ld	s3, 72(sp)
ffffffff8020b62c: 46 69                	ld	s2, 80(sp)
ffffffff8020b62e: e6 64                	ld	s1, 88(sp)
ffffffff8020b630: 06 74                	ld	s0, 96(sp)
ffffffff8020b632: a6 70                	ld	ra, 104(sp)
ffffffff8020b634: 65 61                	addi	sp, sp, 112
ffffffff8020b636: 82 80                	ret
ffffffff8020b638: 05 45                	addi	a0, zero, 1
ffffffff8020b63a: c5 b7                	j	-32
ffffffff8020b63c: 37 05 f2 ff          	lui	a0, 1048352
ffffffff8020b640: 1b 05 05 e1          	addiw	a0, a0, -496
ffffffff8020b644: 3b 05 a9 00          	addw	a0, s2, a0
ffffffff8020b648: b7 05 03 00          	lui	a1, 48
ffffffff8020b64c: 9b 85 05 e1          	addiw	a1, a1, -496
ffffffff8020b650: e3 60 b5 e6          	bltu	a0, a1, -416
ffffffff8020b654: 37 f5 fc ff          	lui	a0, 1048527
ffffffff8020b658: 1b 05 55 cb          	addiw	a0, a0, -843
ffffffff8020b65c: 4a 95                	add	a0, a0, s2
ffffffff8020b65e: 01 25                	sext.w	a0, a0
ffffffff8020b660: b7 f5 0a 00          	lui	a1, 175
ffffffff8020b664: 9b 85 55 db          	addiw	a1, a1, -587
ffffffff8020b668: e3 64 b5 e4          	bltu	a0, a1, -440
ffffffff8020b66c: 37 05 fd ff          	lui	a0, 1048528
ffffffff8020b670: 1b 05 25 5e          	addiw	a0, a0, 1506
ffffffff8020b674: 4a 95                	add	a0, a0, s2
ffffffff8020b676: 01 25                	sext.w	a0, a0
ffffffff8020b678: 93 05 20 5e          	addi	a1, zero, 1506
ffffffff8020b67c: e3 6a b5 e2          	bltu	a0, a1, -460
ffffffff8020b680: 37 15 fd ff          	lui	a0, 1048529
ffffffff8020b684: 1b 05 f5 41          	addiw	a0, a0, 1055
ffffffff8020b688: 4a 95                	add	a0, a0, s2
ffffffff8020b68a: 01 25                	sext.w	a0, a0
ffffffff8020b68c: 85 65                	lui	a1, 1
ffffffff8020b68e: 9b 85 f5 c1          	addiw	a1, a1, -993
ffffffff8020b692: e3 6f b5 e0          	bltu	a0, a1, -482
ffffffff8020b696: 37 35 fd ff          	lui	a0, 1048531
ffffffff8020b69a: 1b 05 e5 15          	addiw	a0, a0, 350
ffffffff8020b69e: 4a 95                	add	a0, a0, s2
ffffffff8020b6a0: 01 25                	sext.w	a0, a0
ffffffff8020b6a2: b9 45                	addi	a1, zero, 14
ffffffff8020b6a4: e3 66 b5 e0          	bltu	a0, a1, -500
ffffffff8020b6a8: 37 05 20 00          	lui	a0, 512
ffffffff8020b6ac: 79 35                	addiw	a0, a0, -2
ffffffff8020b6ae: 33 75 a9 00          	and	a0, s2, a0
ffffffff8020b6b2: b7 c5 02 00          	lui	a1, 44
ffffffff8020b6b6: 9b 85 e5 81          	addiw	a1, a1, -2018
ffffffff8020b6ba: e3 0b b5 de          	beq	a0, a1, -522
ffffffff8020b6be: 37 65 fd ff          	lui	a0, 1048534
ffffffff8020b6c2: 1b 05 25 92          	addiw	a0, a0, -1758
ffffffff8020b6c6: 4a 95                	add	a0, a0, s2
ffffffff8020b6c8: 01 25                	sext.w	a0, a0
ffffffff8020b6ca: 93 05 20 02          	addi	a1, zero, 34
ffffffff8020b6ce: e3 61 b5 de          	bltu	a0, a1, -542
ffffffff8020b6d2: 37 55 fd ff          	lui	a0, 1048533
ffffffff8020b6d6: 1b 05 b5 8c          	addiw	a0, a0, -1845
ffffffff8020b6da: 4a 95                	add	a0, a0, s2
ffffffff8020b6dc: 01 25                	sext.w	a0, a0
ffffffff8020b6de: a9 45                	addi	a1, zero, 10
ffffffff8020b6e0: e3 f8 a5 dc          	bgeu	a1, a0, -560
ffffffff8020b6e4: 85 44                	addi	s1, zero, 1
ffffffff8020b6e6: a1 b3                	j	-696

ffffffff8020b6e8 _ZN4core5slice6memchr6memchr17hc5c23a081ffd9f1fE:
ffffffff8020b6e8: 41 11                	addi	sp, sp, -16
ffffffff8020b6ea: 06 e4                	sd	ra, 8(sp)
ffffffff8020b6ec: aa 86                	add	a3, zero, a0
ffffffff8020b6ee: 01 45                	mv	a0, zero
ffffffff8020b6f0: 13 f7 75 00          	andi	a4, a1, 7
ffffffff8020b6f4: 93 f8 f6 0f          	andi	a7, a3, 255
ffffffff8020b6f8: 1d c3                	beqz	a4, 38
ffffffff8020b6fa: a1 46                	addi	a3, zero, 8
ffffffff8020b6fc: 99 8e                	sub	a3, a3, a4
ffffffff8020b6fe: 85 c2                	beqz	a3, 32
ffffffff8020b700: 32 85                	add	a0, zero, a2
ffffffff8020b702: 63 63 d6 00          	bltu	a2, a3, 6
ffffffff8020b706: 36 85                	add	a0, zero, a3
ffffffff8020b708: 55 c9                	beqz	a0, 180
ffffffff8020b70a: 81 46                	mv	a3, zero
ffffffff8020b70c: 33 87 d5 00          	add	a4, a1, a3
ffffffff8020b710: 03 47 07 00          	lbu	a4, 0(a4)
ffffffff8020b714: 63 02 17 0f          	beq	a4, a7, 228
ffffffff8020b718: 85 06                	addi	a3, a3, 1
ffffffff8020b71a: e3 19 d5 fe          	bne	a0, a3, -14
ffffffff8020b71e: c1 46                	addi	a3, zero, 16
ffffffff8020b720: 63 62 d6 0a          	bltu	a2, a3, 164
ffffffff8020b724: 13 08 06 ff          	addi	a6, a2, -16
ffffffff8020b728: 63 6e a8 08          	bltu	a6, a0, 156
ffffffff8020b72c: b7 06 01 01          	lui	a3, 4112
ffffffff8020b730: 9b 86 16 10          	addiw	a3, a3, 257
ffffffff8020b734: c2 06                	slli	a3, a3, 16
ffffffff8020b736: 93 86 16 10          	addi	a3, a3, 257
ffffffff8020b73a: c2 06                	slli	a3, a3, 16
ffffffff8020b73c: 93 86 16 10          	addi	a3, a3, 257
ffffffff8020b740: b3 82 d8 02          	<unknown>
ffffffff8020b744: b7 06 ff fe          	lui	a3, 1044464
ffffffff8020b748: 9b 86 f6 ef          	addiw	a3, a3, -257
ffffffff8020b74c: c2 06                	slli	a3, a3, 16
ffffffff8020b74e: 93 86 f6 ef          	addi	a3, a3, -257
ffffffff8020b752: c2 06                	slli	a3, a3, 16
ffffffff8020b754: 13 83 f6 ef          	addi	t1, a3, -257
ffffffff8020b758: 41 77                	lui	a4, 1048560
ffffffff8020b75a: 1b 07 17 10          	addiw	a4, a4, 257
ffffffff8020b75e: 42 07                	slli	a4, a4, 16
ffffffff8020b760: 13 07 17 10          	addi	a4, a4, 257
ffffffff8020b764: 42 07                	slli	a4, a4, 16
ffffffff8020b766: 13 07 17 10          	addi	a4, a4, 257
ffffffff8020b76a: 3e 07                	slli	a4, a4, 15
ffffffff8020b76c: 93 03 07 08          	addi	t2, a4, 128
ffffffff8020b770: b3 87 a5 00          	add	a5, a1, a0
ffffffff8020b774: 94 63                	ld	a3, 0(a5)
ffffffff8020b776: 9c 67                	ld	a5, 8(a5)
ffffffff8020b778: b3 c6 56 00          	xor	a3, a3, t0
ffffffff8020b77c: 13 c7 f6 ff          	not	a4, a3
ffffffff8020b780: 9a 96                	add	a3, a3, t1
ffffffff8020b782: 33 77 77 00          	and	a4, a4, t2
ffffffff8020b786: f9 8e                	and	a3, a3, a4
ffffffff8020b788: 33 c7 57 00          	xor	a4, a5, t0
ffffffff8020b78c: 93 47 f7 ff          	not	a5, a4
ffffffff8020b790: 1a 97                	add	a4, a4, t1
ffffffff8020b792: b3 f7 77 00          	and	a5, a5, t2
ffffffff8020b796: 7d 8f                	and	a4, a4, a5
ffffffff8020b798: d9 8e                	or	a3, a3, a4
ffffffff8020b79a: 81 e6                	bnez	a3, 8
ffffffff8020b79c: 41 05                	addi	a0, a0, 16
ffffffff8020b79e: e3 79 a8 fc          	bgeu	a6, a0, -46
ffffffff8020b7a2: 63 71 a6 02          	bgeu	a2, a0, 34

ffffffff8020b7a6 .LBB198_25:
ffffffff8020b7a6: 97 46 00 00          	auipc	a3, 4
ffffffff8020b7aa: 93 86 26 ed          	addi	a3, a3, -302
ffffffff8020b7ae: b2 85                	add	a1, zero, a2
ffffffff8020b7b0: 36 86                	add	a2, zero, a3
ffffffff8020b7b2: 97 00 00 00          	auipc	ra, 0
ffffffff8020b7b6: e7 80 20 09          	jalr	146(ra)
ffffffff8020b7ba: 00 00                	unimp	
ffffffff8020b7bc: 01 45                	mv	a0, zero
ffffffff8020b7be: c1 46                	addi	a3, zero, 16
ffffffff8020b7c0: e3 72 d6 f6          	bgeu	a2, a3, -156
ffffffff8020b7c4: 63 16 c5 00          	bne	a0, a2, 12
ffffffff8020b7c8: 01 46                	mv	a2, zero
ffffffff8020b7ca: 81 45                	mv	a1, zero
ffffffff8020b7cc: aa 86                	add	a3, zero, a0
ffffffff8020b7ce: 35 a0                	j	44
ffffffff8020b7d0: 81 46                	mv	a3, zero
ffffffff8020b7d2: 09 8e                	sub	a2, a2, a0
ffffffff8020b7d4: aa 95                	add	a1, a1, a0
ffffffff8020b7d6: 33 87 d5 00          	add	a4, a1, a3
ffffffff8020b7da: 03 47 07 00          	lbu	a4, 0(a4)
ffffffff8020b7de: 63 09 17 01          	beq	a4, a7, 18
ffffffff8020b7e2: 85 06                	addi	a3, a3, 1
ffffffff8020b7e4: e3 19 d6 fe          	bne	a2, a3, -14
ffffffff8020b7e8: 81 45                	mv	a1, zero
ffffffff8020b7ea: b3 06 a6 00          	add	a3, a2, a0
ffffffff8020b7ee: 31 a0                	j	12
ffffffff8020b7f0: 85 45                	addi	a1, zero, 1
ffffffff8020b7f2: 36 86                	add	a2, zero, a3
ffffffff8020b7f4: aa 96                	add	a3, a3, a0
ffffffff8020b7f6: 11 a0                	j	4
ffffffff8020b7f8: 85 45                	addi	a1, zero, 1
ffffffff8020b7fa: 2e 85                	add	a0, zero, a1
ffffffff8020b7fc: b6 85                	add	a1, zero, a3
ffffffff8020b7fe: a2 60                	ld	ra, 8(sp)
ffffffff8020b800: 41 01                	addi	sp, sp, 16
ffffffff8020b802: 82 80                	ret

ffffffff8020b804 _ZN4core5slice20slice_index_len_fail17h674859de081ebee9E:
ffffffff8020b804: 59 71                	addi	sp, sp, -112
ffffffff8020b806: 86 f4                	sd	ra, 104(sp)
ffffffff8020b808: 2a e4                	sd	a0, 8(sp)
ffffffff8020b80a: 2e e8                	sd	a1, 16(sp)
ffffffff8020b80c: 28 00                	addi	a0, sp, 8
ffffffff8020b80e: aa e4                	sd	a0, 72(sp)

ffffffff8020b810 .LBB200_1:
ffffffff8020b810: 17 15 00 00          	auipc	a0, 1
ffffffff8020b814: 13 05 85 8d          	addi	a0, a0, -1832
ffffffff8020b818: aa e8                	sd	a0, 80(sp)
ffffffff8020b81a: 0c 08                	addi	a1, sp, 16
ffffffff8020b81c: ae ec                	sd	a1, 88(sp)
ffffffff8020b81e: aa f0                	sd	a0, 96(sp)

ffffffff8020b820 .LBB200_2:
ffffffff8020b820: 17 45 00 00          	auipc	a0, 4
ffffffff8020b824: 13 05 85 e9          	addi	a0, a0, -360
ffffffff8020b828: 2a ec                	sd	a0, 24(sp)
ffffffff8020b82a: 09 45                	addi	a0, zero, 2
ffffffff8020b82c: 2a f0                	sd	a0, 32(sp)
ffffffff8020b82e: 02 f4                	sd	zero, 40(sp)
ffffffff8020b830: ac 00                	addi	a1, sp, 72
ffffffff8020b832: 2e fc                	sd	a1, 56(sp)
ffffffff8020b834: aa e0                	sd	a0, 64(sp)
ffffffff8020b836: 28 08                	addi	a0, sp, 24
ffffffff8020b838: b2 85                	add	a1, zero, a2
ffffffff8020b83a: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020b83e: e7 80 a0 b6          	jalr	-1174(ra)
ffffffff8020b842: 00 00                	unimp	

ffffffff8020b844 _ZN4core5slice22slice_index_order_fail17h448310845a3aec23E:
ffffffff8020b844: 59 71                	addi	sp, sp, -112
ffffffff8020b846: 86 f4                	sd	ra, 104(sp)
ffffffff8020b848: 2a e4                	sd	a0, 8(sp)
ffffffff8020b84a: 2e e8                	sd	a1, 16(sp)
ffffffff8020b84c: 28 00                	addi	a0, sp, 8
ffffffff8020b84e: aa e4                	sd	a0, 72(sp)

ffffffff8020b850 .LBB201_1:
ffffffff8020b850: 17 15 00 00          	auipc	a0, 1
ffffffff8020b854: 13 05 85 89          	addi	a0, a0, -1896
ffffffff8020b858: aa e8                	sd	a0, 80(sp)
ffffffff8020b85a: 0c 08                	addi	a1, sp, 16
ffffffff8020b85c: ae ec                	sd	a1, 88(sp)
ffffffff8020b85e: aa f0                	sd	a0, 96(sp)

ffffffff8020b860 .LBB201_2:
ffffffff8020b860: 17 45 00 00          	auipc	a0, 4
ffffffff8020b864: 13 05 05 ea          	addi	a0, a0, -352
ffffffff8020b868: 2a ec                	sd	a0, 24(sp)
ffffffff8020b86a: 09 45                	addi	a0, zero, 2
ffffffff8020b86c: 2a f0                	sd	a0, 32(sp)
ffffffff8020b86e: 02 f4                	sd	zero, 40(sp)
ffffffff8020b870: ac 00                	addi	a1, sp, 72
ffffffff8020b872: 2e fc                	sd	a1, 56(sp)
ffffffff8020b874: aa e0                	sd	a0, 64(sp)
ffffffff8020b876: 28 08                	addi	a0, sp, 24
ffffffff8020b878: b2 85                	add	a1, zero, a2
ffffffff8020b87a: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020b87e: e7 80 a0 b2          	jalr	-1238(ra)
ffffffff8020b882: 00 00                	unimp	

ffffffff8020b884 _ZN4core3str16slice_error_fail17h6e4abdbba00369c0E:
ffffffff8020b884: 15 71                	addi	sp, sp, -224
ffffffff8020b886: 86 ed                	sd	ra, 216(sp)
ffffffff8020b888: 32 e4                	sd	a2, 8(sp)
ffffffff8020b88a: 36 e8                	sd	a3, 16(sp)
ffffffff8020b88c: 13 08 10 10          	addi	a6, zero, 257
ffffffff8020b890: 85 47                	addi	a5, zero, 1
ffffffff8020b892: ae 83                	add	t2, zero, a1
ffffffff8020b894: 63 ef 05 03          	bltu	a1, a6, 62
ffffffff8020b898: 81 43                	mv	t2, zero
ffffffff8020b89a: 13 88 15 f0          	addi	a6, a1, -255
ffffffff8020b89e: 93 08 05 10          	addi	a7, a0, 256
ffffffff8020b8a2: 93 02 f0 fb          	addi	t0, zero, -65
ffffffff8020b8a6: 13 03 10 f0          	addi	t1, zero, -255
ffffffff8020b8aa: 1e 8e                	add	t3, zero, t2
ffffffff8020b8ac: 93 83 03 10          	addi	t2, t2, 256
ffffffff8020b8b0: 63 f8 b3 00          	bgeu	t2, a1, 16
ffffffff8020b8b4: b3 87 c8 01          	add	a5, a7, t3
ffffffff8020b8b8: 83 87 07 00          	lb	a5, 0(a5)
ffffffff8020b8bc: 63 c8 f2 02          	blt	t0, a5, 48
ffffffff8020b8c0: 93 03 fe ff          	addi	t2, t3, -1
ffffffff8020b8c4: 63 04 6e 00          	beq	t3, t1, 8
ffffffff8020b8c8: e3 11 c8 ff          	bne	a6, t3, -30
ffffffff8020b8cc: 81 47                	mv	a5, zero
ffffffff8020b8ce: 93 83 03 10          	addi	t2, t2, 256
ffffffff8020b8d2: 2a ec                	sd	a0, 24(sp)
ffffffff8020b8d4: 1e f0                	sd	t2, 32(sp)
ffffffff8020b8d6: 99 ef                	bnez	a5, 30

ffffffff8020b8d8 .LBB224_53:
ffffffff8020b8d8: 97 47 00 00          	auipc	a5, 4
ffffffff8020b8dc: 93 87 87 ec          	addi	a5, a5, -312
ffffffff8020b8e0: 15 48                	addi	a6, zero, 5
ffffffff8020b8e2: 3e f4                	sd	a5, 40(sp)
ffffffff8020b8e4: 42 f8                	sd	a6, 48(sp)
ffffffff8020b8e6: 63 f0 c5 02          	bgeu	a1, a2, 32
ffffffff8020b8ea: a9 a8                	j	90
ffffffff8020b8ec: 81 47                	mv	a5, zero
ffffffff8020b8ee: 2a ec                	sd	a0, 24(sp)
ffffffff8020b8f0: 1e f0                	sd	t2, 32(sp)
ffffffff8020b8f2: fd d3                	beqz	a5, -26
ffffffff8020b8f4: 01 48                	mv	a6, zero

ffffffff8020b8f6 .LBB224_54:
ffffffff8020b8f6: 97 47 00 00          	auipc	a5, 4
ffffffff8020b8fa: 93 87 a7 ac          	addi	a5, a5, -1334
ffffffff8020b8fe: 3e f4                	sd	a5, 40(sp)
ffffffff8020b900: 42 f8                	sd	a6, 48(sp)
ffffffff8020b902: 63 e1 c5 04          	bltu	a1, a2, 66
ffffffff8020b906: 63 ef d5 02          	bltu	a1, a3, 62
ffffffff8020b90a: 63 f4 c6 08          	bgeu	a3, a2, 136
ffffffff8020b90e: 28 00                	addi	a0, sp, 8
ffffffff8020b910: 2a e5                	sd	a0, 136(sp)

ffffffff8020b912 .LBB224_55:
ffffffff8020b912: 17 05 00 00          	auipc	a0, 0
ffffffff8020b916: 13 05 65 7d          	addi	a0, a0, 2006
ffffffff8020b91a: 2a e9                	sd	a0, 144(sp)
ffffffff8020b91c: 0c 08                	addi	a1, sp, 16
ffffffff8020b91e: 2e ed                	sd	a1, 152(sp)
ffffffff8020b920: 2a f1                	sd	a0, 160(sp)
ffffffff8020b922: 28 08                	addi	a0, sp, 24
ffffffff8020b924: 2a f5                	sd	a0, 168(sp)

ffffffff8020b926 .LBB224_56:
ffffffff8020b926: 17 15 00 00          	auipc	a0, 1
ffffffff8020b92a: 13 05 05 80          	addi	a0, a0, -2048
ffffffff8020b92e: 2a f9                	sd	a0, 176(sp)
ffffffff8020b930: 2c 10                	addi	a1, sp, 40
ffffffff8020b932: 2e fd                	sd	a1, 184(sp)
ffffffff8020b934: aa e1                	sd	a0, 192(sp)

ffffffff8020b936 .LBB224_57:
ffffffff8020b936: 17 45 00 00          	auipc	a0, 4
ffffffff8020b93a: 13 05 25 ed          	addi	a0, a0, -302
ffffffff8020b93e: aa ec                	sd	a0, 88(sp)
ffffffff8020b940: 11 45                	addi	a0, zero, 4
ffffffff8020b942: 25 a8                	j	56
ffffffff8020b944: 63 e3 c5 00          	bltu	a1, a2, 6
ffffffff8020b948: 36 86                	add	a2, zero, a3
ffffffff8020b94a: b2 e4                	sd	a2, 72(sp)
ffffffff8020b94c: a8 00                	addi	a0, sp, 72
ffffffff8020b94e: 2a e5                	sd	a0, 136(sp)

ffffffff8020b950 .LBB224_58:
ffffffff8020b950: 17 05 00 00          	auipc	a0, 0
ffffffff8020b954: 13 05 85 79          	addi	a0, a0, 1944
ffffffff8020b958: 2a e9                	sd	a0, 144(sp)
ffffffff8020b95a: 28 08                	addi	a0, sp, 24
ffffffff8020b95c: 2a ed                	sd	a0, 152(sp)

ffffffff8020b95e .LBB224_59:
ffffffff8020b95e: 17 05 00 00          	auipc	a0, 0
ffffffff8020b962: 13 05 85 7c          	addi	a0, a0, 1992
ffffffff8020b966: 2a f1                	sd	a0, 160(sp)
ffffffff8020b968: 2c 10                	addi	a1, sp, 40
ffffffff8020b96a: 2e f5                	sd	a1, 168(sp)
ffffffff8020b96c: 2a f9                	sd	a0, 176(sp)

ffffffff8020b96e .LBB224_60:
ffffffff8020b96e: 17 45 00 00          	auipc	a0, 4
ffffffff8020b972: 13 05 a5 e5          	addi	a0, a0, -422
ffffffff8020b976: aa ec                	sd	a0, 88(sp)
ffffffff8020b978: 0d 45                	addi	a0, zero, 3
ffffffff8020b97a: aa f0                	sd	a0, 96(sp)
ffffffff8020b97c: 82 f4                	sd	zero, 104(sp)
ffffffff8020b97e: 2c 01                	addi	a1, sp, 136
ffffffff8020b980: ae fc                	sd	a1, 120(sp)
ffffffff8020b982: 2a e1                	sd	a0, 128(sp)
ffffffff8020b984: a8 08                	addi	a0, sp, 88
ffffffff8020b986: ba 85                	add	a1, zero, a4
ffffffff8020b988: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020b98c: e7 80 c0 a1          	jalr	-1508(ra)
ffffffff8020b990: 00 00                	unimp	
ffffffff8020b992: 09 ce                	beqz	a2, 26
ffffffff8020b994: 63 8c c5 00          	beq	a1, a2, 24
ffffffff8020b998: 63 7b b6 00          	bgeu	a2, a1, 22
ffffffff8020b99c: b3 07 c5 00          	add	a5, a0, a2
ffffffff8020b9a0: 03 88 07 00          	lb	a6, 0(a5)
ffffffff8020b9a4: 93 07 00 fc          	addi	a5, zero, -64
ffffffff8020b9a8: 63 43 f8 00          	blt	a6, a5, 6
ffffffff8020b9ac: 36 86                	add	a2, zero, a3
ffffffff8020b9ae: 32 fc                	sd	a2, 56(sp)
ffffffff8020b9b0: 1d c6                	beqz	a2, 46
ffffffff8020b9b2: 63 06 b6 02          	beq	a2, a1, 44
ffffffff8020b9b6: 93 87 15 00          	addi	a5, a1, 1
ffffffff8020b9ba: 13 08 00 fc          	addi	a6, zero, -64
ffffffff8020b9be: 85 48                	addi	a7, zero, 1
ffffffff8020b9c0: b2 86                	add	a3, zero, a2
ffffffff8020b9c2: 63 78 b6 00          	bgeu	a2, a1, 16
ffffffff8020b9c6: 33 06 d5 00          	add	a2, a0, a3
ffffffff8020b9ca: 03 06 06 00          	lb	a2, 0(a2)
ffffffff8020b9ce: 63 59 06 01          	bge	a2, a6, 18
ffffffff8020b9d2: 13 86 f6 ff          	addi	a2, a3, -1
ffffffff8020b9d6: 63 84 16 01          	beq	a3, a7, 8
ffffffff8020b9da: e3 93 d7 fe          	bne	a5, a3, -26
ffffffff8020b9de: b2 86                	add	a3, zero, a2
ffffffff8020b9e0: 63 9e b6 00          	bne	a3, a1, 28

ffffffff8020b9e4 .LBB224_61:
ffffffff8020b9e4: 17 45 00 00          	auipc	a0, 4
ffffffff8020b9e8: 13 05 45 9f          	addi	a0, a0, -1548
ffffffff8020b9ec: 93 05 b0 02          	addi	a1, zero, 43
ffffffff8020b9f0: 3a 86                	add	a2, zero, a4
ffffffff8020b9f2: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020b9f6: e7 80 60 94          	jalr	-1722(ra)
ffffffff8020b9fa: 00 00                	unimp	
ffffffff8020b9fc: b3 07 d5 00          	add	a5, a0, a3
ffffffff8020ba00: 03 86 07 00          	lb	a2, 0(a5)
ffffffff8020ba04: 7d 58                	addi	a6, zero, -1
ffffffff8020ba06: 93 72 f6 0f          	andi	t0, a2, 255
ffffffff8020ba0a: 63 56 c8 00          	bge	a6, a2, 12
ffffffff8020ba0e: 96 c2                	sw	t0, 68(sp)
ffffffff8020ba10: a8 00                	addi	a0, sp, 72
ffffffff8020ba12: 85 45                	addi	a1, zero, 1
ffffffff8020ba14: 65 a8                	j	184
ffffffff8020ba16: 2e 95                	add	a0, a0, a1
ffffffff8020ba18: 93 85 17 00          	addi	a1, a5, 1
ffffffff8020ba1c: 63 9f a5 00          	bne	a1, a0, 30
ffffffff8020ba20: 81 47                	mv	a5, zero
ffffffff8020ba22: aa 85                	add	a1, zero, a0
ffffffff8020ba24: 13 06 f0 0d          	addi	a2, zero, 223
ffffffff8020ba28: 13 f8 f2 01          	andi	a6, t0, 31
ffffffff8020ba2c: 63 63 56 02          	bltu	a2, t0, 38
ffffffff8020ba30: 13 15 68 00          	slli	a0, a6, 6
ffffffff8020ba34: 33 e6 a7 00          	or	a2, a5, a0
ffffffff8020ba38: 9d a8                	j	118
ffffffff8020ba3a: 03 c6 17 00          	lbu	a2, 1(a5)
ffffffff8020ba3e: 93 85 27 00          	addi	a1, a5, 2
ffffffff8020ba42: 93 77 f6 03          	andi	a5, a2, 63
ffffffff8020ba46: 13 06 f0 0d          	addi	a2, zero, 223
ffffffff8020ba4a: 13 f8 f2 01          	andi	a6, t0, 31
ffffffff8020ba4e: e3 71 56 fe          	bgeu	a2, t0, -30
ffffffff8020ba52: 63 95 a5 00          	bne	a1, a0, 10
ffffffff8020ba56: 81 45                	mv	a1, zero
ffffffff8020ba58: aa 88                	add	a7, zero, a0
ffffffff8020ba5a: 39 a0                	j	14
ffffffff8020ba5c: 03 c6 05 00          	lbu	a2, 0(a1)
ffffffff8020ba60: 93 88 15 00          	addi	a7, a1, 1
ffffffff8020ba64: 93 75 f6 03          	andi	a1, a2, 63
ffffffff8020ba68: 13 96 67 00          	slli	a2, a5, 6
ffffffff8020ba6c: 13 03 00 0f          	addi	t1, zero, 240
ffffffff8020ba70: b3 e7 c5 00          	or	a5, a1, a2
ffffffff8020ba74: 63 e6 62 00          	bltu	t0, t1, 12
ffffffff8020ba78: 63 99 a8 00          	bne	a7, a0, 18
ffffffff8020ba7c: 01 45                	mv	a0, zero
ffffffff8020ba7e: 11 a8                	j	20
ffffffff8020ba80: 13 15 c8 00          	slli	a0, a6, 12
ffffffff8020ba84: 33 e6 a7 00          	or	a2, a5, a0
ffffffff8020ba88: 1d a0                	j	38
ffffffff8020ba8a: 03 c5 08 00          	lbu	a0, 0(a7)
ffffffff8020ba8e: 13 75 f5 03          	andi	a0, a0, 63
ffffffff8020ba92: 93 15 28 01          	slli	a1, a6, 18
ffffffff8020ba96: 37 06 1c 00          	lui	a2, 448
ffffffff8020ba9a: f1 8d                	and	a1, a1, a2
ffffffff8020ba9c: 13 96 67 00          	slli	a2, a5, 6
ffffffff8020baa0: d1 8d                	or	a1, a1, a2
ffffffff8020baa2: 33 e6 a5 00          	or	a2, a1, a0
ffffffff8020baa6: 37 05 11 00          	lui	a0, 272
ffffffff8020baaa: e3 0d a6 f2          	beq	a2, a0, -198
ffffffff8020baae: b2 c2                	sw	a2, 68(sp)
ffffffff8020bab0: a8 00                	addi	a0, sp, 72
ffffffff8020bab2: 93 07 00 08          	addi	a5, zero, 128
ffffffff8020bab6: 85 45                	addi	a1, zero, 1
ffffffff8020bab8: 63 6a f6 00          	bltu	a2, a5, 20
ffffffff8020babc: 93 57 b6 00          	srli	a5, a2, 11
ffffffff8020bac0: 89 45                	addi	a1, zero, 2
ffffffff8020bac2: 89 c7                	beqz	a5, 10
ffffffff8020bac4: 41 82                	srli	a2, a2, 16
ffffffff8020bac6: 8d 45                	addi	a1, zero, 3
ffffffff8020bac8: 11 c2                	beqz	a2, 4
ffffffff8020baca: 91 45                	addi	a1, zero, 4
ffffffff8020bacc: b6 95                	add	a1, a1, a3
ffffffff8020bace: b6 e4                	sd	a3, 72(sp)
ffffffff8020bad0: ae e8                	sd	a1, 80(sp)
ffffffff8020bad2: 2c 18                	addi	a1, sp, 56
ffffffff8020bad4: 2e e5                	sd	a1, 136(sp)

ffffffff8020bad6 .LBB224_62:
ffffffff8020bad6: 97 05 00 00          	auipc	a1, 0
ffffffff8020bada: 93 85 25 61          	addi	a1, a1, 1554
ffffffff8020bade: 2e e9                	sd	a1, 144(sp)
ffffffff8020bae0: cc 00                	addi	a1, sp, 68
ffffffff8020bae2: 2e ed                	sd	a1, 152(sp)

ffffffff8020bae4 .LBB224_63:
ffffffff8020bae4: 97 05 00 00          	auipc	a1, 0
ffffffff8020bae8: 93 85 65 8d          	addi	a1, a1, -1834
ffffffff8020baec: 2e f1                	sd	a1, 160(sp)
ffffffff8020baee: 2a f5                	sd	a0, 168(sp)

ffffffff8020baf0 .LBB224_64:
ffffffff8020baf0: 17 e5 ff ff          	auipc	a0, 1048574
ffffffff8020baf4: 13 05 e5 73          	addi	a0, a0, 1854
ffffffff8020baf8: 2a f9                	sd	a0, 176(sp)
ffffffff8020bafa: 28 08                	addi	a0, sp, 24
ffffffff8020bafc: 2a fd                	sd	a0, 184(sp)

ffffffff8020bafe .LBB224_65:
ffffffff8020bafe: 17 05 00 00          	auipc	a0, 0
ffffffff8020bb02: 13 05 85 62          	addi	a0, a0, 1576
ffffffff8020bb06: aa e1                	sd	a0, 192(sp)
ffffffff8020bb08: 2c 10                	addi	a1, sp, 40
ffffffff8020bb0a: ae e5                	sd	a1, 200(sp)
ffffffff8020bb0c: aa e9                	sd	a0, 208(sp)

ffffffff8020bb0e .LBB224_66:
ffffffff8020bb0e: 17 45 00 00          	auipc	a0, 4
ffffffff8020bb12: 13 05 a5 d6          	addi	a0, a0, -662
ffffffff8020bb16: aa ec                	sd	a0, 88(sp)
ffffffff8020bb18: 15 45                	addi	a0, zero, 5
ffffffff8020bb1a: 85 b5                	j	-416

ffffffff8020bb1c _ZN4core7unicode9printable5check17h4beff69f6604437dE:
ffffffff8020bb1c: 41 11                	addi	sp, sp, -16
ffffffff8020bb1e: 06 e4                	sd	ra, 8(sp)
ffffffff8020bb20: 29 ca                	beqz	a2, 82
ffffffff8020bb22: 81 42                	mv	t0, zero
ffffffff8020bb24: c1 68                	lui	a7, 16
ffffffff8020bb26: 9b 88 08 f0          	addiw	a7, a7, -256
ffffffff8020bb2a: b3 78 15 01          	and	a7, a0, a7
ffffffff8020bb2e: 13 d3 88 00          	srli	t1, a7, 8
ffffffff8020bb32: 06 06                	slli	a2, a2, 1
ffffffff8020bb34: b3 83 c5 00          	add	t2, a1, a2
ffffffff8020bb38: 13 7e f5 0f          	andi	t3, a0, 255
ffffffff8020bb3c: 83 ce 05 00          	lbu	t4, 0(a1)
ffffffff8020bb40: 03 c6 15 00          	lbu	a2, 1(a1)
ffffffff8020bb44: 89 05                	addi	a1, a1, 2
ffffffff8020bb46: b3 88 c2 00          	add	a7, t0, a2
ffffffff8020bb4a: 63 9f 6e 00          	bne	t4, t1, 30
ffffffff8020bb4e: 63 e4 58 0a          	bltu	a7, t0, 168
ffffffff8020bb52: 63 6d 17 0b          	bltu	a4, a7, 186
ffffffff8020bb56: b6 92                	add	t0, t0, a3
ffffffff8020bb58: 11 ca                	beqz	a2, 20
ffffffff8020bb5a: 83 ce 02 00          	lbu	t4, 0(t0)
ffffffff8020bb5e: 85 02                	addi	t0, t0, 1
ffffffff8020bb60: 7d 16                	addi	a2, a2, -1
ffffffff8020bb62: e3 9b ce ff          	bne	t4, t3, -10
ffffffff8020bb66: b9 a8                	j	94
ffffffff8020bb68: 63 65 d3 01          	bltu	t1, t4, 10
ffffffff8020bb6c: c6 82                	add	t0, zero, a7
ffffffff8020bb6e: e3 97 75 fc          	bne	a1, t2, -50
ffffffff8020bb72: 63 0e 08 04          	beqz	a6, 92
ffffffff8020bb76: b3 85 07 01          	add	a1, a5, a6
ffffffff8020bb7a: 41 66                	lui	a2, 16
ffffffff8020bb7c: 7d 36                	addiw	a2, a2, -1
ffffffff8020bb7e: 69 8e                	and	a2, a2, a0
ffffffff8020bb80: 05 45                	addi	a0, zero, 1
ffffffff8020bb82: 83 86 07 00          	lb	a3, 0(a5)
ffffffff8020bb86: 13 87 17 00          	addi	a4, a5, 1
ffffffff8020bb8a: 63 c9 06 00          	bltz	a3, 18
ffffffff8020bb8e: 93 f6 f6 0f          	andi	a3, a3, 255
ffffffff8020bb92: ba 87                	add	a5, zero, a4
ffffffff8020bb94: 15 9e                	subw	a2, a2, a3
ffffffff8020bb96: 63 5f 06 00          	bgez	a2, 30
ffffffff8020bb9a: 0d a0                	j	34
ffffffff8020bb9c: 63 0e b7 02          	beq	a4, a1, 60
ffffffff8020bba0: 03 c7 17 00          	lbu	a4, 1(a5)
ffffffff8020bba4: 93 f6 f6 07          	andi	a3, a3, 127
ffffffff8020bba8: a2 06                	slli	a3, a3, 8
ffffffff8020bbaa: 89 07                	addi	a5, a5, 2
ffffffff8020bbac: d9 8e                	or	a3, a3, a4
ffffffff8020bbae: 15 9e                	subw	a2, a2, a3
ffffffff8020bbb0: 63 46 06 00          	bltz	a2, 12
ffffffff8020bbb4: 13 45 15 00          	xori	a0, a0, 1
ffffffff8020bbb8: e3 95 b7 fc          	bne	a5, a1, -54
ffffffff8020bbbc: 05 89                	andi	a0, a0, 1
ffffffff8020bbbe: a2 60                	ld	ra, 8(sp)
ffffffff8020bbc0: 41 01                	addi	sp, sp, 16
ffffffff8020bbc2: 82 80                	ret
ffffffff8020bbc4: 01 45                	mv	a0, zero
ffffffff8020bbc6: 05 89                	andi	a0, a0, 1
ffffffff8020bbc8: a2 60                	ld	ra, 8(sp)
ffffffff8020bbca: 41 01                	addi	sp, sp, 16
ffffffff8020bbcc: 82 80                	ret
ffffffff8020bbce: 05 45                	addi	a0, zero, 1
ffffffff8020bbd0: 05 89                	andi	a0, a0, 1
ffffffff8020bbd2: a2 60                	ld	ra, 8(sp)
ffffffff8020bbd4: 41 01                	addi	sp, sp, 16
ffffffff8020bbd6: 82 80                	ret

ffffffff8020bbd8 .LBB249_23:
ffffffff8020bbd8: 17 45 00 00          	auipc	a0, 4
ffffffff8020bbdc: 13 05 05 80          	addi	a0, a0, -2048

ffffffff8020bbe0 .LBB249_24:
ffffffff8020bbe0: 17 46 00 00          	auipc	a2, 4
ffffffff8020bbe4: 13 06 06 d0          	addi	a2, a2, -768
ffffffff8020bbe8: 93 05 b0 02          	addi	a1, zero, 43
ffffffff8020bbec: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff8020bbf0: e7 80 c0 74          	jalr	1868(ra)
ffffffff8020bbf4: 00 00                	unimp	

ffffffff8020bbf6 .LBB249_25:
ffffffff8020bbf6: 17 46 00 00          	auipc	a2, 4
ffffffff8020bbfa: 13 06 26 cd          	addi	a2, a2, -814
ffffffff8020bbfe: 16 85                	add	a0, zero, t0
ffffffff8020bc00: c6 85                	add	a1, zero, a7
ffffffff8020bc02: 97 00 00 00          	auipc	ra, 0
ffffffff8020bc06: e7 80 20 c4          	jalr	-958(ra)
ffffffff8020bc0a: 00 00                	unimp	

ffffffff8020bc0c .LBB249_26:
ffffffff8020bc0c: 17 46 00 00          	auipc	a2, 4
ffffffff8020bc10: 13 06 c6 cb          	addi	a2, a2, -836
ffffffff8020bc14: 46 85                	add	a0, zero, a7
ffffffff8020bc16: ba 85                	add	a1, zero, a4
ffffffff8020bc18: 97 00 00 00          	auipc	ra, 0
ffffffff8020bc1c: e7 80 c0 be          	jalr	-1044(ra)
ffffffff8020bc20: 00 00                	unimp	

ffffffff8020bc22 _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2cbbcd02530bd107E:
ffffffff8020bc22: 75 71                	addi	sp, sp, -144
ffffffff8020bc24: 06 e5                	sd	ra, 136(sp)
ffffffff8020bc26: 2e 88                	add	a6, zero, a1
ffffffff8020bc28: 83 e5 05 03          	lwu	a1, 48(a1)
ffffffff8020bc2c: 13 f6 05 01          	andi	a2, a1, 16
ffffffff8020bc30: 11 ee                	bnez	a2, 28
ffffffff8020bc32: 08 61                	ld	a0, 0(a0)
ffffffff8020bc34: 93 f5 05 02          	andi	a1, a1, 32
ffffffff8020bc38: b9 e1                	bnez	a1, 70
ffffffff8020bc3a: 85 45                	addi	a1, zero, 1
ffffffff8020bc3c: 42 86                	add	a2, zero, a6
ffffffff8020bc3e: 97 00 00 00          	auipc	ra, 0
ffffffff8020bc42: e7 80 80 2d          	jalr	728(ra)
ffffffff8020bc46: aa 60                	ld	ra, 136(sp)
ffffffff8020bc48: 49 61                	addi	sp, sp, 144
ffffffff8020bc4a: 82 80                	ret
ffffffff8020bc4c: 08 61                	ld	a0, 0(a0)
ffffffff8020bc4e: 81 45                	mv	a1, zero
ffffffff8020bc50: 30 00                	addi	a2, sp, 8
ffffffff8020bc52: a9 46                	addi	a3, zero, 10
ffffffff8020bc54: 39 a0                	j	14
ffffffff8020bc56: 93 87 77 05          	addi	a5, a5, 87
ffffffff8020bc5a: a3 0f f7 06          	sb	a5, 127(a4)
ffffffff8020bc5e: fd 15                	addi	a1, a1, -1
ffffffff8020bc60: 31 c5                	beqz	a0, 76
ffffffff8020bc62: 33 07 b6 00          	add	a4, a2, a1
ffffffff8020bc66: 93 77 f5 00          	andi	a5, a0, 15
ffffffff8020bc6a: 11 81                	srli	a0, a0, 4
ffffffff8020bc6c: e3 f5 d7 fe          	bgeu	a5, a3, -22
ffffffff8020bc70: 93 e7 07 03          	ori	a5, a5, 48
ffffffff8020bc74: a3 0f f7 06          	sb	a5, 127(a4)
ffffffff8020bc78: fd 15                	addi	a1, a1, -1
ffffffff8020bc7a: 65 f5                	bnez	a0, -24
ffffffff8020bc7c: 05 a8                	j	48
ffffffff8020bc7e: 81 45                	mv	a1, zero
ffffffff8020bc80: 30 00                	addi	a2, sp, 8
ffffffff8020bc82: a9 46                	addi	a3, zero, 10
ffffffff8020bc84: 39 a0                	j	14
ffffffff8020bc86: 93 87 77 03          	addi	a5, a5, 55
ffffffff8020bc8a: a3 0f f7 06          	sb	a5, 127(a4)
ffffffff8020bc8e: fd 15                	addi	a1, a1, -1
ffffffff8020bc90: 11 cd                	beqz	a0, 28
ffffffff8020bc92: 33 07 b6 00          	add	a4, a2, a1
ffffffff8020bc96: 93 77 f5 00          	andi	a5, a0, 15
ffffffff8020bc9a: 11 81                	srli	a0, a0, 4
ffffffff8020bc9c: e3 f5 d7 fe          	bgeu	a5, a3, -22
ffffffff8020bca0: 93 e7 07 03          	ori	a5, a5, 48
ffffffff8020bca4: a3 0f f7 06          	sb	a5, 127(a4)
ffffffff8020bca8: fd 15                	addi	a1, a1, -1
ffffffff8020bcaa: 65 f5                	bnez	a0, -24
ffffffff8020bcac: 13 85 05 08          	addi	a0, a1, 128
ffffffff8020bcb0: 93 06 10 08          	addi	a3, zero, 129
ffffffff8020bcb4: 63 76 d5 02          	bgeu	a0, a3, 44
ffffffff8020bcb8: b3 07 b0 40          	neg	a5, a1
ffffffff8020bcbc: 33 05 b6 00          	add	a0, a2, a1
ffffffff8020bcc0: 13 07 05 08          	addi	a4, a0, 128

ffffffff8020bcc4 .LBB458_14:
ffffffff8020bcc4: 17 46 00 00          	auipc	a2, 4
ffffffff8020bcc8: 13 06 c6 84          	addi	a2, a2, -1972
ffffffff8020bccc: 85 45                	addi	a1, zero, 1
ffffffff8020bcce: 89 46                	addi	a3, zero, 2
ffffffff8020bcd0: 42 85                	add	a0, zero, a6
ffffffff8020bcd2: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020bcd6: e7 80 e0 13          	jalr	318(ra)
ffffffff8020bcda: aa 60                	ld	ra, 136(sp)
ffffffff8020bcdc: 49 61                	addi	sp, sp, 144
ffffffff8020bcde: 82 80                	ret

ffffffff8020bce0 .LBB458_15:
ffffffff8020bce0: 17 46 00 00          	auipc	a2, 4
ffffffff8020bce4: 13 06 86 81          	addi	a2, a2, -2024
ffffffff8020bce8: 93 05 00 08          	addi	a1, zero, 128
ffffffff8020bcec: 97 00 00 00          	auipc	ra, 0
ffffffff8020bcf0: e7 80 80 b5          	jalr	-1192(ra)
ffffffff8020bcf4: 00 00                	unimp	

ffffffff8020bcf6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17hcab9ab70688b3673E:
ffffffff8020bcf6: 75 71                	addi	sp, sp, -144
ffffffff8020bcf8: 06 e5                	sd	ra, 136(sp)
ffffffff8020bcfa: 2e 88                	add	a6, zero, a1
ffffffff8020bcfc: 81 45                	mv	a1, zero
ffffffff8020bcfe: 03 67 05 00          	lwu	a4, 0(a0)
ffffffff8020bd02: 93 08 81 00          	addi	a7, sp, 8
ffffffff8020bd06: 37 05 00 10          	lui	a0, 65536
ffffffff8020bd0a: 7d 35                	addiw	a0, a0, -1
ffffffff8020bd0c: a9 42                	addi	t0, zero, 10
ffffffff8020bd0e: 39 a0                	j	14
ffffffff8020bd10: 13 06 76 05          	addi	a2, a2, 87
ffffffff8020bd14: a3 8f c7 06          	sb	a2, 127(a5)
ffffffff8020bd18: fd 15                	addi	a1, a1, -1
ffffffff8020bd1a: 0d c3                	beqz	a4, 34
ffffffff8020bd1c: b3 87 b8 00          	add	a5, a7, a1
ffffffff8020bd20: 93 56 47 00          	srli	a3, a4, 4
ffffffff8020bd24: 13 76 f7 00          	andi	a2, a4, 15
ffffffff8020bd28: 33 f7 a6 00          	and	a4, a3, a0
ffffffff8020bd2c: e3 72 56 fe          	bgeu	a2, t0, -28
ffffffff8020bd30: 13 66 06 03          	ori	a2, a2, 48
ffffffff8020bd34: a3 8f c7 06          	sb	a2, 127(a5)
ffffffff8020bd38: fd 15                	addi	a1, a1, -1
ffffffff8020bd3a: 6d f3                	bnez	a4, -30
ffffffff8020bd3c: 13 85 05 08          	addi	a0, a1, 128
ffffffff8020bd40: 13 06 10 08          	addi	a2, zero, 129
ffffffff8020bd44: 63 76 c5 02          	bgeu	a0, a2, 44
ffffffff8020bd48: b3 07 b0 40          	neg	a5, a1
ffffffff8020bd4c: 33 85 b8 00          	add	a0, a7, a1
ffffffff8020bd50: 13 07 05 08          	addi	a4, a0, 128

ffffffff8020bd54 .LBB469_7:
ffffffff8020bd54: 17 36 00 00          	auipc	a2, 3
ffffffff8020bd58: 13 06 c6 7b          	addi	a2, a2, 1980
ffffffff8020bd5c: 85 45                	addi	a1, zero, 1
ffffffff8020bd5e: 89 46                	addi	a3, zero, 2
ffffffff8020bd60: 42 85                	add	a0, zero, a6
ffffffff8020bd62: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020bd66: e7 80 e0 0a          	jalr	174(ra)
ffffffff8020bd6a: aa 60                	ld	ra, 136(sp)
ffffffff8020bd6c: 49 61                	addi	sp, sp, 144
ffffffff8020bd6e: 82 80                	ret

ffffffff8020bd70 .LBB469_8:
ffffffff8020bd70: 17 36 00 00          	auipc	a2, 3
ffffffff8020bd74: 13 06 86 78          	addi	a2, a2, 1928
ffffffff8020bd78: 93 05 00 08          	addi	a1, zero, 128
ffffffff8020bd7c: 97 00 00 00          	auipc	ra, 0
ffffffff8020bd80: e7 80 80 ac          	jalr	-1336(ra)
ffffffff8020bd84: 00 00                	unimp	

ffffffff8020bd86 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h0c8e9a47c9cbfbc9E:
ffffffff8020bd86: 75 71                	addi	sp, sp, -144
ffffffff8020bd88: 06 e5                	sd	ra, 136(sp)
ffffffff8020bd8a: 2e 88                	add	a6, zero, a1
ffffffff8020bd8c: 81 45                	mv	a1, zero
ffffffff8020bd8e: 03 67 05 00          	lwu	a4, 0(a0)
ffffffff8020bd92: 93 08 81 00          	addi	a7, sp, 8
ffffffff8020bd96: 37 05 00 10          	lui	a0, 65536
ffffffff8020bd9a: 7d 35                	addiw	a0, a0, -1
ffffffff8020bd9c: a9 42                	addi	t0, zero, 10
ffffffff8020bd9e: 39 a0                	j	14
ffffffff8020bda0: 13 06 76 03          	addi	a2, a2, 55
ffffffff8020bda4: a3 8f c7 06          	sb	a2, 127(a5)
ffffffff8020bda8: fd 15                	addi	a1, a1, -1
ffffffff8020bdaa: 0d c3                	beqz	a4, 34
ffffffff8020bdac: b3 87 b8 00          	add	a5, a7, a1
ffffffff8020bdb0: 93 56 47 00          	srli	a3, a4, 4
ffffffff8020bdb4: 13 76 f7 00          	andi	a2, a4, 15
ffffffff8020bdb8: 33 f7 a6 00          	and	a4, a3, a0
ffffffff8020bdbc: e3 72 56 fe          	bgeu	a2, t0, -28
ffffffff8020bdc0: 13 66 06 03          	ori	a2, a2, 48
ffffffff8020bdc4: a3 8f c7 06          	sb	a2, 127(a5)
ffffffff8020bdc8: fd 15                	addi	a1, a1, -1
ffffffff8020bdca: 6d f3                	bnez	a4, -30
ffffffff8020bdcc: 13 85 05 08          	addi	a0, a1, 128
ffffffff8020bdd0: 13 06 10 08          	addi	a2, zero, 129
ffffffff8020bdd4: 63 76 c5 02          	bgeu	a0, a2, 44
ffffffff8020bdd8: b3 07 b0 40          	neg	a5, a1
ffffffff8020bddc: 33 85 b8 00          	add	a0, a7, a1
ffffffff8020bde0: 13 07 05 08          	addi	a4, a0, 128

ffffffff8020bde4 .LBB470_7:
ffffffff8020bde4: 17 36 00 00          	auipc	a2, 3
ffffffff8020bde8: 13 06 c6 72          	addi	a2, a2, 1836
ffffffff8020bdec: 85 45                	addi	a1, zero, 1
ffffffff8020bdee: 89 46                	addi	a3, zero, 2
ffffffff8020bdf0: 42 85                	add	a0, zero, a6
ffffffff8020bdf2: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020bdf6: e7 80 e0 01          	jalr	30(ra)
ffffffff8020bdfa: aa 60                	ld	ra, 136(sp)
ffffffff8020bdfc: 49 61                	addi	sp, sp, 144
ffffffff8020bdfe: 82 80                	ret

ffffffff8020be00 .LBB470_8:
ffffffff8020be00: 17 36 00 00          	auipc	a2, 3
ffffffff8020be04: 13 06 86 6f          	addi	a2, a2, 1784
ffffffff8020be08: 93 05 00 08          	addi	a1, zero, 128
ffffffff8020be0c: 97 00 00 00          	auipc	ra, 0
ffffffff8020be10: e7 80 80 a3          	jalr	-1480(ra)
ffffffff8020be14: 00 00                	unimp	

ffffffff8020be16 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17he358e3b3276f5d2eE:
ffffffff8020be16: 75 71                	addi	sp, sp, -144
ffffffff8020be18: 06 e5                	sd	ra, 136(sp)
ffffffff8020be1a: 14 61                	ld	a3, 0(a0)
ffffffff8020be1c: 2e 85                	add	a0, zero, a1
ffffffff8020be1e: 81 45                	mv	a1, zero
ffffffff8020be20: 13 08 81 00          	addi	a6, sp, 8
ffffffff8020be24: 29 47                	addi	a4, zero, 10
ffffffff8020be26: 39 a0                	j	14
ffffffff8020be28: 13 06 76 05          	addi	a2, a2, 87
ffffffff8020be2c: a3 8f c7 06          	sb	a2, 127(a5)
ffffffff8020be30: fd 15                	addi	a1, a1, -1
ffffffff8020be32: 91 ce                	beqz	a3, 28
ffffffff8020be34: b3 07 b8 00          	add	a5, a6, a1
ffffffff8020be38: 13 f6 f6 00          	andi	a2, a3, 15
ffffffff8020be3c: 91 82                	srli	a3, a3, 4
ffffffff8020be3e: e3 75 e6 fe          	bgeu	a2, a4, -22
ffffffff8020be42: 13 66 06 03          	ori	a2, a2, 48
ffffffff8020be46: a3 8f c7 06          	sb	a2, 127(a5)
ffffffff8020be4a: fd 15                	addi	a1, a1, -1
ffffffff8020be4c: e5 f6                	bnez	a3, -24
ffffffff8020be4e: 93 86 05 08          	addi	a3, a1, 128
ffffffff8020be52: 13 06 10 08          	addi	a2, zero, 129
ffffffff8020be56: 63 f4 c6 02          	bgeu	a3, a2, 40
ffffffff8020be5a: b3 07 b0 40          	neg	a5, a1
ffffffff8020be5e: c2 95                	add	a1, a1, a6
ffffffff8020be60: 13 87 05 08          	addi	a4, a1, 128

ffffffff8020be64 .LBB473_7:
ffffffff8020be64: 17 36 00 00          	auipc	a2, 3
ffffffff8020be68: 13 06 c6 6a          	addi	a2, a2, 1708
ffffffff8020be6c: 85 45                	addi	a1, zero, 1
ffffffff8020be6e: 89 46                	addi	a3, zero, 2
ffffffff8020be70: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020be74: e7 80 00 fa          	jalr	-96(ra)
ffffffff8020be78: aa 60                	ld	ra, 136(sp)
ffffffff8020be7a: 49 61                	addi	sp, sp, 144
ffffffff8020be7c: 82 80                	ret

ffffffff8020be7e .LBB473_8:
ffffffff8020be7e: 17 36 00 00          	auipc	a2, 3
ffffffff8020be82: 13 06 a6 67          	addi	a2, a2, 1658
ffffffff8020be86: 93 05 00 08          	addi	a1, zero, 128
ffffffff8020be8a: 36 85                	add	a0, zero, a3
ffffffff8020be8c: 97 00 00 00          	auipc	ra, 0
ffffffff8020be90: e7 80 80 9b          	jalr	-1608(ra)
ffffffff8020be94: 00 00                	unimp	

ffffffff8020be96 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h45db3ab4b50c26aeE:
ffffffff8020be96: 75 71                	addi	sp, sp, -144
ffffffff8020be98: 06 e5                	sd	ra, 136(sp)
ffffffff8020be9a: 14 61                	ld	a3, 0(a0)
ffffffff8020be9c: 2e 85                	add	a0, zero, a1
ffffffff8020be9e: 81 45                	mv	a1, zero
ffffffff8020bea0: 13 08 81 00          	addi	a6, sp, 8
ffffffff8020bea4: 29 47                	addi	a4, zero, 10
ffffffff8020bea6: 39 a0                	j	14
ffffffff8020bea8: 13 06 76 03          	addi	a2, a2, 55
ffffffff8020beac: a3 8f c7 06          	sb	a2, 127(a5)
ffffffff8020beb0: fd 15                	addi	a1, a1, -1
ffffffff8020beb2: 91 ce                	beqz	a3, 28
ffffffff8020beb4: b3 07 b8 00          	add	a5, a6, a1
ffffffff8020beb8: 13 f6 f6 00          	andi	a2, a3, 15
ffffffff8020bebc: 91 82                	srli	a3, a3, 4
ffffffff8020bebe: e3 75 e6 fe          	bgeu	a2, a4, -22
ffffffff8020bec2: 13 66 06 03          	ori	a2, a2, 48
ffffffff8020bec6: a3 8f c7 06          	sb	a2, 127(a5)
ffffffff8020beca: fd 15                	addi	a1, a1, -1
ffffffff8020becc: e5 f6                	bnez	a3, -24
ffffffff8020bece: 93 86 05 08          	addi	a3, a1, 128
ffffffff8020bed2: 13 06 10 08          	addi	a2, zero, 129
ffffffff8020bed6: 63 f4 c6 02          	bgeu	a3, a2, 40
ffffffff8020beda: b3 07 b0 40          	neg	a5, a1
ffffffff8020bede: c2 95                	add	a1, a1, a6
ffffffff8020bee0: 13 87 05 08          	addi	a4, a1, 128

ffffffff8020bee4 .LBB474_7:
ffffffff8020bee4: 17 36 00 00          	auipc	a2, 3
ffffffff8020bee8: 13 06 c6 62          	addi	a2, a2, 1580
ffffffff8020beec: 85 45                	addi	a1, zero, 1
ffffffff8020beee: 89 46                	addi	a3, zero, 2
ffffffff8020bef0: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020bef4: e7 80 00 f2          	jalr	-224(ra)
ffffffff8020bef8: aa 60                	ld	ra, 136(sp)
ffffffff8020befa: 49 61                	addi	sp, sp, 144
ffffffff8020befc: 82 80                	ret

ffffffff8020befe .LBB474_8:
ffffffff8020befe: 17 36 00 00          	auipc	a2, 3
ffffffff8020bf02: 13 06 a6 5f          	addi	a2, a2, 1530
ffffffff8020bf06: 93 05 00 08          	addi	a1, zero, 128
ffffffff8020bf0a: 36 85                	add	a0, zero, a3
ffffffff8020bf0c: 97 00 00 00          	auipc	ra, 0
ffffffff8020bf10: e7 80 80 93          	jalr	-1736(ra)
ffffffff8020bf14: 00 00                	unimp	

ffffffff8020bf16 _ZN4core3fmt3num3imp7fmt_u6417h373d4d6e712c9b1fE:
ffffffff8020bf16: 5d 71                	addi	sp, sp, -80
ffffffff8020bf18: 86 e4                	sd	ra, 72(sp)
ffffffff8020bf1a: a2 e0                	sd	s0, 64(sp)
ffffffff8020bf1c: 26 fc                	sd	s1, 56(sp)
ffffffff8020bf1e: 4a f8                	sd	s2, 48(sp)
ffffffff8020bf20: 4e f4                	sd	s3, 40(sp)
ffffffff8020bf22: 32 88                	add	a6, zero, a2
ffffffff8020bf24: 13 56 45 00          	srli	a2, a0, 4
ffffffff8020bf28: 13 07 70 02          	addi	a4, zero, 39
ffffffff8020bf2c: 93 06 10 27          	addi	a3, zero, 625

ffffffff8020bf30 .LBB479_10:
ffffffff8020bf30: 97 38 00 00          	auipc	a7, 3
ffffffff8020bf34: 93 88 28 5e          	addi	a7, a7, 1506
ffffffff8020bf38: 63 73 d6 02          	bgeu	a2, a3, 38
ffffffff8020bf3c: 13 06 30 06          	addi	a2, zero, 99
ffffffff8020bf40: 63 4e a6 0c          	blt	a2, a0, 220
ffffffff8020bf44: 29 46                	addi	a2, zero, 10
ffffffff8020bf46: 63 59 c5 12          	bge	a0, a2, 306
ffffffff8020bf4a: 13 06 f7 ff          	addi	a2, a4, -1
ffffffff8020bf4e: 93 06 11 00          	addi	a3, sp, 1
ffffffff8020bf52: b2 96                	add	a3, a3, a2
ffffffff8020bf54: 13 05 05 03          	addi	a0, a0, 48
ffffffff8020bf58: 23 80 a6 00          	sb	a0, 0(a3)
ffffffff8020bf5c: 2d aa                	j	314
ffffffff8020bf5e: 01 47                	mv	a4, zero
ffffffff8020bf60: 37 36 1a 00          	lui	a2, 419
ffffffff8020bf64: 1b 06 36 6e          	addiw	a2, a2, 1763
ffffffff8020bf68: 3a 06                	slli	a2, a2, 14
ffffffff8020bf6a: 13 06 76 ac          	addi	a2, a2, -1337
ffffffff8020bf6e: 3a 06                	slli	a2, a2, 14
ffffffff8020bf70: 13 06 36 43          	addi	a2, a2, 1075
ffffffff8020bf74: 36 06                	slli	a2, a2, 13
ffffffff8020bf76: 93 02 b6 94          	addi	t0, a2, -1717
ffffffff8020bf7a: 09 66                	lui	a2, 2
ffffffff8020bf7c: 9b 03 06 71          	addiw	t2, a2, 1808
ffffffff8020bf80: 41 66                	lui	a2, 16
ffffffff8020bf82: 9b 0e c6 ff          	addiw	t4, a2, -4
ffffffff8020bf86: b7 f6 51 00          	lui	a3, 1311
ffffffff8020bf8a: 9b 86 56 b8          	addiw	a3, a3, -1147
ffffffff8020bf8e: b6 06                	slli	a3, a3, 13
ffffffff8020bf90: 93 86 76 3d          	addi	a3, a3, 983
ffffffff8020bf94: ba 06                	slli	a3, a3, 14
ffffffff8020bf96: 93 86 f6 28          	addi	a3, a3, 655
ffffffff8020bf9a: b2 06                	slli	a3, a3, 12
ffffffff8020bf9c: 13 8f 36 5c          	addi	t5, a3, 1475
ffffffff8020bfa0: 13 03 40 06          	addi	t1, zero, 100
ffffffff8020bfa4: 9b 0f e6 ff          	addiw	t6, a2, -2
ffffffff8020bfa8: 13 0e 11 00          	addi	t3, sp, 1
ffffffff8020bfac: 37 e6 f5 05          	lui	a2, 24414
ffffffff8020bfb0: 1b 09 f6 0f          	addiw	s2, a2, 255
ffffffff8020bfb4: aa 87                	add	a5, zero, a0
ffffffff8020bfb6: 33 35 55 02          	<unknown>
ffffffff8020bfba: 2d 81                	srli	a0, a0, 11
ffffffff8020bfbc: b3 06 75 02          	<unknown>
ffffffff8020bfc0: b3 86 d7 40          	sub	a3, a5, a3
ffffffff8020bfc4: 33 f4 d6 01          	and	s0, a3, t4
ffffffff8020bfc8: 09 80                	srli	s0, s0, 2
ffffffff8020bfca: 33 34 e4 03          	<unknown>
ffffffff8020bfce: 09 80                	srli	s0, s0, 2
ffffffff8020bfd0: 93 14 14 00          	slli	s1, s0, 1
ffffffff8020bfd4: 33 04 64 02          	<unknown>
ffffffff8020bfd8: 81 8e                	sub	a3, a3, s0
ffffffff8020bfda: 86 06                	slli	a3, a3, 1
ffffffff8020bfdc: b3 f6 f6 01          	and	a3, a3, t6
ffffffff8020bfe0: 33 84 14 01          	add	s0, s1, a7
ffffffff8020bfe4: b3 04 ee 00          	add	s1, t3, a4
ffffffff8020bfe8: 83 49 04 00          	lbu	s3, 0(s0)
ffffffff8020bfec: 03 04 14 00          	lb	s0, 1(s0)
ffffffff8020bff0: c6 96                	add	a3, a3, a7
ffffffff8020bff2: 03 86 16 00          	lb	a2, 1(a3)
ffffffff8020bff6: 83 c6 06 00          	lbu	a3, 0(a3)
ffffffff8020bffa: 23 82 84 02          	sb	s0, 36(s1)
ffffffff8020bffe: a3 81 34 03          	sb	s3, 35(s1)
ffffffff8020c002: 23 83 c4 02          	sb	a2, 38(s1)
ffffffff8020c006: a3 82 d4 02          	sb	a3, 37(s1)
ffffffff8020c00a: 71 17                	addi	a4, a4, -4
ffffffff8020c00c: e3 64 f9 fa          	bltu	s2, a5, -88
ffffffff8020c010: 13 07 77 02          	addi	a4, a4, 39
ffffffff8020c014: 13 06 30 06          	addi	a2, zero, 99
ffffffff8020c018: e3 56 a6 f2          	bge	a2, a0, -212
ffffffff8020c01c: 41 66                	lui	a2, 16
ffffffff8020c01e: 9b 06 c6 ff          	addiw	a3, a2, -4
ffffffff8020c022: e9 8e                	and	a3, a3, a0
ffffffff8020c024: 89 82                	srli	a3, a3, 2
ffffffff8020c026: b7 f7 51 00          	lui	a5, 1311
ffffffff8020c02a: 9b 87 57 b8          	addiw	a5, a5, -1147
ffffffff8020c02e: b6 07                	slli	a5, a5, 13
ffffffff8020c030: 93 87 77 3d          	addi	a5, a5, 983
ffffffff8020c034: ba 07                	slli	a5, a5, 14
ffffffff8020c036: 93 87 f7 28          	addi	a5, a5, 655
ffffffff8020c03a: b2 07                	slli	a5, a5, 12
ffffffff8020c03c: 93 87 37 5c          	addi	a5, a5, 1475
ffffffff8020c040: b3 b6 f6 02          	<unknown>
ffffffff8020c044: 89 82                	srli	a3, a3, 2
ffffffff8020c046: 93 07 40 06          	addi	a5, zero, 100
ffffffff8020c04a: b3 87 f6 02          	<unknown>
ffffffff8020c04e: 1d 8d                	sub	a0, a0, a5
ffffffff8020c050: 06 05                	slli	a0, a0, 1
ffffffff8020c052: 79 36                	addiw	a2, a2, -2
ffffffff8020c054: 71 8d                	and	a0, a0, a2
ffffffff8020c056: 79 17                	addi	a4, a4, -2
ffffffff8020c058: 46 95                	add	a0, a0, a7
ffffffff8020c05a: 03 06 15 00          	lb	a2, 1(a0)
ffffffff8020c05e: 03 45 05 00          	lbu	a0, 0(a0)
ffffffff8020c062: 93 07 11 00          	addi	a5, sp, 1
ffffffff8020c066: ba 97                	add	a5, a5, a4
ffffffff8020c068: a3 80 c7 00          	sb	a2, 1(a5)
ffffffff8020c06c: 23 80 a7 00          	sb	a0, 0(a5)
ffffffff8020c070: 36 85                	add	a0, zero, a3
ffffffff8020c072: 29 46                	addi	a2, zero, 10
ffffffff8020c074: e3 4b c5 ec          	blt	a0, a2, -298
ffffffff8020c078: 06 05                	slli	a0, a0, 1
ffffffff8020c07a: 13 06 e7 ff          	addi	a2, a4, -2
ffffffff8020c07e: 46 95                	add	a0, a0, a7
ffffffff8020c080: 83 06 15 00          	lb	a3, 1(a0)
ffffffff8020c084: 03 45 05 00          	lbu	a0, 0(a0)
ffffffff8020c088: 13 07 11 00          	addi	a4, sp, 1
ffffffff8020c08c: 32 97                	add	a4, a4, a2
ffffffff8020c08e: a3 00 d7 00          	sb	a3, 1(a4)
ffffffff8020c092: 23 00 a7 00          	sb	a0, 0(a4)
ffffffff8020c096: 13 05 11 00          	addi	a0, sp, 1
ffffffff8020c09a: 33 07 c5 00          	add	a4, a0, a2
ffffffff8020c09e: 13 05 70 02          	addi	a0, zero, 39
ffffffff8020c0a2: b3 07 c5 40          	sub	a5, a0, a2

ffffffff8020c0a6 .LBB479_11:
ffffffff8020c0a6: 17 36 00 00          	auipc	a2, 3
ffffffff8020c0aa: 13 06 a6 31          	addi	a2, a2, 794
ffffffff8020c0ae: 42 85                	add	a0, zero, a6
ffffffff8020c0b0: 81 46                	mv	a3, zero
ffffffff8020c0b2: 97 f0 ff ff          	auipc	ra, 1048575
ffffffff8020c0b6: e7 80 e0 d5          	jalr	-674(ra)
ffffffff8020c0ba: a2 79                	ld	s3, 40(sp)
ffffffff8020c0bc: 42 79                	ld	s2, 48(sp)
ffffffff8020c0be: e2 74                	ld	s1, 56(sp)
ffffffff8020c0c0: 06 64                	ld	s0, 64(sp)
ffffffff8020c0c2: a6 60                	ld	ra, 72(sp)
ffffffff8020c0c4: 61 61                	addi	sp, sp, 80
ffffffff8020c0c6: 82 80                	ret

ffffffff8020c0c8 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17haad414208c9e5bc6E:
ffffffff8020c0c8: 10 41                	lw	a2, 0(a0)
ffffffff8020c0ca: 13 55 f6 43          	srai	a0, a2, 63
ffffffff8020c0ce: b3 06 a6 00          	add	a3, a2, a0
ffffffff8020c0d2: 35 8d                	xor	a0, a0, a3
ffffffff8020c0d4: 13 46 f6 ff          	not	a2, a2
ffffffff8020c0d8: 7d 92                	srli	a2, a2, 63
ffffffff8020c0da: ae 86                	add	a3, zero, a1
ffffffff8020c0dc: b2 85                	add	a1, zero, a2
ffffffff8020c0de: 36 86                	add	a2, zero, a3
ffffffff8020c0e0: 17 03 00 00          	auipc	t1, 0
ffffffff8020c0e4: 67 00 63 e3          	jr	-458(t1)

ffffffff8020c0e8 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hfdb2265e757676d6E:
ffffffff8020c0e8: 08 61                	ld	a0, 0(a0)
ffffffff8020c0ea: 2e 86                	add	a2, zero, a1
ffffffff8020c0ec: 85 45                	addi	a1, zero, 1
ffffffff8020c0ee: 17 03 00 00          	auipc	t1, 0
ffffffff8020c0f2: 67 00 83 e2          	jr	-472(t1)

ffffffff8020c0f6 _ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h521c7eeed0830024E:
ffffffff8020c0f6: 90 75                	ld	a2, 40(a1)
ffffffff8020c0f8: 88 71                	ld	a0, 32(a1)
ffffffff8020c0fa: 1c 6e                	ld	a5, 24(a2)

ffffffff8020c0fc .LBB514_1:
ffffffff8020c0fc: 97 45 00 00          	auipc	a1, 4
ffffffff8020c100: 93 85 45 dd          	addi	a1, a1, -556
ffffffff8020c104: 15 46                	addi	a2, zero, 5
ffffffff8020c106: 82 87                	jr	a5

ffffffff8020c108 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e9e10d4c7625bb5E:
ffffffff8020c108: 97 36 00 00          	auipc	a3, 3
ffffffff8020c10c: 93 86 06 55          	addi	a3, a3, 1360
ffffffff8020c110: 09 46                	addi	a2, zero, 2
ffffffff8020c112: 2e 85                	add	a0, zero, a1
ffffffff8020c114: b6 85                	add	a1, zero, a3
ffffffff8020c116: 17 f3 ff ff          	auipc	t1, 1048575
ffffffff8020c11a: 67 00 43 f6          	jr	-156(t1)

ffffffff8020c11e _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc4f9c2310c108c28E:
ffffffff8020c11e: 10 65                	ld	a2, 8(a0)
ffffffff8020c120: 08 61                	ld	a0, 0(a0)
ffffffff8020c122: 1c 6e                	ld	a5, 24(a2)
ffffffff8020c124: 82 87                	jr	a5

ffffffff8020c126 _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hb0118f6aeefbaeabE:
ffffffff8020c126: 14 61                	ld	a3, 0(a0)
ffffffff8020c128: 10 65                	ld	a2, 8(a0)
ffffffff8020c12a: 2e 85                	add	a0, zero, a1
ffffffff8020c12c: b6 85                	add	a1, zero, a3
ffffffff8020c12e: 17 f3 ff ff          	auipc	t1, 1048575
ffffffff8020c132: 67 00 c3 f4          	jr	-180(t1)

ffffffff8020c136 _ZN4core7unicode12unicode_data15grapheme_extend6lookup17h5925f327e5e33873E:
ffffffff8020c136: 41 11                	addi	sp, sp, -16
ffffffff8020c138: 06 e4                	sd	ra, 8(sp)
ffffffff8020c13a: 81 46                	mv	a3, zero
ffffffff8020c13c: 9b 05 05 00          	sext.w	a1, a0
ffffffff8020c140: 45 66                	lui	a2, 17
ffffffff8020c142: 1b 07 46 d2          	addiw	a4, a2, -732
ffffffff8020c146: 1b 16 b5 00          	slliw	a2, a0, 11
ffffffff8020c14a: 63 e3 e5 00          	bltu	a1, a4, 6
ffffffff8020c14e: bd 46                	addi	a3, zero, 15
ffffffff8020c150: 13 87 86 00          	addi	a4, a3, 8
ffffffff8020c154: 93 17 27 00          	slli	a5, a4, 2

ffffffff8020c158 .LBB634_27:
ffffffff8020c158: 97 45 00 00          	auipc	a1, 4
ffffffff8020c15c: 93 85 05 d8          	addi	a1, a1, -640
ffffffff8020c160: ae 97                	add	a5, a5, a1
ffffffff8020c162: 9c 43                	lw	a5, 0(a5)
ffffffff8020c164: 9b 97 b7 00          	slliw	a5, a5, 11
ffffffff8020c168: 63 63 f6 00          	bltu	a2, a5, 6
ffffffff8020c16c: ba 86                	add	a3, zero, a4
ffffffff8020c16e: 13 87 46 00          	addi	a4, a3, 4
ffffffff8020c172: 93 17 27 00          	slli	a5, a4, 2
ffffffff8020c176: ae 97                	add	a5, a5, a1
ffffffff8020c178: 9c 43                	lw	a5, 0(a5)
ffffffff8020c17a: 9b 97 b7 00          	slliw	a5, a5, 11
ffffffff8020c17e: 63 63 f6 00          	bltu	a2, a5, 6
ffffffff8020c182: ba 86                	add	a3, zero, a4
ffffffff8020c184: 13 87 26 00          	addi	a4, a3, 2
ffffffff8020c188: 93 17 27 00          	slli	a5, a4, 2
ffffffff8020c18c: ae 97                	add	a5, a5, a1
ffffffff8020c18e: 9c 43                	lw	a5, 0(a5)
ffffffff8020c190: 9b 97 b7 00          	slliw	a5, a5, 11
ffffffff8020c194: 63 63 f6 00          	bltu	a2, a5, 6
ffffffff8020c198: ba 86                	add	a3, zero, a4
ffffffff8020c19a: 13 87 16 00          	addi	a4, a3, 1
ffffffff8020c19e: 93 17 27 00          	slli	a5, a4, 2
ffffffff8020c1a2: ae 97                	add	a5, a5, a1
ffffffff8020c1a4: 9c 43                	lw	a5, 0(a5)
ffffffff8020c1a6: 9b 97 b7 00          	slliw	a5, a5, 11
ffffffff8020c1aa: 63 63 f6 00          	bltu	a2, a5, 6
ffffffff8020c1ae: ba 86                	add	a3, zero, a4
ffffffff8020c1b0: 13 97 26 00          	slli	a4, a3, 2
ffffffff8020c1b4: 2e 97                	add	a4, a4, a1
ffffffff8020c1b6: 18 43                	lw	a4, 0(a4)
ffffffff8020c1b8: 1b 17 b7 00          	slliw	a4, a4, 11
ffffffff8020c1bc: b3 37 c7 00          	sltu	a5, a4, a2
ffffffff8020c1c0: 39 8e                	xor	a2, a2, a4
ffffffff8020c1c2: 13 36 16 00          	seqz	a2, a2
ffffffff8020c1c6: 3e 96                	add	a2, a2, a5
ffffffff8020c1c8: 33 07 d6 00          	add	a4, a2, a3
ffffffff8020c1cc: f9 46                	addi	a3, zero, 30
ffffffff8020c1ce: 63 e0 e6 0a          	bltu	a3, a4, 160
ffffffff8020c1d2: 93 17 27 00          	slli	a5, a4, 2
ffffffff8020c1d6: 13 06 10 2b          	addi	a2, zero, 689
ffffffff8020c1da: 63 07 d7 00          	beq	a4, a3, 14
ffffffff8020c1de: 33 86 f5 00          	add	a2, a1, a5
ffffffff8020c1e2: 03 66 46 00          	lwu	a2, 4(a2)
ffffffff8020c1e6: 55 82                	srli	a2, a2, 21
ffffffff8020c1e8: 93 06 f7 ff          	addi	a3, a4, -1
ffffffff8020c1ec: 63 74 d7 00          	bgeu	a4, a3, 8
ffffffff8020c1f0: 01 47                	mv	a4, zero
ffffffff8020c1f2: 21 a8                	j	24
ffffffff8020c1f4: 7d 47                	addi	a4, zero, 31
ffffffff8020c1f6: 63 f7 e6 08          	bgeu	a3, a4, 142
ffffffff8020c1fa: 8a 06                	slli	a3, a3, 2
ffffffff8020c1fc: ae 96                	add	a3, a3, a1
ffffffff8020c1fe: 83 e6 06 00          	lwu	a3, 0(a3)
ffffffff8020c202: 37 07 20 00          	lui	a4, 512
ffffffff8020c206: 7d 37                	addiw	a4, a4, -1
ffffffff8020c208: 75 8f                	and	a4, a4, a3
ffffffff8020c20a: be 95                	add	a1, a1, a5
ffffffff8020c20c: 83 e5 05 00          	lwu	a1, 0(a1)
ffffffff8020c210: 93 d6 55 01          	srli	a3, a1, 21
ffffffff8020c214: 93 85 16 00          	addi	a1, a3, 1
ffffffff8020c218: 63 0a b6 02          	beq	a2, a1, 52
ffffffff8020c21c: 81 45                	mv	a1, zero
ffffffff8020c21e: 3b 07 e5 40          	subw	a4, a0, a4
ffffffff8020c222: 13 05 f6 ff          	addi	a0, a2, -1
ffffffff8020c226: 13 08 00 2b          	addi	a6, zero, 688

ffffffff8020c22a .LBB634_28:
ffffffff8020c22a: 97 47 00 00          	auipc	a5, 4
ffffffff8020c22e: 93 87 a7 d2          	addi	a5, a5, -726
ffffffff8020c232: 63 62 d8 02          	bltu	a6, a3, 36
ffffffff8020c236: 33 86 f6 00          	add	a2, a3, a5
ffffffff8020c23a: 03 46 06 00          	lbu	a2, 0(a2)
ffffffff8020c23e: b1 9d                	addw	a1, a1, a2
ffffffff8020c240: 63 66 b7 00          	bltu	a4, a1, 12
ffffffff8020c244: 85 06                	addi	a3, a3, 1
ffffffff8020c246: e3 16 d5 fe          	bne	a0, a3, -20
ffffffff8020c24a: aa 86                	add	a3, zero, a0
ffffffff8020c24c: 13 f5 16 00          	andi	a0, a3, 1
ffffffff8020c250: a2 60                	ld	ra, 8(sp)
ffffffff8020c252: 41 01                	addi	sp, sp, 16
ffffffff8020c254: 82 80                	ret

ffffffff8020c256 .LBB634_29:
ffffffff8020c256: 17 46 00 00          	auipc	a2, 4
ffffffff8020c25a: 13 06 a6 c2          	addi	a2, a2, -982
ffffffff8020c25e: 93 05 10 2b          	addi	a1, zero, 689
ffffffff8020c262: 36 85                	add	a0, zero, a3
ffffffff8020c264: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff8020c268: e7 80 00 10          	jalr	256(ra)
ffffffff8020c26c: 00 00                	unimp	

ffffffff8020c26e .LBB634_30:
ffffffff8020c26e: 17 46 00 00          	auipc	a2, 4
ffffffff8020c272: 13 06 a6 bf          	addi	a2, a2, -1030
ffffffff8020c276: fd 45                	addi	a1, zero, 31
ffffffff8020c278: 3a 85                	add	a0, zero, a4
ffffffff8020c27a: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff8020c27e: e7 80 a0 0e          	jalr	234(ra)
ffffffff8020c282: 00 00                	unimp	

ffffffff8020c284 .LBB634_31:
ffffffff8020c284: 17 46 00 00          	auipc	a2, 4
ffffffff8020c288: 13 06 46 c1          	addi	a2, a2, -1004
ffffffff8020c28c: fd 45                	addi	a1, zero, 31
ffffffff8020c28e: 36 85                	add	a0, zero, a3
ffffffff8020c290: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff8020c294: e7 80 40 0d          	jalr	212(ra)
ffffffff8020c298: 00 00                	unimp	

ffffffff8020c29a _ZN67_$LT$core..alloc..layout..LayoutErr$u20$as$u20$core..fmt..Debug$GT$3fmt17haa29398e86e3204dE:
ffffffff8020c29a: 79 71                	addi	sp, sp, -48
ffffffff8020c29c: 06 f4                	sd	ra, 40(sp)
ffffffff8020c29e: 22 f0                	sd	s0, 32(sp)
ffffffff8020c2a0: 26 ec                	sd	s1, 24(sp)
ffffffff8020c2a2: 2e 84                	add	s0, zero, a1
ffffffff8020c2a4: 8c 75                	ld	a1, 40(a1)
ffffffff8020c2a6: 14 70                	ld	a3, 32(s0)
ffffffff8020c2a8: 98 6d                	ld	a4, 24(a1)
ffffffff8020c2aa: aa 84                	add	s1, zero, a0

ffffffff8020c2ac .LBB645_8:
ffffffff8020c2ac: 97 45 00 00          	auipc	a1, 4
ffffffff8020c2b0: 93 85 95 f5          	addi	a1, a1, -167
ffffffff8020c2b4: 25 46                	addi	a2, zero, 9
ffffffff8020c2b6: 36 85                	add	a0, zero, a3
ffffffff8020c2b8: 02 97                	jalr	a4
ffffffff8020c2ba: 22 e0                	sd	s0, 0(sp)
ffffffff8020c2bc: 23 04 a1 00          	sb	a0, 8(sp)
ffffffff8020c2c0: a3 04 01 00          	sb	zero, 9(sp)
ffffffff8020c2c4: 26 e8                	sd	s1, 16(sp)

ffffffff8020c2c6 .LBB645_9:
ffffffff8020c2c6: 97 45 00 00          	auipc	a1, 4
ffffffff8020c2ca: 93 85 85 f4          	addi	a1, a1, -184

ffffffff8020c2ce .LBB645_10:
ffffffff8020c2ce: 17 47 00 00          	auipc	a4, 4
ffffffff8020c2d2: 13 07 27 be          	addi	a4, a4, -1054
ffffffff8020c2d6: 0a 85                	add	a0, zero, sp
ffffffff8020c2d8: 14 08                	addi	a3, sp, 16
ffffffff8020c2da: 1d 46                	addi	a2, zero, 7
ffffffff8020c2dc: 97 e0 ff ff          	auipc	ra, 1048574
ffffffff8020c2e0: e7 80 c0 2a          	jalr	684(ra)
ffffffff8020c2e4: 03 45 91 00          	lbu	a0, 9(sp)
ffffffff8020c2e8: 83 45 81 00          	lbu	a1, 8(sp)
ffffffff8020c2ec: 1d c9                	beqz	a0, 54
ffffffff8020c2ee: 05 45                	addi	a0, zero, 1
ffffffff8020c2f0: 95 e5                	bnez	a1, 44
ffffffff8020c2f2: 02 65                	ld	a0, 0(sp)
ffffffff8020c2f4: 0c 75                	ld	a1, 40(a0)
ffffffff8020c2f6: 03 46 05 03          	lbu	a2, 48(a0)
ffffffff8020c2fa: 08 71                	ld	a0, 32(a0)
ffffffff8020c2fc: 94 6d                	ld	a3, 24(a1)
ffffffff8020c2fe: 93 75 46 00          	andi	a1, a2, 4
ffffffff8020c302: 99 e5                	bnez	a1, 14

ffffffff8020c304 .LBB645_11:
ffffffff8020c304: 97 35 00 00          	auipc	a1, 3
ffffffff8020c308: 93 85 f5 1c          	addi	a1, a1, 463
ffffffff8020c30c: 09 46                	addi	a2, zero, 2
ffffffff8020c30e: 31 a0                	j	12

ffffffff8020c310 .LBB645_12:
ffffffff8020c310: 97 35 00 00          	auipc	a1, 3
ffffffff8020c314: 93 85 25 1c          	addi	a1, a1, 450
ffffffff8020c318: 05 46                	addi	a2, zero, 1
ffffffff8020c31a: 82 96                	jalr	a3
ffffffff8020c31c: 23 04 a1 00          	sb	a0, 8(sp)
ffffffff8020c320: aa 85                	add	a1, zero, a0
ffffffff8020c322: 33 35 b0 00          	snez	a0, a1
ffffffff8020c326: e2 64                	ld	s1, 24(sp)
ffffffff8020c328: 02 74                	ld	s0, 32(sp)
ffffffff8020c32a: a2 70                	ld	ra, 40(sp)
ffffffff8020c32c: 45 61                	addi	sp, sp, 48
ffffffff8020c32e: 82 80                	ret

ffffffff8020c330 memcpy:
ffffffff8020c330: 11 ca                	beqz	a2, 20
ffffffff8020c332: aa 86                	add	a3, zero, a0
ffffffff8020c334: 03 87 05 00          	lb	a4, 0(a1)
ffffffff8020c338: 23 80 e6 00          	sb	a4, 0(a3)
ffffffff8020c33c: 7d 16                	addi	a2, a2, -1
ffffffff8020c33e: 85 06                	addi	a3, a3, 1
ffffffff8020c340: 85 05                	addi	a1, a1, 1
ffffffff8020c342: 6d fa                	bnez	a2, -14
ffffffff8020c344: 82 80                	ret

ffffffff8020c346 memset:
ffffffff8020c346: 19 c6                	beqz	a2, 14
ffffffff8020c348: aa 86                	add	a3, zero, a0
ffffffff8020c34a: 23 80 b6 00          	sb	a1, 0(a3)
ffffffff8020c34e: 7d 16                	addi	a2, a2, -1
ffffffff8020c350: 85 06                	addi	a3, a3, 1
ffffffff8020c352: 65 fe                	bnez	a2, -8
ffffffff8020c354: 82 80                	ret

ffffffff8020c356 memcmp:
ffffffff8020c356: 19 ca                	beqz	a2, 22
ffffffff8020c358: 83 46 05 00          	lbu	a3, 0(a0)
ffffffff8020c35c: 03 c7 05 00          	lbu	a4, 0(a1)
ffffffff8020c360: 63 98 e6 00          	bne	a3, a4, 16
ffffffff8020c364: 7d 16                	addi	a2, a2, -1
ffffffff8020c366: 85 05                	addi	a1, a1, 1
ffffffff8020c368: 05 05                	addi	a0, a0, 1
ffffffff8020c36a: 7d f6                	bnez	a2, -18
ffffffff8020c36c: 01 45                	mv	a0, zero
ffffffff8020c36e: 82 80                	ret
ffffffff8020c370: 33 85 e6 40          	sub	a0, a3, a4
ffffffff8020c374: 82 80                	ret
